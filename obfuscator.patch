From f05baaf3eb63ded40fe57f07552d57e9dbc83f03 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Mon, 11 Dec 2017 13:35:27 +0100
Subject: [PATCH 001/138] Gitlab CI

---
 .gitlab-ci.yml | 9 +++++++++
 1 file changed, 9 insertions(+)
 create mode 100644 .gitlab-ci.yml

diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml
new file mode 100644
index 00000000000..0507ef330b2
--- /dev/null
+++ b/.gitlab-ci.yml
@@ -0,0 +1,9 @@
+obfuscator_debug:
+    stage: test
+    script:
+        - swift/utils/build-script -R
+    tags:
+        - xcode-9.0
+    only:
+        - tags
+
-- 
2.17.1 (Apple Git-112)


From 67fdb37a75e3b9ee09b699fb06b9572eb930a688 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Mon, 11 Dec 2017 14:54:49 +0100
Subject: [PATCH 002/138] Not working version of git_remotes updated script

---
 Scripts/git_remotes.sh | 128 ++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 127 insertions(+), 1 deletion(-)

diff --git a/Scripts/git_remotes.sh b/Scripts/git_remotes.sh
index ab85403262f..c93b4ba8be3 100644
--- a/Scripts/git_remotes.sh
+++ b/Scripts/git_remotes.sh
@@ -34,7 +34,58 @@ paths=(
     "ninja-build/ninja"
 )
 
-branches=(
+masterbranches=(
+    "stable"
+    "stable"
+    "master"
+    "stable"
+    "master"
+    "master"
+    "master"
+    "stable"
+    "master"
+    "master"
+    "master"
+    "master"
+    "master"
+    "release"
+)
+
+swift_3_0_branches=(
+    "swift-3.0-branch"
+    "swift-3.0-branch"
+    "swift-3.0-branch"
+    "swift-3.0-branch"
+    "swift-3.0-branch"
+    "swift-3.0-branch"
+    "swift-3.0-branch"
+    "swift-3.0-branch"
+    "swift-3.0-branch"
+    "swift-3.0-branch"
+    "swift-3.0-branch"
+    "swift-3.0-branch"
+    "swift-3.0-branch"
+    "release"
+)
+
+swift_3_1_branches=(
+    "swift-3.1-branch"
+    "swift-3.1-branch"
+    "swift-3.1-branch"
+    "swift-3.1-branch"
+    "swift-3.1-branch"
+    "swift-3.1-branch"
+    "swift-3.1-branch"
+    "swift-3.1-branch"
+    "swift-3.1-branch"
+    "swift-3.1-branch"
+    "swift-3.1-branch"
+    "swift-3.1-branch"
+    "swift-3.1-branch"
+    "release"
+)
+
+swift_4_0_branches=(
     "swift-4.0-branch"
     "swift-4.0-branch"
     "swift-4.0-branch"
@@ -51,8 +102,76 @@ branches=(
     "release"
 )
 
+swift_4_1_branches=(
+    "swift-4.1-branch"
+    "swift-4.1-branch"
+    "swift-4.1-branch"
+    "swift-4.1-branch"
+    "swift-4.1-branch"
+    "swift-4.1-branch"
+    "swift-4.1-branch"
+    "swift-4.1-branch"
+    "swift-4.1-branch"
+    "swift-4.1-branch"
+    "swift-4.1-branch"
+    "swift-4.1-branch"
+    "swift-4.1-branch"
+    "release"
+)
+
+if [ $# -eq 0 ]
+then
+    echo "Using default branches: Swift 4.0"
+    branches=( "${swift_4_0_branches[@]}" ) # default to swift 4.0
+else
+    branch_parameter="$1"
+    case $branch_parameter in
+        -m|--master)
+        branches=( "${masterbranches[@]}" )
+        ;;
+        -3.0|--swift-3.0)
+        branches=( "${swift_3_0_branches[@]}" )
+        ;;
+        -3.1|--swift-3.1)
+        branches=( "${swift_3_1_branches[@]}" )
+        ;;
+        -4.0|--swift-4.0)
+        branches=( "${swift_4_0_branches[@]}" )
+        ;;
+        -4.1|--swift-4.1)
+        branches=( "${swift_4_1_branches[@]}" )
+        ;;
+        -h|--help)
+        echo "Available parameters for checing dependencies in given version:"
+        echo ""
+        echo "-m   | --master    -> current master branch (not frozen)"
+        echo "-3.0 | --swift-3.0 -> branch for Swift 3.0 (frozen)"
+        echo "-3.1 | --swift-3.1 -> branch for Swift 3.1 (frozen)"
+        echo "-4.0 | --swift-4.0 -> branch for Swift 4.0 (frozen)"
+        echo "-4.1 | --swift-4.1 -> branch for Swift 4.1 (frozen)"
+        exit 0
+        ;;
+        *)
+        echo "Invalid parameter ${branch_parameter}"
+        echo "Use --help or -h to discover valid parameters"
+        exit 1
+        ;;
+    esac
+fi
+
+diff_start=3cb38854e963b84873a7b7769b6c0b3f28c86015 # the starting commit
+diff_end=$(git log -1 --format="%H")
+
+echo "GENERATE PATCH: git checkout ${diff_end} && git format-patch ${diff_start} --stdout > obfuscator.patch"
+git checkout ${diff_end} && git format-patch ${diff_start} --stdout > obfuscator.patch
+
+echo "RESET TO START: git reset --hard ${diff_start}"
+git reset --hard ${diff_start}
+
 for i in ${!names[@]}; do
   echo "DATA: ${names[$i]} -> ${paths[$i]} -> ${branches[$i]}"
+  echo "GIT REMOVE: git rm -r ${names[$i]}"
+  git rm -r ${names[$i]}
   echo "REMOTE: git remote add ${names[$i]} https://github.com/${paths[$i]}.git"
   git remote add ${names[$i]} https://github.com/${paths[$i]}.git
   echo "FETCH: git fetch ${names[$i]}"
@@ -60,3 +179,10 @@ for i in ${!names[@]}; do
   echo "READ-TREE: git read-tree --prefix=${names[$i]} -u ${names[$i]}/${branches[$i]}"
   git read-tree --prefix=${names[$i]} -u ${names[$i]}/${branches[$i]}
 done
+
+echo "APPLY PATCH: git apply obfuscator.patch"
+git apply obfuscator.patch
+
+echo "REMOVE PATCH: rm obfuscator.patch"
+rm obfuscator.patch
+
-- 
2.17.1 (Apple Git-112)


From 2fe639912e716518e3e5bf5d38c2775c2a149925 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Mon, 11 Dec 2017 15:41:08 +0100
Subject: [PATCH 003/138] Changed the method of patch applying

---
 Scripts/git_remotes.sh | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/Scripts/git_remotes.sh b/Scripts/git_remotes.sh
index c93b4ba8be3..1edd13c3064 100644
--- a/Scripts/git_remotes.sh
+++ b/Scripts/git_remotes.sh
@@ -180,8 +180,8 @@ for i in ${!names[@]}; do
   git read-tree --prefix=${names[$i]} -u ${names[$i]}/${branches[$i]}
 done
 
-echo "APPLY PATCH: git apply obfuscator.patch"
-git apply obfuscator.patch
+echo "APPLY PATCH: git am < obfuscator.patch"
+git am < obfuscator.patch
 
 echo "REMOVE PATCH: rm obfuscator.patch"
 rm obfuscator.patch
-- 
2.17.1 (Apple Git-112)


From c9a364e52b15561f349dd73e130cd12cef7ccf35 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Mon, 11 Dec 2017 15:51:58 +0100
Subject: [PATCH 004/138] Revert to previous method of patch applying

---
 Scripts/git_remotes.sh | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/Scripts/git_remotes.sh b/Scripts/git_remotes.sh
index 1edd13c3064..c93b4ba8be3 100644
--- a/Scripts/git_remotes.sh
+++ b/Scripts/git_remotes.sh
@@ -180,8 +180,8 @@ for i in ${!names[@]}; do
   git read-tree --prefix=${names[$i]} -u ${names[$i]}/${branches[$i]}
 done
 
-echo "APPLY PATCH: git am < obfuscator.patch"
-git am < obfuscator.patch
+echo "APPLY PATCH: git apply obfuscator.patch"
+git apply obfuscator.patch
 
 echo "REMOVE PATCH: rm obfuscator.patch"
 rm obfuscator.patch
-- 
2.17.1 (Apple Git-112)


From 278e8193ad8630efea6918339e06283b7306f902 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Mon, 11 Dec 2017 16:52:49 +0100
Subject: [PATCH 005/138] Added .arcconfig to enable phabricator code review
 flow

---
 .arcconfig | 6 ++++++
 1 file changed, 6 insertions(+)
 create mode 100644 .arcconfig

diff --git a/.arcconfig b/.arcconfig
new file mode 100644
index 00000000000..71c7d808e14
--- /dev/null
+++ b/.arcconfig
@@ -0,0 +1,6 @@
+{
+  "phabricator.uri" : "https://phabricator.polidea.com/",
+  "arc.land.onto.default" : "master",
+  "project_id": ""
+}
+
-- 
2.17.1 (Apple Git-112)


From bc69907758fe8c7882c045e14a9aac8b87111242 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Mon, 11 Dec 2017 17:37:59 +0100
Subject: [PATCH 006/138] Added the almost empty CMakeLists for the swift
 compiler based tools

---
 swift/tools/obfuscator-renamer/CMakeLists.txt              | 6 ++++++
 swift/tools/obfuscator-renamer/obfuscator-renamer.cpp      | 7 +++++++
 swift/tools/obfuscator-symbol-extractor/CMakeLists.txt     | 6 ++++++
 .../obfuscator-symbol-extractor.cpp                        | 7 +++++++
 4 files changed, 26 insertions(+)
 create mode 100644 swift/tools/obfuscator-renamer/CMakeLists.txt
 create mode 100644 swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
 create mode 100644 swift/tools/obfuscator-symbol-extractor/CMakeLists.txt
 create mode 100644 swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp

diff --git a/swift/tools/obfuscator-renamer/CMakeLists.txt b/swift/tools/obfuscator-renamer/CMakeLists.txt
new file mode 100644
index 00000000000..e3cd78d4dbd
--- /dev/null
+++ b/swift/tools/obfuscator-renamer/CMakeLists.txt
@@ -0,0 +1,6 @@
+add_swift_host_tool(obfuscator-renamer
+  obfuscator-renamer.cpp
+  LINK_LIBRARIES swiftDriver swiftFrontend swiftIDE
+  SWIFT_COMPONENT tools
+)
+
diff --git a/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp b/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
new file mode 100644
index 00000000000..c8bbb7f63c4
--- /dev/null
+++ b/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
@@ -0,0 +1,7 @@
+#include <iostream>
+
+int main(int argc, char *argv[]) {
+  std::cout << "Swift obfuscator renamer tool";
+  return 0;
+}
+
diff --git a/swift/tools/obfuscator-symbol-extractor/CMakeLists.txt b/swift/tools/obfuscator-symbol-extractor/CMakeLists.txt
new file mode 100644
index 00000000000..922acf6172b
--- /dev/null
+++ b/swift/tools/obfuscator-symbol-extractor/CMakeLists.txt
@@ -0,0 +1,6 @@
+add_swift_host_tool(obfuscator-symbol-extractor
+  obfuscator-symbol-extractor.cpp
+  LINK_LIBRARIES swiftDriver swiftFrontend swiftIDE
+  SWIFT_COMPONENT tools
+)
+
diff --git a/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp b/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
new file mode 100644
index 00000000000..66d3999a2a4
--- /dev/null
+++ b/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
@@ -0,0 +1,7 @@
+#include <iostream>
+
+int main(int argc, char *argv[]) {
+  std::cout << "Swift obfuscator symbol extractor tool";
+  return 0;
+}
+
-- 
2.17.1 (Apple Git-112)


From 938aa18708cc2e79520dd1482ca158be34f849f1 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Mon, 11 Dec 2017 18:50:27 +0100
Subject: [PATCH 007/138] Added build script

---
 Scripts/build.sh | 4 ++++
 1 file changed, 4 insertions(+)
 create mode 100644 Scripts/build.sh

diff --git a/Scripts/build.sh b/Scripts/build.sh
new file mode 100644
index 00000000000..63e51044545
--- /dev/null
+++ b/Scripts/build.sh
@@ -0,0 +1,4 @@
+#!/bin/bash
+
+swift/utils/build-script -R
+
-- 
2.17.1 (Apple Git-112)


From 8c3c827099809e800620a203c3bac4ce6d79dfcd Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Tue, 12 Dec 2017 09:58:52 +0100
Subject: [PATCH 008/138] Added obfuscator tools to Swift tools CMakeList

---
 swift/tools/CMakeLists.txt | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/swift/tools/CMakeLists.txt b/swift/tools/CMakeLists.txt
index 14cca5b6583..140a5dd0865 100644
--- a/swift/tools/CMakeLists.txt
+++ b/swift/tools/CMakeLists.txt
@@ -12,6 +12,8 @@ add_swift_tool_subdirectory(sil-passpipeline-dumper)
 add_swift_tool_subdirectory(swift-llvm-opt)
 add_swift_tool_subdirectory(swift-api-digester)
 add_swift_tool_subdirectory(swift-syntax-test)
+add_swift_tool_subdirectory(obfuscator-symbol-extractor)
+add_swift_tool_subdirectory(obfuscator-renamer)
 
 if(SWIFT_BUILD_SOURCEKIT)
   add_swift_tool_subdirectory(SourceKit)
-- 
2.17.1 (Apple Git-112)


From 9e94aeb2d72e720a8615d5715e04f8adc439b076 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Tue, 12 Dec 2017 14:10:27 +0100
Subject: [PATCH 009/138] Created the Obfuscation library in the Swift project

---
 swift/include/swift/Obfuscation/Obfuscation.h          | 0
 swift/lib/CMakeLists.txt                               | 1 +
 swift/lib/Obfuscation/CMakeLists.txt                   | 8 ++++++++
 swift/lib/Obfuscation/Obfuscation.cpp                  | 0
 swift/tools/obfuscator-renamer/CMakeLists.txt          | 8 ++++++--
 swift/tools/obfuscator-symbol-extractor/CMakeLists.txt | 8 ++++++--
 6 files changed, 21 insertions(+), 4 deletions(-)
 create mode 100644 swift/include/swift/Obfuscation/Obfuscation.h
 create mode 100644 swift/lib/Obfuscation/CMakeLists.txt
 create mode 100644 swift/lib/Obfuscation/Obfuscation.cpp

diff --git a/swift/include/swift/Obfuscation/Obfuscation.h b/swift/include/swift/Obfuscation/Obfuscation.h
new file mode 100644
index 00000000000..e69de29bb2d
diff --git a/swift/lib/CMakeLists.txt b/swift/lib/CMakeLists.txt
index 2f8e6741073..3dfdc0e1b8c 100644
--- a/swift/lib/CMakeLists.txt
+++ b/swift/lib/CMakeLists.txt
@@ -13,6 +13,7 @@ add_subdirectory(IRGen)
 add_subdirectory(LLVMPasses)
 add_subdirectory(Markup)
 add_subdirectory(Migrator)
+add_subdirectory(Obfuscation)
 add_subdirectory(Option)
 add_subdirectory(Parse)
 add_subdirectory(PrintAsObjC)
diff --git a/swift/lib/Obfuscation/CMakeLists.txt b/swift/lib/Obfuscation/CMakeLists.txt
new file mode 100644
index 00000000000..2e9615e6dd0
--- /dev/null
+++ b/swift/lib/Obfuscation/CMakeLists.txt
@@ -0,0 +1,8 @@
+add_swift_library(swiftObfuscation STATIC
+  Obfuscation.cpp
+  LINK_LIBRARIES
+  swiftParse
+  swiftAST
+  swiftSema
+)
+
diff --git a/swift/lib/Obfuscation/Obfuscation.cpp b/swift/lib/Obfuscation/Obfuscation.cpp
new file mode 100644
index 00000000000..e69de29bb2d
diff --git a/swift/tools/obfuscator-renamer/CMakeLists.txt b/swift/tools/obfuscator-renamer/CMakeLists.txt
index e3cd78d4dbd..b9f6fdcc950 100644
--- a/swift/tools/obfuscator-renamer/CMakeLists.txt
+++ b/swift/tools/obfuscator-renamer/CMakeLists.txt
@@ -1,6 +1,10 @@
 add_swift_host_tool(obfuscator-renamer
   obfuscator-renamer.cpp
-  LINK_LIBRARIES swiftDriver swiftFrontend swiftIDE
-  SWIFT_COMPONENT tools
+  LINK_LIBRARIES 
+  swiftDriver 
+  swiftFrontend 
+  swiftObfuscation
+  SWIFT_COMPONENT 
+  tools
 )
 
diff --git a/swift/tools/obfuscator-symbol-extractor/CMakeLists.txt b/swift/tools/obfuscator-symbol-extractor/CMakeLists.txt
index 922acf6172b..c7ba85b6862 100644
--- a/swift/tools/obfuscator-symbol-extractor/CMakeLists.txt
+++ b/swift/tools/obfuscator-symbol-extractor/CMakeLists.txt
@@ -1,6 +1,10 @@
 add_swift_host_tool(obfuscator-symbol-extractor
   obfuscator-symbol-extractor.cpp
-  LINK_LIBRARIES swiftDriver swiftFrontend swiftIDE
-  SWIFT_COMPONENT tools
+  LINK_LIBRARIES 
+  swiftDriver 
+  swiftFrontend 
+  swiftObfuscation
+  SWIFT_COMPONENT 
+  tools
 )
 
-- 
2.17.1 (Apple Git-112)


From 655e3145d5b0a9e18bce182958b8806413db571c Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Tue, 12 Dec 2017 16:19:41 +0100
Subject: [PATCH 010/138] Added before script for caching ninja project

---
 .gitlab-ci.yml | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml
index 0507ef330b2..a7dbcaed612 100644
--- a/.gitlab-ci.yml
+++ b/.gitlab-ci.yml
@@ -1,7 +1,9 @@
 obfuscator_debug:
     stage: test
+    before_script:
+        - /bin/bash $CACHE_DIR/ninjaScript.bash
     script:
-        - swift/utils/build-script -R
+        - /bin/bash Scripts/build.sh
     tags:
         - xcode-9.0
     only:
-- 
2.17.1 (Apple Git-112)


From 41017c93598c89c1902751d4a167daf13cb235f4 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Tue, 12 Dec 2017 16:35:41 +0100
Subject: [PATCH 011/138] Added name mapper as a compiler command-line tool

---
 swift/tools/CMakeLists.txt                            |  1 +
 swift/tools/obfuscator-name-mapper/CMakeLists.txt     | 10 ++++++++++
 .../obfuscator-name-mapper/obfuscator-name-mapper.cpp |  7 +++++++
 swift/tools/obfuscator-renamer/CMakeLists.txt         | 11 ++++++-----
 .../tools/obfuscator-symbol-extractor/CMakeLists.txt  |  4 +++-
 5 files changed, 27 insertions(+), 6 deletions(-)
 create mode 100644 swift/tools/obfuscator-name-mapper/CMakeLists.txt
 create mode 100644 swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp

diff --git a/swift/tools/CMakeLists.txt b/swift/tools/CMakeLists.txt
index 140a5dd0865..580d1a669c8 100644
--- a/swift/tools/CMakeLists.txt
+++ b/swift/tools/CMakeLists.txt
@@ -13,6 +13,7 @@ add_swift_tool_subdirectory(swift-llvm-opt)
 add_swift_tool_subdirectory(swift-api-digester)
 add_swift_tool_subdirectory(swift-syntax-test)
 add_swift_tool_subdirectory(obfuscator-symbol-extractor)
+add_swift_tool_subdirectory(obfuscator-name-mapper)
 add_swift_tool_subdirectory(obfuscator-renamer)
 
 if(SWIFT_BUILD_SOURCEKIT)
diff --git a/swift/tools/obfuscator-name-mapper/CMakeLists.txt b/swift/tools/obfuscator-name-mapper/CMakeLists.txt
new file mode 100644
index 00000000000..565645cd4dd
--- /dev/null
+++ b/swift/tools/obfuscator-name-mapper/CMakeLists.txt
@@ -0,0 +1,10 @@
+add_swift_host_tool(obfuscator-name-mapper
+  obfuscator-name-mapper.cpp
+  LINK_LIBRARIES 
+  swiftObfuscation
+  LLVM_COMPONENT_DEPENDS
+  Support
+  SWIFT_COMPONENT 
+  tools 
+)
+
diff --git a/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp b/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
new file mode 100644
index 00000000000..8671a5841c3
--- /dev/null
+++ b/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
@@ -0,0 +1,7 @@
+#include <iostream>
+
+int main(int argc, char *argv[]) {
+  std::cout << "Swift obfuscator name mapper tool\n";
+  return 0;
+}
+
diff --git a/swift/tools/obfuscator-renamer/CMakeLists.txt b/swift/tools/obfuscator-renamer/CMakeLists.txt
index b9f6fdcc950..f26e1a7749e 100644
--- a/swift/tools/obfuscator-renamer/CMakeLists.txt
+++ b/swift/tools/obfuscator-renamer/CMakeLists.txt
@@ -1,10 +1,11 @@
 add_swift_host_tool(obfuscator-renamer
   obfuscator-renamer.cpp
-  LINK_LIBRARIES 
-  swiftDriver 
-  swiftFrontend 
+  LINK_LIBRARIES
+  swiftDriver
+  swiftFrontend
   swiftObfuscation
-  SWIFT_COMPONENT 
+  LLVM_COMPONENT_DEPENDS
+  Support
+  SWIFT_COMPONENT
   tools
 )
-
diff --git a/swift/tools/obfuscator-symbol-extractor/CMakeLists.txt b/swift/tools/obfuscator-symbol-extractor/CMakeLists.txt
index c7ba85b6862..b28578c5625 100644
--- a/swift/tools/obfuscator-symbol-extractor/CMakeLists.txt
+++ b/swift/tools/obfuscator-symbol-extractor/CMakeLists.txt
@@ -2,8 +2,10 @@ add_swift_host_tool(obfuscator-symbol-extractor
   obfuscator-symbol-extractor.cpp
   LINK_LIBRARIES 
   swiftDriver 
-  swiftFrontend 
+  swiftFrontend
   swiftObfuscation
+  LLVM_COMPONENT_DEPENDS
+  Support
   SWIFT_COMPONENT 
   tools
 )
-- 
2.17.1 (Apple Git-112)


From 8a2a62c9824a658720f62423530e0b27d5b8db62 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Wed, 3 Jan 2018 10:44:55 +0100
Subject: [PATCH 012/138] Documentation for Swift compiler based tools migrated
 to README

Summary:
Further updated readme

Updated links in the documentation

Reviewers: jerzy.kleszcz

Reviewed By: jerzy.kleszcz

Subscribers: jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2733
---
 Documentation/DocumentationFormat.md |  29 +++++
 README.md                            | 177 ++++++++++++++++++++++++++-
 2 files changed, 203 insertions(+), 3 deletions(-)
 create mode 100644 Documentation/DocumentationFormat.md

diff --git a/Documentation/DocumentationFormat.md b/Documentation/DocumentationFormat.md
new file mode 100644
index 00000000000..4926f23d151
--- /dev/null
+++ b/Documentation/DocumentationFormat.md
@@ -0,0 +1,29 @@
+# Filename
+
+NNN-{title}.md
+
+# Title
+
+These documents have names that are short noun phrases.
+
+# Context
+
+This section describes the forces at play, including technological, political, social, and project local. These forces are probably in tension, and should be called out as such. The language in this section is value-neutral. It is simply describing facts.
+
+See [http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions](http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions) for reference.
+
+# Decision
+
+This section describes our response to these forces. It is stated in full sentences, with active voice.
+
+# Status
+
+proposed | accepted | deprecated
+
+A decision may be "proposed" if the project stakeholders haven't agreed with it yet, or "accepted" once it is agreed. If a later ADR changes or reverses a decision, it may be marked as "deprecated" with a reference to its replacement.
+
+# Consequences
+
+This section describes the resulting context, after applying the decision. All consequences should be listed here, not just the "positive" ones. A particular decision may have positive, negative, and neutral consequences, but all of them affect the team and project in the future.
+
+
diff --git a/README.md b/README.md
index 4a4dadd7e5d..dfa7edef942 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,177 @@
-# Symbol Extractor and Renamer
+# Symbol Extractor, Name Mapper and Renamer
 
-The Swift compiler fork that has two additional tools added. 
+Repository contains the Swift compiler fork with three additional tools and one additional library added. 
+
+The tools are:
+
+* _SymbolExtractor_ with sources in `swift/tools/obfuscator-symbol-extractor/` directory and the build file in `swift/tools/obfuscator-symbol-extractor/CMakeLists.txt`
+
+* _NameMapper_ with sources in `swift/tools/obfuscator-name-mapper/` directory and the build file in `swift/tools/obfuscator-name-mapper/CMakeLists.txt`
+
+* _Renamer_ with sources in `swift/tools/obfuscator-renamer/` directory and the build file in `swift/tools/obfuscator-renamer/CMakeLists.txt`
+
+All these tools use a shared library called `swiftObfuscation`. Its headers are in `swift/include/swift/Obfuscation/` directory and its implementations are in `swift/lib/Obfuscation/` directory. The build file is in `swift/lib/Obfuscation/CMakeLists.txt`.
+
+The descriptions of the tools are presented below.
+
+# SymbolExtractor
+
+## Overview
+
+This tool is part of Swift Obfuscator project.
+
+It performs the analysis of Swift source code files and identifies the symbols that should be obfuscated. Once identified, the symbol is written down so that it could be recognized later.
+
+## Usage
+
+```bash
+$ obfuscator-symbol-extractor -filejson <path-to-input-files-json> -symbolsjson <path-to-output-symbols-json>
+```
+
+where 
+
+`<path-to-input-files-json>` is a path to `Files.json` that contains the data required for performing the analysis of Swift source code. This parameter is required.
+
+`<path-to-output-symbols-json>` is a path to `Symbols.json` file that the extracted symbols data will be written to. If it's an optional parameter. If ommited, tool will print out to the standard output.
+
+## Data formats
+
+The input data format is called `Files.json`. It's defined and explained in the [FilesExtractor project documentation](https://gitlab2.polidea.com/SwiftObfuscator/FileExtractor/tree/master#data-formats).
+
+The output data format is called `Symbols.json` and presented below:
+
+```javascript
+{
+  "symbols": [  
+    {
+      "symbol": <string>,
+      "name": <string>
+    }
+  ]
+}
+```
+
+`symbols` is a list of objects that contains symbol identifier and name. 
+
+`name` is directly corresponding to the actual string defined in the Swift source code. This string will be replaced by the `Renamer`. 
+
+`symbol` is an identifier that contains all the information required to uniquely identify the given symbol in the source code. It will be used by `Renamer` to decide whether the symbol it comes across should be renamed or not.
+
+## Feature list
+
+- [] TBA
+
+# NameMapper
+
+## Overview
+
+This tool is part of Swift Obfuscator project.
+
+It proposes the new names for the symbols provided in the `Symbols.json` file. It does not perform the actual renaming, but it generates the symbols after obfuscation.
+
+## Usage
+
+```bash
+$ obfuscator-name-mapper -symbolsjson <path-to-input-symbols-file> -renamesjson <path-to-output-renames-file>
+```
+
+where
+
+`<path-to-input-symbols-file>` is a path to `Symbols.json` file that contains the information about the extracted symbols. It's a required parameter.
+
+`<path-to-output-renames-file>` is a path to the file that the symbols with proposed obfuscated names will be written to. It's an optional parameter. If ommited, tool will print out to the standard output.
+
+## Data formats
+
+The input format is called `Symbols.json` and is described and explained in the [SymbolExtractor data formats](#data-formats) section.
+
+The output format is called `Renames.json` and presented below:
+
+```javascript
+{
+  "symbols": [
+    {
+      "symbol": <string>,
+      "originalName": <string>,
+      "obfuscatedName": <string>
+    }
+  ]
+}
+```
+
+`symbols` is an array of objects containing the original name of symbol, its identifier and the proposes obfuscated name.
+
+`originalName` and `symbol` are the same as `name` and `symbol` fields in the `Symbols.json` format, respectively.
+
+`obfuscatedName` is the proposed name that the original name of symbol should be changed to.
+
+## Feature list
+
+- [] TBA
+
+# Renamer
+
+## Overview
+
+This tool is part of Swift Obfuscator project.
+
+It performs the actual renaming. It parses the Swift source code to identify the symbols, checks whether these symbols should be renamed and what to rename them to, and then does the actual job of changing the symbol name. It generates the new Swift source code in the process.
+
+## Usage
+
+```bash
+$ obfuscator-renamer -filesjson <path-to-input-files-json-file> -renamesjson <path-to-input-renames-json-file> -obfuscatedproject <path-to-directory-for-obfuscated-project>
+```
+
+where
+
+`<path-to-input-files-json-file>` is the path to the `Files.json` file. It's a required parameter.
+
+`<path-to-input-renames-json-file>` is the path to the `Renames.json` file. It's a required parameter.
+
+`<path-to-directory-for-obfuscated-project>` is the path to the directory that the newly generated obfuscated Swift source code files will be written to, as well as the new project.
+
+## Data formats
+
+The input data formats are `Files.json` and `Renames.json` and are described in the [SymbolExtractor data formats section](#data-formats) and [NameMapper data formats section](#data-formats-1).
+
+## Feature list
+
+- [] TBA
+
+# Common for all three projects
+
+## Build notes for developers
+
+1. Clone the source code  
+   `git clone ssh://git@gitlab2.polidea.com:23/SwiftObfuscator/SymbolExtractorAndRenamer.git`
+
+2. Install build tools  
+   `brew install cmake ninja`
+
+3. (optional, only if there is a need for change in the dependencies) Update dependencies  
+   `/bin/bash Scripts/git_remotes.sh`  
+   Script takes the parameter defining which version of Swift will be used as the basis of the changes to the compiler.
+
+5. Build the Swift compiler in the Xcode-friendly way  
+   `swift/utils/build-script --xcode --release-debuginfo --debug-swift`
+
+6. (optional) Build the Swift compiler in the version allowing for the fast incremental compilation with ninja  
+   `swift/utils/build-script --release-debuginfo`
+
+## Further read
+
+Please consult the [Documentation](Documentation/) folder for the further explanations.
+
+## Licence
+
+TBA
+
+## Contributors
+
+In the alphabetical order:
+
+* [Jerzy Kleszcz](mailto:jerzy.kleszcz@polidea.com)
+* [Krzysztof Siejkowski](krzysztof.siejkowski@polidea.com)
 
-The first one is Symbol Extractor that consumes the data file generated by the File Extractor, looks for symbols to rename and outputs the data file with these symbols.
 
-- 
2.17.1 (Apple Git-112)


From 09ff0b6531face345acc0136b5fa531561350a2a Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Wed, 3 Jan 2018 12:22:23 +0100
Subject: [PATCH 013/138] extracting symbols from specified source files,
 printing symbols with ids to json file

Reviewers: krzysztof.siejkowski

Reviewed By: krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2731
---
 .../swift/Obfuscation/DataStructures.h        | 116 +++++++++++++++++
 swift/include/swift/Obfuscation/FileIO.h      |  17 +++
 swift/include/swift/Obfuscation/Obfuscation.h |  30 +++++
 swift/lib/Obfuscation/CMakeLists.txt          |   2 +
 swift/lib/Obfuscation/DataStructures.cpp      |  81 ++++++++++++
 swift/lib/Obfuscation/FileIO.cpp              |  67 ++++++++++
 swift/lib/Obfuscation/Obfuscation.cpp         | 120 ++++++++++++++++++
 .../obfuscator-symbol-extractor.cpp           |  60 ++++++++-
 8 files changed, 492 insertions(+), 1 deletion(-)
 create mode 100644 swift/include/swift/Obfuscation/DataStructures.h
 create mode 100644 swift/include/swift/Obfuscation/FileIO.h
 create mode 100644 swift/lib/Obfuscation/DataStructures.cpp
 create mode 100644 swift/lib/Obfuscation/FileIO.cpp

diff --git a/swift/include/swift/Obfuscation/DataStructures.h b/swift/include/swift/Obfuscation/DataStructures.h
new file mode 100644
index 00000000000..595985ce9fc
--- /dev/null
+++ b/swift/include/swift/Obfuscation/DataStructures.h
@@ -0,0 +1,116 @@
+#ifndef DataStructures_h
+#define DataStructures_h
+
+#include "swift/Frontend/Frontend.h"
+#include "llvm/Support/YAMLTraits.h"
+#include "llvm/Support/YAMLParser.h"
+#include "swift/Basic/JSONSerialization.h"
+
+namespace swift {
+  namespace obfuscation {
+
+    struct Module {
+      std::string name;
+    };
+    
+    struct Sdk {
+      std::string name;
+      std::string path;
+    };
+    
+    struct ExplicitelyLinkedFrameworks {
+      std::string name;
+      std::string path;
+    };
+    
+    struct FilesJson {
+      Module module;
+      Sdk sdk;
+      std::vector<std::string> filenames;
+      std::vector<std::string> systemLinkedFrameworks;
+      std::vector<ExplicitelyLinkedFrameworks> explicitelyLinkedFrameworks;
+    };
+    
+    struct Symbol {
+      std::string symbol;
+      std::string name;
+      
+      bool operator< (const Symbol &right) const;
+    };
+    
+    struct SymbolsJson {
+      std::vector<Symbol> symbols;
+      
+    public:
+      SymbolsJson(std::vector<Symbol> symbols) : symbols(symbols) { }
+    };
+    
+  } //namespace obfuscation
+} //namespace swift
+
+using namespace swift::obfuscation;
+
+// MARK: - Deserialization
+
+namespace llvm {
+  namespace yaml {
+    
+    template <>
+    struct MappingTraits<FilesJson> {
+      static void mapping(IO &io, FilesJson &info);
+    };
+    
+    template <>
+    struct MappingTraits<swift::obfuscation::Module> {
+      static void mapping(IO &io, swift::obfuscation::Module &info);
+    };
+    
+    template <>
+    struct MappingTraits<Sdk> {
+      static void mapping(IO &io, Sdk &info);
+    };
+    
+    template <>
+    struct MappingTraits<ExplicitelyLinkedFrameworks> {
+      static void mapping(IO &io, ExplicitelyLinkedFrameworks &info);
+    };
+    
+    template <>
+    struct MappingTraits<SymbolsJson> {
+      static void mapping(IO &io, SymbolsJson &info);
+    };
+    
+    template <>
+    struct MappingTraits<Symbol> {
+      static void mapping(IO &io, Symbol &info);
+    };
+    
+    
+    template <typename U>
+    struct SequenceTraits<std::vector<U>> {
+      static size_t size(IO &Io, std::vector<U> &Vec);
+      static U& element(IO &Io, std::vector<U> &Vec, size_t Index);
+    };
+    
+  } // namespace yaml
+} // namespace llvm
+
+// MARK: - Serialization
+
+namespace swift {
+  namespace json  {
+    
+    template <>
+    struct ObjectTraits<SymbolsJson> {
+      static void mapping(Output &out, SymbolsJson &s);
+    };
+    
+    template <>
+    struct ObjectTraits<Symbol> {
+      static void mapping(Output &out, Symbol &s);
+    };
+    
+  } // namespace json
+} // namespace swift
+
+#endif /* DataStructures_h */
diff --git a/swift/include/swift/Obfuscation/FileIO.h b/swift/include/swift/Obfuscation/FileIO.h
new file mode 100644
index 00000000000..24498c855ed
--- /dev/null
+++ b/swift/include/swift/Obfuscation/FileIO.h
@@ -0,0 +1,17 @@
+#ifndef FileIO_h
+#define FileIO_h
+
+#include "swift/Frontend/Frontend.h"
+#include "swift/Obfuscation/Obfuscation.h"
+
+namespace swift {
+  namespace obfuscation {
+    
+    llvm::ErrorOr<CompilerInvocationConfiguration> parseFilesJson(std::string PathToJson, std::string MainExecutablePath);
+    
+    int writeSymbolsToFile(SymbolsJson Symbols, std::string PathToOutput);
+    
+  } //namespace obfuscation
+} //namespace swift
+
+#endif /* FileIO_h */
diff --git a/swift/include/swift/Obfuscation/Obfuscation.h b/swift/include/swift/Obfuscation/Obfuscation.h
index e69de29bb2d..91aae9e2dc4 100644
--- a/swift/include/swift/Obfuscation/Obfuscation.h
+++ b/swift/include/swift/Obfuscation/Obfuscation.h
@@ -0,0 +1,30 @@
+#ifndef Obfuscation_h
+#define Obfuscation_h
+
+#include "swift/Frontend/Frontend.h"
+#include "swift/Obfuscation/DataStructures.h"
+
+namespace swift {
+  
+  namespace obfuscation {
+    
+    struct CompilerInvocationConfiguration {
+      std::string ModuleName;
+      std::string MainExecutablePath;
+      std::string SdkPath;
+      std::vector<std::string> InputFilenames;
+      std::vector<SearchPathOptions::FrameworkSearchPath> Paths;
+      
+      CompilerInvocationConfiguration(std::string ModuleName, std::string MainExecutablePath, std::string SdkPath, std::vector<std::string> InputFilenames, std::vector<SearchPathOptions::FrameworkSearchPath> Paths)
+      : ModuleName(ModuleName), MainExecutablePath(MainExecutablePath), SdkPath(SdkPath), InputFilenames(InputFilenames), Paths(Paths) { }
+    };
+    
+    CompilerInvocation createInvocation(CompilerInvocationConfiguration Configuration);
+    
+    llvm::ErrorOr<SymbolsJson> extractSymbols(CompilerInvocationConfiguration Configuration);
+    
+  } //namespace obfuscation
+  
+} //namespace swift
+
+#endif /* Obfuscation_h */
diff --git a/swift/lib/Obfuscation/CMakeLists.txt b/swift/lib/Obfuscation/CMakeLists.txt
index 2e9615e6dd0..72756e7419b 100644
--- a/swift/lib/Obfuscation/CMakeLists.txt
+++ b/swift/lib/Obfuscation/CMakeLists.txt
@@ -1,5 +1,7 @@
 add_swift_library(swiftObfuscation STATIC
   Obfuscation.cpp
+  DataStructures.cpp
+  FileIO.cpp
   LINK_LIBRARIES
   swiftParse
   swiftAST
diff --git a/swift/lib/Obfuscation/DataStructures.cpp b/swift/lib/Obfuscation/DataStructures.cpp
new file mode 100644
index 00000000000..490aa7cbc44
--- /dev/null
+++ b/swift/lib/Obfuscation/DataStructures.cpp
@@ -0,0 +1,81 @@
+#include "swift/Obfuscation/DataStructures.h"
+#include <stdio.h>
+#include "llvm/Support/YAMLTraits.h"
+#include "llvm/Support/YAMLParser.h"
+#include "llvm/Support/MemoryBuffer.h"
+
+using namespace swift::obfuscation;
+
+namespace swift {
+  namespace obfuscation {
+    
+    bool Symbol::operator< (const Symbol &right) const {
+      return (symbol < right.symbol);
+    }
+    
+  } //namespace obfuscation
+} //namespace swift
+
+namespace llvm {
+  namespace yaml {
+    
+    void MappingTraits<FilesJson>::mapping(IO &io, FilesJson &info) {
+      io.mapRequired("module", info.module);
+      io.mapRequired("sdk", info.sdk);
+      io.mapRequired("filenames", info.filenames);
+      io.mapRequired("systemLinkedFrameworks", info.systemLinkedFrameworks);
+      io.mapRequired("explicitelyLinkedFrameworks", info.explicitelyLinkedFrameworks);
+    }
+   
+    void MappingTraits<swift::obfuscation::Module>::mapping(IO &io, swift::obfuscation::Module &info) {
+      io.mapRequired("name", info.name);
+    }
+    
+    void MappingTraits<Sdk>::mapping(IO &io, Sdk &info) {
+      io.mapRequired("name", info.name);
+      io.mapRequired("path", info.path);
+    }
+    
+    void MappingTraits<ExplicitelyLinkedFrameworks>::mapping(IO &io, ExplicitelyLinkedFrameworks &info) {
+      io.mapRequired("name", info.name);
+      io.mapRequired("path", info.path);
+    }
+    
+    void MappingTraits<SymbolsJson>::mapping(IO &io, SymbolsJson &info) {
+      io.mapRequired("symbols", info.symbols);
+    }
+    
+    void MappingTraits<Symbol>::mapping(IO &io, Symbol &info) {
+      io.mapRequired("symbol", info.symbol);
+      io.mapRequired("name", info.name);
+    }
+    
+    template <typename U> size_t SequenceTraits<std::vector<U>>::size(IO &Io, std::vector<U> &Vec) {
+      return Vec.size();
+    }
+    
+    template <typename U> U& SequenceTraits<std::vector<U>>::element(IO &Io, std::vector<U> &Vec, size_t Index) {
+      if (Vec.size() <= Index) {
+        Vec.resize(Index + 1);
+      }
+      return Vec[Index];
+    }
+    
+  } // namespace yaml
+} // namespace llvm
+
+namespace swift {
+  namespace json {
+    
+    void ObjectTraits<SymbolsJson>::mapping(Output &out, SymbolsJson &s) {
+      out.mapRequired("symbols", s.symbols);
+    }
+    
+    void ObjectTraits<Symbol>::mapping(Output &out, Symbol &s) {
+      out.mapRequired("name", s.name);
+      out.mapRequired("symbol", s.symbol);
+    }
+    
+  } // namespace json
+} // namespace swift
+
diff --git a/swift/lib/Obfuscation/FileIO.cpp b/swift/lib/Obfuscation/FileIO.cpp
new file mode 100644
index 00000000000..12275d1acab
--- /dev/null
+++ b/swift/lib/Obfuscation/FileIO.cpp
@@ -0,0 +1,67 @@
+#include "swift/Obfuscation/FileIO.h"
+#include "llvm/Support/YAMLTraits.h"
+#include "llvm/Support/YAMLParser.h"
+#include "llvm/Support/MemoryBuffer.h"
+#include "swift/Basic/JSONSerialization.h"
+#include <stdio.h>
+#include <iostream>
+#include <fstream>
+
+namespace swift {
+  namespace obfuscation {
+    
+    llvm::ErrorOr<CompilerInvocationConfiguration> parseFilesJson(std::string PathToJson, std::string MainExecutablePath) {
+      auto Buffer = llvm::MemoryBuffer::getFile(PathToJson);
+      if (auto ErrorCode = Buffer.getError()) {
+        std::cout << "Error during JSON file read: " << ErrorCode.message();
+        return llvm::ErrorOr<CompilerInvocationConfiguration>(std::error_code(1, std::generic_category()));
+      }
+      
+      llvm::yaml::Input Input(std::move(Buffer.get())->getBuffer());
+      FilesJson filesJson;
+      Input >> filesJson;
+      std::error_code ParsingError = Input.error();
+      if (ParsingError) {
+        std::cout << "Error during JSON parse: " << ParsingError.message();
+        return llvm::ErrorOr<CompilerInvocationConfiguration>(std::error_code(1, std::generic_category()));
+      }
+      
+      StringRef ModuleName = filesJson.module.name;
+      
+      StringRef SdkPath = filesJson.sdk.path;
+      
+      std::vector<std::string> InputFilenames = filesJson.filenames;
+      std::vector<SearchPathOptions::FrameworkSearchPath> Paths;
+      for (auto Framework : filesJson.explicitelyLinkedFrameworks) {
+        Paths.push_back(SearchPathOptions::FrameworkSearchPath(Framework.path, false));
+      }
+      
+      return llvm::ErrorOr<CompilerInvocationConfiguration>(CompilerInvocationConfiguration(ModuleName, MainExecutablePath, SdkPath, InputFilenames, Paths));
+    }
+    
+    
+    int writeSymbolsToFile(SymbolsJson Symbols, std::string PathToOutput) {
+      
+      std::string outputStr;
+      llvm::raw_string_ostream rso(outputStr);
+      swift::json::Output output(rso);
+      output << Symbols;
+      // TODO: add serialization error handling
+      
+      std::ofstream file;
+      file.open(PathToOutput);
+      if (file.fail()) {
+        file.close();
+        std::cout << "Failed to open file: " << PathToOutput << "\n";
+        return 1;
+      }
+      file << rso.str();
+      file.close();
+      
+      std::cout << "symbols.json:\n" << rso.str();
+      
+      return 0;
+    }
+    
+  } //namespace obfuscation
+} //namespace swift
diff --git a/swift/lib/Obfuscation/Obfuscation.cpp b/swift/lib/Obfuscation/Obfuscation.cpp
index e69de29bb2d..357eea278ec 100644
--- a/swift/lib/Obfuscation/Obfuscation.cpp
+++ b/swift/lib/Obfuscation/Obfuscation.cpp
@@ -0,0 +1,120 @@
+#include "swift/Obfuscation/Obfuscation.h"
+#include "swift/Frontend/PrintingDiagnosticConsumer.h"
+#include <sstream>
+
+namespace swift {
+  
+  namespace obfuscation {
+    
+    struct SymbolsProvider {
+      
+    public:
+      
+      static Symbol symbol(Decl* De) {
+        std::vector<std::string> Parts;
+        std::string SymbolName;
+        if (auto *D = dyn_cast<NominalTypeDecl>(De)) {
+          Parts.push_back("module");
+          Parts.push_back(D->getModuleContext()->getBaseName().getIdentifier().get());
+          if (auto *decl = dyn_cast<EnumDecl>(D)) {
+            SymbolName = decl->getDeclaredInterfaceType()->getString();
+            Parts.push_back("enum." + SymbolName);
+          } else if (auto *decl = dyn_cast<ClassDecl>(D)) {
+            SymbolName = decl->getDeclaredInterfaceType()->getString();
+            Parts.push_back("class." + SymbolName);
+          } else if (auto *decl = dyn_cast<ProtocolDecl>(D)) {
+            SymbolName = decl->getDeclaredInterfaceType()->getString();
+            Parts.push_back("protocol." + SymbolName);
+          } else if (auto *decl = dyn_cast<StructDecl>(D)) {
+            SymbolName = decl->getDeclaredInterfaceType()->getString();
+            Parts.push_back("struct." + SymbolName);
+          }
+        }
+        
+        std::string StringParts;
+        if (Parts.size() == 1) {
+          StringParts = Parts[0];
+        } else {
+          std::stringstream Result;
+          copy(Parts.begin(), Parts.end(), std::ostream_iterator<std::string>(Result, "."));
+          StringParts = Result.str();
+          StringParts.pop_back();
+        }
+        
+        auto SymbolStruct = Symbol();
+        SymbolStruct.symbol = StringParts;
+        SymbolStruct.name = SymbolName;
+        return SymbolStruct;
+      }
+    };
+    
+    CompilerInvocation createInvocation(CompilerInvocationConfiguration Configuration) {
+      CompilerInvocation Invocation;
+      Invocation.setModuleName(Configuration.ModuleName);
+      Invocation.setMainExecutablePath(Configuration.MainExecutablePath);
+      for (auto InputFilename : Configuration.InputFilenames) {
+        Invocation.addInputFilename(InputFilename);
+      }
+      Invocation.getLangOptions().AttachCommentsToDecls = true;
+      Invocation.setFrameworkSearchPaths(Configuration.Paths);
+      Invocation.setSDKPath(Configuration.SdkPath);
+      return Invocation;
+    }
+    
+    std::set<Symbol> findSymbolsToObfuscate(SourceFile &SF) {
+      struct RenamesCollector: public SourceEntityWalker {
+        std::set<Symbol> Bucket;
+        RenamesCollector() {}
+        
+        void handleSymbol(Symbol &Symbol) {
+          Bucket.insert(Symbol);
+        }
+        
+        bool walkToDeclPre(Decl *D, CharSourceRange Range) override {
+          if (D->isImplicit())
+            return false;
+          auto Symbol = SymbolsProvider::symbol(D);
+          handleSymbol(Symbol);
+          return true;
+        }
+        
+        bool visitDeclReference(ValueDecl *D, CharSourceRange Range,
+                                TypeDecl *CtorTyRef, ExtensionDecl *ExtTyRef,
+                                Type T, ReferenceMetaData Data) override {
+          auto Symbol = SymbolsProvider::symbol(D);
+          handleSymbol(Symbol);
+          return true;
+        }
+      } Collector;
+      
+      Collector.walk(SF);
+      
+      return Collector.Bucket;
+    }
+    
+    llvm::ErrorOr<SymbolsJson> extractSymbols(CompilerInvocationConfiguration Configuration) {
+      auto Invocation = createInvocation(Configuration);
+      CompilerInstance CI;
+      PrintingDiagnosticConsumer PrintDiags;
+      CI.addDiagnosticConsumer(&PrintDiags);
+      if (CI.setup(Invocation)) {
+        return llvm::ErrorOr<std::vector<Symbol>>(std::error_code(1, std::generic_category()));
+      }
+      CI.performSema();
+      
+      std::vector<Symbol> Symbols;
+      std::vector<SourceFile *> SF;
+      for (auto Unit : CI.getMainModule()->getFiles()) {
+        if (auto Current = dyn_cast<SourceFile>(Unit)) {
+          SF.push_back(Current);
+          auto CurrentSymbols = findSymbolsToObfuscate(*Current);
+          std::copy(CurrentSymbols.begin(), CurrentSymbols.end(), std::back_inserter(Symbols));
+        }
+      }
+      SymbolsJson Json = SymbolsJson(Symbols);
+      return llvm::ErrorOr<SymbolsJson>(Json);
+    }
+    
+  } //namespace obfuscation
+  
+} //namespace swift
diff --git a/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp b/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
index 66d3999a2a4..4b4cb8c7459 100644
--- a/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
+++ b/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
@@ -1,7 +1,65 @@
+#include "swift/Basic/LLVMInitialize.h"
+#include "llvm/Support/FileSystem.h"
+#include "swift/AST/Decl.h"
+#include "swift/Obfuscation/Obfuscation.h"
+#include "swift/Obfuscation/FileIO.h"
+
 #include <iostream>
 
+using namespace swift;
+using namespace swift::obfuscation;
+
+namespace options {
+  static llvm::cl::opt<std::string>
+  FilesJsonPath("filejson", llvm::cl::desc("Name of the file containing File Extractor data"));
+
+  static llvm::cl::opt<std::string>
+  SymbolJsonPath("symbolsjson", llvm::cl::desc("Name of the file to write extracted Symbols"));
+}
+
+void printSymbols(std::vector<Symbol> Symbols) {
+  for (auto Symbol : Symbols) {
+    std::cout << "symbol: " << Symbol.symbol << "\n" << "name: " << Symbol.name << "\n";
+  }
+}
+
+// This function isn't referenced outside its translation unit, but it
+// can't use the "static" keyword because its address is used for
+// getMainExecutable (since some platforms don't support taking the
+// address of main, and some platforms can't implement getMainExecutable
+// without being given the address of a function in the main executable).
+void anchorForGetMainExecutable() {}
+
 int main(int argc, char *argv[]) {
-  std::cout << "Swift obfuscator symbol extractor tool";
+  INITIALIZE_LLVM(argc, argv);
+  std::cout << "Swift obfuscator symbol extractor tool\n";
+  
+  llvm::cl::ParseCommandLineOptions(argc, argv, "obfuscator-symbol-extractor\n");
+  
+  if (options::FilesJsonPath.empty()) {
+    llvm::errs() << "cannot find Files Extractor json file\n";
+    return 1;
+  }
+
+  std::string PathToJson = options::FilesJsonPath;
+  std::string MainExecutablePath = llvm::sys::fs::getMainExecutable(argv[0],
+                                                                    reinterpret_cast<void *>(&anchorForGetMainExecutable));
+  llvm::ErrorOr<CompilerInvocationConfiguration> ConfigurationOrError = parseFilesJson(PathToJson, MainExecutablePath);
+  if (std::error_code ec = ConfigurationOrError.getError()) {
+    return ec.value();
+  }
+  llvm::ErrorOr<SymbolsJson> SymbolsOrError = extractSymbols(ConfigurationOrError.get());
+  if (std::error_code ec = SymbolsOrError.getError()) {
+    return ec.value();
+  }
+  
+  printSymbols(SymbolsOrError.get().symbols);
+  if (options::SymbolJsonPath.empty()) {
+    llvm::errs() << "there is no path to write extracted symbols to\n";
+    return 1;
+  }
+  std::string PathToOutput = options::SymbolJsonPath;
+  writeSymbolsToFile(SymbolsOrError.get(), PathToOutput);
   return 0;
 }
 
-- 
2.17.1 (Apple Git-112)


From a70aacb139b89d4a085042a4629391aecf37ba0b Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Fri, 5 Jan 2018 11:47:25 +0100
Subject: [PATCH 014/138] Update readme to indicate that the clean build of
 compiler is needed for Xcode version

---
 README.md | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/README.md b/README.md
index dfa7edef942..1fc3786f866 100644
--- a/README.md
+++ b/README.md
@@ -153,8 +153,8 @@ The input data formats are `Files.json` and `Renames.json` and are described in
    `/bin/bash Scripts/git_remotes.sh`  
    Script takes the parameter defining which version of Swift will be used as the basis of the changes to the compiler.
 
-5. Build the Swift compiler in the Xcode-friendly way  
-   `swift/utils/build-script --xcode --release-debuginfo --debug-swift`
+5. Build the Swift compiler in the Xcode-friendly way.  
+   `swift/utils/build-script --clean --xcode --release-debuginfo --debug-swift`
 
 6. (optional) Build the Swift compiler in the version allowing for the fast incremental compilation with ninja  
    `swift/utils/build-script --release-debuginfo`
-- 
2.17.1 (Apple Git-112)


From 7df38957e00649ccd92268afca6bb7260105c971 Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Fri, 5 Jan 2018 12:37:24 +0100
Subject: [PATCH 015/138] added parsing symbol names and generating proposed
 renamings

Reviewers: krzysztof.siejkowski, jakub.sowa

Reviewed By: krzysztof.siejkowski, jakub.sowa

Subscribers: jakub.sowa, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2737
---
 README.md                                     |  8 +-
 .../swift/Obfuscation/DataStructures.h        | 34 +++++++-
 swift/include/swift/Obfuscation/FileIO.h      |  8 +-
 swift/include/swift/Obfuscation/NameMapping.h | 15 ++++
 swift/include/swift/Obfuscation/Obfuscation.h |  2 +
 swift/include/swift/Obfuscation/Random.h      | 83 +++++++++++++++++++
 swift/lib/Obfuscation/CMakeLists.txt          |  4 +
 swift/lib/Obfuscation/DataStructures.cpp      | 26 +++++-
 swift/lib/Obfuscation/FileIO.cpp              | 37 +++++----
 swift/lib/Obfuscation/NameMapping.cpp         | 76 +++++++++++++++++
 swift/lib/Obfuscation/Obfuscation.cpp         | 24 +++++-
 swift/lib/Obfuscation/Random.cpp              | 38 +++++++++
 .../obfuscator-name-mapper.cpp                | 48 +++++++++++
 swift/tools/obfuscator-renamer/CMakeLists.txt |  2 -
 .../obfuscator-renamer/obfuscator-renamer.cpp |  3 +
 .../CMakeLists.txt                            |  2 -
 .../obfuscator-symbol-extractor.cpp           | 14 ++--
 17 files changed, 380 insertions(+), 44 deletions(-)
 create mode 100644 swift/include/swift/Obfuscation/NameMapping.h
 create mode 100644 swift/include/swift/Obfuscation/Random.h
 create mode 100644 swift/lib/Obfuscation/NameMapping.cpp
 create mode 100644 swift/lib/Obfuscation/Random.cpp

diff --git a/README.md b/README.md
index 1fc3786f866..6ddab861e16 100644
--- a/README.md
+++ b/README.md
@@ -44,7 +44,7 @@ The output data format is called `Symbols.json` and presented below:
 {
   "symbols": [  
     {
-      "symbol": <string>,
+      "identifier": <string>,
       "name": <string>
     }
   ]
@@ -55,7 +55,7 @@ The output data format is called `Symbols.json` and presented below:
 
 `name` is directly corresponding to the actual string defined in the Swift source code. This string will be replaced by the `Renamer`. 
 
-`symbol` is an identifier that contains all the information required to uniquely identify the given symbol in the source code. It will be used by `Renamer` to decide whether the symbol it comes across should be renamed or not.
+`identifier` contains all the information required to uniquely identify the given symbol in the source code. It will be used by `Renamer` to decide whether the symbol it comes across should be renamed or not.
 
 ## Feature list
 
@@ -91,7 +91,7 @@ The output format is called `Renames.json` and presented below:
 {
   "symbols": [
     {
-      "symbol": <string>,
+      "identifier": <string>,
       "originalName": <string>,
       "obfuscatedName": <string>
     }
@@ -101,7 +101,7 @@ The output format is called `Renames.json` and presented below:
 
 `symbols` is an array of objects containing the original name of symbol, its identifier and the proposes obfuscated name.
 
-`originalName` and `symbol` are the same as `name` and `symbol` fields in the `Symbols.json` format, respectively.
+`originalName` and `identifier` are the same as `name` and `symbol` fields in the `Symbols.json` format, respectively.
 
 `obfuscatedName` is the proposed name that the original name of symbol should be changed to.
 
diff --git a/swift/include/swift/Obfuscation/DataStructures.h b/swift/include/swift/Obfuscation/DataStructures.h
index 595985ce9fc..c063b014ad1 100644
--- a/swift/include/swift/Obfuscation/DataStructures.h
+++ b/swift/include/swift/Obfuscation/DataStructures.h
@@ -32,7 +32,7 @@ namespace swift {
     };
     
     struct Symbol {
-      std::string symbol;
+      std::string identifier;
       std::string name;
       
       bool operator< (const Symbol &right) const;
@@ -40,9 +40,18 @@ namespace swift {
     
     struct SymbolsJson {
       std::vector<Symbol> symbols;
+    };
+    
+    struct SymbolRenaming {
+      std::string identifier;
+      std::string originalName;
+      std::string obfuscatedName;
       
-    public:
-      SymbolsJson(std::vector<Symbol> symbols) : symbols(symbols) { }
+      bool operator< (const SymbolRenaming &right) const;
+    };
+    
+    struct RenamesJson {
+      std::vector<SymbolRenaming> symbols;
     };
     
   } //namespace obfuscation
@@ -85,6 +94,15 @@ namespace llvm {
       static void mapping(IO &io, Symbol &info);
     };
     
+    template <>
+    struct MappingTraits<RenamesJson> {
+      static void mapping(IO &io, RenamesJson &info);
+    };
+    
+    template <>
+    struct MappingTraits<SymbolRenaming> {
+      static void mapping(IO &io, SymbolRenaming &info);
+    };
     
     template <typename U>
     struct SequenceTraits<std::vector<U>> {
@@ -110,6 +128,16 @@ namespace swift {
       static void mapping(Output &out, Symbol &s);
     };
     
+    template <>
+    struct ObjectTraits<RenamesJson> {
+      static void mapping(Output &out, RenamesJson &s);
+    };
+    
+    template <>
+    struct ObjectTraits<SymbolRenaming> {
+      static void mapping(Output &out, SymbolRenaming &s);
+    };
+    
   } // namespace json
 } // namespace swift
 
diff --git a/swift/include/swift/Obfuscation/FileIO.h b/swift/include/swift/Obfuscation/FileIO.h
index 24498c855ed..57c59d33d04 100644
--- a/swift/include/swift/Obfuscation/FileIO.h
+++ b/swift/include/swift/Obfuscation/FileIO.h
@@ -7,9 +7,11 @@
 namespace swift {
   namespace obfuscation {
     
-    llvm::ErrorOr<CompilerInvocationConfiguration> parseFilesJson(std::string PathToJson, std::string MainExecutablePath);
-    
-    int writeSymbolsToFile(SymbolsJson Symbols, std::string PathToOutput);
+    template<class T>
+    llvm::ErrorOr<T> parseJson(std::string PathToJson);
+
+    template<class T>
+    int writeSymbolsToFile(T Symbols, std::string PathToOutput);
     
   } //namespace obfuscation
 } //namespace swift
diff --git a/swift/include/swift/Obfuscation/NameMapping.h b/swift/include/swift/Obfuscation/NameMapping.h
new file mode 100644
index 00000000000..fb38defc78e
--- /dev/null
+++ b/swift/include/swift/Obfuscation/NameMapping.h
@@ -0,0 +1,15 @@
+#ifndef NameMapping_h
+#define NameMapping_h
+
+#include "swift/Obfuscation/DataStructures.h"
+
+namespace swift {
+  namespace obfuscation {
+    
+    llvm::ErrorOr<RenamesJson> proposeRenamings(SymbolsJson symbolsJson);
+
+  } //namespace obfuscation
+  
+} //namespace swift
+
+#endif /* NameMapping_h */
diff --git a/swift/include/swift/Obfuscation/Obfuscation.h b/swift/include/swift/Obfuscation/Obfuscation.h
index 91aae9e2dc4..ea26042ade8 100644
--- a/swift/include/swift/Obfuscation/Obfuscation.h
+++ b/swift/include/swift/Obfuscation/Obfuscation.h
@@ -19,6 +19,8 @@ namespace swift {
       : ModuleName(ModuleName), MainExecutablePath(MainExecutablePath), SdkPath(SdkPath), InputFilenames(InputFilenames), Paths(Paths) { }
     };
     
+    CompilerInvocationConfiguration createCompilerInvocationConfiguration(FilesJson filesJson, std::string MainExecutablePath);
+    
     CompilerInvocation createInvocation(CompilerInvocationConfiguration Configuration);
     
     llvm::ErrorOr<SymbolsJson> extractSymbols(CompilerInvocationConfiguration Configuration);
diff --git a/swift/include/swift/Obfuscation/Random.h b/swift/include/swift/Obfuscation/Random.h
new file mode 100644
index 00000000000..c3611366c47
--- /dev/null
+++ b/swift/include/swift/Obfuscation/Random.h
@@ -0,0 +1,83 @@
+#ifndef Random_h
+#define Random_h
+
+#include <stdio.h>
+#include <random>
+
+namespace swift {
+  
+  namespace obfuscation {
+    
+    class RandomIntegerGenerator {
+      
+    private:
+      
+      std::random_device rd;
+      std::mt19937 engine;
+      std::uniform_int_distribution<size_t> distribution;
+      
+    public:
+      
+      RandomIntegerGenerator(size_t min, size_t max) :
+      rd(),
+      engine(rd()),
+      distribution(std::uniform_int_distribution<size_t>(min, max)) {}
+      
+      size_t rand();
+
+    };
+    
+    template<typename T>
+    class RandomElementChooser {
+      
+    private:
+      
+      RandomIntegerGenerator* generator;
+      std::vector<T> list;
+      
+    public:
+      
+      RandomElementChooser(std::vector<T> listToChooseFrom) :
+      generator(new RandomIntegerGenerator(0, listToChooseFrom.size() - 1)),
+      list(listToChooseFrom) {}
+      
+      T rand();
+
+    };
+    
+    template<typename T>
+    class RandomVectorGenerator {
+      
+    private:
+      
+      RandomElementChooser<T>* chooser;
+      
+    public:
+      
+      RandomVectorGenerator(std::vector<T> listToChooseFrom) :
+      chooser(new RandomElementChooser<T>(listToChooseFrom)) {}
+      
+      std::vector<T> rand(size_t length);
+
+    };
+    
+    class RandomStringGenerator {
+      
+    private:
+      
+      RandomVectorGenerator<std::string>* generator;
+      
+    public:
+      
+      RandomStringGenerator(std::vector<std::string> listToChooseFrom) :
+      generator(new RandomVectorGenerator<std::string>(listToChooseFrom)) {}
+      
+      std::string rand(size_t length);
+
+    };
+    
+  } //namespace obfuscation
+  
+} //namespace swift
+
+#endif /* Random_h */
diff --git a/swift/lib/Obfuscation/CMakeLists.txt b/swift/lib/Obfuscation/CMakeLists.txt
index 72756e7419b..d81c64b7d17 100644
--- a/swift/lib/Obfuscation/CMakeLists.txt
+++ b/swift/lib/Obfuscation/CMakeLists.txt
@@ -2,9 +2,13 @@ add_swift_library(swiftObfuscation STATIC
   Obfuscation.cpp
   DataStructures.cpp
   FileIO.cpp
+  Random.cpp
+  NameMapping.cpp
   LINK_LIBRARIES
   swiftParse
   swiftAST
   swiftSema
+  swiftDriver
+  swiftFrontend
 )
 
diff --git a/swift/lib/Obfuscation/DataStructures.cpp b/swift/lib/Obfuscation/DataStructures.cpp
index 490aa7cbc44..08d04a4f9e6 100644
--- a/swift/lib/Obfuscation/DataStructures.cpp
+++ b/swift/lib/Obfuscation/DataStructures.cpp
@@ -10,7 +10,7 @@ namespace swift {
   namespace obfuscation {
     
     bool Symbol::operator< (const Symbol &right) const {
-      return (symbol < right.symbol);
+      return (identifier < right.identifier);
     }
     
   } //namespace obfuscation
@@ -46,10 +46,20 @@ namespace llvm {
     }
     
     void MappingTraits<Symbol>::mapping(IO &io, Symbol &info) {
-      io.mapRequired("symbol", info.symbol);
+      io.mapRequired("identifier", info.identifier);
       io.mapRequired("name", info.name);
     }
     
+    void MappingTraits<RenamesJson>::mapping(IO &io, RenamesJson &info) {
+      io.mapRequired("symbols", info.symbols);
+    }
+    
+    void MappingTraits<SymbolRenaming>::mapping(IO &io, SymbolRenaming &info) {
+      io.mapRequired("identifier", info.identifier);
+      io.mapRequired("originalName", info.originalName);
+      io.mapRequired("obfuscatedName", info.obfuscatedName);
+    }
+    
     template <typename U> size_t SequenceTraits<std::vector<U>>::size(IO &Io, std::vector<U> &Vec) {
       return Vec.size();
     }
@@ -73,7 +83,17 @@ namespace swift {
     
     void ObjectTraits<Symbol>::mapping(Output &out, Symbol &s) {
       out.mapRequired("name", s.name);
-      out.mapRequired("symbol", s.symbol);
+      out.mapRequired("identifier", s.identifier);
+    }
+    
+    void ObjectTraits<RenamesJson>::mapping(Output &out, RenamesJson &s) {
+      out.mapRequired("symbols", s.symbols);
+    }
+    
+    void ObjectTraits<SymbolRenaming>::mapping(Output &out, SymbolRenaming &s) {
+      out.mapRequired("identifier", s.identifier);
+      out.mapRequired("originalName", s.originalName);
+      out.mapRequired("obfuscatedName", s.obfuscatedName);
     }
     
   } // namespace json
diff --git a/swift/lib/Obfuscation/FileIO.cpp b/swift/lib/Obfuscation/FileIO.cpp
index 12275d1acab..343a558a4c5 100644
--- a/swift/lib/Obfuscation/FileIO.cpp
+++ b/swift/lib/Obfuscation/FileIO.cpp
@@ -9,38 +9,35 @@
 
 namespace swift {
   namespace obfuscation {
-    
-    llvm::ErrorOr<CompilerInvocationConfiguration> parseFilesJson(std::string PathToJson, std::string MainExecutablePath) {
+        
+    template<class T>
+    llvm::ErrorOr<T> parseJson(std::string PathToJson) {
       auto Buffer = llvm::MemoryBuffer::getFile(PathToJson);
       if (auto ErrorCode = Buffer.getError()) {
         std::cout << "Error during JSON file read: " << ErrorCode.message();
-        return llvm::ErrorOr<CompilerInvocationConfiguration>(std::error_code(1, std::generic_category()));
+        return llvm::ErrorOr<T>(std::error_code(1, std::generic_category()));
       }
       
       llvm::yaml::Input Input(std::move(Buffer.get())->getBuffer());
-      FilesJson filesJson;
-      Input >> filesJson;
+      T json;
+      Input >> json;
       std::error_code ParsingError = Input.error();
       if (ParsingError) {
         std::cout << "Error during JSON parse: " << ParsingError.message();
-        return llvm::ErrorOr<CompilerInvocationConfiguration>(std::error_code(1, std::generic_category()));
-      }
-      
-      StringRef ModuleName = filesJson.module.name;
-      
-      StringRef SdkPath = filesJson.sdk.path;
-      
-      std::vector<std::string> InputFilenames = filesJson.filenames;
-      std::vector<SearchPathOptions::FrameworkSearchPath> Paths;
-      for (auto Framework : filesJson.explicitelyLinkedFrameworks) {
-        Paths.push_back(SearchPathOptions::FrameworkSearchPath(Framework.path, false));
+        return llvm::ErrorOr<T>(std::error_code(1, std::generic_category()));
       }
       
-      return llvm::ErrorOr<CompilerInvocationConfiguration>(CompilerInvocationConfiguration(ModuleName, MainExecutablePath, SdkPath, InputFilenames, Paths));
+      return llvm::ErrorOr<T>(json);
     }
     
+    template llvm::ErrorOr<FilesJson> parseJson(std::string);
     
-    int writeSymbolsToFile(SymbolsJson Symbols, std::string PathToOutput) {
+    template llvm::ErrorOr<SymbolsJson> parseJson(std::string);
+    
+    template llvm::ErrorOr<RenamesJson> parseJson(std::string);
+
+    template<class T>
+    int writeSymbolsToFile(T Symbols, std::string PathToOutput) {
       
       std::string outputStr;
       llvm::raw_string_ostream rso(outputStr);
@@ -63,5 +60,9 @@ namespace swift {
       return 0;
     }
     
+    template int writeSymbolsToFile(SymbolsJson Symbols, std::string PathToOutput);
+    
+    template int writeSymbolsToFile(RenamesJson Symbols, std::string PathToOutput);
+    
   } //namespace obfuscation
 } //namespace swift
diff --git a/swift/lib/Obfuscation/NameMapping.cpp b/swift/lib/Obfuscation/NameMapping.cpp
new file mode 100644
index 00000000000..10efca21acf
--- /dev/null
+++ b/swift/lib/Obfuscation/NameMapping.cpp
@@ -0,0 +1,76 @@
+#include "swift/Obfuscation/NameMapping.h"
+#include "swift/Obfuscation/Random.h"
+#include <stdio.h>
+
+namespace swift {
+  
+  namespace obfuscation {
+    
+    class UniqueTypeNameGenerator {
+      
+    private:
+      std::set<std::string> generatedSymbols;
+      const std::vector<std::string> headSymbols = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};
+      std::vector<std::string> tailSymbols;
+      RandomElementChooser<std::string>* headGenerator;
+      RandomStringGenerator* tailGenerator;
+      const size_t identifierLength = 32;
+      
+      llvm::ErrorOr<std::string> generateName(int numbersOfTriesLeft) {
+        if (numbersOfTriesLeft <= 0) {
+          return llvm::ErrorOr<std::string>(std::error_code(1, std::generic_category()));
+        }
+        auto head = headGenerator->rand();
+        auto tail = tailGenerator->rand(identifierLength - 1);
+        auto name = head + tail;
+        
+        if (generatedSymbols.insert(name).second) {
+          return name;
+        } else {
+          return this->generateName(numbersOfTriesLeft - 1);
+        }
+      }
+      
+    public:
+      
+      UniqueTypeNameGenerator() {
+        tailSymbols = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
+        tailSymbols.insert(tailSymbols.end(), headSymbols.begin(), headSymbols.end());
+        headGenerator = new RandomElementChooser<std::string>(headSymbols);
+        tailGenerator = new RandomStringGenerator(tailSymbols);
+      }
+      
+      
+      llvm::ErrorOr<std::string> generateName() {
+        return generateName(100);
+      }
+      
+    };
+    
+    llvm::ErrorOr<RenamesJson> proposeRenamings(SymbolsJson symbolsJson) {
+      
+      auto typeNameGenerator = new UniqueTypeNameGenerator();
+      
+      std::vector<SymbolRenaming> Symbols;
+      
+      for (std::size_t i = 0; i < symbolsJson.symbols.size(); ++i) {
+        auto Symbol = symbolsJson.symbols.at(i);
+        auto Renaming = SymbolRenaming();
+        Renaming.identifier = Symbol.identifier;
+        Renaming.originalName = Symbol.name;
+        auto NameOrError = typeNameGenerator->generateName();
+        if (std::error_code ec = NameOrError.getError()) {
+          return llvm::ErrorOr<RenamesJson>(ec);
+        }
+        Renaming.obfuscatedName = NameOrError.get();
+        Symbols.push_back(Renaming);
+      }
+      
+      RenamesJson renamesJson = RenamesJson();
+      renamesJson.symbols = Symbols;
+      return renamesJson;
+    }
+    
+  } //namespace obfuscation
+  
+} //namespace swift
diff --git a/swift/lib/Obfuscation/Obfuscation.cpp b/swift/lib/Obfuscation/Obfuscation.cpp
index 357eea278ec..1eaea160b8f 100644
--- a/swift/lib/Obfuscation/Obfuscation.cpp
+++ b/swift/lib/Obfuscation/Obfuscation.cpp
@@ -42,7 +42,7 @@ namespace swift {
         }
         
         auto SymbolStruct = Symbol();
-        SymbolStruct.symbol = StringParts;
+        SymbolStruct.identifier = StringParts;
         SymbolStruct.name = SymbolName;
         return SymbolStruct;
       }
@@ -92,13 +92,28 @@ namespace swift {
       return Collector.Bucket;
     }
     
+    CompilerInvocationConfiguration createCompilerInvocationConfiguration(FilesJson filesJson, std::string MainExecutablePath) {
+      
+      StringRef ModuleName = filesJson.module.name;
+      
+      StringRef SdkPath = filesJson.sdk.path;
+      
+      std::vector<std::string> InputFilenames = filesJson.filenames;
+      std::vector<SearchPathOptions::FrameworkSearchPath> Paths;
+      for (auto Framework : filesJson.explicitelyLinkedFrameworks) {
+        Paths.push_back(SearchPathOptions::FrameworkSearchPath(Framework.path, false));
+      }
+      
+      return CompilerInvocationConfiguration(ModuleName, MainExecutablePath, SdkPath, InputFilenames, Paths);
+    }
+    
     llvm::ErrorOr<SymbolsJson> extractSymbols(CompilerInvocationConfiguration Configuration) {
       auto Invocation = createInvocation(Configuration);
       CompilerInstance CI;
       PrintingDiagnosticConsumer PrintDiags;
       CI.addDiagnosticConsumer(&PrintDiags);
       if (CI.setup(Invocation)) {
-        return llvm::ErrorOr<std::vector<Symbol>>(std::error_code(1, std::generic_category()));
+        return llvm::ErrorOr<SymbolsJson>(std::error_code(1, std::generic_category()));
       }
       CI.performSema();
       
@@ -111,10 +126,13 @@ namespace swift {
           std::copy(CurrentSymbols.begin(), CurrentSymbols.end(), std::back_inserter(Symbols));
         }
       }
-      SymbolsJson Json = SymbolsJson(Symbols);
+      SymbolsJson Json = SymbolsJson();
+      Json.symbols = Symbols;
       return llvm::ErrorOr<SymbolsJson>(Json);
     }
     
+
+    
   } //namespace obfuscation
   
 } //namespace swift
diff --git a/swift/lib/Obfuscation/Random.cpp b/swift/lib/Obfuscation/Random.cpp
new file mode 100644
index 00000000000..98edf4a6775
--- /dev/null
+++ b/swift/lib/Obfuscation/Random.cpp
@@ -0,0 +1,38 @@
+#include "swift/Obfuscation/Random.h"
+#include <stdio.h>
+#include <random>
+
+namespace swift {
+  
+  namespace obfuscation {
+    
+    size_t RandomIntegerGenerator::rand() {
+      return distribution(engine);
+    }
+    
+    template<typename T>
+    T RandomElementChooser<T>::rand() {
+      return list.at(generator->rand());
+    }
+    
+    template<typename T>
+    std::vector<T> RandomVectorGenerator<T>::rand(size_t length) {
+      std::vector<T> result;
+      for (size_t i = 0; i < length; i++) {
+        result.push_back(chooser->rand());
+      }
+      return result;
+    }
+    
+    std::string RandomStringGenerator::rand(size_t length) {
+      auto vector = generator->rand(length);
+      std::string result;
+      for (auto const& elem : vector) {
+        result += elem;
+      }
+      return result;
+    }
+    
+  } //namespace obfuscation
+  
+} //namespace swift
diff --git a/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp b/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
index 8671a5841c3..f6436986b59 100644
--- a/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
+++ b/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
@@ -1,7 +1,55 @@
+#include "swift/Basic/LLVMInitialize.h"
+#include "llvm/Support/CommandLine.h"
+
+#include "swift/Obfuscation/Obfuscation.h"
+#include "swift/Obfuscation/NameMapping.h"
+#include "swift/Obfuscation/FileIO.h"
 #include <iostream>
 
+using namespace swift;
+using namespace swift::obfuscation;
+
+namespace options {
+  static llvm::cl::opt<std::string>
+  SymbolsJsonPath("symbolsjson", llvm::cl::desc("Name of the file containing extracted symbols"));
+  
+  static llvm::cl::opt<std::string>
+  RenamesJsonPath("renamesjson", llvm::cl::desc("Name of the output file to write extracted symbols with proposed renamings"));
+}
+
+void printRenamings(std::vector<SymbolRenaming> Renamings) {
+  for (auto Renaming : Renamings) {
+    std::cout << "identifier: " << Renaming.identifier << "\n" << "originalName: " << Renaming.originalName << "\n" << "obfuscatedName: " << Renaming.obfuscatedName << "\n";
+  }
+}
+
 int main(int argc, char *argv[]) {
+  INITIALIZE_LLVM(argc, argv);
   std::cout << "Swift obfuscator name mapper tool\n";
+  
+  llvm::cl::ParseCommandLineOptions(argc, argv, "obfuscator-name-mapper\n");
+  
+  if (options::SymbolsJsonPath.empty()) {
+    llvm::errs() << "cannot find Symbols json file\n";
+    return 1;
+  }
+  
+  std::string PathToJson = options::SymbolsJsonPath;
+  llvm::ErrorOr<SymbolsJson> SymbolsJsonOrErr = parseJson<SymbolsJson>(PathToJson);
+  if (std::error_code ec = SymbolsJsonOrErr.getError()) {
+    return ec.value();
+  }
+  
+  auto RenamingsOrError = proposeRenamings(SymbolsJsonOrErr.get());
+  if (std::error_code ec = RenamingsOrError.getError()) {
+    return ec.value();
+  }
+  auto Renamings = RenamingsOrError.get();
+  
+  printRenamings(Renamings.symbols);
+  
+  std::string PathToOutput = options::RenamesJsonPath;
+  writeSymbolsToFile(Renamings, PathToOutput);
   return 0;
 }
 
diff --git a/swift/tools/obfuscator-renamer/CMakeLists.txt b/swift/tools/obfuscator-renamer/CMakeLists.txt
index f26e1a7749e..42e3de90495 100644
--- a/swift/tools/obfuscator-renamer/CMakeLists.txt
+++ b/swift/tools/obfuscator-renamer/CMakeLists.txt
@@ -1,8 +1,6 @@
 add_swift_host_tool(obfuscator-renamer
   obfuscator-renamer.cpp
   LINK_LIBRARIES
-  swiftDriver
-  swiftFrontend
   swiftObfuscation
   LLVM_COMPONENT_DEPENDS
   Support
diff --git a/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp b/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
index c8bbb7f63c4..0bda11b0f68 100644
--- a/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
+++ b/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
@@ -1,3 +1,6 @@
+#include "swift/Basic/LLVMInitialize.h"
+#include "llvm/Support/CommandLine.h"
+
 #include <iostream>
 
 int main(int argc, char *argv[]) {
diff --git a/swift/tools/obfuscator-symbol-extractor/CMakeLists.txt b/swift/tools/obfuscator-symbol-extractor/CMakeLists.txt
index b28578c5625..c36015c4257 100644
--- a/swift/tools/obfuscator-symbol-extractor/CMakeLists.txt
+++ b/swift/tools/obfuscator-symbol-extractor/CMakeLists.txt
@@ -1,8 +1,6 @@
 add_swift_host_tool(obfuscator-symbol-extractor
   obfuscator-symbol-extractor.cpp
   LINK_LIBRARIES 
-  swiftDriver 
-  swiftFrontend
   swiftObfuscation
   LLVM_COMPONENT_DEPENDS
   Support
diff --git a/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp b/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
index 4b4cb8c7459..04065551ce5 100644
--- a/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
+++ b/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
@@ -1,6 +1,6 @@
 #include "swift/Basic/LLVMInitialize.h"
-#include "llvm/Support/FileSystem.h"
-#include "swift/AST/Decl.h"
+#include "llvm/Support/CommandLine.h"
+
 #include "swift/Obfuscation/Obfuscation.h"
 #include "swift/Obfuscation/FileIO.h"
 
@@ -19,7 +19,7 @@ namespace options {
 
 void printSymbols(std::vector<Symbol> Symbols) {
   for (auto Symbol : Symbols) {
-    std::cout << "symbol: " << Symbol.symbol << "\n" << "name: " << Symbol.name << "\n";
+    std::cout << "identifier: " << Symbol.identifier << "\n" << "name: " << Symbol.name << "\n";
   }
 }
 
@@ -44,11 +44,13 @@ int main(int argc, char *argv[]) {
   std::string PathToJson = options::FilesJsonPath;
   std::string MainExecutablePath = llvm::sys::fs::getMainExecutable(argv[0],
                                                                     reinterpret_cast<void *>(&anchorForGetMainExecutable));
-  llvm::ErrorOr<CompilerInvocationConfiguration> ConfigurationOrError = parseFilesJson(PathToJson, MainExecutablePath);
-  if (std::error_code ec = ConfigurationOrError.getError()) {
+  llvm::ErrorOr<FilesJson> FilesJsonOrErr = parseJson<FilesJson>(PathToJson);
+  if (std::error_code ec = FilesJsonOrErr.getError()) {
     return ec.value();
   }
-  llvm::ErrorOr<SymbolsJson> SymbolsOrError = extractSymbols(ConfigurationOrError.get());
+  auto compilerInvocation = createCompilerInvocationConfiguration(FilesJsonOrErr.get(), MainExecutablePath);
+  
+  llvm::ErrorOr<SymbolsJson> SymbolsOrError = extractSymbols(compilerInvocation);
   if (std::error_code ec = SymbolsOrError.getError()) {
     return ec.value();
   }
-- 
2.17.1 (Apple Git-112)


From 33f0cef199024a7a1d84087abc49726042d10a63 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Mon, 8 Jan 2018 16:49:13 +0100
Subject: [PATCH 016/138] POC of renaming and project cleanup

Reviewers: jakub.sowa, jerzy.kleszcz

Reviewed By: jakub.sowa, jerzy.kleszcz

Subscribers: jakub.sowa, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2739
---
 README.md                                     |   3 +-
 .../Obfuscation/CompilerInfrastructure.h      |  21 ++
 .../swift/Obfuscation/DataStructures.h        | 245 +++++++++---------
 swift/include/swift/Obfuscation/FileIO.h      |  23 +-
 swift/include/swift/Obfuscation/NameMapping.h |  12 +-
 swift/include/swift/Obfuscation/Obfuscation.h |  32 ---
 swift/include/swift/Obfuscation/Random.h      | 145 ++++++-----
 swift/include/swift/Obfuscation/Renaming.h    |  25 ++
 .../swift/Obfuscation/SymbolExtracting.h      |  19 ++
 .../swift/Obfuscation/SymbolProvider.h        |  28 ++
 swift/lib/Obfuscation/CMakeLists.txt          |   7 +-
 .../Obfuscation/CompilerInfrastructure.cpp    |  67 +++++
 swift/lib/Obfuscation/DataStructures.cpp      | 180 ++++++-------
 swift/lib/Obfuscation/FileIO.cpp              | 126 ++++-----
 swift/lib/Obfuscation/NameMapping.cpp         | 142 +++++-----
 swift/lib/Obfuscation/Obfuscation.cpp         | 138 ----------
 swift/lib/Obfuscation/Random.cpp              |  73 +++---
 swift/lib/Obfuscation/Renaming.cpp            | 105 ++++++++
 swift/lib/Obfuscation/SymbolExtracting.cpp    |  45 ++++
 swift/lib/Obfuscation/SymbolProvider.cpp      | 102 ++++++++
 .../obfuscator-name-mapper.cpp                |  63 +++--
 .../obfuscator-renamer/obfuscator-renamer.cpp |  87 ++++++-
 .../obfuscator-symbol-extractor.cpp           |  68 +++--
 23 files changed, 1077 insertions(+), 679 deletions(-)
 create mode 100644 swift/include/swift/Obfuscation/CompilerInfrastructure.h
 delete mode 100644 swift/include/swift/Obfuscation/Obfuscation.h
 create mode 100644 swift/include/swift/Obfuscation/Renaming.h
 create mode 100644 swift/include/swift/Obfuscation/SymbolExtracting.h
 create mode 100644 swift/include/swift/Obfuscation/SymbolProvider.h
 create mode 100644 swift/lib/Obfuscation/CompilerInfrastructure.cpp
 delete mode 100644 swift/lib/Obfuscation/Obfuscation.cpp
 create mode 100644 swift/lib/Obfuscation/Renaming.cpp
 create mode 100644 swift/lib/Obfuscation/SymbolExtracting.cpp
 create mode 100644 swift/lib/Obfuscation/SymbolProvider.cpp

diff --git a/README.md b/README.md
index 6ddab861e16..bb7b4695127 100644
--- a/README.md
+++ b/README.md
@@ -25,7 +25,7 @@ It performs the analysis of Swift source code files and identifies the symbols t
 ## Usage
 
 ```bash
-$ obfuscator-symbol-extractor -filejson <path-to-input-files-json> -symbolsjson <path-to-output-symbols-json>
+$ obfuscator-symbol-extractor -filesjson <path-to-input-files-json> -symbolsjson <path-to-output-symbols-json>
 ```
 
 where 
@@ -174,4 +174,3 @@ In the alphabetical order:
 * [Jerzy Kleszcz](mailto:jerzy.kleszcz@polidea.com)
 * [Krzysztof Siejkowski](krzysztof.siejkowski@polidea.com)
 
-
diff --git a/swift/include/swift/Obfuscation/CompilerInfrastructure.h b/swift/include/swift/Obfuscation/CompilerInfrastructure.h
new file mode 100644
index 00000000000..1d2c1419015
--- /dev/null
+++ b/swift/include/swift/Obfuscation/CompilerInfrastructure.h
@@ -0,0 +1,21 @@
+#ifndef CompilerInfrastructure_h
+#define CompilerInfrastructure_h
+
+#include "llvm/Support/Error.h"
+#include "swift/Frontend/Frontend.h"
+#include "swift/Obfuscation/DataStructures.h"
+
+#include <string>
+
+namespace swift {
+namespace obfuscation {
+
+llvm::Error
+setupCompilerInstance(CompilerInstance &CompilerInstance,
+                      const FilesJson &FilesJson,
+                      std::string MainExecutablePath);
+  
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* CompilerInfrastructure_h */
diff --git a/swift/include/swift/Obfuscation/DataStructures.h b/swift/include/swift/Obfuscation/DataStructures.h
index c063b014ad1..f2d5fe4cf9a 100644
--- a/swift/include/swift/Obfuscation/DataStructures.h
+++ b/swift/include/swift/Obfuscation/DataStructures.h
@@ -1,60 +1,61 @@
 #ifndef DataStructures_h
 #define DataStructures_h
 
-#include "swift/Frontend/Frontend.h"
 #include "llvm/Support/YAMLTraits.h"
-#include "llvm/Support/YAMLParser.h"
 #include "swift/Basic/JSONSerialization.h"
 
+#include <vector>
+#include <string>
+
 namespace swift {
-  namespace obfuscation {
-
-    struct Module {
-      std::string name;
-    };
-    
-    struct Sdk {
-      std::string name;
-      std::string path;
-    };
-    
-    struct ExplicitelyLinkedFrameworks {
-      std::string name;
-      std::string path;
-    };
-    
-    struct FilesJson {
-      Module module;
-      Sdk sdk;
-      std::vector<std::string> filenames;
-      std::vector<std::string> systemLinkedFrameworks;
-      std::vector<ExplicitelyLinkedFrameworks> explicitelyLinkedFrameworks;
-    };
-    
-    struct Symbol {
-      std::string identifier;
-      std::string name;
-      
-      bool operator< (const Symbol &right) const;
-    };
-    
-    struct SymbolsJson {
-      std::vector<Symbol> symbols;
-    };
-    
-    struct SymbolRenaming {
-      std::string identifier;
-      std::string originalName;
-      std::string obfuscatedName;
-      
-      bool operator< (const SymbolRenaming &right) const;
-    };
-    
-    struct RenamesJson {
-      std::vector<SymbolRenaming> symbols;
-    };
-    
-  } //namespace obfuscation
+namespace obfuscation {
+
+struct Module {
+  std::string Name;
+};
+
+struct Sdk {
+  std::string Name;
+  std::string Path;
+};
+
+struct ExplicitelyLinkedFrameworks {
+  std::string Name;
+  std::string Path;
+};
+
+struct FilesJson {
+  Module Module;
+  Sdk Sdk;
+  std::vector<std::string> Filenames;
+  std::vector<std::string> SystemLinkedFrameworks;
+  std::vector<ExplicitelyLinkedFrameworks> ExplicitelyLinkedFrameworks;
+};
+
+struct Symbol {
+  std::string Identifier;
+  std::string Name;
+  
+  bool operator< (const Symbol &Right) const;
+};
+
+struct SymbolsJson {
+  std::vector<Symbol> Symbols;
+};
+
+struct SymbolRenaming {
+  std::string Identifier;
+  std::string OriginalName;
+  std::string ObfuscatedName;
+  
+  bool operator< (const SymbolRenaming &Right) const;
+};
+
+struct RenamesJson {
+  std::vector<SymbolRenaming> Symbols;
+};
+
+} //namespace obfuscation
 } //namespace swift
 
 using namespace swift::obfuscation;
@@ -62,83 +63,83 @@ using namespace swift::obfuscation;
 // MARK: - Deserialization
 
 namespace llvm {
-  namespace yaml {
-    
-    template <>
-    struct MappingTraits<FilesJson> {
-      static void mapping(IO &io, FilesJson &info);
-    };
-    
-    template <>
-    struct MappingTraits<swift::obfuscation::Module> {
-      static void mapping(IO &io, swift::obfuscation::Module &info);
-    };
-    
-    template <>
-    struct MappingTraits<Sdk> {
-      static void mapping(IO &io, Sdk &info);
-    };
-    
-    template <>
-    struct MappingTraits<ExplicitelyLinkedFrameworks> {
-      static void mapping(IO &io, ExplicitelyLinkedFrameworks &info);
-    };
-    
-    template <>
-    struct MappingTraits<SymbolsJson> {
-      static void mapping(IO &io, SymbolsJson &info);
-    };
-    
-    template <>
-    struct MappingTraits<Symbol> {
-      static void mapping(IO &io, Symbol &info);
-    };
-    
-    template <>
-    struct MappingTraits<RenamesJson> {
-      static void mapping(IO &io, RenamesJson &info);
-    };
-    
-    template <>
-    struct MappingTraits<SymbolRenaming> {
-      static void mapping(IO &io, SymbolRenaming &info);
-    };
-    
-    template <typename U>
-    struct SequenceTraits<std::vector<U>> {
-      static size_t size(IO &Io, std::vector<U> &Vec);
-      static U& element(IO &Io, std::vector<U> &Vec, size_t Index);
-    };
-    
-  } // namespace yaml
+namespace yaml {
+
+template <>
+struct MappingTraits<FilesJson> {
+  static void mapping(IO &Io, FilesJson &Object);
+};
+
+template <>
+struct MappingTraits<swift::obfuscation::Module> {
+  static void mapping(IO &Io, swift::obfuscation::Module &Object);
+};
+
+template <>
+struct MappingTraits<Sdk> {
+  static void mapping(IO &Io, Sdk &Object);
+};
+
+template <>
+struct MappingTraits<ExplicitelyLinkedFrameworks> {
+  static void mapping(IO &Io, ExplicitelyLinkedFrameworks &Object);
+};
+
+template <>
+struct MappingTraits<SymbolsJson> {
+  static void mapping(IO &Io, SymbolsJson &Object);
+};
+
+template <>
+struct MappingTraits<Symbol> {
+  static void mapping(IO &Io, Symbol &Object);
+};
+
+template <>
+struct MappingTraits<RenamesJson> {
+  static void mapping(IO &Io, RenamesJson &Object);
+};
+
+template <>
+struct MappingTraits<SymbolRenaming> {
+  static void mapping(IO &Io, SymbolRenaming &Object);
+};
+
+template <typename U>
+struct SequenceTraits<std::vector<U>> {
+  static size_t size(IO &Io, std::vector<U> &Vec);
+  static U &element(IO &Io, std::vector<U> &Vec, size_t Index);
+};
+
+} // namespace yaml
 } // namespace llvm
 
 // MARK: - Serialization
 
 namespace swift {
-  namespace json  {
-    
-    template <>
-    struct ObjectTraits<SymbolsJson> {
-      static void mapping(Output &out, SymbolsJson &s);
-    };
-    
-    template <>
-    struct ObjectTraits<Symbol> {
-      static void mapping(Output &out, Symbol &s);
-    };
-    
-    template <>
-    struct ObjectTraits<RenamesJson> {
-      static void mapping(Output &out, RenamesJson &s);
-    };
-    
-    template <>
-    struct ObjectTraits<SymbolRenaming> {
-      static void mapping(Output &out, SymbolRenaming &s);
-    };
-    
-  } // namespace json
+namespace json  {
+
+template <>
+struct ObjectTraits<SymbolsJson> {
+  static void mapping(Output &Out, SymbolsJson &Object);
+};
+
+template <>
+struct ObjectTraits<Symbol> {
+  static void mapping(Output &Out, Symbol &Object);
+};
+
+template <>
+struct ObjectTraits<RenamesJson> {
+  static void mapping(Output &Out, RenamesJson &Object);
+};
+
+template <>
+struct ObjectTraits<SymbolRenaming> {
+  static void mapping(Output &Out, SymbolRenaming &Object);
+};
+
+} // namespace json
 } // namespace swift
 
 #endif /* DataStructures_h */
diff --git a/swift/include/swift/Obfuscation/FileIO.h b/swift/include/swift/Obfuscation/FileIO.h
index 57c59d33d04..705c99bbff0 100644
--- a/swift/include/swift/Obfuscation/FileIO.h
+++ b/swift/include/swift/Obfuscation/FileIO.h
@@ -1,19 +1,22 @@
 #ifndef FileIO_h
 #define FileIO_h
 
-#include "swift/Frontend/Frontend.h"
-#include "swift/Obfuscation/Obfuscation.h"
+#include "llvm/Support/Error.h"
+
+#include <string>
 
 namespace swift {
-  namespace obfuscation {
-    
-    template<class T>
-    llvm::ErrorOr<T> parseJson(std::string PathToJson);
+namespace obfuscation {
+
+template<typename T>
+llvm::Expected<T> parseJson(std::string PathToJson);
+
+template<typename T>
+llvm::Error writeToFile(T &Object,
+                        std::string PathToOutput,
+                        llvm::raw_ostream &LogStream);
 
-    template<class T>
-    int writeSymbolsToFile(T Symbols, std::string PathToOutput);
-    
-  } //namespace obfuscation
+} //namespace obfuscation
 } //namespace swift
 
 #endif /* FileIO_h */
diff --git a/swift/include/swift/Obfuscation/NameMapping.h b/swift/include/swift/Obfuscation/NameMapping.h
index fb38defc78e..1635b168969 100644
--- a/swift/include/swift/Obfuscation/NameMapping.h
+++ b/swift/include/swift/Obfuscation/NameMapping.h
@@ -3,13 +3,15 @@
 
 #include "swift/Obfuscation/DataStructures.h"
 
+#include "llvm/Support/Error.h"
+
 namespace swift {
-  namespace obfuscation {
-    
-    llvm::ErrorOr<RenamesJson> proposeRenamings(SymbolsJson symbolsJson);
+namespace obfuscation {
+
+llvm::Expected<RenamesJson> proposeRenamings(const SymbolsJson &SymbolsJson);
+
+} //namespace obfuscation
 
-  } //namespace obfuscation
-  
 } //namespace swift
 
 #endif /* NameMapping_h */
diff --git a/swift/include/swift/Obfuscation/Obfuscation.h b/swift/include/swift/Obfuscation/Obfuscation.h
deleted file mode 100644
index ea26042ade8..00000000000
--- a/swift/include/swift/Obfuscation/Obfuscation.h
+++ /dev/null
@@ -1,32 +0,0 @@
-#ifndef Obfuscation_h
-#define Obfuscation_h
-
-#include "swift/Frontend/Frontend.h"
-#include "swift/Obfuscation/DataStructures.h"
-
-namespace swift {
-  
-  namespace obfuscation {
-    
-    struct CompilerInvocationConfiguration {
-      std::string ModuleName;
-      std::string MainExecutablePath;
-      std::string SdkPath;
-      std::vector<std::string> InputFilenames;
-      std::vector<SearchPathOptions::FrameworkSearchPath> Paths;
-      
-      CompilerInvocationConfiguration(std::string ModuleName, std::string MainExecutablePath, std::string SdkPath, std::vector<std::string> InputFilenames, std::vector<SearchPathOptions::FrameworkSearchPath> Paths)
-      : ModuleName(ModuleName), MainExecutablePath(MainExecutablePath), SdkPath(SdkPath), InputFilenames(InputFilenames), Paths(Paths) { }
-    };
-    
-    CompilerInvocationConfiguration createCompilerInvocationConfiguration(FilesJson filesJson, std::string MainExecutablePath);
-    
-    CompilerInvocation createInvocation(CompilerInvocationConfiguration Configuration);
-    
-    llvm::ErrorOr<SymbolsJson> extractSymbols(CompilerInvocationConfiguration Configuration);
-    
-  } //namespace obfuscation
-  
-} //namespace swift
-
-#endif /* Obfuscation_h */
diff --git a/swift/include/swift/Obfuscation/Random.h b/swift/include/swift/Obfuscation/Random.h
index c3611366c47..4a2f92813a9 100644
--- a/swift/include/swift/Obfuscation/Random.h
+++ b/swift/include/swift/Obfuscation/Random.h
@@ -1,83 +1,92 @@
 #ifndef Random_h
 #define Random_h
 
-#include <stdio.h>
+#include <vector>
+#include <string>
 #include <random>
 
 namespace swift {
+namespace obfuscation {
+
+class RandomIntegerGenerator {
+  
+private:
+  
+  std::random_device RandomDevice;
+  std::mt19937 Engine;
+  std::uniform_int_distribution<int> Distribution;
+  
+public:
+  
+  RandomIntegerGenerator(int Min, int Max)
+  : RandomDevice(),
+  Engine(RandomDevice()),
+  Distribution(std::uniform_int_distribution<int>(Min, Max)) {}
+  
+  int rand();
+
+};
+
+template<typename T>
+class RandomElementChooser {
+  
+private:
+  
+  RandomIntegerGenerator* Generator;
+  std::vector<T> List;
+  
+public:
   
-  namespace obfuscation {
-    
-    class RandomIntegerGenerator {
-      
-    private:
-      
-      std::random_device rd;
-      std::mt19937 engine;
-      std::uniform_int_distribution<size_t> distribution;
-      
-    public:
-      
-      RandomIntegerGenerator(size_t min, size_t max) :
-      rd(),
-      engine(rd()),
-      distribution(std::uniform_int_distribution<size_t>(min, max)) {}
-      
-      size_t rand();
+  RandomElementChooser(const std::vector<T> &ListToChooseFrom) :
+  Generator(new RandomIntegerGenerator(0, ListToChooseFrom.size() - 1)),
+  List(ListToChooseFrom) {}
+  
+  T rand() const;
+  
+  ~RandomElementChooser();
 
-    };
-    
-    template<typename T>
-    class RandomElementChooser {
-      
-    private:
-      
-      RandomIntegerGenerator* generator;
-      std::vector<T> list;
-      
-    public:
-      
-      RandomElementChooser(std::vector<T> listToChooseFrom) :
-      generator(new RandomIntegerGenerator(0, listToChooseFrom.size() - 1)),
-      list(listToChooseFrom) {}
-      
-      T rand();
+};
 
-    };
-    
-    template<typename T>
-    class RandomVectorGenerator {
-      
-    private:
-      
-      RandomElementChooser<T>* chooser;
-      
-    public:
-      
-      RandomVectorGenerator(std::vector<T> listToChooseFrom) :
-      chooser(new RandomElementChooser<T>(listToChooseFrom)) {}
-      
-      std::vector<T> rand(size_t length);
+template<typename T>
+class RandomVectorGenerator {
+  
+private:
+  
+  RandomElementChooser<T>* Chooser;
+  
+public:
+  
+  RandomVectorGenerator(const std::vector<T> &ListToChooseFrom) :
+  Chooser(new RandomElementChooser<T>(ListToChooseFrom)) {}
+  
+  typedef typename std::vector<T>::size_type size_type;
+  
+  std::vector<T> rand(size_type Length) const;
+  
+  ~RandomVectorGenerator();
 
-    };
-    
-    class RandomStringGenerator {
-      
-    private:
-      
-      RandomVectorGenerator<std::string>* generator;
-      
-    public:
-      
-      RandomStringGenerator(std::vector<std::string> listToChooseFrom) :
-      generator(new RandomVectorGenerator<std::string>(listToChooseFrom)) {}
-      
-      std::string rand(size_t length);
+};
 
-    };
-    
-  } //namespace obfuscation
+class RandomStringGenerator {
+  
+private:
   
+  RandomVectorGenerator<std::string>* Generator;
+  
+public:
+  
+  typedef std::vector<std::string>::size_type size_type;
+  
+  RandomStringGenerator(const std::vector<std::string> &ListToChooseFrom)
+  : Generator(new RandomVectorGenerator<std::string>(ListToChooseFrom)) {}
+  
+  std::string rand(size_type Length) const;
+  
+  ~RandomStringGenerator();
+
+};
+
+} //namespace obfuscation
 } //namespace swift
 
 #endif /* Random_h */
diff --git a/swift/include/swift/Obfuscation/Renaming.h b/swift/include/swift/Obfuscation/Renaming.h
new file mode 100644
index 00000000000..a9cc7a31b37
--- /dev/null
+++ b/swift/include/swift/Obfuscation/Renaming.h
@@ -0,0 +1,25 @@
+#ifndef Renaming_h
+#define Renaming_h
+
+#include "swift/Obfuscation/DataStructures.h"
+
+#include "llvm/Support/Error.h"
+
+#include <vector>
+#include <string>
+#include <utility>
+
+namespace swift {
+namespace obfuscation {
+
+typedef std::vector<std::pair<std::string, std::string>> FilesList;
+
+llvm::Expected<FilesList> performRenaming(std::string MainExecutablePath,
+                                          const FilesJson &FilesJson,
+                                          const RenamesJson &RenamesJson,
+                                          std::string ObfuscatedProjectPath);
+
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* Renaming_h */
diff --git a/swift/include/swift/Obfuscation/SymbolExtracting.h b/swift/include/swift/Obfuscation/SymbolExtracting.h
new file mode 100644
index 00000000000..567db4471c9
--- /dev/null
+++ b/swift/include/swift/Obfuscation/SymbolExtracting.h
@@ -0,0 +1,19 @@
+#ifndef SymbolExtracting_h
+#define SymbolExtracting_h
+
+#include "swift/Obfuscation/DataStructures.h"
+
+#include "llvm/Support/Error.h"
+
+#include <string>
+
+namespace swift {
+namespace obfuscation {
+
+llvm::Expected<SymbolsJson> extractSymbols(const FilesJson &FilesJson,
+                                           std::string MainExecutablePath);
+
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* SymbolExtracting_h */
diff --git a/swift/include/swift/Obfuscation/SymbolProvider.h b/swift/include/swift/Obfuscation/SymbolProvider.h
new file mode 100644
index 00000000000..b5e4bffb711
--- /dev/null
+++ b/swift/include/swift/Obfuscation/SymbolProvider.h
@@ -0,0 +1,28 @@
+#ifndef SymbolProvider_h
+#define SymbolProvider_h
+
+#include "swift/Frontend/Frontend.h"
+#include "swift/Obfuscation/DataStructures.h"
+
+#include <set>
+
+namespace swift {
+namespace obfuscation {
+
+struct SymbolWithRange {
+  Symbol Symbol;
+  CharSourceRange Range;
+  
+  SymbolWithRange(const swift::obfuscation::Symbol &Symbol,
+                  const CharSourceRange &Range)
+  : Symbol(Symbol), Range(Range) {}
+  
+  bool operator< (const SymbolWithRange &Right) const;
+};
+
+std::set<SymbolWithRange> findSymbolsWithRanges(SourceFile &SourceFile);
+
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* SymbolProvider_h */
diff --git a/swift/lib/Obfuscation/CMakeLists.txt b/swift/lib/Obfuscation/CMakeLists.txt
index d81c64b7d17..6ad819b8fdb 100644
--- a/swift/lib/Obfuscation/CMakeLists.txt
+++ b/swift/lib/Obfuscation/CMakeLists.txt
@@ -1,9 +1,12 @@
 add_swift_library(swiftObfuscation STATIC
-  Obfuscation.cpp
   DataStructures.cpp
   FileIO.cpp
-  Random.cpp
   NameMapping.cpp
+  Random.cpp
+  SymbolExtracting.cpp
+  Renaming.cpp
+  SymbolProvider.cpp
+  CompilerInfrastructure.cpp
   LINK_LIBRARIES
   swiftParse
   swiftAST
diff --git a/swift/lib/Obfuscation/CompilerInfrastructure.cpp b/swift/lib/Obfuscation/CompilerInfrastructure.cpp
new file mode 100644
index 00000000000..21d90c55f33
--- /dev/null
+++ b/swift/lib/Obfuscation/CompilerInfrastructure.cpp
@@ -0,0 +1,67 @@
+#include "swift/Obfuscation/CompilerInfrastructure.h"
+
+#include "swift/Frontend/PrintingDiagnosticConsumer.h"
+#include "llvm/Support/FileSystem.h"
+#include "llvm/Support/Path.h"
+
+#include <vector>
+
+namespace swift {
+namespace obfuscation {
+
+struct CompilerInvocationConfiguration {
+  std::string ModuleName;
+  std::string MainExecutablePath;
+  std::string SdkPath;
+  std::vector<std::string> InputFilenames;
+  std::vector<SearchPathOptions::FrameworkSearchPath> Paths;
+  
+  CompilerInvocationConfiguration(const FilesJson &FilesJson,
+                                  std::string MainExecutablePath)
+  : ModuleName(FilesJson.Module.Name),
+  MainExecutablePath(MainExecutablePath),
+  SdkPath(FilesJson.Sdk.Path),
+  InputFilenames(FilesJson.Filenames) {
+    std::vector<SearchPathOptions::FrameworkSearchPath> Paths;
+    for (const auto &Framework : FilesJson.ExplicitelyLinkedFrameworks) {
+      auto Path = SearchPathOptions::FrameworkSearchPath(Framework.Path,
+                                                         false);
+      Paths.push_back(Path);
+    }
+    this->Paths = Paths;
+  }
+};
+
+CompilerInvocation
+  createInvocation(const CompilerInvocationConfiguration &Configuration) {
+    CompilerInvocation Invocation;
+    Invocation.setModuleName(Configuration.ModuleName);
+    Invocation.setMainExecutablePath(Configuration.MainExecutablePath);
+    for (const auto &InputFilename : Configuration.InputFilenames) {
+      Invocation.addInputFilename(InputFilename);
+    }
+    Invocation.getLangOptions().AttachCommentsToDecls = true;
+    Invocation.setFrameworkSearchPaths(Configuration.Paths);
+    Invocation.setSDKPath(Configuration.SdkPath);
+    return Invocation;
+}
+
+llvm::Error
+setupCompilerInstance(CompilerInstance &CompilerInstance,
+                      const FilesJson &FilesJson,
+                      std::string MainExecutablePath) {
+  auto Configuration = CompilerInvocationConfiguration(FilesJson,
+                                                       MainExecutablePath);
+  auto Invocation = createInvocation(Configuration);
+  PrintingDiagnosticConsumer PrintDiags;
+  CompilerInstance.addDiagnosticConsumer(&PrintDiags);
+  if (CompilerInstance.setup(Invocation)) {
+    return llvm::make_error<llvm::StringError>("Error during JSON file read",
+                                               std::error_code(1, std::generic_category()));
+  }
+  CompilerInstance.performSema();
+  return llvm::Error::success();
+}
+
+} //namespace obfuscation
+} //namespace swift
diff --git a/swift/lib/Obfuscation/DataStructures.cpp b/swift/lib/Obfuscation/DataStructures.cpp
index 08d04a4f9e6..9cf402ca8a4 100644
--- a/swift/lib/Obfuscation/DataStructures.cpp
+++ b/swift/lib/Obfuscation/DataStructures.cpp
@@ -1,101 +1,105 @@
 #include "swift/Obfuscation/DataStructures.h"
-#include <stdio.h>
-#include "llvm/Support/YAMLTraits.h"
-#include "llvm/Support/YAMLParser.h"
-#include "llvm/Support/MemoryBuffer.h"
 
 using namespace swift::obfuscation;
 
 namespace swift {
-  namespace obfuscation {
-    
-    bool Symbol::operator< (const Symbol &right) const {
-      return (identifier < right.identifier);
-    }
-    
-  } //namespace obfuscation
+namespace obfuscation {
+
+bool Symbol::operator< (const Symbol &Right) const {
+  return Identifier < Right.Identifier;
+}
+
+} //namespace obfuscation
 } //namespace swift
 
 namespace llvm {
-  namespace yaml {
-    
-    void MappingTraits<FilesJson>::mapping(IO &io, FilesJson &info) {
-      io.mapRequired("module", info.module);
-      io.mapRequired("sdk", info.sdk);
-      io.mapRequired("filenames", info.filenames);
-      io.mapRequired("systemLinkedFrameworks", info.systemLinkedFrameworks);
-      io.mapRequired("explicitelyLinkedFrameworks", info.explicitelyLinkedFrameworks);
-    }
-   
-    void MappingTraits<swift::obfuscation::Module>::mapping(IO &io, swift::obfuscation::Module &info) {
-      io.mapRequired("name", info.name);
-    }
-    
-    void MappingTraits<Sdk>::mapping(IO &io, Sdk &info) {
-      io.mapRequired("name", info.name);
-      io.mapRequired("path", info.path);
-    }
-    
-    void MappingTraits<ExplicitelyLinkedFrameworks>::mapping(IO &io, ExplicitelyLinkedFrameworks &info) {
-      io.mapRequired("name", info.name);
-      io.mapRequired("path", info.path);
-    }
-    
-    void MappingTraits<SymbolsJson>::mapping(IO &io, SymbolsJson &info) {
-      io.mapRequired("symbols", info.symbols);
-    }
-    
-    void MappingTraits<Symbol>::mapping(IO &io, Symbol &info) {
-      io.mapRequired("identifier", info.identifier);
-      io.mapRequired("name", info.name);
-    }
-    
-    void MappingTraits<RenamesJson>::mapping(IO &io, RenamesJson &info) {
-      io.mapRequired("symbols", info.symbols);
-    }
-    
-    void MappingTraits<SymbolRenaming>::mapping(IO &io, SymbolRenaming &info) {
-      io.mapRequired("identifier", info.identifier);
-      io.mapRequired("originalName", info.originalName);
-      io.mapRequired("obfuscatedName", info.obfuscatedName);
-    }
-    
-    template <typename U> size_t SequenceTraits<std::vector<U>>::size(IO &Io, std::vector<U> &Vec) {
-      return Vec.size();
-    }
-    
-    template <typename U> U& SequenceTraits<std::vector<U>>::element(IO &Io, std::vector<U> &Vec, size_t Index) {
-      if (Vec.size() <= Index) {
-        Vec.resize(Index + 1);
-      }
-      return Vec[Index];
-    }
-    
-  } // namespace yaml
+namespace yaml {
+
+void MappingTraits<FilesJson>::mapping(IO &Io, FilesJson &Object) {
+  Io.mapRequired("module", Object.Module);
+  Io.mapRequired("sdk", Object.Sdk);
+  Io.mapRequired("filenames", Object.Filenames);
+  Io.mapRequired("systemLinkedFrameworks", Object.SystemLinkedFrameworks);
+  Io.mapRequired("explicitelyLinkedFrameworks",
+                 Object.ExplicitelyLinkedFrameworks);
+}
+
+typedef swift::obfuscation::Module ObfuscationModule;
+void MappingTraits<ObfuscationModule>::mapping(IO &Io,
+                                               ObfuscationModule &Object) {
+  Io.mapRequired("name", Object.Name);
+}
+
+void MappingTraits<Sdk>::mapping(IO &Io, Sdk &Object) {
+  Io.mapRequired("name", Object.Name);
+  Io.mapRequired("path", Object.Path);
+}
+
+typedef ExplicitelyLinkedFrameworks ELF;
+void MappingTraits<ELF>::mapping(IO &Io, ELF &Object) {
+  Io.mapRequired("name", Object.Name);
+  Io.mapRequired("path", Object.Path);
+}
+
+void MappingTraits<SymbolsJson>::mapping(IO &Io, SymbolsJson &Object) {
+  Io.mapRequired("symbols", Object.Symbols);
+}
+
+void MappingTraits<Symbol>::mapping(IO &Io, Symbol &Object) {
+  Io.mapRequired("identifier", Object.Identifier);
+  Io.mapRequired("name", Object.Name);
+}
+
+void MappingTraits<RenamesJson>::mapping(IO &Io, RenamesJson &Object) {
+  Io.mapRequired("symbols", Object.Symbols);
+}
+
+void MappingTraits<SymbolRenaming>::mapping(IO &Io, SymbolRenaming &Object) {
+  Io.mapRequired("identifier", Object.Identifier);
+  Io.mapRequired("originalName", Object.OriginalName);
+  Io.mapRequired("obfuscatedName", Object.ObfuscatedName);
+}
+
+template <typename U>
+size_t SequenceTraits<std::vector<U>>::size(IO &Io, std::vector<U> &Vec) {
+  return Vec.size();
+}
+
+template <typename U>
+U& SequenceTraits<std::vector<U>>::element(IO &Io,
+                                           std::vector<U> &Vec,
+                                           size_t Index) {
+  if (Vec.size() <= Index) {
+    Vec.resize(Index + 1);
+  }
+  return Vec[Index];
+}
+
+} // namespace yaml
 } // namespace llvm
 
 namespace swift {
-  namespace json {
-    
-    void ObjectTraits<SymbolsJson>::mapping(Output &out, SymbolsJson &s) {
-      out.mapRequired("symbols", s.symbols);
-    }
-    
-    void ObjectTraits<Symbol>::mapping(Output &out, Symbol &s) {
-      out.mapRequired("name", s.name);
-      out.mapRequired("identifier", s.identifier);
-    }
-    
-    void ObjectTraits<RenamesJson>::mapping(Output &out, RenamesJson &s) {
-      out.mapRequired("symbols", s.symbols);
-    }
-    
-    void ObjectTraits<SymbolRenaming>::mapping(Output &out, SymbolRenaming &s) {
-      out.mapRequired("identifier", s.identifier);
-      out.mapRequired("originalName", s.originalName);
-      out.mapRequired("obfuscatedName", s.obfuscatedName);
-    }
-    
-  } // namespace json
+namespace json {
+
+void ObjectTraits<SymbolsJson>::mapping(Output &Out, SymbolsJson &Object) {
+  Out.mapRequired("symbols", Object.Symbols);
+}
+
+void ObjectTraits<Symbol>::mapping(Output &Out, Symbol &Object) {
+  Out.mapRequired("name", Object.Name);
+  Out.mapRequired("identifier", Object.Identifier);
+}
+
+void ObjectTraits<RenamesJson>::mapping(Output &Out, RenamesJson &Object) {
+  Out.mapRequired("symbols", Object.Symbols);
+}
+
+void ObjectTraits<SymbolRenaming>::mapping(Output &Out, SymbolRenaming &Object) {
+  Out.mapRequired("identifier", Object.Identifier);
+  Out.mapRequired("originalName", Object.OriginalName);
+  Out.mapRequired("obfuscatedName", Object.ObfuscatedName);
+}
+
+} // namespace json
 } // namespace swift
 
diff --git a/swift/lib/Obfuscation/FileIO.cpp b/swift/lib/Obfuscation/FileIO.cpp
index 343a558a4c5..b0523c2eee8 100644
--- a/swift/lib/Obfuscation/FileIO.cpp
+++ b/swift/lib/Obfuscation/FileIO.cpp
@@ -1,68 +1,72 @@
 #include "swift/Obfuscation/FileIO.h"
-#include "llvm/Support/YAMLTraits.h"
-#include "llvm/Support/YAMLParser.h"
+#include "swift/Obfuscation/DataStructures.h"
+
+#include "llvm/Support/FileSystem.h"
 #include "llvm/Support/MemoryBuffer.h"
+#include "llvm/Support/YAMLParser.h"
 #include "swift/Basic/JSONSerialization.h"
-#include <stdio.h>
-#include <iostream>
-#include <fstream>
 
 namespace swift {
-  namespace obfuscation {
-        
-    template<class T>
-    llvm::ErrorOr<T> parseJson(std::string PathToJson) {
-      auto Buffer = llvm::MemoryBuffer::getFile(PathToJson);
-      if (auto ErrorCode = Buffer.getError()) {
-        std::cout << "Error during JSON file read: " << ErrorCode.message();
-        return llvm::ErrorOr<T>(std::error_code(1, std::generic_category()));
-      }
-      
-      llvm::yaml::Input Input(std::move(Buffer.get())->getBuffer());
-      T json;
-      Input >> json;
-      std::error_code ParsingError = Input.error();
-      if (ParsingError) {
-        std::cout << "Error during JSON parse: " << ParsingError.message();
-        return llvm::ErrorOr<T>(std::error_code(1, std::generic_category()));
-      }
-      
-      return llvm::ErrorOr<T>(json);
-    }
-    
-    template llvm::ErrorOr<FilesJson> parseJson(std::string);
-    
-    template llvm::ErrorOr<SymbolsJson> parseJson(std::string);
-    
-    template llvm::ErrorOr<RenamesJson> parseJson(std::string);
+namespace obfuscation {
+
+template<class T>
+llvm::Expected<T> parseJson(std::string PathToJson) {
+  auto Buffer = llvm::MemoryBuffer::getFile(PathToJson);
+  if (auto ErrorCode = Buffer.getError()) {
+    return llvm::make_error<llvm::StringError>("Error during JSON file read",
+                                               ErrorCode);
+  }
+  
+  llvm::yaml::Input Input(std::move(Buffer.get())->getBuffer());
+  T Json;
+  Input >> Json;
+  if (auto ErrorCode = Input.error()) {
+    return llvm::make_error<llvm::StringError>("Error during JSON parse:",
+                                               ErrorCode);
+  }
+  
+  return Json;
+}
+
+template llvm::Expected<FilesJson> parseJson(std::string);
+
+template llvm::Expected<SymbolsJson> parseJson(std::string);
+
+template llvm::Expected<RenamesJson> parseJson(std::string);
+
+template<class T>
+llvm::Error writeToFile(T &Object,
+                        std::string PathToOutput,
+                        llvm::raw_ostream &LogStream) {
+  
+  std::string OutputString;
+  llvm::raw_string_ostream OutputStringStream(OutputString);
+  swift::json::Output Output(OutputStringStream);
+  Output << Object;
+  // TODO: add serialization error handling
+  
+  std::error_code Error;
+  llvm::raw_fd_ostream File(PathToOutput, Error, llvm::sys::fs::F_None);
+  if (File.has_error() || Error) {
+    auto Message = "Failed to open file: " + PathToOutput;
+    return llvm::make_error<llvm::StringError>(Message, Error);
+  }
+  File << OutputStringStream.str();
+  File.close();
+  
+  LogStream << "Written to file: " << '\n'
+    << OutputStringStream.str() << '\n';
+  
+  return llvm::Error::success();
+}
+
+template llvm::Error writeToFile(SymbolsJson &,
+                                 std::string,
+                                 llvm::raw_ostream &);
+
+template llvm::Error writeToFile(RenamesJson &,
+                                 std::string,
+                                 llvm::raw_ostream &);
 
-    template<class T>
-    int writeSymbolsToFile(T Symbols, std::string PathToOutput) {
-      
-      std::string outputStr;
-      llvm::raw_string_ostream rso(outputStr);
-      swift::json::Output output(rso);
-      output << Symbols;
-      // TODO: add serialization error handling
-      
-      std::ofstream file;
-      file.open(PathToOutput);
-      if (file.fail()) {
-        file.close();
-        std::cout << "Failed to open file: " << PathToOutput << "\n";
-        return 1;
-      }
-      file << rso.str();
-      file.close();
-      
-      std::cout << "symbols.json:\n" << rso.str();
-      
-      return 0;
-    }
-    
-    template int writeSymbolsToFile(SymbolsJson Symbols, std::string PathToOutput);
-    
-    template int writeSymbolsToFile(RenamesJson Symbols, std::string PathToOutput);
-    
-  } //namespace obfuscation
+} //namespace obfuscation
 } //namespace swift
diff --git a/swift/lib/Obfuscation/NameMapping.cpp b/swift/lib/Obfuscation/NameMapping.cpp
index 10efca21acf..1a0ecbf5f90 100644
--- a/swift/lib/Obfuscation/NameMapping.cpp
+++ b/swift/lib/Obfuscation/NameMapping.cpp
@@ -1,76 +1,84 @@
 #include "swift/Obfuscation/NameMapping.h"
 #include "swift/Obfuscation/Random.h"
-#include <stdio.h>
+
+#include <string>
+#include <vector>
+#include <set>
 
 namespace swift {
+namespace obfuscation {
+
+class UniqueTypeNameGenerator {
   
-  namespace obfuscation {
-    
-    class UniqueTypeNameGenerator {
-      
-    private:
-      std::set<std::string> generatedSymbols;
-      const std::vector<std::string> headSymbols = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};
-      std::vector<std::string> tailSymbols;
-      RandomElementChooser<std::string>* headGenerator;
-      RandomStringGenerator* tailGenerator;
-      const size_t identifierLength = 32;
-      
-      llvm::ErrorOr<std::string> generateName(int numbersOfTriesLeft) {
-        if (numbersOfTriesLeft <= 0) {
-          return llvm::ErrorOr<std::string>(std::error_code(1, std::generic_category()));
-        }
-        auto head = headGenerator->rand();
-        auto tail = tailGenerator->rand(identifierLength - 1);
-        auto name = head + tail;
-        
-        if (generatedSymbols.insert(name).second) {
-          return name;
-        } else {
-          return this->generateName(numbersOfTriesLeft - 1);
-        }
-      }
-      
-    public:
-      
-      UniqueTypeNameGenerator() {
-        tailSymbols = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
-        tailSymbols.insert(tailSymbols.end(), headSymbols.begin(), headSymbols.end());
-        headGenerator = new RandomElementChooser<std::string>(headSymbols);
-        tailGenerator = new RandomStringGenerator(tailSymbols);
-      }
-      
-      
-      llvm::ErrorOr<std::string> generateName() {
-        return generateName(100);
-      }
-      
-    };
-    
-    llvm::ErrorOr<RenamesJson> proposeRenamings(SymbolsJson symbolsJson) {
-      
-      auto typeNameGenerator = new UniqueTypeNameGenerator();
-      
-      std::vector<SymbolRenaming> Symbols;
-      
-      for (std::size_t i = 0; i < symbolsJson.symbols.size(); ++i) {
-        auto Symbol = symbolsJson.symbols.at(i);
-        auto Renaming = SymbolRenaming();
-        Renaming.identifier = Symbol.identifier;
-        Renaming.originalName = Symbol.name;
-        auto NameOrError = typeNameGenerator->generateName();
-        if (std::error_code ec = NameOrError.getError()) {
-          return llvm::ErrorOr<RenamesJson>(ec);
-        }
-        Renaming.obfuscatedName = NameOrError.get();
-        Symbols.push_back(Renaming);
-      }
-      
-      RenamesJson renamesJson = RenamesJson();
-      renamesJson.symbols = Symbols;
-      return renamesJson;
+private:
+  std::set<std::string> GeneratedSymbols;
+  const std::vector<std::string> HeadSymbols = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};
+  std::vector<std::string> TailSymbols;
+  RandomElementChooser<std::string>* HeadGenerator;
+  RandomStringGenerator* TailGenerator;
+  const std::string::size_type IdentifierLength = 32;
+  
+  llvm::Expected<std::string> generateName(int NumbersOfTriesLeft) {
+    if (NumbersOfTriesLeft <= 0) {
+      return llvm::make_error<llvm::StringError>("couldn't generate unique type name",
+                                                 std::error_code(1, std::generic_category()));
     }
+    auto Head = HeadGenerator->rand();
+    auto Tail = TailGenerator->rand(IdentifierLength - 1);
+    auto Name = Head + Tail;
     
-  } //namespace obfuscation
+    if (GeneratedSymbols.insert(Name).second) {
+      return Name;
+    } else {
+      return this->generateName(NumbersOfTriesLeft - 1);
+    }
+  }
+  
+public:
+  
+  UniqueTypeNameGenerator() {
+    TailSymbols = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
+    TailSymbols.insert(TailSymbols.end(),
+                       HeadSymbols.begin(),
+                       HeadSymbols.end());
+    HeadGenerator = new RandomElementChooser<std::string>(HeadSymbols);
+    TailGenerator = new RandomStringGenerator(TailSymbols);
+  }
+  
+  
+  llvm::Expected<std::string> generateName() {
+    return generateName(100);
+  }
   
+  ~UniqueTypeNameGenerator() {
+    delete HeadGenerator;
+    delete TailGenerator;
+  }
+  
+};
+
+llvm::Expected<RenamesJson> proposeRenamings(const SymbolsJson &SymbolsJson) {
+  
+  auto TypeNameGenerator = new UniqueTypeNameGenerator();
+  
+  RenamesJson RenamesJson;
+  
+  for (const auto &Symbol : SymbolsJson.Symbols) {
+    SymbolRenaming Renaming;
+    Renaming.Identifier = Symbol.Identifier;
+    Renaming.OriginalName = Symbol.Name;
+    auto NameOrError = TypeNameGenerator->generateName();
+    if (auto Error = NameOrError.takeError()) {
+      return std::move(Error);
+    }
+    Renaming.ObfuscatedName = NameOrError.get();
+    RenamesJson.Symbols.push_back(Renaming);
+  }
+  
+  delete TypeNameGenerator;
+
+  return RenamesJson;
+}
+
+} //namespace obfuscation
 } //namespace swift
diff --git a/swift/lib/Obfuscation/Obfuscation.cpp b/swift/lib/Obfuscation/Obfuscation.cpp
deleted file mode 100644
index 1eaea160b8f..00000000000
--- a/swift/lib/Obfuscation/Obfuscation.cpp
+++ /dev/null
@@ -1,138 +0,0 @@
-#include "swift/Obfuscation/Obfuscation.h"
-#include "swift/Frontend/PrintingDiagnosticConsumer.h"
-#include <sstream>
-
-namespace swift {
-  
-  namespace obfuscation {
-    
-    struct SymbolsProvider {
-      
-    public:
-      
-      static Symbol symbol(Decl* De) {
-        std::vector<std::string> Parts;
-        std::string SymbolName;
-        if (auto *D = dyn_cast<NominalTypeDecl>(De)) {
-          Parts.push_back("module");
-          Parts.push_back(D->getModuleContext()->getBaseName().getIdentifier().get());
-          if (auto *decl = dyn_cast<EnumDecl>(D)) {
-            SymbolName = decl->getDeclaredInterfaceType()->getString();
-            Parts.push_back("enum." + SymbolName);
-          } else if (auto *decl = dyn_cast<ClassDecl>(D)) {
-            SymbolName = decl->getDeclaredInterfaceType()->getString();
-            Parts.push_back("class." + SymbolName);
-          } else if (auto *decl = dyn_cast<ProtocolDecl>(D)) {
-            SymbolName = decl->getDeclaredInterfaceType()->getString();
-            Parts.push_back("protocol." + SymbolName);
-          } else if (auto *decl = dyn_cast<StructDecl>(D)) {
-            SymbolName = decl->getDeclaredInterfaceType()->getString();
-            Parts.push_back("struct." + SymbolName);
-          }
-        }
-        
-        std::string StringParts;
-        if (Parts.size() == 1) {
-          StringParts = Parts[0];
-        } else {
-          std::stringstream Result;
-          copy(Parts.begin(), Parts.end(), std::ostream_iterator<std::string>(Result, "."));
-          StringParts = Result.str();
-          StringParts.pop_back();
-        }
-        
-        auto SymbolStruct = Symbol();
-        SymbolStruct.identifier = StringParts;
-        SymbolStruct.name = SymbolName;
-        return SymbolStruct;
-      }
-    };
-    
-    CompilerInvocation createInvocation(CompilerInvocationConfiguration Configuration) {
-      CompilerInvocation Invocation;
-      Invocation.setModuleName(Configuration.ModuleName);
-      Invocation.setMainExecutablePath(Configuration.MainExecutablePath);
-      for (auto InputFilename : Configuration.InputFilenames) {
-        Invocation.addInputFilename(InputFilename);
-      }
-      Invocation.getLangOptions().AttachCommentsToDecls = true;
-      Invocation.setFrameworkSearchPaths(Configuration.Paths);
-      Invocation.setSDKPath(Configuration.SdkPath);
-      return Invocation;
-    }
-    
-    std::set<Symbol> findSymbolsToObfuscate(SourceFile &SF) {
-      struct RenamesCollector: public SourceEntityWalker {
-        std::set<Symbol> Bucket;
-        RenamesCollector() {}
-        
-        void handleSymbol(Symbol &Symbol) {
-          Bucket.insert(Symbol);
-        }
-        
-        bool walkToDeclPre(Decl *D, CharSourceRange Range) override {
-          if (D->isImplicit())
-            return false;
-          auto Symbol = SymbolsProvider::symbol(D);
-          handleSymbol(Symbol);
-          return true;
-        }
-        
-        bool visitDeclReference(ValueDecl *D, CharSourceRange Range,
-                                TypeDecl *CtorTyRef, ExtensionDecl *ExtTyRef,
-                                Type T, ReferenceMetaData Data) override {
-          auto Symbol = SymbolsProvider::symbol(D);
-          handleSymbol(Symbol);
-          return true;
-        }
-      } Collector;
-      
-      Collector.walk(SF);
-      
-      return Collector.Bucket;
-    }
-    
-    CompilerInvocationConfiguration createCompilerInvocationConfiguration(FilesJson filesJson, std::string MainExecutablePath) {
-      
-      StringRef ModuleName = filesJson.module.name;
-      
-      StringRef SdkPath = filesJson.sdk.path;
-      
-      std::vector<std::string> InputFilenames = filesJson.filenames;
-      std::vector<SearchPathOptions::FrameworkSearchPath> Paths;
-      for (auto Framework : filesJson.explicitelyLinkedFrameworks) {
-        Paths.push_back(SearchPathOptions::FrameworkSearchPath(Framework.path, false));
-      }
-      
-      return CompilerInvocationConfiguration(ModuleName, MainExecutablePath, SdkPath, InputFilenames, Paths);
-    }
-    
-    llvm::ErrorOr<SymbolsJson> extractSymbols(CompilerInvocationConfiguration Configuration) {
-      auto Invocation = createInvocation(Configuration);
-      CompilerInstance CI;
-      PrintingDiagnosticConsumer PrintDiags;
-      CI.addDiagnosticConsumer(&PrintDiags);
-      if (CI.setup(Invocation)) {
-        return llvm::ErrorOr<SymbolsJson>(std::error_code(1, std::generic_category()));
-      }
-      CI.performSema();
-      
-      std::vector<Symbol> Symbols;
-      std::vector<SourceFile *> SF;
-      for (auto Unit : CI.getMainModule()->getFiles()) {
-        if (auto Current = dyn_cast<SourceFile>(Unit)) {
-          SF.push_back(Current);
-          auto CurrentSymbols = findSymbolsToObfuscate(*Current);
-          std::copy(CurrentSymbols.begin(), CurrentSymbols.end(), std::back_inserter(Symbols));
-        }
-      }
-      SymbolsJson Json = SymbolsJson();
-      Json.symbols = Symbols;
-      return llvm::ErrorOr<SymbolsJson>(Json);
-    }
-    
-
-    
-  } //namespace obfuscation
-  
-} //namespace swift
diff --git a/swift/lib/Obfuscation/Random.cpp b/swift/lib/Obfuscation/Random.cpp
index 98edf4a6775..d3db6244bdc 100644
--- a/swift/lib/Obfuscation/Random.cpp
+++ b/swift/lib/Obfuscation/Random.cpp
@@ -1,38 +1,47 @@
 #include "swift/Obfuscation/Random.h"
-#include <stdio.h>
-#include <random>
 
 namespace swift {
+namespace obfuscation {
+
+int RandomIntegerGenerator::rand() {
+  return Distribution(Engine);
+}
+
+template<typename T>
+T RandomElementChooser<T>::rand() const {
+  return List.at(Generator->rand());
+}
   
-  namespace obfuscation {
-    
-    size_t RandomIntegerGenerator::rand() {
-      return distribution(engine);
-    }
-    
-    template<typename T>
-    T RandomElementChooser<T>::rand() {
-      return list.at(generator->rand());
-    }
-    
-    template<typename T>
-    std::vector<T> RandomVectorGenerator<T>::rand(size_t length) {
-      std::vector<T> result;
-      for (size_t i = 0; i < length; i++) {
-        result.push_back(chooser->rand());
-      }
-      return result;
-    }
-    
-    std::string RandomStringGenerator::rand(size_t length) {
-      auto vector = generator->rand(length);
-      std::string result;
-      for (auto const& elem : vector) {
-        result += elem;
-      }
-      return result;
-    }
-    
-  } //namespace obfuscation
+template<typename T>
+RandomElementChooser<T>::~RandomElementChooser() {
+  delete Generator;
+}
+
+template<typename T>
+std::vector<T> RandomVectorGenerator<T>::rand(size_type Length) const {
+  std::vector<T> Result;
+  for (size_type i = 0; i < Length; i++) {
+    Result.push_back(Chooser->rand());
+  }
+  return Result;
+}
+template<typename T>
+RandomVectorGenerator<T>::~RandomVectorGenerator() {
+  delete Chooser;
+}
+
+std::string RandomStringGenerator::rand(size_type Length) const {
+  auto Vector = Generator->rand(Length);
+  std::string Result;
+  for (const auto &Elem : Vector) {
+    Result += Elem;
+  }
+  return Result;
+}
   
+RandomStringGenerator::~RandomStringGenerator() {
+  delete Generator;
+}
+
+} //namespace obfuscation
 } //namespace swift
diff --git a/swift/lib/Obfuscation/Renaming.cpp b/swift/lib/Obfuscation/Renaming.cpp
new file mode 100644
index 00000000000..bf46567be91
--- /dev/null
+++ b/swift/lib/Obfuscation/Renaming.cpp
@@ -0,0 +1,105 @@
+#include "swift/Obfuscation/Renaming.h"
+#include "swift/Obfuscation/CompilerInfrastructure.h"
+#include "swift/Obfuscation/SymbolProvider.h"
+
+#include "llvm/Support/FileSystem.h"
+#include "llvm/Support/Path.h"
+#include "swift/IDE/Utils.h"
+
+namespace swift {
+namespace obfuscation {
+  
+llvm::Error copyProject(std::string OriginalPath, std::string ObfuscatedPath) {
+  // TODO: copy original project so that we have a place to write obfuscated project to
+  return llvm::Error::success();
+}
+  
+llvm::Expected<std::string>
+computeObfuscatedSourceFilePath(const SourceFile* Current,
+                                const FilesJson &FilesJson,
+                                std::string ObfuscatedProjectPath) {
+  std::string Filename = llvm::sys::path::filename(Current->getFilename());
+  // TODO: compute a path for any directory structure, not just this sample one
+  std::string Path = ObfuscatedProjectPath + FilesJson.Module.Name + "/" + Filename;
+  return Path;
+}
+  
+bool performActualRenaming(swift::SourceFile* Current,
+                           const FilesJson &FilesJson,
+                           const RenamesJson &RenamesJson,
+                           swift::SourceManager &SourceManager,
+                           swift::ide::SourceEditOutputConsumer& Editor) {
+  
+  bool performedRenaming = false;
+  
+  auto SymbolsWithRanges = findSymbolsWithRanges(*Current);
+  
+  //TODO: would be way better to have a map here instead of iterating through symbols
+  for (const auto &SymbolWithRange : SymbolsWithRanges) {
+    for (const auto &Symbol : RenamesJson.Symbols) {
+      
+      if (SymbolWithRange.Symbol.Identifier == Symbol.Identifier
+          && SymbolWithRange.Symbol.Name == Symbol.OriginalName
+          && std::string::npos != SymbolWithRange.Symbol.Identifier.find(FilesJson.Module.Name)) {
+        
+        Editor.ide::SourceEditConsumer::accept(SourceManager,
+                                               SymbolWithRange.Range,
+                                               StringRef(Symbol.ObfuscatedName));
+        performedRenaming = true;
+        break;
+      }
+    }
+  }
+  return performedRenaming;
+}
+  
+llvm::Expected<FilesList>
+performRenaming(std::string MainExecutablePath,
+                const FilesJson &FilesJson,
+                const RenamesJson &RenamesJson,
+                std::string ObfuscatedProjectPath) {
+  
+  CompilerInstance CI;
+  if (auto Error = setupCompilerInstance(CI, FilesJson, MainExecutablePath)) {
+    return std::move(Error);
+  }
+  
+  FilesList Files;
+  for (auto* Unit : CI.getMainModule()->getFiles()) {
+    if (auto* Current = dyn_cast<SourceFile>(Unit)) {
+      
+      if (auto Error = copyProject("???", ObfuscatedProjectPath)) {
+        return std::move(Error);
+      }
+      
+      auto PathOrError = computeObfuscatedSourceFilePath(Current,
+                                                         FilesJson,
+                                                         ObfuscatedProjectPath);
+      if (auto Error = PathOrError.takeError()) {
+        return std::move(Error);
+      }
+      
+      auto Path = PathOrError.get();
+      auto &SourceManager = Current->getASTContext().SourceMgr;
+      std::error_code Error;
+      llvm::raw_fd_ostream DescriptorStream(Path, Error, llvm::sys::fs::F_None);
+      if (DescriptorStream.has_error()) {
+        return llvm::make_error<llvm::StringError>("Cannot open output file", Error);
+      }
+      
+      auto BufferId = Current->getBufferID().getValue();
+      auto Editor = swift::ide::SourceEditOutputConsumer(SourceManager,
+                                                         BufferId,
+                                                         DescriptorStream);
+      if (performActualRenaming(Current, FilesJson, RenamesJson, SourceManager, Editor)) {
+        auto Filename = llvm::sys::path::filename(Path).str();
+        Files.push_back(std::pair<std::string, std::string>(Filename, Path));
+      }
+    }
+  }
+  
+  return Files;
+}
+
+} //namespace obfuscation
+} //namespace swift
diff --git a/swift/lib/Obfuscation/SymbolExtracting.cpp b/swift/lib/Obfuscation/SymbolExtracting.cpp
new file mode 100644
index 00000000000..d3aa271b890
--- /dev/null
+++ b/swift/lib/Obfuscation/SymbolExtracting.cpp
@@ -0,0 +1,45 @@
+#include "swift/Obfuscation/SymbolExtracting.h"
+#include "swift/Obfuscation/DataStructures.h"
+#include "swift/Obfuscation/CompilerInfrastructure.h"
+#include "swift/Obfuscation/SymbolProvider.h"
+
+#include <vector>
+#include <set>
+
+namespace swift {
+namespace obfuscation {
+
+std::set<Symbol> findSymbolsToObfuscate(SourceFile &SourceFile) {
+  std::set<SymbolWithRange> Source = findSymbolsWithRanges(SourceFile);
+  std::set<Symbol> Result;
+  for (const auto &Symbol : Source) {
+    Result.insert(Symbol.Symbol);
+  }
+  return Result;
+}
+
+llvm::Expected<SymbolsJson> extractSymbols(const FilesJson &FilesJson,
+                                          std::string MainExecutablePath) {
+  
+  CompilerInstance CompilerInstance;
+  auto Error = setupCompilerInstance(CompilerInstance,
+                                     FilesJson,
+                                     MainExecutablePath);
+  if (Error) {
+    return std::move(Error);
+  }
+  
+  SymbolsJson Json;
+  for (auto* Unit : CompilerInstance.getMainModule()->getFiles()) {
+    if (auto* Current = dyn_cast<SourceFile>(Unit)) {
+      auto CurrentSymbols = findSymbolsToObfuscate(*Current);
+      std::copy(CurrentSymbols.begin(),
+                CurrentSymbols.end(),
+                std::back_inserter(Json.Symbols));
+    }
+  }
+  return Json;
+}
+
+} //namespace obfuscation
+} //namespace swift
diff --git a/swift/lib/Obfuscation/SymbolProvider.cpp b/swift/lib/Obfuscation/SymbolProvider.cpp
new file mode 100644
index 00000000000..dc2f59f9680
--- /dev/null
+++ b/swift/lib/Obfuscation/SymbolProvider.cpp
@@ -0,0 +1,102 @@
+#include "swift/Obfuscation/SymbolProvider.h"
+
+#include <sstream>
+#include <string>
+#include <vector>
+
+namespace swift {
+namespace obfuscation {
+  
+llvm::Expected<Symbol> extractSymbol(Decl* Declaration) {
+  std::vector<std::string> Parts;
+  std::string SymbolName;
+  if (const auto *NominalTypeDeclaration = dyn_cast<NominalTypeDecl>(Declaration)) {
+    Parts.push_back("module");
+    Parts.push_back(NominalTypeDeclaration->getModuleContext()->getBaseName().getIdentifier().get());
+    if (auto *EnumDeclaration = dyn_cast<EnumDecl>(NominalTypeDeclaration)) {
+      SymbolName = EnumDeclaration->getDeclaredInterfaceType()->getString();
+      Parts.push_back("enum." + SymbolName);
+    } else if (auto *ClassDeclaration = dyn_cast<ClassDecl>(NominalTypeDeclaration)) {
+      SymbolName = ClassDeclaration->getDeclaredInterfaceType()->getString();
+      Parts.push_back("class." + SymbolName);
+    } else if (auto *ProtocolDeclaration = dyn_cast<ProtocolDecl>(NominalTypeDeclaration)) {
+      SymbolName = ProtocolDeclaration->getDeclaredInterfaceType()->getString();
+      Parts.push_back("protocol." + SymbolName);
+    } else if (auto *StructDeclaration = dyn_cast<StructDecl>(NominalTypeDeclaration)) {
+      SymbolName = StructDeclaration->getDeclaredInterfaceType()->getString();
+      Parts.push_back("struct." + SymbolName);
+    } else {
+      return llvm::make_error<llvm::StringError>("found unsupported declaration type",
+                                                 std::error_code(1, std::generic_category()));
+    }
+  } else {
+    return llvm::make_error<llvm::StringError>("found unsupported declaration type",
+                                               std::error_code(1, std::generic_category()));
+  }
+  
+  std::string StringParts;
+  if (Parts.size() == 1) {
+    StringParts = Parts[0];
+  } else {
+    //TODO: can we rewrite it to use llvm:raw_string_ostream?
+    std::stringstream Result;
+    std::copy(Parts.begin(),
+              Parts.end(),
+              std::ostream_iterator<std::string>(Result, "."));
+    StringParts = Result.str();
+    StringParts.pop_back();
+  }
+  
+  Symbol SymbolStruct;
+  SymbolStruct.Identifier = StringParts;
+  SymbolStruct.Name = SymbolName;
+  return SymbolStruct;
+}
+
+bool SymbolWithRange::operator< (const SymbolWithRange &Right) const {
+  return Symbol < Right.Symbol;
+}
+
+struct RenamesCollector: public SourceEntityWalker {
+  std::set<SymbolWithRange> Bucket;
+  RenamesCollector() {}
+  
+  void handleSymbol(const Symbol &Symbol, const CharSourceRange &Range) {
+    Bucket.insert(SymbolWithRange(Symbol, Range));
+  }
+  
+  //TODO: this should only determine if we're interested in declaration
+  bool walkToDeclPre(Decl *Declaration, CharSourceRange Range) override {
+    if (Declaration->isImplicit()) {
+      return false;
+    }
+    auto SymbolOrError = extractSymbol(Declaration);
+    if (auto Error = SymbolOrError.takeError()) {
+      llvm::consumeError(std::move(Error));
+      return true;
+    }
+    handleSymbol(SymbolOrError.get(), Range);
+    return true;
+  }
+  
+  bool visitDeclReference(ValueDecl *Declaration, CharSourceRange Range,
+                          TypeDecl *CtorTyRef, ExtensionDecl *ExtTyRef,
+                          Type T, ReferenceMetaData Data) override {
+    auto SymbolOrError = extractSymbol(Declaration);
+    if (auto Error = SymbolOrError.takeError()) {
+      llvm::consumeError(std::move(Error));
+      return true;
+    }
+    handleSymbol(SymbolOrError.get(), Range);
+    return true;
+  }
+};
+
+std::set<SymbolWithRange> findSymbolsWithRanges(SourceFile &SourceFile) {
+  RenamesCollector Collector;
+  Collector.walk(SourceFile);
+  return Collector.Bucket;
+}
+
+} //namespace obfuscation
+} //namespace swift
diff --git a/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp b/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
index f6436986b59..c8fc7f85bdd 100644
--- a/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
+++ b/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
@@ -1,55 +1,70 @@
-#include "swift/Basic/LLVMInitialize.h"
-#include "llvm/Support/CommandLine.h"
-
-#include "swift/Obfuscation/Obfuscation.h"
 #include "swift/Obfuscation/NameMapping.h"
 #include "swift/Obfuscation/FileIO.h"
-#include <iostream>
+
+#include "swift/Basic/LLVMInitialize.h"
+#include "llvm/Support/CommandLine.h"
 
 using namespace swift;
 using namespace swift::obfuscation;
 
 namespace options {
-  static llvm::cl::opt<std::string>
-  SymbolsJsonPath("symbolsjson", llvm::cl::desc("Name of the file containing extracted symbols"));
   
-  static llvm::cl::opt<std::string>
-  RenamesJsonPath("renamesjson", llvm::cl::desc("Name of the output file to write extracted symbols with proposed renamings"));
+static llvm::cl::OptionCategory ObfuscatorNameMapper("Obfuscator Name Mapper");
+  
+static llvm::cl::opt<std::string>
+SymbolsJsonPath("symbolsjson",
+                llvm::cl::desc("Name of the file containing extracted symbols"),
+                llvm::cl::cat(ObfuscatorNameMapper));
+
+static llvm::cl::opt<std::string>
+RenamesJsonPath("renamesjson",
+                llvm::cl::desc("Name of the output file to write extracted symbols with proposed renamings"),
+                llvm::cl::cat(ObfuscatorNameMapper));
+
 }
 
-void printRenamings(std::vector<SymbolRenaming> Renamings) {
-  for (auto Renaming : Renamings) {
-    std::cout << "identifier: " << Renaming.identifier << "\n" << "originalName: " << Renaming.originalName << "\n" << "obfuscatedName: " << Renaming.obfuscatedName << "\n";
+void printRenamings(const std::vector<SymbolRenaming> &Renamings) {
+  for (const auto &Renaming : Renamings) {
+    llvm::outs() << "identifier: " << Renaming.Identifier << '\n'
+      << "originalName: " << Renaming.OriginalName << '\n'
+      << "obfuscatedName: " << Renaming.ObfuscatedName << '\n';
   }
 }
 
 int main(int argc, char *argv[]) {
   INITIALIZE_LLVM(argc, argv);
-  std::cout << "Swift obfuscator name mapper tool\n";
+  llvm::cl::HideUnrelatedOptions(options::ObfuscatorNameMapper);
   
-  llvm::cl::ParseCommandLineOptions(argc, argv, "obfuscator-name-mapper\n");
+  llvm::ExitOnError ExitOnError;
+  ExitOnError.setExitCodeMapper(
+    [](const llvm::Error &Err) { return 1; }
+  );
+  llvm::outs() << "Swift obfuscator name mapper tool" << '\n';
+  
+  llvm::cl::ParseCommandLineOptions(argc, argv, "obfuscator-name-mapper");
   
   if (options::SymbolsJsonPath.empty()) {
-    llvm::errs() << "cannot find Symbols json file\n";
+    llvm::errs() << "cannot find Symbols json file" << '\n';
     return 1;
   }
   
   std::string PathToJson = options::SymbolsJsonPath;
-  llvm::ErrorOr<SymbolsJson> SymbolsJsonOrErr = parseJson<SymbolsJson>(PathToJson);
-  if (std::error_code ec = SymbolsJsonOrErr.getError()) {
-    return ec.value();
+  auto SymbolsJsonOrError = parseJson<SymbolsJson>(PathToJson);
+  if (auto Error = SymbolsJsonOrError.takeError()) {
+    ExitOnError(std::move(Error));
   }
   
-  auto RenamingsOrError = proposeRenamings(SymbolsJsonOrErr.get());
-  if (std::error_code ec = RenamingsOrError.getError()) {
-    return ec.value();
+  auto RenamingsOrError = proposeRenamings(SymbolsJsonOrError.get());
+  if (auto Error = RenamingsOrError.takeError()) {
+    ExitOnError(std::move(Error));
   }
   auto Renamings = RenamingsOrError.get();
   
-  printRenamings(Renamings.symbols);
+  printRenamings(Renamings.Symbols);
   
   std::string PathToOutput = options::RenamesJsonPath;
-  writeSymbolsToFile(Renamings, PathToOutput);
+  if (auto Error = writeToFile(Renamings, PathToOutput, llvm::outs())) {
+    ExitOnError(std::move(Error));
+  }
   return 0;
 }
-
diff --git a/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp b/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
index 0bda11b0f68..588d88fee4a 100644
--- a/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
+++ b/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
@@ -1,10 +1,93 @@
+#include "swift/Obfuscation/Renaming.h"
+#include "swift/Obfuscation/FileIO.h"
+
 #include "swift/Basic/LLVMInitialize.h"
 #include "llvm/Support/CommandLine.h"
 
-#include <iostream>
+using namespace swift;
+using namespace swift::obfuscation;
+
+namespace options {
+  
+static llvm::cl::OptionCategory ObfuscatorRenamer("Obfuscator Renamer");
+  
+static llvm::cl::opt<std::string>
+FilesJsonPath("filesjson",
+              llvm::cl::desc("Name of the file containing File Extractor data"),
+              llvm::cl::cat(ObfuscatorRenamer));
+
+static llvm::cl::opt<std::string>
+RenamesJsonPath("renamesjson",
+                llvm::cl::desc("Name of the output file to write extracted symbols with proposed renamings"),
+                llvm::cl::cat(ObfuscatorRenamer));
+
+static llvm::cl::opt<std::string>
+ObfuscatedProjectPath("obfuscatedproject",
+                      llvm::cl::desc("Path to the directory for obfuscated project"),
+                      llvm::cl::cat(ObfuscatorRenamer));
+  
+}
+
+void printObfuscatedFiles(const std::vector<std::pair<std::string, std::string>> &Files) {
+  llvm::outs() << "obfuscated files:" << '\n';
+  for (const auto &File : Files) {
+    llvm::outs() << "file: " << File.first << '\n'
+      << "path: " << File.second << '\n';
+  }
+}
+
+// This function isn't referenced outside its translation unit, but it
+// can't use the "static" keyword because its address is used for
+// getMainExecutable (since some platforms don't support taking the
+// address of main, and some platforms can't implement getMainExecutable
+// without being given the address of a function in the main executable).
+void anchorForGetMainExecutable() {}
 
 int main(int argc, char *argv[]) {
-  std::cout << "Swift obfuscator renamer tool";
+  INITIALIZE_LLVM(argc, argv);
+  llvm::cl::HideUnrelatedOptions(options::ObfuscatorRenamer);
+  
+  llvm::ExitOnError ExitOnError;
+  ExitOnError.setExitCodeMapper(
+    [](const llvm::Error &Err) { return 1; }
+  );
+  llvm::outs() << "Swift obfuscator renamer tool" << '\n';
+  llvm::cl::ParseCommandLineOptions(argc, argv, "obfuscator-renamer");
+  
+  if (options::FilesJsonPath.empty()) {
+    llvm::errs() << "cannot find Files json file" << '\n';
+    return 1;
+  }
+  if (options::RenamesJsonPath.empty()) {
+    llvm::errs() << "cannot find Renames json file" << '\n';
+    return 1;
+  }
+  if (options::ObfuscatedProjectPath.empty()) {
+    llvm::errs() << "cannot find path to the obfuscated project" << '\n';
+    return 1;
+  }
+  
+  auto FilesJsonOrError = parseJson<FilesJson>(options::FilesJsonPath);
+  if (auto Error = FilesJsonOrError.takeError()) {
+    ExitOnError(std::move(Error));
+  }
+  auto RenamesJsonOrError = parseJson<RenamesJson>(options::RenamesJsonPath);
+  if (auto Error = RenamesJsonOrError.takeError()) {
+    ExitOnError(std::move(Error));
+  }
+  
+  std::string MainExecutablePath = llvm::sys::fs::getMainExecutable(argv[0],
+                                                                    reinterpret_cast<void *>(&anchorForGetMainExecutable));
+  
+  auto FilesOrError = performRenaming(MainExecutablePath,
+                                      FilesJsonOrError.get(),
+                                      RenamesJsonOrError.get(),
+                                      options::ObfuscatedProjectPath);
+  if (auto Error = FilesOrError.takeError()) {
+    ExitOnError(std::move(Error));
+  }
+  
+  printObfuscatedFiles(FilesOrError.get());
   return 0;
 }
 
diff --git a/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp b/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
index 04065551ce5..f0f925ca861 100644
--- a/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
+++ b/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
@@ -1,25 +1,33 @@
-#include "swift/Basic/LLVMInitialize.h"
-#include "llvm/Support/CommandLine.h"
-
-#include "swift/Obfuscation/Obfuscation.h"
+#include "swift/Obfuscation/SymbolExtracting.h"
 #include "swift/Obfuscation/FileIO.h"
 
-#include <iostream>
+#include "swift/Basic/LLVMInitialize.h"
+#include "llvm/Support/CommandLine.h"
 
 using namespace swift;
 using namespace swift::obfuscation;
 
 namespace options {
-  static llvm::cl::opt<std::string>
-  FilesJsonPath("filejson", llvm::cl::desc("Name of the file containing File Extractor data"));
+  
+static llvm::cl::OptionCategory
+ObfuscatorSymbolExtractor("Obfuscator Symbol Extractor");
+  
+static llvm::cl::opt<std::string>
+FilesJsonPath("filesjson",
+              llvm::cl::desc("Name of the file containing File Extractor data"),
+              llvm::cl::cat(ObfuscatorSymbolExtractor));
 
-  static llvm::cl::opt<std::string>
-  SymbolJsonPath("symbolsjson", llvm::cl::desc("Name of the file to write extracted Symbols"));
+static llvm::cl::opt<std::string>
+SymbolJsonPath("symbolsjson",
+               llvm::cl::desc("Name of the file to write extracted Symbols"),
+               llvm::cl::cat(ObfuscatorSymbolExtractor));
+  
 }
 
-void printSymbols(std::vector<Symbol> Symbols) {
-  for (auto Symbol : Symbols) {
-    std::cout << "identifier: " << Symbol.identifier << "\n" << "name: " << Symbol.name << "\n";
+void printSymbols(const std::vector<Symbol> &Symbols) {
+  for (const auto &Symbol : Symbols) {
+    llvm::outs() << "identifier: " << Symbol.Identifier << '\n'
+      << "name: " << Symbol.Name << '\n';
   }
 }
 
@@ -32,36 +40,44 @@ void anchorForGetMainExecutable() {}
 
 int main(int argc, char *argv[]) {
   INITIALIZE_LLVM(argc, argv);
-  std::cout << "Swift obfuscator symbol extractor tool\n";
+  llvm::cl::HideUnrelatedOptions(options::ObfuscatorSymbolExtractor);
+  
+  llvm::ExitOnError ExitOnError;
+  ExitOnError.setExitCodeMapper(
+    [](const llvm::Error &Err) { return 1; }
+  );
+  llvm::outs() << "Swift obfuscator symbol extractor tool" << '\n';
   
-  llvm::cl::ParseCommandLineOptions(argc, argv, "obfuscator-symbol-extractor\n");
+  llvm::cl::ParseCommandLineOptions(argc, argv, "obfuscator-symbol-extractor");
   
   if (options::FilesJsonPath.empty()) {
-    llvm::errs() << "cannot find Files Extractor json file\n";
+    llvm::errs() << "cannot find Files Extractor json file" << '\n';
     return 1;
   }
 
   std::string PathToJson = options::FilesJsonPath;
   std::string MainExecutablePath = llvm::sys::fs::getMainExecutable(argv[0],
                                                                     reinterpret_cast<void *>(&anchorForGetMainExecutable));
-  llvm::ErrorOr<FilesJson> FilesJsonOrErr = parseJson<FilesJson>(PathToJson);
-  if (std::error_code ec = FilesJsonOrErr.getError()) {
-    return ec.value();
+  auto FilesJsonOrError = parseJson<FilesJson>(PathToJson);
+  if (auto Error = FilesJsonOrError.takeError()) {
+    ExitOnError(std::move(Error));
   }
-  auto compilerInvocation = createCompilerInvocationConfiguration(FilesJsonOrErr.get(), MainExecutablePath);
   
-  llvm::ErrorOr<SymbolsJson> SymbolsOrError = extractSymbols(compilerInvocation);
-  if (std::error_code ec = SymbolsOrError.getError()) {
-    return ec.value();
+  auto SymbolsOrError = extractSymbols(FilesJsonOrError.get(), MainExecutablePath);
+  if (auto Error = SymbolsOrError.takeError()) {
+    ExitOnError(std::move(Error));
   }
-  
-  printSymbols(SymbolsOrError.get().symbols);
+
+  printSymbols(SymbolsOrError.get().Symbols);
   if (options::SymbolJsonPath.empty()) {
-    llvm::errs() << "there is no path to write extracted symbols to\n";
+    llvm::errs() << "there is no path to write extracted symbols to" << '\n';
     return 1;
   }
   std::string PathToOutput = options::SymbolJsonPath;
-  writeSymbolsToFile(SymbolsOrError.get(), PathToOutput);
+  auto WriteErrorCode = writeToFile(SymbolsOrError.get(),
+                                    PathToOutput,
+                                    llvm::outs());
+  ExitOnError(std::move(WriteErrorCode));
   return 0;
 }
 
-- 
2.17.1 (Apple Git-112)


From 236f9b34f5569d3b8c79029925428ddc7ed121ef Mon Sep 17 00:00:00 2001
From: Jakub Sowa <jakub.sowa@polidea.com>
Date: Tue, 9 Jan 2018 15:34:06 +0100
Subject: [PATCH 017/138] Added test target with first unit test and
 integration test

Summary: Added symbol extractor integration test.

Reviewers: krzysztof.siejkowski, jerzy.kleszcz

Reviewed By: krzysztof.siejkowski, jerzy.kleszcz

Subscribers: jerzy.kleszcz, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2742
---
 swift/test/Obfuscation/Inputs/ExpectedSymbols.json   |  5 +++++
 swift/test/Obfuscation/Inputs/Files.json             | 12 ++++++++++++
 swift/test/Obfuscation/SymbolExtractor.swift         |  2 ++
 swift/unittests/CMakeLists.txt                       |  1 +
 swift/unittests/SwiftObfuscation/CMakeLists.txt      |  7 +++++++
 .../SwiftObfuscation/SwiftObfuscationTests.cpp       |  7 +++++++
 6 files changed, 34 insertions(+)
 create mode 100644 swift/test/Obfuscation/Inputs/ExpectedSymbols.json
 create mode 100644 swift/test/Obfuscation/Inputs/Files.json
 create mode 100644 swift/test/Obfuscation/SymbolExtractor.swift
 create mode 100644 swift/unittests/SwiftObfuscation/CMakeLists.txt
 create mode 100644 swift/unittests/SwiftObfuscation/SwiftObfuscationTests.cpp

diff --git a/swift/test/Obfuscation/Inputs/ExpectedSymbols.json b/swift/test/Obfuscation/Inputs/ExpectedSymbols.json
new file mode 100644
index 00000000000..b90e035aeb3
--- /dev/null
+++ b/swift/test/Obfuscation/Inputs/ExpectedSymbols.json
@@ -0,0 +1,5 @@
+{
+    "symbols": [ 
+        
+    ]
+}
\ No newline at end of file
diff --git a/swift/test/Obfuscation/Inputs/Files.json b/swift/test/Obfuscation/Inputs/Files.json
new file mode 100644
index 00000000000..29593748136
--- /dev/null
+++ b/swift/test/Obfuscation/Inputs/Files.json
@@ -0,0 +1,12 @@
+{  
+    "module":{  
+       "name":"ModuleName"
+    },
+    "sdk":{  
+       "name":"",
+       "path":""
+    },
+    "filenames":[ ],
+    "explicitelyLinkedFrameworks":[ ],
+    "systemLinkedFrameworks":[ ]
+ }
\ No newline at end of file
diff --git a/swift/test/Obfuscation/SymbolExtractor.swift b/swift/test/Obfuscation/SymbolExtractor.swift
new file mode 100644
index 00000000000..89942506ecc
--- /dev/null
+++ b/swift/test/Obfuscation/SymbolExtractor.swift
@@ -0,0 +1,2 @@
+//RUN: obfuscator-symbol-extractor -filesjson  %S/Inputs/Files.json -symbolsjson %t
+//RUN: diff -w %S/Inputs/ExpectedSymbols.json %t
diff --git a/swift/unittests/CMakeLists.txt b/swift/unittests/CMakeLists.txt
index e88d33378fc..dc46c6db6c0 100644
--- a/swift/unittests/CMakeLists.txt
+++ b/swift/unittests/CMakeLists.txt
@@ -11,6 +11,7 @@ if(SWIFT_INCLUDE_TOOLS)
   add_subdirectory(Parse)
   add_subdirectory(SwiftDemangle)
   add_subdirectory(Syntax)
+  add_subdirectory(SwiftObfuscation)
 
   if(SWIFT_BUILD_SDK_OVERLAY)
     # Runtime tests depend on symbols in StdlibUnittest.
diff --git a/swift/unittests/SwiftObfuscation/CMakeLists.txt b/swift/unittests/SwiftObfuscation/CMakeLists.txt
new file mode 100644
index 00000000000..6ee4def7782
--- /dev/null
+++ b/swift/unittests/SwiftObfuscation/CMakeLists.txt
@@ -0,0 +1,7 @@
+add_swift_unittest(SwiftObfuscationTests
+    SwiftObfuscationTests.cpp
+)
+
+target_link_libraries(SwiftObfuscationTests
+    swiftObfuscation
+)
diff --git a/swift/unittests/SwiftObfuscation/SwiftObfuscationTests.cpp b/swift/unittests/SwiftObfuscation/SwiftObfuscationTests.cpp
new file mode 100644
index 00000000000..ec5ffcefadb
--- /dev/null
+++ b/swift/unittests/SwiftObfuscation/SwiftObfuscationTests.cpp
@@ -0,0 +1,7 @@
+#include <stdlib.h>
+
+#include "gtest/gtest.h"
+
+TEST(SampleTests, AssertTrue) {
+    EXPECT_TRUE(true);
+}
-- 
2.17.1 (Apple Git-112)


From 92e2b7096b15f1cbf748864e046318a9d27780ec Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Wed, 10 Jan 2018 15:28:00 +0100
Subject: [PATCH 018/138] =?UTF-8?q?Improved=20error=20handling=20when=20op?=
 =?UTF-8?q?ening=20obfuscated=20project=E2=80=99s=20file?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 swift/lib/Obfuscation/Renaming.cpp | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/swift/lib/Obfuscation/Renaming.cpp b/swift/lib/Obfuscation/Renaming.cpp
index bf46567be91..5d478d8e7c0 100644
--- a/swift/lib/Obfuscation/Renaming.cpp
+++ b/swift/lib/Obfuscation/Renaming.cpp
@@ -83,8 +83,8 @@ performRenaming(std::string MainExecutablePath,
       auto &SourceManager = Current->getASTContext().SourceMgr;
       std::error_code Error;
       llvm::raw_fd_ostream DescriptorStream(Path, Error, llvm::sys::fs::F_None);
-      if (DescriptorStream.has_error()) {
-        return llvm::make_error<llvm::StringError>("Cannot open output file", Error);
+      if (DescriptorStream.has_error() || Error) {
+        return llvm::make_error<llvm::StringError>("Cannot open output file: " + Path, Error);
       }
       
       auto BufferId = Current->getBufferID().getValue();
-- 
2.17.1 (Apple Git-112)


From eddc953b94324c7f10513d613572be168d2049ce Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Thu, 11 Jan 2018 14:18:03 +0100
Subject: [PATCH 019/138] Updated Files.json format and copying of project in
 the Renamer

Reviewers: jerzy.kleszcz, jakub.sowa

Reviewed By: jerzy.kleszcz, jakub.sowa

Subscribers: jakub.sowa, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2748
---
 .gitignore                                    |  1 +
 README.md                                     |  1 +
 .../swift/Obfuscation/DataStructures.h        | 10 +++
 swift/include/swift/Obfuscation/Utils.h       | 17 ++++
 swift/lib/Obfuscation/CMakeLists.txt          |  1 +
 .../Obfuscation/CompilerInfrastructure.cpp    | 10 +--
 swift/lib/Obfuscation/DataStructures.cpp      |  5 ++
 swift/lib/Obfuscation/FileIO.cpp              | 10 +--
 swift/lib/Obfuscation/NameMapping.cpp         |  6 +-
 swift/lib/Obfuscation/Renaming.cpp            | 84 +++++++++++++------
 swift/lib/Obfuscation/SymbolExtracting.cpp    |  2 +-
 swift/lib/Obfuscation/SymbolProvider.cpp      |  7 +-
 swift/lib/Obfuscation/Utils.cpp               | 12 +++
 13 files changed, 121 insertions(+), 45 deletions(-)
 create mode 100644 swift/include/swift/Obfuscation/Utils.h
 create mode 100644 swift/lib/Obfuscation/Utils.cpp

diff --git a/.gitignore b/.gitignore
index 796b96d1c40..4978360907f 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1 +1,2 @@
 /build
+.idea
diff --git a/README.md b/README.md
index bb7b4695127..112d2d53983 100644
--- a/README.md
+++ b/README.md
@@ -173,4 +173,5 @@ In the alphabetical order:
 
 * [Jerzy Kleszcz](mailto:jerzy.kleszcz@polidea.com)
 * [Krzysztof Siejkowski](krzysztof.siejkowski@polidea.com)
+* [Jakub Sowa](jakub.sowa@polidea.com)
 
diff --git a/swift/include/swift/Obfuscation/DataStructures.h b/swift/include/swift/Obfuscation/DataStructures.h
index f2d5fe4cf9a..f9aa035d1b6 100644
--- a/swift/include/swift/Obfuscation/DataStructures.h
+++ b/swift/include/swift/Obfuscation/DataStructures.h
@@ -9,6 +9,10 @@
 
 namespace swift {
 namespace obfuscation {
+  
+struct Project {
+  std::string RootPath;
+};
 
 struct Module {
   std::string Name;
@@ -25,6 +29,7 @@ struct ExplicitelyLinkedFrameworks {
 };
 
 struct FilesJson {
+  Project Project;
   Module Module;
   Sdk Sdk;
   std::vector<std::string> Filenames;
@@ -69,6 +74,11 @@ template <>
 struct MappingTraits<FilesJson> {
   static void mapping(IO &Io, FilesJson &Object);
 };
+  
+template <>
+struct MappingTraits<Project> {
+  static void mapping(IO &Io, Project &Object);
+};
 
 template <>
 struct MappingTraits<swift::obfuscation::Module> {
diff --git a/swift/include/swift/Obfuscation/Utils.h b/swift/include/swift/Obfuscation/Utils.h
new file mode 100644
index 00000000000..156c20de214
--- /dev/null
+++ b/swift/include/swift/Obfuscation/Utils.h
@@ -0,0 +1,17 @@
+#ifndef Utils_h
+#define Utils_h
+
+#include "llvm/Support/Error.h"
+
+#include <string>
+
+namespace swift {
+namespace obfuscation {
+
+llvm::Error stringError(const std::string Message,
+                        const std::error_code Error = std::error_code(1, std::generic_category()));
+
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* Utils_h */
diff --git a/swift/lib/Obfuscation/CMakeLists.txt b/swift/lib/Obfuscation/CMakeLists.txt
index 6ad819b8fdb..e2032a7c7f8 100644
--- a/swift/lib/Obfuscation/CMakeLists.txt
+++ b/swift/lib/Obfuscation/CMakeLists.txt
@@ -7,6 +7,7 @@ add_swift_library(swiftObfuscation STATIC
   Renaming.cpp
   SymbolProvider.cpp
   CompilerInfrastructure.cpp
+  Utils.cpp
   LINK_LIBRARIES
   swiftParse
   swiftAST
diff --git a/swift/lib/Obfuscation/CompilerInfrastructure.cpp b/swift/lib/Obfuscation/CompilerInfrastructure.cpp
index 21d90c55f33..d2191f1a6fa 100644
--- a/swift/lib/Obfuscation/CompilerInfrastructure.cpp
+++ b/swift/lib/Obfuscation/CompilerInfrastructure.cpp
@@ -1,4 +1,5 @@
 #include "swift/Obfuscation/CompilerInfrastructure.h"
+#include "swift/Obfuscation/Utils.h"
 
 #include "swift/Frontend/PrintingDiagnosticConsumer.h"
 #include "llvm/Support/FileSystem.h"
@@ -24,8 +25,7 @@ struct CompilerInvocationConfiguration {
   InputFilenames(FilesJson.Filenames) {
     std::vector<SearchPathOptions::FrameworkSearchPath> Paths;
     for (const auto &Framework : FilesJson.ExplicitelyLinkedFrameworks) {
-      auto Path = SearchPathOptions::FrameworkSearchPath(Framework.Path,
-                                                         false);
+      SearchPathOptions::FrameworkSearchPath Path(Framework.Path, false);
       Paths.push_back(Path);
     }
     this->Paths = Paths;
@@ -50,14 +50,12 @@ llvm::Error
 setupCompilerInstance(CompilerInstance &CompilerInstance,
                       const FilesJson &FilesJson,
                       std::string MainExecutablePath) {
-  auto Configuration = CompilerInvocationConfiguration(FilesJson,
-                                                       MainExecutablePath);
+  CompilerInvocationConfiguration Configuration(FilesJson, MainExecutablePath);
   auto Invocation = createInvocation(Configuration);
   PrintingDiagnosticConsumer PrintDiags;
   CompilerInstance.addDiagnosticConsumer(&PrintDiags);
   if (CompilerInstance.setup(Invocation)) {
-    return llvm::make_error<llvm::StringError>("Error during JSON file read",
-                                               std::error_code(1, std::generic_category()));
+    return stringError("Error during JSON file read");
   }
   CompilerInstance.performSema();
   return llvm::Error::success();
diff --git a/swift/lib/Obfuscation/DataStructures.cpp b/swift/lib/Obfuscation/DataStructures.cpp
index 9cf402ca8a4..929719f1292 100644
--- a/swift/lib/Obfuscation/DataStructures.cpp
+++ b/swift/lib/Obfuscation/DataStructures.cpp
@@ -16,6 +16,7 @@ namespace llvm {
 namespace yaml {
 
 void MappingTraits<FilesJson>::mapping(IO &Io, FilesJson &Object) {
+  Io.mapRequired("project", Object.Project);
   Io.mapRequired("module", Object.Module);
   Io.mapRequired("sdk", Object.Sdk);
   Io.mapRequired("filenames", Object.Filenames);
@@ -23,6 +24,10 @@ void MappingTraits<FilesJson>::mapping(IO &Io, FilesJson &Object) {
   Io.mapRequired("explicitelyLinkedFrameworks",
                  Object.ExplicitelyLinkedFrameworks);
 }
+  
+void MappingTraits<Project>::mapping(IO &Io, Project &Object) {
+  Io.mapRequired("rootPath", Object.RootPath);
+}
 
 typedef swift::obfuscation::Module ObfuscationModule;
 void MappingTraits<ObfuscationModule>::mapping(IO &Io,
diff --git a/swift/lib/Obfuscation/FileIO.cpp b/swift/lib/Obfuscation/FileIO.cpp
index b0523c2eee8..6c275331f61 100644
--- a/swift/lib/Obfuscation/FileIO.cpp
+++ b/swift/lib/Obfuscation/FileIO.cpp
@@ -1,5 +1,6 @@
 #include "swift/Obfuscation/FileIO.h"
 #include "swift/Obfuscation/DataStructures.h"
+#include "swift/Obfuscation/Utils.h"
 
 #include "llvm/Support/FileSystem.h"
 #include "llvm/Support/MemoryBuffer.h"
@@ -13,16 +14,14 @@ template<class T>
 llvm::Expected<T> parseJson(std::string PathToJson) {
   auto Buffer = llvm::MemoryBuffer::getFile(PathToJson);
   if (auto ErrorCode = Buffer.getError()) {
-    return llvm::make_error<llvm::StringError>("Error during JSON file read",
-                                               ErrorCode);
+    return stringError("Error during JSON file read", ErrorCode);
   }
   
   llvm::yaml::Input Input(std::move(Buffer.get())->getBuffer());
   T Json;
   Input >> Json;
   if (auto ErrorCode = Input.error()) {
-    return llvm::make_error<llvm::StringError>("Error during JSON parse:",
-                                               ErrorCode);
+    return stringError("Error during JSON parse", ErrorCode);
   }
   
   return Json;
@@ -48,8 +47,7 @@ llvm::Error writeToFile(T &Object,
   std::error_code Error;
   llvm::raw_fd_ostream File(PathToOutput, Error, llvm::sys::fs::F_None);
   if (File.has_error() || Error) {
-    auto Message = "Failed to open file: " + PathToOutput;
-    return llvm::make_error<llvm::StringError>(Message, Error);
+    return stringError("Failed to open file: " + PathToOutput, Error);
   }
   File << OutputStringStream.str();
   File.close();
diff --git a/swift/lib/Obfuscation/NameMapping.cpp b/swift/lib/Obfuscation/NameMapping.cpp
index 1a0ecbf5f90..cfdca456e92 100644
--- a/swift/lib/Obfuscation/NameMapping.cpp
+++ b/swift/lib/Obfuscation/NameMapping.cpp
@@ -1,5 +1,6 @@
 #include "swift/Obfuscation/NameMapping.h"
 #include "swift/Obfuscation/Random.h"
+#include "swift/Obfuscation/Utils.h"
 
 #include <string>
 #include <vector>
@@ -20,8 +21,7 @@ private:
   
   llvm::Expected<std::string> generateName(int NumbersOfTriesLeft) {
     if (NumbersOfTriesLeft <= 0) {
-      return llvm::make_error<llvm::StringError>("couldn't generate unique type name",
-                                                 std::error_code(1, std::generic_category()));
+      return stringError("couldn't generate unique type name");
     }
     auto Head = HeadGenerator->rand();
     auto Tail = TailGenerator->rand(IdentifierLength - 1);
@@ -59,7 +59,7 @@ public:
 
 llvm::Expected<RenamesJson> proposeRenamings(const SymbolsJson &SymbolsJson) {
   
-  auto TypeNameGenerator = new UniqueTypeNameGenerator();
+  auto *TypeNameGenerator = new UniqueTypeNameGenerator();
   
   RenamesJson RenamesJson;
   
diff --git a/swift/lib/Obfuscation/Renaming.cpp b/swift/lib/Obfuscation/Renaming.cpp
index 5d478d8e7c0..5637e6f30c3 100644
--- a/swift/lib/Obfuscation/Renaming.cpp
+++ b/swift/lib/Obfuscation/Renaming.cpp
@@ -1,6 +1,7 @@
 #include "swift/Obfuscation/Renaming.h"
 #include "swift/Obfuscation/CompilerInfrastructure.h"
 #include "swift/Obfuscation/SymbolProvider.h"
+#include "swift/Obfuscation/Utils.h"
 
 #include "llvm/Support/FileSystem.h"
 #include "llvm/Support/Path.h"
@@ -8,22 +9,55 @@
 
 namespace swift {
 namespace obfuscation {
+
+typedef llvm::SmallString<256> SmallPath;
   
-llvm::Error copyProject(std::string OriginalPath, std::string ObfuscatedPath) {
-  // TODO: copy original project so that we have a place to write obfuscated project to
-  return llvm::Error::success();
-}
-  
-llvm::Expected<std::string>
-computeObfuscatedSourceFilePath(const SourceFile* Current,
-                                const FilesJson &FilesJson,
-                                std::string ObfuscatedProjectPath) {
-  std::string Filename = llvm::sys::path::filename(Current->getFilename());
-  // TODO: compute a path for any directory structure, not just this sample one
-  std::string Path = ObfuscatedProjectPath + FilesJson.Module.Name + "/" + Filename;
+llvm::Expected<SmallPath>
+computeObfuscatedPath(const StringRef Filename,
+                      const StringRef OriginalProjectPath,
+                      const StringRef ObfuscatedProjectPath) {
+  SmallPath Path(Filename);
+  llvm::sys::path::replace_path_prefix(Path, OriginalProjectPath, ObfuscatedProjectPath);
   return Path;
 }
+
+llvm::Error copyProject(const StringRef OriginalPath,
+                        const StringRef ObfuscatedPath) {
+  
+  std::error_code ErrorCode;
+  for (llvm::sys::fs::recursive_directory_iterator Iterator(OriginalPath, ErrorCode), End;
+       Iterator != End && !ErrorCode;
+       Iterator.increment(ErrorCode)) {
+    if (llvm::sys::fs::is_directory(Iterator->path())) {
+      continue;
+    }
+    
+    auto PathOrError = computeObfuscatedPath(StringRef(Iterator->path()),
+                                             OriginalPath,
+                                             ObfuscatedPath);
+    if (auto Error = PathOrError.takeError()) {
+      return Error;
+    }
+    
+    auto Path = PathOrError.get();
+    auto DirectoryPath = Path;
+    llvm::sys::path::remove_filename(DirectoryPath);
+    if (auto Error = llvm::sys::fs::create_directories(DirectoryPath)) {
+      return stringError("Cannot create directory in " + Path.str().str(), Error);
+    }
+    
+    if (auto Error = llvm::sys::fs::copy_file(Iterator->path(), Path)) {
+      return stringError("Cannot copy file from " + Iterator->path() + " to " + Path.str().str(), Error);
+    }
+  }
+  
+  if (ErrorCode) {
+    return stringError("Error while traversing the project directory " + OriginalPath.str(), ErrorCode);
+  }
   
+  return llvm::Error::success();
+}
+
 bool performActualRenaming(swift::SourceFile* Current,
                            const FilesJson &FilesJson,
                            const RenamesJson &RenamesJson,
@@ -64,33 +98,33 @@ performRenaming(std::string MainExecutablePath,
     return std::move(Error);
   }
   
+  if (auto Error = copyProject(FilesJson.Project.RootPath, ObfuscatedProjectPath)) {
+    return std::move(Error);
+  }
+  
   FilesList Files;
   for (auto* Unit : CI.getMainModule()->getFiles()) {
     if (auto* Current = dyn_cast<SourceFile>(Unit)) {
-      
-      if (auto Error = copyProject("???", ObfuscatedProjectPath)) {
-        return std::move(Error);
-      }
-      
-      auto PathOrError = computeObfuscatedSourceFilePath(Current,
-                                                         FilesJson,
-                                                         ObfuscatedProjectPath);
+
+      auto PathOrError = computeObfuscatedPath(Current->getFilename(),
+                                               FilesJson.Project.RootPath,
+                                               ObfuscatedProjectPath);
       if (auto Error = PathOrError.takeError()) {
         return std::move(Error);
       }
       
-      auto Path = PathOrError.get();
+      auto Path = PathOrError.get().str();
       auto &SourceManager = Current->getASTContext().SourceMgr;
       std::error_code Error;
       llvm::raw_fd_ostream DescriptorStream(Path, Error, llvm::sys::fs::F_None);
       if (DescriptorStream.has_error() || Error) {
-        return llvm::make_error<llvm::StringError>("Cannot open output file: " + Path, Error);
+        return stringError("Cannot open output file: " + Path.str(), Error);
       }
       
       auto BufferId = Current->getBufferID().getValue();
-      auto Editor = swift::ide::SourceEditOutputConsumer(SourceManager,
-                                                         BufferId,
-                                                         DescriptorStream);
+      swift::ide::SourceEditOutputConsumer Editor(SourceManager,
+                                                  BufferId,
+                                                  DescriptorStream);
       if (performActualRenaming(Current, FilesJson, RenamesJson, SourceManager, Editor)) {
         auto Filename = llvm::sys::path::filename(Path).str();
         Files.push_back(std::pair<std::string, std::string>(Filename, Path));
diff --git a/swift/lib/Obfuscation/SymbolExtracting.cpp b/swift/lib/Obfuscation/SymbolExtracting.cpp
index d3aa271b890..5f8913345b6 100644
--- a/swift/lib/Obfuscation/SymbolExtracting.cpp
+++ b/swift/lib/Obfuscation/SymbolExtracting.cpp
@@ -10,7 +10,7 @@ namespace swift {
 namespace obfuscation {
 
 std::set<Symbol> findSymbolsToObfuscate(SourceFile &SourceFile) {
-  std::set<SymbolWithRange> Source = findSymbolsWithRanges(SourceFile);
+  auto Source = findSymbolsWithRanges(SourceFile);
   std::set<Symbol> Result;
   for (const auto &Symbol : Source) {
     Result.insert(Symbol.Symbol);
diff --git a/swift/lib/Obfuscation/SymbolProvider.cpp b/swift/lib/Obfuscation/SymbolProvider.cpp
index dc2f59f9680..f410f83cb58 100644
--- a/swift/lib/Obfuscation/SymbolProvider.cpp
+++ b/swift/lib/Obfuscation/SymbolProvider.cpp
@@ -1,4 +1,5 @@
 #include "swift/Obfuscation/SymbolProvider.h"
+#include "swift/Obfuscation/Utils.h"
 
 #include <sstream>
 #include <string>
@@ -26,12 +27,10 @@ llvm::Expected<Symbol> extractSymbol(Decl* Declaration) {
       SymbolName = StructDeclaration->getDeclaredInterfaceType()->getString();
       Parts.push_back("struct." + SymbolName);
     } else {
-      return llvm::make_error<llvm::StringError>("found unsupported declaration type",
-                                                 std::error_code(1, std::generic_category()));
+      return stringError("found unsupported declaration type");
     }
   } else {
-    return llvm::make_error<llvm::StringError>("found unsupported declaration type",
-                                               std::error_code(1, std::generic_category()));
+    return stringError("found unsupported declaration type");
   }
   
   std::string StringParts;
diff --git a/swift/lib/Obfuscation/Utils.cpp b/swift/lib/Obfuscation/Utils.cpp
new file mode 100644
index 00000000000..421bcb22d99
--- /dev/null
+++ b/swift/lib/Obfuscation/Utils.cpp
@@ -0,0 +1,12 @@
+#include "swift/Obfuscation/Utils.h"
+
+namespace swift {
+namespace obfuscation {
+
+llvm::Error stringError(const std::string Message,
+                        const std::error_code Error) {
+  return llvm::make_error<llvm::StringError>(Message, Error);
+}
+
+} //namespace obfuscation
+} //namespace swift
-- 
2.17.1 (Apple Git-112)


From 99308cd35e38524d68b383833cd978e25a08cbbd Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Thu, 11 Jan 2018 19:36:26 +0100
Subject: [PATCH 020/138] Added explicit instantiation for RandomElementChooser

---
 swift/lib/Obfuscation/Random.cpp | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/swift/lib/Obfuscation/Random.cpp b/swift/lib/Obfuscation/Random.cpp
index d3db6244bdc..e57ae0b77ca 100644
--- a/swift/lib/Obfuscation/Random.cpp
+++ b/swift/lib/Obfuscation/Random.cpp
@@ -17,6 +17,9 @@ RandomElementChooser<T>::~RandomElementChooser() {
   delete Generator;
 }
 
+template std::string RandomElementChooser<std::string>::rand() const;
+template std::string RandomElementChooser<std::string>::~RandomElementChooser();
+  
 template<typename T>
 std::vector<T> RandomVectorGenerator<T>::rand(size_type Length) const {
   std::vector<T> Result;
@@ -25,6 +28,7 @@ std::vector<T> RandomVectorGenerator<T>::rand(size_type Length) const {
   }
   return Result;
 }
+
 template<typename T>
 RandomVectorGenerator<T>::~RandomVectorGenerator() {
   delete Chooser;
-- 
2.17.1 (Apple Git-112)


From a65bbc2d042509b726bcb55810cb0419f4ea243b Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Mon, 15 Jan 2018 18:09:16 +0100
Subject: [PATCH 021/138] Prevents Renamer from overriding the files that have
 no symbols to rename

Reviewers: jakub.sowa, jerzy.kleszcz

Reviewed By: jakub.sowa, jerzy.kleszcz

Subscribers: jakub.sowa, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2752
---
 README.md                                     | 10 ++-
 .../swift/Obfuscation/DataStructures.h        |  2 +
 swift/include/swift/Obfuscation/Random.h      | 46 ++++++-------
 swift/include/swift/Obfuscation/Renaming.h    |  2 +-
 .../Obfuscation/CompilerInfrastructure.cpp    |  2 -
 swift/lib/Obfuscation/DataStructures.cpp      |  8 ++-
 swift/lib/Obfuscation/NameMapping.cpp         | 53 ++++++++-------
 swift/lib/Obfuscation/Random.cpp              | 32 ++-------
 swift/lib/Obfuscation/Renaming.cpp            | 65 ++++++++++++-------
 swift/lib/Obfuscation/SymbolProvider.cpp      |  8 ++-
 .../obfuscator-name-mapper.cpp                |  6 +-
 .../obfuscator-symbol-extractor.cpp           |  6 +-
 12 files changed, 124 insertions(+), 116 deletions(-)

diff --git a/README.md b/README.md
index 112d2d53983..53fe106f706 100644
--- a/README.md
+++ b/README.md
@@ -45,7 +45,8 @@ The output data format is called `Symbols.json` and presented below:
   "symbols": [  
     {
       "identifier": <string>,
-      "name": <string>
+      "name": <string>,
+      "module": <string>
     }
   ]
 }
@@ -57,6 +58,8 @@ The output data format is called `Symbols.json` and presented below:
 
 `identifier` contains all the information required to uniquely identify the given symbol in the source code. It will be used by `Renamer` to decide whether the symbol it comes across should be renamed or not.
 
+`module` contains the name of the module that allows us to identify whether the symbol should be included in renaming or not.
+
 ## Feature list
 
 - [] TBA
@@ -93,7 +96,8 @@ The output format is called `Renames.json` and presented below:
     {
       "identifier": <string>,
       "originalName": <string>,
-      "obfuscatedName": <string>
+      "obfuscatedName": <string>,
+      "module": <string>
     }
   ]
 }
@@ -101,7 +105,7 @@ The output format is called `Renames.json` and presented below:
 
 `symbols` is an array of objects containing the original name of symbol, its identifier and the proposes obfuscated name.
 
-`originalName` and `identifier` are the same as `name` and `symbol` fields in the `Symbols.json` format, respectively.
+`originalName` and `identifier` and `module` are the same as `name` and `identifier` and `module` fields in the `Symbols.json` format, respectively.
 
 `obfuscatedName` is the proposed name that the original name of symbol should be changed to.
 
diff --git a/swift/include/swift/Obfuscation/DataStructures.h b/swift/include/swift/Obfuscation/DataStructures.h
index f9aa035d1b6..9d0eb4f1ded 100644
--- a/swift/include/swift/Obfuscation/DataStructures.h
+++ b/swift/include/swift/Obfuscation/DataStructures.h
@@ -40,6 +40,7 @@ struct FilesJson {
 struct Symbol {
   std::string Identifier;
   std::string Name;
+  std::string Module;
   
   bool operator< (const Symbol &Right) const;
 };
@@ -52,6 +53,7 @@ struct SymbolRenaming {
   std::string Identifier;
   std::string OriginalName;
   std::string ObfuscatedName;
+  std::string Module;
   
   bool operator< (const SymbolRenaming &Right) const;
 };
diff --git a/swift/include/swift/Obfuscation/Random.h b/swift/include/swift/Obfuscation/Random.h
index 4a2f92813a9..c66b71b8540 100644
--- a/swift/include/swift/Obfuscation/Random.h
+++ b/swift/include/swift/Obfuscation/Random.h
@@ -1,6 +1,7 @@
 #ifndef Random_h
 #define Random_h
 
+#include <cassert>
 #include <vector>
 #include <string>
 #include <random>
@@ -12,15 +13,13 @@ class RandomIntegerGenerator {
   
 private:
   
-  std::random_device RandomDevice;
   std::mt19937 Engine;
   std::uniform_int_distribution<int> Distribution;
   
 public:
   
   RandomIntegerGenerator(int Min, int Max)
-  : RandomDevice(),
-  Engine(RandomDevice()),
+  : Engine(std::random_device()()),
   Distribution(std::uniform_int_distribution<int>(Min, Max)) {}
   
   int rand();
@@ -32,38 +31,39 @@ class RandomElementChooser {
   
 private:
   
-  RandomIntegerGenerator* Generator;
+  RandomIntegerGenerator Generator;
   std::vector<T> List;
   
 public:
   
-  RandomElementChooser(const std::vector<T> &ListToChooseFrom) :
-  Generator(new RandomIntegerGenerator(0, ListToChooseFrom.size() - 1)),
-  List(ListToChooseFrom) {}
+  RandomElementChooser(const std::vector<T> &ListToChooseFrom)
+  : Generator(0, ListToChooseFrom.empty() ? 0 : ListToChooseFrom.size() - 1),
+  List(ListToChooseFrom) {
+    assert(!ListToChooseFrom.empty() && "list of elements to choose from must not be empty");
+  };
   
-  T rand() const;
-  
-  ~RandomElementChooser();
+  T rand() {
+    return List.at(Generator.rand());
+  }
 
 };
 
+template<typename T>
+using length_type = typename std::vector<T>::size_type;
+
 template<typename T>
 class RandomVectorGenerator {
   
 private:
   
-  RandomElementChooser<T>* Chooser;
+  RandomElementChooser<T> Chooser;
   
 public:
   
-  RandomVectorGenerator(const std::vector<T> &ListToChooseFrom) :
-  Chooser(new RandomElementChooser<T>(ListToChooseFrom)) {}
-  
-  typedef typename std::vector<T>::size_type size_type;
+  RandomVectorGenerator(const std::vector<T> &ListToChooseFrom)
+  : Chooser(RandomElementChooser<T>(ListToChooseFrom)) {}
   
-  std::vector<T> rand(size_type Length) const;
-  
-  ~RandomVectorGenerator();
+  std::vector<T> rand(length_type<T> Length);
 
 };
 
@@ -71,18 +71,14 @@ class RandomStringGenerator {
   
 private:
   
-  RandomVectorGenerator<std::string>* Generator;
+  RandomVectorGenerator<std::string> Generator;
   
 public:
   
-  typedef std::vector<std::string>::size_type size_type;
-  
   RandomStringGenerator(const std::vector<std::string> &ListToChooseFrom)
-  : Generator(new RandomVectorGenerator<std::string>(ListToChooseFrom)) {}
-  
-  std::string rand(size_type Length) const;
+  : Generator(ListToChooseFrom) {}
   
-  ~RandomStringGenerator();
+  std::string rand(length_type<std::string> Length);
 
 };
 
diff --git a/swift/include/swift/Obfuscation/Renaming.h b/swift/include/swift/Obfuscation/Renaming.h
index a9cc7a31b37..162dd501ff8 100644
--- a/swift/include/swift/Obfuscation/Renaming.h
+++ b/swift/include/swift/Obfuscation/Renaming.h
@@ -12,7 +12,7 @@
 namespace swift {
 namespace obfuscation {
 
-typedef std::vector<std::pair<std::string, std::string>> FilesList;
+using FilesList = std::vector<std::pair<std::string, std::string>>;
 
 llvm::Expected<FilesList> performRenaming(std::string MainExecutablePath,
                                           const FilesJson &FilesJson,
diff --git a/swift/lib/Obfuscation/CompilerInfrastructure.cpp b/swift/lib/Obfuscation/CompilerInfrastructure.cpp
index d2191f1a6fa..2513280c5e6 100644
--- a/swift/lib/Obfuscation/CompilerInfrastructure.cpp
+++ b/swift/lib/Obfuscation/CompilerInfrastructure.cpp
@@ -23,12 +23,10 @@ struct CompilerInvocationConfiguration {
   MainExecutablePath(MainExecutablePath),
   SdkPath(FilesJson.Sdk.Path),
   InputFilenames(FilesJson.Filenames) {
-    std::vector<SearchPathOptions::FrameworkSearchPath> Paths;
     for (const auto &Framework : FilesJson.ExplicitelyLinkedFrameworks) {
       SearchPathOptions::FrameworkSearchPath Path(Framework.Path, false);
       Paths.push_back(Path);
     }
-    this->Paths = Paths;
   }
 };
 
diff --git a/swift/lib/Obfuscation/DataStructures.cpp b/swift/lib/Obfuscation/DataStructures.cpp
index 929719f1292..f715685511a 100644
--- a/swift/lib/Obfuscation/DataStructures.cpp
+++ b/swift/lib/Obfuscation/DataStructures.cpp
@@ -29,7 +29,7 @@ void MappingTraits<Project>::mapping(IO &Io, Project &Object) {
   Io.mapRequired("rootPath", Object.RootPath);
 }
 
-typedef swift::obfuscation::Module ObfuscationModule;
+using ObfuscationModule = swift::obfuscation::Module;
 void MappingTraits<ObfuscationModule>::mapping(IO &Io,
                                                ObfuscationModule &Object) {
   Io.mapRequired("name", Object.Name);
@@ -40,7 +40,7 @@ void MappingTraits<Sdk>::mapping(IO &Io, Sdk &Object) {
   Io.mapRequired("path", Object.Path);
 }
 
-typedef ExplicitelyLinkedFrameworks ELF;
+using ELF = ExplicitelyLinkedFrameworks;
 void MappingTraits<ELF>::mapping(IO &Io, ELF &Object) {
   Io.mapRequired("name", Object.Name);
   Io.mapRequired("path", Object.Path);
@@ -53,6 +53,7 @@ void MappingTraits<SymbolsJson>::mapping(IO &Io, SymbolsJson &Object) {
 void MappingTraits<Symbol>::mapping(IO &Io, Symbol &Object) {
   Io.mapRequired("identifier", Object.Identifier);
   Io.mapRequired("name", Object.Name);
+  Io.mapRequired("module", Object.Module);
 }
 
 void MappingTraits<RenamesJson>::mapping(IO &Io, RenamesJson &Object) {
@@ -63,6 +64,7 @@ void MappingTraits<SymbolRenaming>::mapping(IO &Io, SymbolRenaming &Object) {
   Io.mapRequired("identifier", Object.Identifier);
   Io.mapRequired("originalName", Object.OriginalName);
   Io.mapRequired("obfuscatedName", Object.ObfuscatedName);
+  Io.mapRequired("module", Object.Module);
 }
 
 template <typename U>
@@ -93,6 +95,7 @@ void ObjectTraits<SymbolsJson>::mapping(Output &Out, SymbolsJson &Object) {
 void ObjectTraits<Symbol>::mapping(Output &Out, Symbol &Object) {
   Out.mapRequired("name", Object.Name);
   Out.mapRequired("identifier", Object.Identifier);
+  Out.mapRequired("module", Object.Module);
 }
 
 void ObjectTraits<RenamesJson>::mapping(Output &Out, RenamesJson &Object) {
@@ -103,6 +106,7 @@ void ObjectTraits<SymbolRenaming>::mapping(Output &Out, SymbolRenaming &Object)
   Out.mapRequired("identifier", Object.Identifier);
   Out.mapRequired("originalName", Object.OriginalName);
   Out.mapRequired("obfuscatedName", Object.ObfuscatedName);
+  Out.mapRequired("module", Object.Module);
 }
 
 } // namespace json
diff --git a/swift/lib/Obfuscation/NameMapping.cpp b/swift/lib/Obfuscation/NameMapping.cpp
index cfdca456e92..aca41029b25 100644
--- a/swift/lib/Obfuscation/NameMapping.cpp
+++ b/swift/lib/Obfuscation/NameMapping.cpp
@@ -13,61 +13,66 @@ class UniqueTypeNameGenerator {
   
 private:
   std::set<std::string> GeneratedSymbols;
-  const std::vector<std::string> HeadSymbols = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};
+  static const std::vector<std::string> UniquelyTailSymbols;
+  static const std::vector<std::string> HeadSymbols;
   std::vector<std::string> TailSymbols;
-  RandomElementChooser<std::string>* HeadGenerator;
-  RandomStringGenerator* TailGenerator;
+  RandomElementChooser<std::string> HeadGenerator;
+  RandomStringGenerator TailGenerator;
   const std::string::size_type IdentifierLength = 32;
   
   llvm::Expected<std::string> generateName(int NumbersOfTriesLeft) {
     if (NumbersOfTriesLeft <= 0) {
       return stringError("couldn't generate unique type name");
     }
-    auto Head = HeadGenerator->rand();
-    auto Tail = TailGenerator->rand(IdentifierLength - 1);
+    auto Head = HeadGenerator.rand();
+    auto Tail = TailGenerator.rand(IdentifierLength - 1);
     auto Name = Head + Tail;
     
     if (GeneratedSymbols.insert(Name).second) {
       return Name;
     } else {
-      return this->generateName(NumbersOfTriesLeft - 1);
+      return generateName(NumbersOfTriesLeft - 1);
     }
   }
   
-public:
-  
-  UniqueTypeNameGenerator() {
-    TailSymbols = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
-    TailSymbols.insert(TailSymbols.end(),
-                       HeadSymbols.begin(),
-                       HeadSymbols.end());
-    HeadGenerator = new RandomElementChooser<std::string>(HeadSymbols);
-    TailGenerator = new RandomStringGenerator(TailSymbols);
+  static std::vector<std::string> concatenateHeadAndTailSymbols() {
+    std::vector<std::string> TemporaryTailSymbols = UniquelyTailSymbols;
+    TemporaryTailSymbols.insert(TemporaryTailSymbols.cend(),
+                                HeadSymbols.cbegin(),
+                                HeadSymbols.cend());
+    return TemporaryTailSymbols;
   }
   
+public:
+  
+  UniqueTypeNameGenerator()
+  : TailSymbols(concatenateHeadAndTailSymbols()),
+  HeadGenerator(HeadSymbols),
+  TailGenerator(TailSymbols) {}
   
   llvm::Expected<std::string> generateName() {
     return generateName(100);
   }
   
-  ~UniqueTypeNameGenerator() {
-    delete HeadGenerator;
-    delete TailGenerator;
-  }
-  
 };
+  
+const std::vector<std::string> UniqueTypeNameGenerator::UniquelyTailSymbols =
+  {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
+  
+const std::vector<std::string> UniqueTypeNameGenerator::HeadSymbols =
+  {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};
 
 llvm::Expected<RenamesJson> proposeRenamings(const SymbolsJson &SymbolsJson) {
   
-  auto *TypeNameGenerator = new UniqueTypeNameGenerator();
-  
+  UniqueTypeNameGenerator TypeNameGenerator;
   RenamesJson RenamesJson;
   
   for (const auto &Symbol : SymbolsJson.Symbols) {
     SymbolRenaming Renaming;
     Renaming.Identifier = Symbol.Identifier;
     Renaming.OriginalName = Symbol.Name;
-    auto NameOrError = TypeNameGenerator->generateName();
+    Renaming.Module = Symbol.Module;
+    auto NameOrError = TypeNameGenerator.generateName();
     if (auto Error = NameOrError.takeError()) {
       return std::move(Error);
     }
@@ -75,8 +80,6 @@ llvm::Expected<RenamesJson> proposeRenamings(const SymbolsJson &SymbolsJson) {
     RenamesJson.Symbols.push_back(Renaming);
   }
   
-  delete TypeNameGenerator;
-
   return RenamesJson;
 }
 
diff --git a/swift/lib/Obfuscation/Random.cpp b/swift/lib/Obfuscation/Random.cpp
index e57ae0b77ca..446e7447b08 100644
--- a/swift/lib/Obfuscation/Random.cpp
+++ b/swift/lib/Obfuscation/Random.cpp
@@ -6,46 +6,24 @@ namespace obfuscation {
 int RandomIntegerGenerator::rand() {
   return Distribution(Engine);
 }
-
-template<typename T>
-T RandomElementChooser<T>::rand() const {
-  return List.at(Generator->rand());
-}
-  
-template<typename T>
-RandomElementChooser<T>::~RandomElementChooser() {
-  delete Generator;
-}
-
-template std::string RandomElementChooser<std::string>::rand() const;
-template std::string RandomElementChooser<std::string>::~RandomElementChooser();
   
 template<typename T>
-std::vector<T> RandomVectorGenerator<T>::rand(size_type Length) const {
+std::vector<T> RandomVectorGenerator<T>::rand(length_type<T> Length) {
   std::vector<T> Result;
-  for (size_type i = 0; i < Length; i++) {
-    Result.push_back(Chooser->rand());
+  for (length_type<T> i = 0; i < Length; i++) {
+    Result.push_back(Chooser.rand());
   }
   return Result;
 }
 
-template<typename T>
-RandomVectorGenerator<T>::~RandomVectorGenerator() {
-  delete Chooser;
-}
-
-std::string RandomStringGenerator::rand(size_type Length) const {
-  auto Vector = Generator->rand(Length);
+std::string RandomStringGenerator::rand(length_type<std::string> Length) {
+  auto Vector = Generator.rand(Length);
   std::string Result;
   for (const auto &Elem : Vector) {
     Result += Elem;
   }
   return Result;
 }
-  
-RandomStringGenerator::~RandomStringGenerator() {
-  delete Generator;
-}
 
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/lib/Obfuscation/Renaming.cpp b/swift/lib/Obfuscation/Renaming.cpp
index 5637e6f30c3..9e697f9bb62 100644
--- a/swift/lib/Obfuscation/Renaming.cpp
+++ b/swift/lib/Obfuscation/Renaming.cpp
@@ -3,14 +3,17 @@
 #include "swift/Obfuscation/SymbolProvider.h"
 #include "swift/Obfuscation/Utils.h"
 
+#include "llvm/ADT/STLExtras.h"
 #include "llvm/Support/FileSystem.h"
 #include "llvm/Support/Path.h"
 #include "swift/IDE/Utils.h"
 
+#include <memory>
+
 namespace swift {
 namespace obfuscation {
 
-typedef llvm::SmallString<256> SmallPath;
+using SmallPath = llvm::SmallString<256>;
   
 llvm::Expected<SmallPath>
 computeObfuscatedPath(const StringRef Filename,
@@ -58,27 +61,44 @@ llvm::Error copyProject(const StringRef OriginalPath,
   return llvm::Error::success();
 }
 
-bool performActualRenaming(swift::SourceFile* Current,
-                           const FilesJson &FilesJson,
-                           const RenamesJson &RenamesJson,
-                           swift::SourceManager &SourceManager,
-                           swift::ide::SourceEditOutputConsumer& Editor) {
+static bool shouldRename(const SymbolRenaming &Symbol,
+                         const SymbolWithRange &SymbolWithRange,
+                         const std::string &ModuleName) {
+  return SymbolWithRange.Symbol.Identifier == Symbol.Identifier
+      && SymbolWithRange.Symbol.Name == Symbol.OriginalName
+      && SymbolWithRange.Symbol.Module == ModuleName;
+}
   
+llvm::Expected<bool> performActualRenaming(SourceFile &Current,
+                                           const std::string &ModuleName,
+                                           const RenamesJson &RenamesJson,
+                                           swift::SourceManager &SourceManager,
+                                           unsigned int BufferId,
+                                           StringRef Path) {
   bool performedRenaming = false;
+  auto SymbolsWithRanges = findSymbolsWithRanges(Current);
   
-  auto SymbolsWithRanges = findSymbolsWithRanges(*Current);
+  std::unique_ptr<llvm::raw_fd_ostream> DescriptorStream(nullptr);
+  std::unique_ptr<swift::ide::SourceEditOutputConsumer> Editor(nullptr);
   
   //TODO: would be way better to have a map here instead of iterating through symbols
   for (const auto &SymbolWithRange : SymbolsWithRanges) {
     for (const auto &Symbol : RenamesJson.Symbols) {
       
-      if (SymbolWithRange.Symbol.Identifier == Symbol.Identifier
-          && SymbolWithRange.Symbol.Name == Symbol.OriginalName
-          && std::string::npos != SymbolWithRange.Symbol.Identifier.find(FilesJson.Module.Name)) {
-        
-        Editor.ide::SourceEditConsumer::accept(SourceManager,
-                                               SymbolWithRange.Range,
-                                               StringRef(Symbol.ObfuscatedName));
+      if (shouldRename(Symbol, SymbolWithRange, ModuleName)) {
+        if (Editor == nullptr) {
+          std::error_code Error;
+          DescriptorStream = llvm::make_unique<llvm::raw_fd_ostream>(Path, Error, llvm::sys::fs::F_None);
+          if (DescriptorStream->has_error() || Error) {
+            return stringError("Cannot open output file: " + Path.str(), Error);
+          }
+          Editor = llvm::make_unique<swift::ide::SourceEditOutputConsumer>(SourceManager,
+                                                                           BufferId,
+                                                                           *DescriptorStream);
+        }
+        Editor->ide::SourceEditConsumer::accept(SourceManager,
+                                                SymbolWithRange.Range,
+                                                StringRef(Symbol.ObfuscatedName));
         performedRenaming = true;
         break;
       }
@@ -115,17 +135,14 @@ performRenaming(std::string MainExecutablePath,
       
       auto Path = PathOrError.get().str();
       auto &SourceManager = Current->getASTContext().SourceMgr;
-      std::error_code Error;
-      llvm::raw_fd_ostream DescriptorStream(Path, Error, llvm::sys::fs::F_None);
-      if (DescriptorStream.has_error() || Error) {
-        return stringError("Cannot open output file: " + Path.str(), Error);
-      }
-      
       auto BufferId = Current->getBufferID().getValue();
-      swift::ide::SourceEditOutputConsumer Editor(SourceManager,
-                                                  BufferId,
-                                                  DescriptorStream);
-      if (performActualRenaming(Current, FilesJson, RenamesJson, SourceManager, Editor)) {
+      
+      if (performActualRenaming(*Current,
+                                FilesJson.Module.Name,
+                                RenamesJson,
+                                SourceManager,
+                                BufferId,
+                                Path)) {
         auto Filename = llvm::sys::path::filename(Path).str();
         Files.push_back(std::pair<std::string, std::string>(Filename, Path));
       }
diff --git a/swift/lib/Obfuscation/SymbolProvider.cpp b/swift/lib/Obfuscation/SymbolProvider.cpp
index f410f83cb58..14314535b1f 100644
--- a/swift/lib/Obfuscation/SymbolProvider.cpp
+++ b/swift/lib/Obfuscation/SymbolProvider.cpp
@@ -11,9 +11,11 @@ namespace obfuscation {
 llvm::Expected<Symbol> extractSymbol(Decl* Declaration) {
   std::vector<std::string> Parts;
   std::string SymbolName;
+  std::string ModuleName;
   if (const auto *NominalTypeDeclaration = dyn_cast<NominalTypeDecl>(Declaration)) {
+    ModuleName = NominalTypeDeclaration->getModuleContext()->getBaseName().getIdentifier().get();
     Parts.push_back("module");
-    Parts.push_back(NominalTypeDeclaration->getModuleContext()->getBaseName().getIdentifier().get());
+    Parts.push_back(ModuleName);
     if (auto *EnumDeclaration = dyn_cast<EnumDecl>(NominalTypeDeclaration)) {
       SymbolName = EnumDeclaration->getDeclaredInterfaceType()->getString();
       Parts.push_back("enum." + SymbolName);
@@ -49,6 +51,7 @@ llvm::Expected<Symbol> extractSymbol(Decl* Declaration) {
   Symbol SymbolStruct;
   SymbolStruct.Identifier = StringParts;
   SymbolStruct.Name = SymbolName;
+  SymbolStruct.Module = ModuleName;
   return SymbolStruct;
 }
 
@@ -58,9 +61,8 @@ bool SymbolWithRange::operator< (const SymbolWithRange &Right) const {
 
 struct RenamesCollector: public SourceEntityWalker {
   std::set<SymbolWithRange> Bucket;
-  RenamesCollector() {}
   
-  void handleSymbol(const Symbol &Symbol, const CharSourceRange &Range) {
+  void handleSymbol(Symbol &Symbol, const CharSourceRange &Range) {
     Bucket.insert(SymbolWithRange(Symbol, Range));
   }
   
diff --git a/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp b/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
index c8fc7f85bdd..c29a4e915ba 100644
--- a/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
+++ b/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
@@ -25,9 +25,11 @@ RenamesJsonPath("renamesjson",
 
 void printRenamings(const std::vector<SymbolRenaming> &Renamings) {
   for (const auto &Renaming : Renamings) {
-    llvm::outs() << "identifier: " << Renaming.Identifier << '\n'
+    llvm::outs()
+      << "identifier: " << Renaming.Identifier << '\n'
       << "originalName: " << Renaming.OriginalName << '\n'
-      << "obfuscatedName: " << Renaming.ObfuscatedName << '\n';
+      << "obfuscatedName: " << Renaming.ObfuscatedName << '\n'
+      << "module: " << Renaming.Module << '\n';
   }
 }
 
diff --git a/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp b/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
index f0f925ca861..7acfa44c193 100644
--- a/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
+++ b/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
@@ -26,8 +26,10 @@ SymbolJsonPath("symbolsjson",
 
 void printSymbols(const std::vector<Symbol> &Symbols) {
   for (const auto &Symbol : Symbols) {
-    llvm::outs() << "identifier: " << Symbol.Identifier << '\n'
-      << "name: " << Symbol.Name << '\n';
+    llvm::outs()
+      << "identifier: " << Symbol.Identifier << '\n'
+      << "name: " << Symbol.Name << '\n'
+      << "module: " << Symbol.Module << '\n';
   }
 }
 
-- 
2.17.1 (Apple Git-112)


From 7fb067d6cfa03719fcca460d9024665886576a80 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Tue, 16 Jan 2018 16:31:08 +0100
Subject: [PATCH 022/138] Support for renaming constructor usage

Reviewers: jerzy.kleszcz, jakub.sowa

Subscribers: krzysztof.siejkowski, jakub.sowa

Differential Revision: https://phabricator.polidea.com/D2755
---
 Documentation/Constructors.md                 | 149 ++++++++++++++++++
 .../swift/Obfuscation/DataStructures.h        |   5 +
 .../swift/Obfuscation/DeclarationParser.h     |  15 ++
 .../{SymbolProvider.h => SourceFileWalker.h}  |   8 +-
 swift/lib/Obfuscation/CMakeLists.txt          |   7 +-
 .../Obfuscation/CompilerInfrastructure.cpp    |   2 -
 swift/lib/Obfuscation/DeclarationParser.cpp   |  73 +++++++++
 swift/lib/Obfuscation/Renaming.cpp            |   4 +-
 swift/lib/Obfuscation/SourceFileWalker.cpp    |  66 ++++++++
 swift/lib/Obfuscation/SymbolExtracting.cpp    |  23 ++-
 swift/lib/Obfuscation/SymbolProvider.cpp      | 103 ------------
 .../obfuscator-renamer/obfuscator-renamer.cpp |   3 +-
 12 files changed, 328 insertions(+), 130 deletions(-)
 create mode 100644 Documentation/Constructors.md
 create mode 100644 swift/include/swift/Obfuscation/DeclarationParser.h
 rename swift/include/swift/Obfuscation/{SymbolProvider.h => SourceFileWalker.h} (76%)
 create mode 100644 swift/lib/Obfuscation/DeclarationParser.cpp
 create mode 100644 swift/lib/Obfuscation/SourceFileWalker.cpp
 delete mode 100644 swift/lib/Obfuscation/SymbolProvider.cpp

diff --git a/Documentation/Constructors.md b/Documentation/Constructors.md
new file mode 100644
index 00000000000..46c68437b35
--- /dev/null
+++ b/Documentation/Constructors.md
@@ -0,0 +1,149 @@
+# Constructors Renaming
+
+# Finding constructors declarations and calls in source code
+
+After compiling source code we extract Decl objects. To determine if the Decl object represents either constructor declaration or call we cast Decl to ConstructorDecl using dyn_cast.
+```
+if (auto *ConstructorDeclaration = dyn_cast<ConstructorDecl>(BaseDeclaration)) { ... }
+```
+
+We can also identify that Decl relates to constructor by retrieving it's kind name:
+```
+auto DeclKind = BaseDeclaration->getKind();
+auto KindName = BaseDeclaration->getKindName(DeclKind);
+```
+
+# Use Cases
+
+When renaming constructors various cases were considered. For each case we gathered ideas and Swift Compilator solutions to differenciate constructor definitions and calls in source code.
+
+## Structs
+
+### Empty struct without init
+
+#### Declaration
+
+No explicit constructor declaration in source code - nothing to obfuscate.
+
+#### Call
+
+To identify the constructor type we check the result type by calling:
+```
+Decl->getResultInterfaceType()
+```
+
+### Empty struct with custom empty init
+
+**TODO: Differenciate constructor declarations from calls**
+
+#### Declaration
+
+To identify the constructor type we check the result type by calling:
+```
+Decl->getResultInterfaceType()
+```
+
+#### Call
+
+To identify the constructor type we check the result type by calling:
+```
+Decl->getResultInterfaceType()
+```
+
+### Struct with property and memberwise init
+
+**TODO: Differenciate constructor declarations from calls**
+
+#### Declaration
+
+To identify the constructor type we check the result type by calling:
+```
+Decl->getResultInterfaceType()
+```
+
+#### Call
+
+To identify the constructor type we check the result type by calling:
+```
+Decl->getResultInterfaceType()
+```
+
+## Classes
+
+### Empty class without init
+
+**TODO: Differenciate constructor declarations from calls**
+
+#### Declaration
+
+To identify the constructor type we check the result type by calling:
+```
+Decl->getResultInterfaceType()
+```
+
+#### Call
+
+To identify the constructor type we check the result type by calling:
+```
+Decl->getResultInterfaceType()
+```
+
+### Empty class with custom empty init
+
+**TODO: Differenciate constructor declarations from calls**
+
+#### Declaration
+
+To identify the constructor type we check the result type by calling:
+```
+Decl->getResultInterfaceType()
+```
+
+#### Call
+
+To identify the constructor type we check the result type by calling:
+```
+Decl->getResultInterfaceType()
+```
+
+### Empty class without init - subclass of UIViewController
+
+**TODO: Differenciate constructor declarations from calls**
+
+#### Declaration
+
+To identify the constructor type we check the result type by calling:
+```
+Decl->getResultInterfaceType()
+```
+
+#### Call
+
+To identify the constructor type we check the result type by calling:
+```
+Decl->getResultInterfaceType()
+```
+
+### Empty subclass of UIViewController with custom init and `required init?(coder aDecoder: NSCoder)`
+
+**TODO: Differenciate constructor declarations from calls**
+
+#### Declaration
+
+To identify the custom constructor type we check the result type by calling:
+```
+Decl->getResultInterfaceType()
+```
+
+For  `required init?(coder aDecoder: NSCoder)` getRequiredInterfactType() returns error. We can handle it by checking:
+```
+if (ConstructorDeclaration->getInterfaceType()->getKind() == TypeKind::Error) { ... }
+```
+
+#### Call
+
+To identify the custom constructor type we check the result type by calling:
+```
+Decl->getResultInterfaceType()
+```
+
diff --git a/swift/include/swift/Obfuscation/DataStructures.h b/swift/include/swift/Obfuscation/DataStructures.h
index 9d0eb4f1ded..f8881e99657 100644
--- a/swift/include/swift/Obfuscation/DataStructures.h
+++ b/swift/include/swift/Obfuscation/DataStructures.h
@@ -42,6 +42,11 @@ struct Symbol {
   std::string Name;
   std::string Module;
   
+  Symbol() = default;
+  
+  Symbol(const std::string &Identifier, const std::string &Name, const std::string &Module)
+  : Identifier(Identifier), Name(Name), Module(Module) {};
+  
   bool operator< (const Symbol &Right) const;
 };
 
diff --git a/swift/include/swift/Obfuscation/DeclarationParser.h b/swift/include/swift/Obfuscation/DeclarationParser.h
new file mode 100644
index 00000000000..d13dbb81745
--- /dev/null
+++ b/swift/include/swift/Obfuscation/DeclarationParser.h
@@ -0,0 +1,15 @@
+#ifndef DeclarationParser_h
+#define DeclarationParser_h
+
+#include "swift/Frontend/Frontend.h"
+#include "swift/Obfuscation/DataStructures.h"
+
+namespace swift {
+namespace obfuscation {
+
+llvm::Expected<Symbol> extractSymbol(Decl* Declaration);
+    
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* DeclarationParser_h */
diff --git a/swift/include/swift/Obfuscation/SymbolProvider.h b/swift/include/swift/Obfuscation/SourceFileWalker.h
similarity index 76%
rename from swift/include/swift/Obfuscation/SymbolProvider.h
rename to swift/include/swift/Obfuscation/SourceFileWalker.h
index b5e4bffb711..a9e2764c367 100644
--- a/swift/include/swift/Obfuscation/SymbolProvider.h
+++ b/swift/include/swift/Obfuscation/SourceFileWalker.h
@@ -1,5 +1,5 @@
-#ifndef SymbolProvider_h
-#define SymbolProvider_h
+#ifndef SourceFileWalker_h
+#define SourceFileWalker_h
 
 #include "swift/Frontend/Frontend.h"
 #include "swift/Obfuscation/DataStructures.h"
@@ -20,9 +20,9 @@ struct SymbolWithRange {
   bool operator< (const SymbolWithRange &Right) const;
 };
 
-std::set<SymbolWithRange> findSymbolsWithRanges(SourceFile &SourceFile);
+std::set<SymbolWithRange> walkAndCollectSymbols(SourceFile &SourceFile);
 
 } //namespace obfuscation
 } //namespace swift
 
-#endif /* SymbolProvider_h */
+#endif /* SourceFileWalker_h */
diff --git a/swift/lib/Obfuscation/CMakeLists.txt b/swift/lib/Obfuscation/CMakeLists.txt
index e2032a7c7f8..a705ad96e34 100644
--- a/swift/lib/Obfuscation/CMakeLists.txt
+++ b/swift/lib/Obfuscation/CMakeLists.txt
@@ -1,12 +1,13 @@
 add_swift_library(swiftObfuscation STATIC
+  CompilerInfrastructure.cpp
   DataStructures.cpp
+  DeclarationParser.cpp
   FileIO.cpp
   NameMapping.cpp
   Random.cpp
-  SymbolExtracting.cpp
   Renaming.cpp
-  SymbolProvider.cpp
-  CompilerInfrastructure.cpp
+  SourceFileWalker.cpp
+  SymbolExtracting.cpp
   Utils.cpp
   LINK_LIBRARIES
   swiftParse
diff --git a/swift/lib/Obfuscation/CompilerInfrastructure.cpp b/swift/lib/Obfuscation/CompilerInfrastructure.cpp
index 2513280c5e6..42fe8fb4200 100644
--- a/swift/lib/Obfuscation/CompilerInfrastructure.cpp
+++ b/swift/lib/Obfuscation/CompilerInfrastructure.cpp
@@ -50,8 +50,6 @@ setupCompilerInstance(CompilerInstance &CompilerInstance,
                       std::string MainExecutablePath) {
   CompilerInvocationConfiguration Configuration(FilesJson, MainExecutablePath);
   auto Invocation = createInvocation(Configuration);
-  PrintingDiagnosticConsumer PrintDiags;
-  CompilerInstance.addDiagnosticConsumer(&PrintDiags);
   if (CompilerInstance.setup(Invocation)) {
     return stringError("Error during JSON file read");
   }
diff --git a/swift/lib/Obfuscation/DeclarationParser.cpp b/swift/lib/Obfuscation/DeclarationParser.cpp
new file mode 100644
index 00000000000..48e59afea3b
--- /dev/null
+++ b/swift/lib/Obfuscation/DeclarationParser.cpp
@@ -0,0 +1,73 @@
+#include "swift/Obfuscation/DeclarationParser.h"
+#include "swift/Obfuscation/Utils.h"
+
+#include <sstream>
+#include <string>
+#include <vector>
+
+namespace swift {
+namespace obfuscation {
+
+std::string identifierFromParts(std::vector<std::string> &Parts) {
+  if (Parts.empty()) {
+    return "";
+  } else if (Parts.size() == 1) {
+    return Parts[0];
+  } else {
+    //TODO: can we rewrite it to use llvm:raw_string_ostream?
+    std::stringstream Result;
+    std::copy(Parts.cbegin(),
+              Parts.cend(),
+              std::ostream_iterator<std::string>(Result, "."));
+    return Result.str();
+  }
+}
+
+llvm::Expected<Symbol> parse(const swift::NominalTypeDecl* Declaration) {
+  std::vector<std::string> Parts;
+  std::string SymbolName;
+  std::string ModuleName = Declaration->getModuleContext()->getBaseName().getIdentifier().get();
+  Parts.push_back("module");
+  Parts.push_back(ModuleName);
+  if (auto *EnumDeclaration = dyn_cast<EnumDecl>(Declaration)) {
+    SymbolName = EnumDeclaration->getDeclaredInterfaceType()->getString();
+    Parts.push_back("enum." + SymbolName);
+  } else if (auto *ClassDeclaration = dyn_cast<ClassDecl>(Declaration)) {
+    SymbolName = ClassDeclaration->getDeclaredInterfaceType()->getString();
+    Parts.push_back("class." + SymbolName);
+  } else if (auto *ProtocolDeclaration = dyn_cast<ProtocolDecl>(Declaration)) {
+    SymbolName = ProtocolDeclaration->getDeclaredInterfaceType()->getString();
+    Parts.push_back("protocol." + SymbolName);
+  } else if (auto *StructDeclaration = dyn_cast<StructDecl>(Declaration)) {
+    SymbolName = StructDeclaration->getDeclaredInterfaceType()->getString();
+    Parts.push_back("struct." + SymbolName);
+  } else {
+    return stringError("found unsupported declaration type");
+  }
+  
+  return Symbol(identifierFromParts(Parts), SymbolName, ModuleName);
+}
+
+llvm::Expected<Symbol> parse(const swift::ValueDecl* Declaration) {
+  return stringError("found unsupported declaration type");
+}
+
+llvm::Expected<Symbol> extractSymbol(Decl* Declaration) {
+  
+  std::unique_ptr<llvm::Expected<Symbol>> SymbolOrError(nullptr);
+  if (const auto *NominalTypeDeclaration = dyn_cast<NominalTypeDecl>(Declaration)) {
+    SymbolOrError = llvm::make_unique<llvm::Expected<Symbol>>(parse(NominalTypeDeclaration));
+  } else if (const auto *ValueDeclaration = dyn_cast<ValueDecl>(Declaration)) {
+    SymbolOrError = llvm::make_unique<llvm::Expected<Symbol>>(parse(ValueDeclaration));
+  } else {
+    return stringError("unsupported declaration type");
+  }
+  
+  if (auto Error = SymbolOrError->takeError()) {
+    return std::move(Error);
+  }
+  return SymbolOrError->get();
+}
+  
+} //namespace obfuscation
+} //namespace swift
diff --git a/swift/lib/Obfuscation/Renaming.cpp b/swift/lib/Obfuscation/Renaming.cpp
index 9e697f9bb62..2cee10e6ce9 100644
--- a/swift/lib/Obfuscation/Renaming.cpp
+++ b/swift/lib/Obfuscation/Renaming.cpp
@@ -1,6 +1,6 @@
 #include "swift/Obfuscation/Renaming.h"
 #include "swift/Obfuscation/CompilerInfrastructure.h"
-#include "swift/Obfuscation/SymbolProvider.h"
+#include "swift/Obfuscation/SourceFileWalker.h"
 #include "swift/Obfuscation/Utils.h"
 
 #include "llvm/ADT/STLExtras.h"
@@ -76,7 +76,7 @@ llvm::Expected<bool> performActualRenaming(SourceFile &Current,
                                            unsigned int BufferId,
                                            StringRef Path) {
   bool performedRenaming = false;
-  auto SymbolsWithRanges = findSymbolsWithRanges(Current);
+  auto SymbolsWithRanges = walkAndCollectSymbols(Current);
   
   std::unique_ptr<llvm::raw_fd_ostream> DescriptorStream(nullptr);
   std::unique_ptr<swift::ide::SourceEditOutputConsumer> Editor(nullptr);
diff --git a/swift/lib/Obfuscation/SourceFileWalker.cpp b/swift/lib/Obfuscation/SourceFileWalker.cpp
new file mode 100644
index 00000000000..57053b25eff
--- /dev/null
+++ b/swift/lib/Obfuscation/SourceFileWalker.cpp
@@ -0,0 +1,66 @@
+#include "swift/Obfuscation/SourceFileWalker.h"
+#include "swift/Obfuscation/DeclarationParser.h"
+
+#include <string>
+
+namespace swift {
+namespace obfuscation {
+  
+bool SymbolWithRange::operator< (const SymbolWithRange &Right) const {
+  auto less = std::less<const char *>();
+  if (const auto *RangeValuePointer = static_cast<const char *>(Range.getStart().getOpaquePointerValue())) {
+    if (const auto *RightRangeValuePointer = static_cast<const char *>(Right.Range.getStart().getOpaquePointerValue())) {
+      auto isRangeLess = less(RangeValuePointer, RightRangeValuePointer);
+      return Symbol < Right.Symbol || isRangeLess;
+    }
+  }
+  assert(false && "Comparing Symbols with Ranges requires Ranges Start Location Values Pointers to be of const char type");
+}
+
+struct RenamesCollector: public SourceEntityWalker {
+  std::set<SymbolWithRange> Bucket;
+  
+  void handleSymbol(Symbol &Symbol, const CharSourceRange &Range) {
+    Bucket.insert(SymbolWithRange(Symbol, Range));
+  }
+  
+  bool walkToDeclPre(Decl *Declaration, CharSourceRange Range) override {
+    if (Declaration->isImplicit()) {
+      return false;
+    }
+    auto SymbolOrError = extractSymbol(Declaration);
+    if (auto Error = SymbolOrError.takeError()) {
+      llvm::consumeError(std::move(Error));
+      return true;
+    }
+    handleSymbol(SymbolOrError.get(), Range);
+    return true;
+  }
+  
+  bool visitDeclReference(ValueDecl *Declaration, CharSourceRange Range,
+                          TypeDecl *CtorTyRef, ExtensionDecl *ExtTyRef,
+                          Type T, ReferenceMetaData Data) override {
+    
+    std::unique_ptr<llvm::Expected<Symbol>> SymbolOrError(nullptr);
+    if (CtorTyRef) {
+      SymbolOrError = llvm::make_unique<llvm::Expected<Symbol>>(extractSymbol(CtorTyRef));
+    } else {
+       SymbolOrError = llvm::make_unique<llvm::Expected<Symbol>>(extractSymbol(Declaration));
+    }
+    if (auto Error = SymbolOrError->takeError()) {
+      llvm::consumeError(std::move(Error));
+      return true;
+    }
+    handleSymbol(SymbolOrError->get(), Range);
+    return true;
+  }
+};
+
+std::set<SymbolWithRange> walkAndCollectSymbols(SourceFile &SourceFile) {
+  RenamesCollector Collector;
+  Collector.walk(SourceFile);
+  return Collector.Bucket;
+}
+
+} //namespace obfuscation
+} //namespace swift
diff --git a/swift/lib/Obfuscation/SymbolExtracting.cpp b/swift/lib/Obfuscation/SymbolExtracting.cpp
index 5f8913345b6..54376093f5f 100644
--- a/swift/lib/Obfuscation/SymbolExtracting.cpp
+++ b/swift/lib/Obfuscation/SymbolExtracting.cpp
@@ -1,7 +1,7 @@
 #include "swift/Obfuscation/SymbolExtracting.h"
 #include "swift/Obfuscation/DataStructures.h"
 #include "swift/Obfuscation/CompilerInfrastructure.h"
-#include "swift/Obfuscation/SymbolProvider.h"
+#include "swift/Obfuscation/SourceFileWalker.h"
 
 #include <vector>
 #include <set>
@@ -9,15 +9,6 @@
 namespace swift {
 namespace obfuscation {
 
-std::set<Symbol> findSymbolsToObfuscate(SourceFile &SourceFile) {
-  auto Source = findSymbolsWithRanges(SourceFile);
-  std::set<Symbol> Result;
-  for (const auto &Symbol : Source) {
-    Result.insert(Symbol.Symbol);
-  }
-  return Result;
-}
-
 llvm::Expected<SymbolsJson> extractSymbols(const FilesJson &FilesJson,
                                           std::string MainExecutablePath) {
   
@@ -30,14 +21,18 @@ llvm::Expected<SymbolsJson> extractSymbols(const FilesJson &FilesJson,
   }
   
   SymbolsJson Json;
+  std::set<Symbol> Result;
   for (auto* Unit : CompilerInstance.getMainModule()->getFiles()) {
     if (auto* Current = dyn_cast<SourceFile>(Unit)) {
-      auto CurrentSymbols = findSymbolsToObfuscate(*Current);
-      std::copy(CurrentSymbols.begin(),
-                CurrentSymbols.end(),
-                std::back_inserter(Json.Symbols));
+      auto CurrentSymbols = walkAndCollectSymbols(*Current);
+      for (const auto &Symbol : CurrentSymbols) {
+        Result.insert(Symbol.Symbol);
+      }
     }
   }
+  std::copy(Result.begin(),
+            Result.end(),
+            std::back_inserter(Json.Symbols));
   return Json;
 }
 
diff --git a/swift/lib/Obfuscation/SymbolProvider.cpp b/swift/lib/Obfuscation/SymbolProvider.cpp
deleted file mode 100644
index 14314535b1f..00000000000
--- a/swift/lib/Obfuscation/SymbolProvider.cpp
+++ /dev/null
@@ -1,103 +0,0 @@
-#include "swift/Obfuscation/SymbolProvider.h"
-#include "swift/Obfuscation/Utils.h"
-
-#include <sstream>
-#include <string>
-#include <vector>
-
-namespace swift {
-namespace obfuscation {
-  
-llvm::Expected<Symbol> extractSymbol(Decl* Declaration) {
-  std::vector<std::string> Parts;
-  std::string SymbolName;
-  std::string ModuleName;
-  if (const auto *NominalTypeDeclaration = dyn_cast<NominalTypeDecl>(Declaration)) {
-    ModuleName = NominalTypeDeclaration->getModuleContext()->getBaseName().getIdentifier().get();
-    Parts.push_back("module");
-    Parts.push_back(ModuleName);
-    if (auto *EnumDeclaration = dyn_cast<EnumDecl>(NominalTypeDeclaration)) {
-      SymbolName = EnumDeclaration->getDeclaredInterfaceType()->getString();
-      Parts.push_back("enum." + SymbolName);
-    } else if (auto *ClassDeclaration = dyn_cast<ClassDecl>(NominalTypeDeclaration)) {
-      SymbolName = ClassDeclaration->getDeclaredInterfaceType()->getString();
-      Parts.push_back("class." + SymbolName);
-    } else if (auto *ProtocolDeclaration = dyn_cast<ProtocolDecl>(NominalTypeDeclaration)) {
-      SymbolName = ProtocolDeclaration->getDeclaredInterfaceType()->getString();
-      Parts.push_back("protocol." + SymbolName);
-    } else if (auto *StructDeclaration = dyn_cast<StructDecl>(NominalTypeDeclaration)) {
-      SymbolName = StructDeclaration->getDeclaredInterfaceType()->getString();
-      Parts.push_back("struct." + SymbolName);
-    } else {
-      return stringError("found unsupported declaration type");
-    }
-  } else {
-    return stringError("found unsupported declaration type");
-  }
-  
-  std::string StringParts;
-  if (Parts.size() == 1) {
-    StringParts = Parts[0];
-  } else {
-    //TODO: can we rewrite it to use llvm:raw_string_ostream?
-    std::stringstream Result;
-    std::copy(Parts.begin(),
-              Parts.end(),
-              std::ostream_iterator<std::string>(Result, "."));
-    StringParts = Result.str();
-    StringParts.pop_back();
-  }
-  
-  Symbol SymbolStruct;
-  SymbolStruct.Identifier = StringParts;
-  SymbolStruct.Name = SymbolName;
-  SymbolStruct.Module = ModuleName;
-  return SymbolStruct;
-}
-
-bool SymbolWithRange::operator< (const SymbolWithRange &Right) const {
-  return Symbol < Right.Symbol;
-}
-
-struct RenamesCollector: public SourceEntityWalker {
-  std::set<SymbolWithRange> Bucket;
-  
-  void handleSymbol(Symbol &Symbol, const CharSourceRange &Range) {
-    Bucket.insert(SymbolWithRange(Symbol, Range));
-  }
-  
-  //TODO: this should only determine if we're interested in declaration
-  bool walkToDeclPre(Decl *Declaration, CharSourceRange Range) override {
-    if (Declaration->isImplicit()) {
-      return false;
-    }
-    auto SymbolOrError = extractSymbol(Declaration);
-    if (auto Error = SymbolOrError.takeError()) {
-      llvm::consumeError(std::move(Error));
-      return true;
-    }
-    handleSymbol(SymbolOrError.get(), Range);
-    return true;
-  }
-  
-  bool visitDeclReference(ValueDecl *Declaration, CharSourceRange Range,
-                          TypeDecl *CtorTyRef, ExtensionDecl *ExtTyRef,
-                          Type T, ReferenceMetaData Data) override {
-    auto SymbolOrError = extractSymbol(Declaration);
-    if (auto Error = SymbolOrError.takeError()) {
-      llvm::consumeError(std::move(Error));
-      return true;
-    }
-    handleSymbol(SymbolOrError.get(), Range);
-    return true;
-  }
-};
-
-std::set<SymbolWithRange> findSymbolsWithRanges(SourceFile &SourceFile) {
-  RenamesCollector Collector;
-  Collector.walk(SourceFile);
-  return Collector.Bucket;
-}
-
-} //namespace obfuscation
-} //namespace swift
diff --git a/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp b/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
index 588d88fee4a..375a72a8d41 100644
--- a/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
+++ b/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
@@ -31,8 +31,7 @@ ObfuscatedProjectPath("obfuscatedproject",
 void printObfuscatedFiles(const std::vector<std::pair<std::string, std::string>> &Files) {
   llvm::outs() << "obfuscated files:" << '\n';
   for (const auto &File : Files) {
-    llvm::outs() << "file: " << File.first << '\n'
-      << "path: " << File.second << '\n';
+    llvm::outs() << File.second << '\n';
   }
 }
 
-- 
2.17.1 (Apple Git-112)


From 203586255b48084de43f3cc37385e2c15aef23a7 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Tue, 16 Jan 2018 16:19:06 +0100
Subject: [PATCH 023/138] Doxygen documentation for public interfaces of
 DeclarationParser, SourceFileWalker, SymbolExtracting and Utils.

Reviewers: jerzy.kleszcz, jakub.sowa

Reviewed By: jerzy.kleszcz, jakub.sowa

Subscribers: jakub.sowa, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2756
---
 .../swift/Obfuscation/DeclarationParser.h     | 23 ++++++++++++++
 .../swift/Obfuscation/SourceFileWalker.h      | 25 ++++++++++++++++
 .../swift/Obfuscation/SymbolExtracting.h      | 30 +++++++++++++++++++
 swift/include/swift/Obfuscation/Utils.h       | 17 +++++++++++
 4 files changed, 95 insertions(+)

diff --git a/swift/include/swift/Obfuscation/DeclarationParser.h b/swift/include/swift/Obfuscation/DeclarationParser.h
index d13dbb81745..bd3952fd99a 100644
--- a/swift/include/swift/Obfuscation/DeclarationParser.h
+++ b/swift/include/swift/Obfuscation/DeclarationParser.h
@@ -7,6 +7,29 @@
 namespace swift {
 namespace obfuscation {
 
+/// Given the Swift AST node of Decl type, identifies the symbol it represents.
+///
+/// In case no symbol is found, returnes Error.
+///
+/// Only a subset of all the possible Decl is of interest to obfuscation.
+/// Therefore the user of this function should expect to often receive
+/// the error output and be ready to handle it gracefully.
+///
+/// Typical usage:
+/// \code
+/// auto SymbolOrError = extractSymbol(Declaration);
+/// if (auto Error = SymbolOrError.takeError()) {
+///   llvm::consumeError(std::move(Error));
+///   return true;
+/// }
+/// \endcode
+///
+/// \param Declaration The Swift AST node that may or may not represent
+///        the symbol to obfuscate.
+///
+/// \returns llvm::Expected object containing either the symbol extracted
+///          from information in \p Declaration object or llvm::Error object
+///          with the information on why no symbol could be extracted.
 llvm::Expected<Symbol> extractSymbol(Decl* Declaration);
     
 } //namespace obfuscation
diff --git a/swift/include/swift/Obfuscation/SourceFileWalker.h b/swift/include/swift/Obfuscation/SourceFileWalker.h
index a9e2764c367..4b3bb1cf16d 100644
--- a/swift/include/swift/Obfuscation/SourceFileWalker.h
+++ b/swift/include/swift/Obfuscation/SourceFileWalker.h
@@ -9,17 +9,42 @@
 namespace swift {
 namespace obfuscation {
 
+/// SymbolWithRange - struct for linking the symbol identified in the Swift
+/// source code with the range in which it was encountered.
 struct SymbolWithRange {
   Symbol Symbol;
   CharSourceRange Range;
   
+  /// @brief Trivial memberwise-like constructor
   SymbolWithRange(const swift::obfuscation::Symbol &Symbol,
                   const CharSourceRange &Range)
   : Symbol(Symbol), Range(Range) {}
   
+  /// @brief Comparison operator required for containing SymbolWithRange in
+  /// sets. It's taking into consideration both symbol identifier and range.
   bool operator< (const SymbolWithRange &Right) const;
 };
 
+/// Identifies the symbols in the given Swift AST SourceFile object.
+///
+/// The SourceFile might be extracted from the compiler after it consumes and
+/// performs the semantic analysis of the Swift cource code file. It's an AST
+/// tree that contains all the AST nodes found in the source file.
+///
+/// This method walks through the SourceFile tree and collects all the symbols
+/// that are of our interest and the place they occur in the set of
+/// SymbolWithRange structures.
+///
+/// Typical usage:
+/// \code
+/// for (auto* File : CompilerInstance.getMainModule()->getFiles()) {
+///   if (auto* SourceFile = dyn_cast<SourceFile>(File)) {
+///     auto SymbolsWithRanges = walkAndCollectSymbols(*SourceFile);
+/// \endcode
+///
+/// \param SourceFile AST tree representing the Swift source file.
+///
+/// \returns the occurences of symbols with their metadata and place.
 std::set<SymbolWithRange> walkAndCollectSymbols(SourceFile &SourceFile);
 
 } //namespace obfuscation
diff --git a/swift/include/swift/Obfuscation/SymbolExtracting.h b/swift/include/swift/Obfuscation/SymbolExtracting.h
index 567db4471c9..d1317c12b04 100644
--- a/swift/include/swift/Obfuscation/SymbolExtracting.h
+++ b/swift/include/swift/Obfuscation/SymbolExtracting.h
@@ -10,6 +10,36 @@
 namespace swift {
 namespace obfuscation {
 
+/// Performs the symbol extraction from the Swift source code files included
+/// in the FilesJson structure.
+///
+/// It utilizes the Swift compiler to perform the semantic analysis of
+/// the Swift source files. Using the information encoded in FilesJson,
+/// it creates the compiler invocation for the files, then it asks for
+/// semantic analysis, and then it uses the results of the analysis (AST tree)
+/// to identify the symbols in the Swift source code that should be obfuscated.
+///
+/// It's designed to be called from the Swift compiler tool.
+///
+/// Typical usage:
+/// \code
+/// std::string MainExecutablePath = llvm::sys::fs::getMainExecutable(
+///             argv[0], reinterpret_cast<void *>(&anchorForGetMainExecutable));
+/// auto SymbolsOrError = extractSymbols(FilesJson, MainExecutablePath);
+/// \endcode
+///
+/// \param FilesJson It's the structure containing information necessary for
+///        the compiler to perform analysis (such as list of Swift source
+///        files, list of libraries to link, path to SDK containing
+///        the system libraries etc.).
+/// \param MainExecutablePath Path to the directory containing the tool calling
+///        this function. This is required for the compiler to use the relative
+///        paths for it's inner workings (such as finding the necessary
+///        libraries to dynamically link).
+///
+/// \returns llvm::Expected object containing either the extracted symbols
+///          in the SymbolJson structure or the llvm::Error object with
+///          the information on the failure cause.
 llvm::Expected<SymbolsJson> extractSymbols(const FilesJson &FilesJson,
                                            std::string MainExecutablePath);
 
diff --git a/swift/include/swift/Obfuscation/Utils.h b/swift/include/swift/Obfuscation/Utils.h
index 156c20de214..7d91030e566 100644
--- a/swift/include/swift/Obfuscation/Utils.h
+++ b/swift/include/swift/Obfuscation/Utils.h
@@ -8,6 +8,23 @@
 namespace swift {
 namespace obfuscation {
 
+/// A factory function for creating the llvm::Error object.
+///
+/// The returned object has the llvm::StringError type.
+/// Its message is set to \p Message.
+/// It is transformable to std::error of value given in \p Error.
+///
+/// Typical usage:
+/// \code
+/// return stringError("couldn't generate unique type name");
+/// \endcode
+///
+/// \param Message Message to be included in llvm::StringError.
+/// \param Error Standard error_code that the resulting llvm::Error
+///        object will be transformable to. It's an optional parameter.
+///        If ommited, it's the generic category error code 1.
+///
+/// \returns the constructed llvm::Error object.
 llvm::Error stringError(const std::string Message,
                         const std::error_code Error = std::error_code(1, std::generic_category()));
 
-- 
2.17.1 (Apple Git-112)


From 0c5fbfa0923be381e8d93b09a508389eba54fb6a Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Thu, 18 Jan 2018 14:09:20 +0100
Subject: [PATCH 024/138] Basic support for function renaming

Reviewers: jerzy.kleszcz, jakub.sowa

Reviewed By: jerzy.kleszcz, jakub.sowa

Subscribers: jakub.sowa, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2762
---
 .../swift/Obfuscation/DataStructures.h        |   4 +-
 swift/include/swift/Obfuscation/Random.h      |   3 +-
 swift/include/swift/Obfuscation/Utils.h       |   3 +-
 swift/lib/Obfuscation/DataStructures.cpp      |   3 +-
 swift/lib/Obfuscation/DeclarationParser.cpp   | 144 +++++++++++++++---
 swift/lib/Obfuscation/NameMapping.cpp         |   5 +-
 swift/lib/Obfuscation/Renaming.cpp            |  41 +++--
 swift/lib/Obfuscation/SourceFileWalker.cpp    |  18 ++-
 .../obfuscator-name-mapper.cpp                |   3 +-
 .../obfuscator-renamer/obfuscator-renamer.cpp |  14 +-
 .../obfuscator-symbol-extractor.cpp           |   9 +-
 11 files changed, 198 insertions(+), 49 deletions(-)

diff --git a/swift/include/swift/Obfuscation/DataStructures.h b/swift/include/swift/Obfuscation/DataStructures.h
index f8881e99657..3dbb48dfea4 100644
--- a/swift/include/swift/Obfuscation/DataStructures.h
+++ b/swift/include/swift/Obfuscation/DataStructures.h
@@ -44,7 +44,9 @@ struct Symbol {
   
   Symbol() = default;
   
-  Symbol(const std::string &Identifier, const std::string &Name, const std::string &Module)
+  Symbol(const std::string &Identifier,
+         const std::string &Name,
+         const std::string &Module)
   : Identifier(Identifier), Name(Name), Module(Module) {};
   
   bool operator< (const Symbol &Right) const;
diff --git a/swift/include/swift/Obfuscation/Random.h b/swift/include/swift/Obfuscation/Random.h
index c66b71b8540..5dc895b60a9 100644
--- a/swift/include/swift/Obfuscation/Random.h
+++ b/swift/include/swift/Obfuscation/Random.h
@@ -39,7 +39,8 @@ public:
   RandomElementChooser(const std::vector<T> &ListToChooseFrom)
   : Generator(0, ListToChooseFrom.empty() ? 0 : ListToChooseFrom.size() - 1),
   List(ListToChooseFrom) {
-    assert(!ListToChooseFrom.empty() && "list of elements to choose from must not be empty");
+    assert(!ListToChooseFrom.empty() && "list of elements to choose from "
+                                        "must not be empty");
   };
   
   T rand() {
diff --git a/swift/include/swift/Obfuscation/Utils.h b/swift/include/swift/Obfuscation/Utils.h
index 7d91030e566..ab9eb69955a 100644
--- a/swift/include/swift/Obfuscation/Utils.h
+++ b/swift/include/swift/Obfuscation/Utils.h
@@ -26,7 +26,8 @@ namespace obfuscation {
 ///
 /// \returns the constructed llvm::Error object.
 llvm::Error stringError(const std::string Message,
-                        const std::error_code Error = std::error_code(1, std::generic_category()));
+                        const std::error_code Error =
+                          std::error_code(1, std::generic_category()));
 
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/lib/Obfuscation/DataStructures.cpp b/swift/lib/Obfuscation/DataStructures.cpp
index f715685511a..27803a56d8b 100644
--- a/swift/lib/Obfuscation/DataStructures.cpp
+++ b/swift/lib/Obfuscation/DataStructures.cpp
@@ -102,7 +102,8 @@ void ObjectTraits<RenamesJson>::mapping(Output &Out, RenamesJson &Object) {
   Out.mapRequired("symbols", Object.Symbols);
 }
 
-void ObjectTraits<SymbolRenaming>::mapping(Output &Out, SymbolRenaming &Object) {
+void ObjectTraits<SymbolRenaming>::mapping(Output &Out,
+                                           SymbolRenaming &Object) {
   Out.mapRequired("identifier", Object.Identifier);
   Out.mapRequired("originalName", Object.OriginalName);
   Out.mapRequired("obfuscatedName", Object.ObfuscatedName);
diff --git a/swift/lib/Obfuscation/DeclarationParser.cpp b/swift/lib/Obfuscation/DeclarationParser.cpp
index 48e59afea3b..bbc7d1bf7da 100644
--- a/swift/lib/Obfuscation/DeclarationParser.cpp
+++ b/swift/lib/Obfuscation/DeclarationParser.cpp
@@ -8,57 +8,167 @@
 namespace swift {
 namespace obfuscation {
 
-std::string identifierFromParts(std::vector<std::string> &Parts) {
+std::string combineIdentifier(std::vector<std::string> &Parts) {
   if (Parts.empty()) {
     return "";
   } else if (Parts.size() == 1) {
     return Parts[0];
   } else {
     //TODO: can we rewrite it to use llvm:raw_string_ostream?
-    std::stringstream Result;
+    std::stringstream ResultStream;
     std::copy(Parts.cbegin(),
               Parts.cend(),
-              std::ostream_iterator<std::string>(Result, "."));
-    return Result.str();
+              std::ostream_iterator<std::string>(ResultStream, "."));
+    std::string Result = ResultStream.str();
+    Result.pop_back();
+    return Result;
   }
 }
+  
+std::string moduleName(const Decl* Declaration) {
+  return Declaration->getModuleContext()->getBaseName().getIdentifier().get();
+}
 
-llvm::Expected<Symbol> parse(const swift::NominalTypeDecl* Declaration) {
+std::pair<std::string, std::vector<std::string>>
+moduleNameAndParts(const Decl *Declaration) {
   std::vector<std::string> Parts;
-  std::string SymbolName;
-  std::string ModuleName = Declaration->getModuleContext()->getBaseName().getIdentifier().get();
+  std::string ModuleName = moduleName(Declaration);
   Parts.push_back("module");
   Parts.push_back(ModuleName);
+  return std::make_pair(ModuleName, Parts);
+}
+  
+std::string typeName(const NominalTypeDecl* Declaration) {
+  return Declaration->getDeclaredInterfaceType()->getString();
+}
+  
+llvm::Expected<std::string>
+enclosingTypeName(const Decl* Declaration) {
+  auto *DeclarationContext = Declaration->getDeclContext();
+  if (auto *TypeDeclaration =
+        DeclarationContext->getAsNominalTypeOrNominalTypeExtensionContext()) {
+    return typeName(TypeDeclaration);
+  }
+  return stringError("enclosing context of this declaration is not supported");
+}
+  
+llvm::Expected<Symbol> parse(const NominalTypeDecl* Declaration) {
+  
+  auto ModuleNameAndParts = moduleNameAndParts(Declaration);
+  std::vector<std::string> Parts = ModuleNameAndParts.second;
+  std::string SymbolName = typeName(Declaration);
+  
   if (auto *EnumDeclaration = dyn_cast<EnumDecl>(Declaration)) {
-    SymbolName = EnumDeclaration->getDeclaredInterfaceType()->getString();
     Parts.push_back("enum." + SymbolName);
   } else if (auto *ClassDeclaration = dyn_cast<ClassDecl>(Declaration)) {
-    SymbolName = ClassDeclaration->getDeclaredInterfaceType()->getString();
     Parts.push_back("class." + SymbolName);
   } else if (auto *ProtocolDeclaration = dyn_cast<ProtocolDecl>(Declaration)) {
-    SymbolName = ProtocolDeclaration->getDeclaredInterfaceType()->getString();
     Parts.push_back("protocol." + SymbolName);
   } else if (auto *StructDeclaration = dyn_cast<StructDecl>(Declaration)) {
-    SymbolName = StructDeclaration->getDeclaredInterfaceType()->getString();
     Parts.push_back("struct." + SymbolName);
   } else {
     return stringError("found unsupported declaration type");
   }
   
-  return Symbol(identifierFromParts(Parts), SymbolName, ModuleName);
+  return Symbol(combineIdentifier(Parts), SymbolName, ModuleNameAndParts.first);
+}
+  
+std::string functionName(const FuncDecl* Declaration) {
+  return Declaration->getName().str().str();
+}
+  
+llvm::Error isDeclarationSupported(const FuncDecl* Declaration) {
+  if (Declaration->getOverriddenDecl() != nullptr) {
+    return stringError("don't support overriding methods right now, since it "
+                       "requires information over what module the overriding "
+                       "method is from");
+  }
+  if (Declaration->isBinaryOperator() || Declaration->isUnaryOperator()) {
+    return stringError("don't support operators right now, since it requires "
+                       "the special obfuscated identifier");
+  }
+  if (Declaration->isGetterOrSetter()) {
+    return stringError("don't support getters and setters right now, since "
+                       "it's the computed property name that should be "
+                       "obfuscated");
+  }
+  if (Declaration->isAccessor() || Declaration->isObservingAccessor()) {
+    return stringError("don't support property accessors right now");
+  }
+  return llvm::Error::success();
+}
+  
+llvm::Expected<Symbol> parse(const FuncDecl* Declaration) {
+  if (auto Error = isDeclarationSupported(Declaration)) {
+    return std::move(Error);
+  }
+  
+  auto ModuleNameAndParts = moduleNameAndParts(Declaration);
+  std::string ModuleName = ModuleNameAndParts.first;
+  std::vector<std::string> Parts = ModuleNameAndParts.second;
+  std::string SymbolName = functionName(Declaration);
+  
+  auto ProtocolRequirements = Declaration->getSatisfiedProtocolRequirements();
+  auto *ProtocolDeclaration =
+    dyn_cast<ProtocolDecl>(Declaration->getDeclContext());
+  if (ProtocolRequirements.empty() && ProtocolDeclaration == nullptr) {
+    
+    auto TypeNameOrError = enclosingTypeName(Declaration);
+    if (auto Error = TypeNameOrError.takeError()) {
+      llvm::consumeError(std::move(Error));
+      Parts.push_back("function." + SymbolName);
+    } else {
+      Parts.push_back("type." + TypeNameOrError.get());
+      Parts.push_back("method." + SymbolName);  
+    }
+      
+  } else {
+    
+    // TODO: right now we're renaming all the methods in the protocols with
+    //       the same name and signature to the same obfuscated name. the reason
+    //       is that it greatly simplifies the handling of situation in which
+    //       a protocol A has method a() and protocol B: A has method a().
+    //       then the class C: B with the implementation of a() satisfies
+    //       two requirements at the same time (from A and from B). however,
+    //       there is no override relationship between the A.a() and B.a() in
+    //       protocols. it's just a name that's the same.
+    //       this simplified handling should be improved in the future.
+    if (!ProtocolRequirements.empty()) {
+      ModuleName = moduleName(ProtocolRequirements.front());
+    } else {
+      ModuleName = moduleName(ProtocolDeclaration);
+    }
+    Parts.push_back("protocol");
+    Parts.push_back("method." + SymbolName);
+    
+  }
+  
+  if (Declaration->getDeclContext()->isTypeContext()) {
+    auto Interface = Declaration->getMethodInterfaceType().getString();
+    Parts.push_back("signature." + Interface);
+  } else {
+    Parts.push_back("signature." + Declaration->getInterfaceType().getString());
+  }
+  
+  return Symbol(combineIdentifier(Parts), SymbolName, ModuleName);
 }
 
-llvm::Expected<Symbol> parse(const swift::ValueDecl* Declaration) {
+llvm::Expected<Symbol> parse(const ValueDecl* Declaration) {
   return stringError("found unsupported declaration type");
 }
 
 llvm::Expected<Symbol> extractSymbol(Decl* Declaration) {
-  
   std::unique_ptr<llvm::Expected<Symbol>> SymbolOrError(nullptr);
-  if (const auto *NominalTypeDeclaration = dyn_cast<NominalTypeDecl>(Declaration)) {
-    SymbolOrError = llvm::make_unique<llvm::Expected<Symbol>>(parse(NominalTypeDeclaration));
+  if (const auto *NominalTypeDeclaration =
+        dyn_cast<NominalTypeDecl>(Declaration)) {
+    SymbolOrError =
+      llvm::make_unique<llvm::Expected<Symbol>>(parse(NominalTypeDeclaration));
+  } else if (const auto *FuncDeclaration = dyn_cast<FuncDecl>(Declaration)) {
+    SymbolOrError =
+      llvm::make_unique<llvm::Expected<Symbol>>(parse(FuncDeclaration));
   } else if (const auto *ValueDeclaration = dyn_cast<ValueDecl>(Declaration)) {
-    SymbolOrError = llvm::make_unique<llvm::Expected<Symbol>>(parse(ValueDeclaration));
+    SymbolOrError =
+      llvm::make_unique<llvm::Expected<Symbol>>(parse(ValueDeclaration));
   } else {
     return stringError("unsupported declaration type");
   }
diff --git a/swift/lib/Obfuscation/NameMapping.cpp b/swift/lib/Obfuscation/NameMapping.cpp
index aca41029b25..49d6f753a01 100644
--- a/swift/lib/Obfuscation/NameMapping.cpp
+++ b/swift/lib/Obfuscation/NameMapping.cpp
@@ -60,7 +60,10 @@ const std::vector<std::string> UniqueTypeNameGenerator::UniquelyTailSymbols =
   {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
   
 const std::vector<std::string> UniqueTypeNameGenerator::HeadSymbols =
-  {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};
+  {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o",
+   "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D",
+   "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S",
+   "T", "U", "V", "W", "X", "Y", "Z"};
 
 llvm::Expected<RenamesJson> proposeRenamings(const SymbolsJson &SymbolsJson) {
   
diff --git a/swift/lib/Obfuscation/Renaming.cpp b/swift/lib/Obfuscation/Renaming.cpp
index 2cee10e6ce9..d70752980c1 100644
--- a/swift/lib/Obfuscation/Renaming.cpp
+++ b/swift/lib/Obfuscation/Renaming.cpp
@@ -20,7 +20,9 @@ computeObfuscatedPath(const StringRef Filename,
                       const StringRef OriginalProjectPath,
                       const StringRef ObfuscatedProjectPath) {
   SmallPath Path(Filename);
-  llvm::sys::path::replace_path_prefix(Path, OriginalProjectPath, ObfuscatedProjectPath);
+  llvm::sys::path::replace_path_prefix(Path,
+                                       OriginalProjectPath,
+                                       ObfuscatedProjectPath);
   return Path;
 }
 
@@ -28,7 +30,8 @@ llvm::Error copyProject(const StringRef OriginalPath,
                         const StringRef ObfuscatedPath) {
   
   std::error_code ErrorCode;
-  for (llvm::sys::fs::recursive_directory_iterator Iterator(OriginalPath, ErrorCode), End;
+  using RecursiveIterator = llvm::sys::fs::recursive_directory_iterator;
+  for (RecursiveIterator Iterator(OriginalPath, ErrorCode), End;
        Iterator != End && !ErrorCode;
        Iterator.increment(ErrorCode)) {
     if (llvm::sys::fs::is_directory(Iterator->path())) {
@@ -46,16 +49,21 @@ llvm::Error copyProject(const StringRef OriginalPath,
     auto DirectoryPath = Path;
     llvm::sys::path::remove_filename(DirectoryPath);
     if (auto Error = llvm::sys::fs::create_directories(DirectoryPath)) {
-      return stringError("Cannot create directory in " + Path.str().str(), Error);
+      auto Message = "Cannot create directory in " + Path.str().str();
+      return stringError(Message, Error);
     }
     
     if (auto Error = llvm::sys::fs::copy_file(Iterator->path(), Path)) {
-      return stringError("Cannot copy file from " + Iterator->path() + " to " + Path.str().str(), Error);
+      auto Message = "Cannot copy file from " + Iterator->path() + " to " +
+        Path.str().str();
+      return stringError(Message, Error);
     }
   }
   
   if (ErrorCode) {
-    return stringError("Error while traversing the project directory " + OriginalPath.str(), ErrorCode);
+    auto Message = "Error while traversing the project directory " +
+      OriginalPath.str();
+    return stringError(Message, ErrorCode);
   }
   
   return llvm::Error::success();
@@ -78,27 +86,33 @@ llvm::Expected<bool> performActualRenaming(SourceFile &Current,
   bool performedRenaming = false;
   auto SymbolsWithRanges = walkAndCollectSymbols(Current);
   
+  using EditConsumer = swift::ide::SourceEditOutputConsumer;
+  
   std::unique_ptr<llvm::raw_fd_ostream> DescriptorStream(nullptr);
-  std::unique_ptr<swift::ide::SourceEditOutputConsumer> Editor(nullptr);
+  std::unique_ptr<EditConsumer> Editor(nullptr);
   
-  //TODO: would be way better to have a map here instead of iterating through symbols
+  //TODO: would be way better to have a map instead of iterating through symbols
   for (const auto &SymbolWithRange : SymbolsWithRanges) {
     for (const auto &Symbol : RenamesJson.Symbols) {
       
       if (shouldRename(Symbol, SymbolWithRange, ModuleName)) {
         if (Editor == nullptr) {
           std::error_code Error;
-          DescriptorStream = llvm::make_unique<llvm::raw_fd_ostream>(Path, Error, llvm::sys::fs::F_None);
+          DescriptorStream =
+            llvm::make_unique<llvm::raw_fd_ostream>(Path,
+                                                    Error,
+                                                    llvm::sys::fs::F_None);
           if (DescriptorStream->has_error() || Error) {
             return stringError("Cannot open output file: " + Path.str(), Error);
           }
-          Editor = llvm::make_unique<swift::ide::SourceEditOutputConsumer>(SourceManager,
-                                                                           BufferId,
-                                                                           *DescriptorStream);
+          Editor = llvm::make_unique<EditConsumer>(SourceManager,
+                                                   BufferId,
+                                                   *DescriptorStream);
         }
+        auto ObfuscatedName = StringRef(Symbol.ObfuscatedName);
         Editor->ide::SourceEditConsumer::accept(SourceManager,
                                                 SymbolWithRange.Range,
-                                                StringRef(Symbol.ObfuscatedName));
+                                                ObfuscatedName);
         performedRenaming = true;
         break;
       }
@@ -118,7 +132,8 @@ performRenaming(std::string MainExecutablePath,
     return std::move(Error);
   }
   
-  if (auto Error = copyProject(FilesJson.Project.RootPath, ObfuscatedProjectPath)) {
+  if (auto Error = copyProject(FilesJson.Project.RootPath,
+                               ObfuscatedProjectPath)) {
     return std::move(Error);
   }
   
diff --git a/swift/lib/Obfuscation/SourceFileWalker.cpp b/swift/lib/Obfuscation/SourceFileWalker.cpp
index 57053b25eff..a00b29ff771 100644
--- a/swift/lib/Obfuscation/SourceFileWalker.cpp
+++ b/swift/lib/Obfuscation/SourceFileWalker.cpp
@@ -6,15 +6,21 @@
 namespace swift {
 namespace obfuscation {
   
+const char* pointerToRangeValue(const SymbolWithRange &Symbol) {
+  auto Pointer = Symbol.Range.getStart().getOpaquePointerValue();
+  return static_cast<const char *>(Pointer);
+}
+  
 bool SymbolWithRange::operator< (const SymbolWithRange &Right) const {
   auto less = std::less<const char *>();
-  if (const auto *RangeValuePointer = static_cast<const char *>(Range.getStart().getOpaquePointerValue())) {
-    if (const auto *RightRangeValuePointer = static_cast<const char *>(Right.Range.getStart().getOpaquePointerValue())) {
+  if (const auto* RangeValuePointer = pointerToRangeValue(*this)) {
+    if (const auto* RightRangeValuePointer = pointerToRangeValue(Right)) {
       auto isRangeLess = less(RangeValuePointer, RightRangeValuePointer);
       return Symbol < Right.Symbol || isRangeLess;
     }
   }
-  assert(false && "Comparing Symbols with Ranges requires Ranges Start Location Values Pointers to be of const char type");
+  assert(false && "Comparing Symbols with Ranges requires Ranges Start "
+                  "Location Values Pointers to be of const char type");
 }
 
 struct RenamesCollector: public SourceEntityWalker {
@@ -43,9 +49,11 @@ struct RenamesCollector: public SourceEntityWalker {
     
     std::unique_ptr<llvm::Expected<Symbol>> SymbolOrError(nullptr);
     if (CtorTyRef) {
-      SymbolOrError = llvm::make_unique<llvm::Expected<Symbol>>(extractSymbol(CtorTyRef));
+      SymbolOrError =
+        llvm::make_unique<llvm::Expected<Symbol>>(extractSymbol(CtorTyRef));
     } else {
-       SymbolOrError = llvm::make_unique<llvm::Expected<Symbol>>(extractSymbol(Declaration));
+       SymbolOrError =
+        llvm::make_unique<llvm::Expected<Symbol>>(extractSymbol(Declaration));
     }
     if (auto Error = SymbolOrError->takeError()) {
       llvm::consumeError(std::move(Error));
diff --git a/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp b/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
index c29a4e915ba..f55de94cb90 100644
--- a/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
+++ b/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
@@ -18,7 +18,8 @@ SymbolsJsonPath("symbolsjson",
 
 static llvm::cl::opt<std::string>
 RenamesJsonPath("renamesjson",
-                llvm::cl::desc("Name of the output file to write extracted symbols with proposed renamings"),
+                llvm::cl::desc("Name of the output file to write extracted "
+                               "symbols with proposed renamings"),
                 llvm::cl::cat(ObfuscatorNameMapper));
 
 }
diff --git a/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp b/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
index 375a72a8d41..d6a8122c4c7 100644
--- a/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
+++ b/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
@@ -18,17 +18,19 @@ FilesJsonPath("filesjson",
 
 static llvm::cl::opt<std::string>
 RenamesJsonPath("renamesjson",
-                llvm::cl::desc("Name of the output file to write extracted symbols with proposed renamings"),
+                llvm::cl::desc("Name of the output file to write extracted "
+                               "symbols with proposed renamings"),
                 llvm::cl::cat(ObfuscatorRenamer));
 
 static llvm::cl::opt<std::string>
 ObfuscatedProjectPath("obfuscatedproject",
-                      llvm::cl::desc("Path to the directory for obfuscated project"),
+                      llvm::cl::desc("Path to the directory for obfuscated "
+                                     "project"),
                       llvm::cl::cat(ObfuscatorRenamer));
   
 }
 
-void printObfuscatedFiles(const std::vector<std::pair<std::string, std::string>> &Files) {
+void printObfuscatedFiles(const FilesList &Files) {
   llvm::outs() << "obfuscated files:" << '\n';
   for (const auto &File : Files) {
     llvm::outs() << File.second << '\n';
@@ -75,8 +77,10 @@ int main(int argc, char *argv[]) {
     ExitOnError(std::move(Error));
   }
   
-  std::string MainExecutablePath = llvm::sys::fs::getMainExecutable(argv[0],
-                                                                    reinterpret_cast<void *>(&anchorForGetMainExecutable));
+  void *MainExecutablePointer =
+    reinterpret_cast<void *>(&anchorForGetMainExecutable);
+  std::string MainExecutablePath =
+    llvm::sys::fs::getMainExecutable(argv[0], MainExecutablePointer);
   
   auto FilesOrError = performRenaming(MainExecutablePath,
                                       FilesJsonOrError.get(),
diff --git a/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp b/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
index 7acfa44c193..cc5dbd6c877 100644
--- a/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
+++ b/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
@@ -58,14 +58,17 @@ int main(int argc, char *argv[]) {
   }
 
   std::string PathToJson = options::FilesJsonPath;
-  std::string MainExecutablePath = llvm::sys::fs::getMainExecutable(argv[0],
-                                                                    reinterpret_cast<void *>(&anchorForGetMainExecutable));
+  void *MainExecutablePointer =
+    reinterpret_cast<void *>(&anchorForGetMainExecutable);
+  std::string MainExecutablePath =
+    llvm::sys::fs::getMainExecutable(argv[0], MainExecutablePointer);
   auto FilesJsonOrError = parseJson<FilesJson>(PathToJson);
   if (auto Error = FilesJsonOrError.takeError()) {
     ExitOnError(std::move(Error));
   }
   
-  auto SymbolsOrError = extractSymbols(FilesJsonOrError.get(), MainExecutablePath);
+  auto SymbolsOrError = extractSymbols(FilesJsonOrError.get(),
+                                       MainExecutablePath);
   if (auto Error = SymbolsOrError.takeError()) {
     ExitOnError(std::move(Error));
   }
-- 
2.17.1 (Apple Git-112)


From 1d4fad17feb6295dcfe5588c417927176ceafe6a Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Fri, 19 Jan 2018 10:33:27 +0100
Subject: [PATCH 025/138] Random generators tests

Reviewers: jakub.sowa, jerzy.kleszcz

Reviewed By: jakub.sowa, jerzy.kleszcz

Subscribers: jerzy.kleszcz, jakub.sowa

Differential Revision: https://phabricator.polidea.com/D2764
---
 .../swift/Obfuscation/Random-Template.h       |  70 ++++++
 swift/include/swift/Obfuscation/Random.h      |  56 +++--
 swift/lib/Obfuscation/NameMapping.cpp         |   4 +-
 swift/lib/Obfuscation/Random.cpp              |  29 ---
 .../unittests/SwiftObfuscation/CMakeLists.txt |   1 +
 .../SwiftObfuscation/RandomTests.cpp          | 235 ++++++++++++++++++
 6 files changed, 337 insertions(+), 58 deletions(-)
 create mode 100644 swift/include/swift/Obfuscation/Random-Template.h
 delete mode 100644 swift/lib/Obfuscation/Random.cpp
 create mode 100644 swift/unittests/SwiftObfuscation/RandomTests.cpp

diff --git a/swift/include/swift/Obfuscation/Random-Template.h b/swift/include/swift/Obfuscation/Random-Template.h
new file mode 100644
index 00000000000..8f8308150bc
--- /dev/null
+++ b/swift/include/swift/Obfuscation/Random-Template.h
@@ -0,0 +1,70 @@
+#ifndef RandomTemplate_h
+#define RandomTemplate_h
+
+#include <sstream>
+
+namespace swift {
+namespace obfuscation {
+
+template<typename EngineType, typename DistributionType>
+RandomIntegerGenerator<EngineType, DistributionType>::
+  RandomIntegerGenerator(int Min, int Max)
+: Engine(std::random_device()()), Distribution(Min, Max) {
+  assert(Min <= Max && "The inverted min and max lead to undefined behavior");
+}
+
+template<typename EngineType, typename DistributionType>
+int RandomIntegerGenerator<EngineType, DistributionType>::rand() {
+  return Distribution(Engine);
+}
+
+template<typename ElementType, typename GeneratorType>
+RandomElementChooser<ElementType, GeneratorType>::
+  RandomElementChooser(const std::vector<ElementType> &ListToChooseFrom)
+: Generator(0, ListToChooseFrom.empty() ? 0 : ListToChooseFrom.size() - 1),
+List(ListToChooseFrom) {
+  assert(!ListToChooseFrom.empty() && "list of elements to choose from must "
+                                      "not be empty");
+};
+  
+template<typename ElementType, typename GeneratorType>
+ElementType RandomElementChooser<ElementType, GeneratorType>::rand() {
+  return List.at(Generator.rand());
+}
+
+template<typename ElementType, typename ChooserType>
+RandomVectorGenerator<ElementType, ChooserType>::
+  RandomVectorGenerator(const std::vector<ElementType> &ListToChooseFrom)
+: Chooser(ListToChooseFrom) {}
+  
+template<typename ElementType, typename ChooserType>
+std::vector<ElementType>
+RandomVectorGenerator<ElementType, ChooserType>::
+  rand(length_type<ElementType> Length) {
+  std::vector<ElementType> Result;
+  for (length_type<ElementType> i = 0; i < Length; i++) {
+    Result.push_back(Chooser.rand());
+  }
+  return Result;
+}
+
+template<typename ChooserType>
+RandomStringGenerator<ChooserType>::
+  RandomStringGenerator(const std::vector<std::string> &ListToChooseFrom)
+: Generator(ListToChooseFrom) {}
+
+template<typename ChooserType>
+std::string
+RandomStringGenerator<ChooserType>::rand(length_type<std::string> Length) {
+  auto Characters = Generator.rand(Length);
+  std::stringstream Result;
+  std::copy(Characters.cbegin(),
+            Characters.cend(),
+            std::ostream_iterator<std::string>(Result, ""));
+  return Result.str();
+}
+  
+}
+}
+
+#endif /* RandomTemplate_h */
diff --git a/swift/include/swift/Obfuscation/Random.h b/swift/include/swift/Obfuscation/Random.h
index 5dc895b60a9..601ab7a52e8 100644
--- a/swift/include/swift/Obfuscation/Random.h
+++ b/swift/include/swift/Obfuscation/Random.h
@@ -9,81 +9,83 @@
 namespace swift {
 namespace obfuscation {
 
+template<typename EngineType, typename DistributionType>
 class RandomIntegerGenerator {
   
 private:
   
-  std::mt19937 Engine;
-  std::uniform_int_distribution<int> Distribution;
+  EngineType Engine;
+  DistributionType Distribution;
   
 public:
   
-  RandomIntegerGenerator(int Min, int Max)
-  : Engine(std::random_device()()),
-  Distribution(std::uniform_int_distribution<int>(Min, Max)) {}
+  RandomIntegerGenerator(int Min, int Max);
   
   int rand();
 
 };
 
-template<typename T>
+template<typename ElementType, typename GeneratorType>
 class RandomElementChooser {
   
 private:
   
-  RandomIntegerGenerator Generator;
-  std::vector<T> List;
+  GeneratorType Generator;
+  std::vector<ElementType> List;
   
 public:
   
-  RandomElementChooser(const std::vector<T> &ListToChooseFrom)
-  : Generator(0, ListToChooseFrom.empty() ? 0 : ListToChooseFrom.size() - 1),
-  List(ListToChooseFrom) {
-    assert(!ListToChooseFrom.empty() && "list of elements to choose from "
-                                        "must not be empty");
-  };
+  RandomElementChooser(const std::vector<ElementType> &ListToChooseFrom);
   
-  T rand() {
-    return List.at(Generator.rand());
-  }
+  ElementType rand();
 
 };
 
-template<typename T>
-using length_type = typename std::vector<T>::size_type;
+template<typename ElementType>
+using length_type = typename std::vector<ElementType>::size_type;
 
-template<typename T>
+template<typename ElementType, typename ChooserType>
 class RandomVectorGenerator {
   
 private:
   
-  RandomElementChooser<T> Chooser;
+  ChooserType Chooser;
   
 public:
   
-  RandomVectorGenerator(const std::vector<T> &ListToChooseFrom)
-  : Chooser(RandomElementChooser<T>(ListToChooseFrom)) {}
+  RandomVectorGenerator(const std::vector<ElementType> &ListToChooseFrom);
   
-  std::vector<T> rand(length_type<T> Length);
+  std::vector<ElementType> rand(length_type<ElementType> Length);
 
 };
 
+template<typename ChooserType>
 class RandomStringGenerator {
   
 private:
   
-  RandomVectorGenerator<std::string> Generator;
+  RandomVectorGenerator<std::string, ChooserType> Generator;
   
 public:
   
-  RandomStringGenerator(const std::vector<std::string> &ListToChooseFrom)
-  : Generator(ListToChooseFrom) {}
+  RandomStringGenerator(const std::vector<std::string> &ListToChooseFrom);
   
   std::string rand(length_type<std::string> Length);
 
 };
+  
+using RandomUniformIntGenerator =
+  RandomIntegerGenerator<std::mt19937, std::uniform_int_distribution<int>>;
+  
+using RandomUniformCharacterChooser =
+  RandomElementChooser<std::string, RandomUniformIntGenerator>;
+  
+using RandomUniformStringGenerator =
+  RandomStringGenerator<RandomUniformCharacterChooser>;
 
 } //namespace obfuscation
 } //namespace swift
 
+#include "Random-Template.h"
+
 #endif /* Random_h */
diff --git a/swift/lib/Obfuscation/NameMapping.cpp b/swift/lib/Obfuscation/NameMapping.cpp
index 49d6f753a01..9322d141dff 100644
--- a/swift/lib/Obfuscation/NameMapping.cpp
+++ b/swift/lib/Obfuscation/NameMapping.cpp
@@ -16,8 +16,8 @@ private:
   static const std::vector<std::string> UniquelyTailSymbols;
   static const std::vector<std::string> HeadSymbols;
   std::vector<std::string> TailSymbols;
-  RandomElementChooser<std::string> HeadGenerator;
-  RandomStringGenerator TailGenerator;
+  RandomUniformCharacterChooser HeadGenerator;
+  RandomUniformStringGenerator TailGenerator;
   const std::string::size_type IdentifierLength = 32;
   
   llvm::Expected<std::string> generateName(int NumbersOfTriesLeft) {
diff --git a/swift/lib/Obfuscation/Random.cpp b/swift/lib/Obfuscation/Random.cpp
deleted file mode 100644
index 446e7447b08..00000000000
--- a/swift/lib/Obfuscation/Random.cpp
+++ /dev/null
@@ -1,29 +0,0 @@
-#include "swift/Obfuscation/Random.h"
-
-namespace swift {
-namespace obfuscation {
-
-int RandomIntegerGenerator::rand() {
-  return Distribution(Engine);
-}
-  
-template<typename T>
-std::vector<T> RandomVectorGenerator<T>::rand(length_type<T> Length) {
-  std::vector<T> Result;
-  for (length_type<T> i = 0; i < Length; i++) {
-    Result.push_back(Chooser.rand());
-  }
-  return Result;
-}
-
-std::string RandomStringGenerator::rand(length_type<std::string> Length) {
-  auto Vector = Generator.rand(Length);
-  std::string Result;
-  for (const auto &Elem : Vector) {
-    Result += Elem;
-  }
-  return Result;
-}
-
-} //namespace obfuscation
-} //namespace swift
diff --git a/swift/unittests/SwiftObfuscation/CMakeLists.txt b/swift/unittests/SwiftObfuscation/CMakeLists.txt
index 6ee4def7782..eeef4541e3a 100644
--- a/swift/unittests/SwiftObfuscation/CMakeLists.txt
+++ b/swift/unittests/SwiftObfuscation/CMakeLists.txt
@@ -1,4 +1,5 @@
 add_swift_unittest(SwiftObfuscationTests
+    RandomTests.cpp
     SwiftObfuscationTests.cpp
 )
 
diff --git a/swift/unittests/SwiftObfuscation/RandomTests.cpp b/swift/unittests/SwiftObfuscation/RandomTests.cpp
new file mode 100644
index 00000000000..7afada8a12a
--- /dev/null
+++ b/swift/unittests/SwiftObfuscation/RandomTests.cpp
@@ -0,0 +1,235 @@
+#include "swift/Obfuscation/Random.h"
+
+#include "gtest/gtest.h"
+#include "gmock/gmock.h"
+
+namespace swift {
+namespace obfuscation {
+  
+struct FakeEngine {
+  static FakeEngine* CreatedInstance;
+  
+  FakeEngine(int seed) {
+    CreatedInstance = this;
+  };
+};
+
+struct FakeDistribution {
+  
+  static std::pair<int, int> CatchedMinMax;
+  static FakeEngine* CatchedInstance;
+  
+  static int MockRandNumber;
+  
+  static int NumberOfGenerationCalls;
+  
+  FakeDistribution(int Min, int Max) {
+    CatchedMinMax = std::make_pair(Min, Max);
+  }
+  
+  int operator()(FakeEngine& g) {
+    NumberOfGenerationCalls += 1;
+    CatchedInstance = &g;
+    return MockRandNumber;
+  }
+};
+
+FakeEngine* FakeEngine::CreatedInstance;
+std::pair<int, int> FakeDistribution::CatchedMinMax;
+int FakeDistribution::MockRandNumber;
+int FakeDistribution::NumberOfGenerationCalls;
+FakeEngine* FakeDistribution::CatchedInstance;
+
+using FakeRandomIntegerGenerator =
+  swift::obfuscation::RandomIntegerGenerator<FakeEngine, FakeDistribution>;
+  
+class RandomTests : public ::testing::Test {
+  void cleanStatics() {
+    FakeEngine::CreatedInstance = nullptr;
+    FakeDistribution::CatchedMinMax = std::make_pair(0, 0);
+    FakeDistribution::MockRandNumber = 0;
+    FakeDistribution::NumberOfGenerationCalls = 0;
+    FakeDistribution::CatchedInstance = nullptr;
+  }
+  
+  virtual void SetUp() {
+    cleanStatics();
+  }
+  
+  virtual void TearDown() {
+    cleanStatics();
+  }
+};
+  
+class RandomIntegerGeneratorTests : public RandomTests {};
+
+TEST_F(RandomIntegerGeneratorTests, DelegatesRandomGenerationToDistribution) {
+  FakeRandomIntegerGenerator Generator(0, 1);
+  int TestRandomNumber = 42;
+  FakeDistribution::MockRandNumber = TestRandomNumber;
+  
+  int Result = Generator.rand();
+  
+  EXPECT_EQ(Result, TestRandomNumber);
+}
+  
+TEST_F(RandomIntegerGeneratorTests, PassesTheDistributionParameters) {
+  int TestMin = 100;
+  int TestMax = 1000;
+  
+  FakeRandomIntegerGenerator Generator(TestMin, TestMax);
+  
+  EXPECT_EQ(TestMin, FakeDistribution::CatchedMinMax.first);
+  EXPECT_EQ(TestMax, FakeDistribution::CatchedMinMax.second);
+}
+  
+TEST_F(RandomIntegerGeneratorTests, PreventsUndefinedDistributionInitialization) {
+  int TestMin = 1000;
+  int TestMax = 100;
+  
+  EXPECT_DEATH(FakeRandomIntegerGenerator Generator(TestMin, TestMax), "");
+}
+  
+TEST_F(RandomIntegerGeneratorTests, CreatesEngineInstanceAndUsesItInGeneration) {
+  FakeRandomIntegerGenerator Generator(0, 1);
+  Generator.rand();
+  
+  EXPECT_EQ(FakeEngine::CreatedInstance, FakeDistribution::CatchedInstance);
+  EXPECT_EQ(FakeDistribution::NumberOfGenerationCalls, 1);
+}
+  
+class RandomElementChooserTests : public RandomTests {};
+  
+using FakeRandomElementChooser =
+  RandomElementChooser<std::string, FakeRandomIntegerGenerator>;
+
+TEST_F(RandomElementChooserTests, PreventsFromInitializationWithEmptyList) {
+  std::vector<std::string> TestList;
+  
+  EXPECT_DEATH(FakeRandomElementChooser ElementChooser(TestList), "");
+}
+
+TEST_F(RandomElementChooserTests, DelegatesRandomGenerationToGenerator) {
+  std::vector<std::string> TestList = {"test"};
+  FakeRandomElementChooser ElementChooser(TestList);
+  int RandomTimes = 5;
+  
+  for (int i = 0; i < RandomTimes; ++i) {
+    ElementChooser.rand();
+  }
+  
+  EXPECT_EQ(FakeDistribution::NumberOfGenerationCalls, RandomTimes);
+}
+
+TEST_F(RandomElementChooserTests, GeneratorRangeIsTheSameAsListIndices) {
+  int NumberOfElements = 20;
+  std::vector<std::string> TestList(NumberOfElements, "test");
+  
+  FakeRandomElementChooser ElementChooser(TestList);
+  
+  EXPECT_EQ(FakeDistribution::CatchedMinMax.first, 0);
+  EXPECT_EQ(FakeDistribution::CatchedMinMax.second, NumberOfElements - 1);
+}
+
+TEST_F(RandomElementChooserTests, ReturnsElementDictatedByGenerator) {
+  std::vector<std::string> TestList = {"a", "b", "c", "d", "e"};
+  FakeRandomElementChooser ElementChooser(TestList);
+  
+  for (std::vector<std::string>::size_type i = 0; i < TestList.size(); ++i) {
+    FakeDistribution::MockRandNumber = i;
+    auto Element = ElementChooser.rand();
+    EXPECT_EQ(Element, TestList.at(i));
+  }
+}
+  
+class RandomVectorGeneratorTests : public RandomTests {};
+  
+using FakeRandomVectorGenerator =
+  RandomVectorGenerator<std::string, FakeRandomElementChooser>;
+  
+TEST_F(RandomVectorGeneratorTests, PreventsFromInitializationWithEmptyList) {
+  std::vector<std::string> TestList;
+  
+  EXPECT_DEATH(FakeRandomVectorGenerator Generator(TestList), "");
+}
+  
+TEST_F(RandomVectorGeneratorTests, GivesResultOfLenghtZeroWhenAskedFor) {
+  std::vector<std::string> EmptyList;
+  std::vector<std::string> TestList = {"a"};
+  FakeRandomVectorGenerator Generator(TestList);
+  
+  auto Result = Generator.rand(0);
+  
+  EXPECT_EQ(Result, EmptyList);
+}
+
+TEST_F(RandomVectorGeneratorTests, CallsElementChooserForEachElementToChoose) {
+  std::vector<std::string> TestList = {"a", "b", "c", "d", "e"};
+  FakeRandomVectorGenerator Generator(TestList);
+  int RandomTimes = 20;
+  
+  Generator.rand(RandomTimes);
+  
+  EXPECT_EQ(FakeDistribution::NumberOfGenerationCalls, RandomTimes);
+}
+
+TEST_F(RandomVectorGeneratorTests, ReturnVectorOfElementsFromElementChooser) {
+  std::vector<std::string> TestList = {"a", "b", "c", "d", "e"};
+  FakeRandomVectorGenerator Generator(TestList);
+  int RandomTimes = 20;
+  
+  for (std::vector<std::string>::size_type i = 0; i < TestList.size(); ++i) {
+    FakeDistribution::MockRandNumber = i;
+    auto Result = Generator.rand(RandomTimes);
+    std::vector<std::string> Expected(RandomTimes, TestList.at(i));
+    EXPECT_EQ(Result, Expected);
+  }
+}
+
+class RandomStringGeneratorTests : public RandomTests {};
+  
+using FakeRandomStringGenerator =
+  RandomStringGenerator<FakeRandomElementChooser>;
+                                      
+TEST_F(RandomStringGeneratorTests, PreventsFromInitializationWithEmptyList) {
+  std::vector<std::string> TestList;
+
+  EXPECT_DEATH(FakeRandomStringGenerator Generator(TestList), "");
+}
+
+TEST_F(RandomStringGeneratorTests, GivesResultOfLenghtZeroWhenAskedFor) {
+  std::string EmptyString;
+  std::vector<std::string> TestList = {"a"};
+  FakeRandomStringGenerator Generator(TestList);
+  
+  auto Result = Generator.rand(0);
+  
+  EXPECT_EQ(Result, EmptyString);
+}
+
+TEST_F(RandomStringGeneratorTests, CallsGeneratorWithLengthFromParameter) {
+  std::vector<std::string> TestList = {"a", "b", "c", "d", "e"};
+  FakeRandomStringGenerator Generator(TestList);
+  int RandomTimes = 20;
+  
+  Generator.rand(RandomTimes);
+  
+  EXPECT_EQ(FakeDistribution::NumberOfGenerationCalls, RandomTimes);
+}
+
+TEST_F(RandomStringGeneratorTests, ReturnsStringOfCharactersFromGenerator) {
+  std::vector<std::string> TestList = {"a", "b", "c", "d", "e"};
+  std::vector<std::string> ExpectedList = {"aaaaa", "bbbbb", "ccccc",
+                                           "ddddd", "eeeee"};
+  FakeRandomStringGenerator Generator(TestList);
+  int Length = 5;
+  
+  for (std::vector<std::string>::size_type i = 0; i < TestList.size(); ++i) {
+    FakeDistribution::MockRandNumber = i;
+    auto Result = Generator.rand(Length);
+    EXPECT_EQ(Result, ExpectedList.at(i));
+  }
+}
+  
+}
+}
-- 
2.17.1 (Apple Git-112)


From 0c5738afb61ed3a886e5903042fc4cb5323169a2 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Thu, 18 Jan 2018 18:45:16 +0100
Subject: [PATCH 026/138] CI optimization

---
 .gitlab-ci.yml                                   |  4 +---
 Scripts/build_vanilla_compiler.sh                | 16 ++++++++++++++++
 swift/lib/Obfuscation/CMakeLists.txt             |  1 -
 swift/unittests/SwiftObfuscation/RandomTests.cpp |  4 ++--
 4 files changed, 19 insertions(+), 6 deletions(-)
 create mode 100755 Scripts/build_vanilla_compiler.sh

diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml
index a7dbcaed612..d77b4806ba6 100644
--- a/.gitlab-ci.yml
+++ b/.gitlab-ci.yml
@@ -1,11 +1,9 @@
 obfuscator_debug:
     stage: test
     before_script:
-        - /bin/bash $CACHE_DIR/ninjaScript.bash
+        - /bin/bash $CACHE_DIR/ninjaScript.bash "./Scripts/build_vanilla_compiler.sh"
     script:
         - /bin/bash Scripts/build.sh
     tags:
         - xcode-9.0
-    only:
-        - tags
 
diff --git a/Scripts/build_vanilla_compiler.sh b/Scripts/build_vanilla_compiler.sh
new file mode 100755
index 00000000000..872df388262
--- /dev/null
+++ b/Scripts/build_vanilla_compiler.sh
@@ -0,0 +1,16 @@
+#!/bin/bash
+
+echo "Identifying current commit"
+git rev-parse --verify HEAD
+commit_sha=$(git rev-parse --verify HEAD)
+echo "Current commit SHA is ${commit_sha}"
+
+echo "Switching git from commit ${commit_sha} to commit 3cb38854e963b84873a7b7769b6c0b3f28c86015"
+git checkout 3cb38854e963b84873a7b7769b6c0b3f28c86015
+
+echo "Building project at vanilla state"
+swift/utils/build-script -R
+
+echo "Checking out the actual branch at ${commit_sha}"
+git checkout ${commit_sha}
+
diff --git a/swift/lib/Obfuscation/CMakeLists.txt b/swift/lib/Obfuscation/CMakeLists.txt
index a705ad96e34..de7063a682d 100644
--- a/swift/lib/Obfuscation/CMakeLists.txt
+++ b/swift/lib/Obfuscation/CMakeLists.txt
@@ -4,7 +4,6 @@ add_swift_library(swiftObfuscation STATIC
   DeclarationParser.cpp
   FileIO.cpp
   NameMapping.cpp
-  Random.cpp
   Renaming.cpp
   SourceFileWalker.cpp
   SymbolExtracting.cpp
diff --git a/swift/unittests/SwiftObfuscation/RandomTests.cpp b/swift/unittests/SwiftObfuscation/RandomTests.cpp
index 7afada8a12a..613eb8e9b36 100644
--- a/swift/unittests/SwiftObfuscation/RandomTests.cpp
+++ b/swift/unittests/SwiftObfuscation/RandomTests.cpp
@@ -52,11 +52,11 @@ class RandomTests : public ::testing::Test {
     FakeDistribution::CatchedInstance = nullptr;
   }
   
-  virtual void SetUp() {
+  virtual void SetUp() override {
     cleanStatics();
   }
   
-  virtual void TearDown() {
+  virtual void TearDown() override {
     cleanStatics();
   }
 };
-- 
2.17.1 (Apple Git-112)


From 89477b46041061da359411ffb89863226fb94a5d Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Sat, 20 Jan 2018 18:43:42 +0100
Subject: [PATCH 027/138] Another take at CI caching

---
 .gitlab-ci.yml                     |  2 ++
 Scripts/build_vanilla_compiler.sh  | 21 +++++++++++++-
 Scripts/process_build_artifacts.sh |  8 ++++++
 Scripts/run_tests_on_ci.sh         |  4 +++
 Scripts/setup_from_cache.sh        | 46 ++++++++++++++++++++++++++++++
 5 files changed, 80 insertions(+), 1 deletion(-)
 create mode 100644 Scripts/process_build_artifacts.sh
 create mode 100644 Scripts/run_tests_on_ci.sh
 create mode 100644 Scripts/setup_from_cache.sh

diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml
index d77b4806ba6..cb27b3786cc 100644
--- a/.gitlab-ci.yml
+++ b/.gitlab-ci.yml
@@ -2,8 +2,10 @@ obfuscator_debug:
     stage: test
     before_script:
         - /bin/bash $CACHE_DIR/ninjaScript.bash "./Scripts/build_vanilla_compiler.sh"
+        - /bin/bash Scripts/setup_from_cache.sh
     script:
         - /bin/bash Scripts/build.sh
+        - /bin/bash Scripts/process_build_artifacts.sh
     tags:
         - xcode-9.0
 
diff --git a/Scripts/build_vanilla_compiler.sh b/Scripts/build_vanilla_compiler.sh
index 872df388262..ba2b2d980ee 100755
--- a/Scripts/build_vanilla_compiler.sh
+++ b/Scripts/build_vanilla_compiler.sh
@@ -11,6 +11,25 @@ git checkout 3cb38854e963b84873a7b7769b6c0b3f28c86015
 echo "Building project at vanilla state"
 swift/utils/build-script -R
 
+echo "Making directory for sources in cache"
+mkdir build/TMP_SOURCES
+
+echo "Copying vanilla state to build folder for cache reasons..."
+cp -r -p llvm/ build/TMP_SOURCES/llvm/
+cp -r -p clang/ build/TMP_SOURCES/clang/
+cp -r -p swift/ build/TMP_SOURCES/swift/
+cp -r -p lldb/ build/TMP_SOURCES/lldb/
+cp -r -p cmark/ build/TMP_SOURCES/cmark/
+cp -r -p llbuild/ build/TMP_SOURCES/llbuild/
+cp -r -p swiftpm/ build/TMP_SOURCES/swiftpm/
+cp -r -p compiler-rt/ build/TMP_SOURCES/compiler-rt/
+cp -r -p swift-corelibs-xctest/ build/TMP_SOURCES/swift-corelibs-xctest/
+cp -r -p swift-corelibs-foundation/ build/TMP_SOURCES/swift-corelibs-foundation/
+cp -r -p swift-corelibs-libdispatch/ build/TMP_SOURCES/swift-corelibs-libdispatch/
+cp -r -p swift-integration-tests/ build/TMP_SOURCES/swift-integration-tests/
+cp -r -p swift-xcode-playground-support/ build/TMP_SOURCES/swift-xcode-playground-support/
+cp -r -p ninja/ build/TMP_SOURCES/ninja/
+echo "Copying finished"
+
 echo "Checking out the actual branch at ${commit_sha}"
 git checkout ${commit_sha}
-
diff --git a/Scripts/process_build_artifacts.sh b/Scripts/process_build_artifacts.sh
new file mode 100644
index 00000000000..deb5dd4ee44
--- /dev/null
+++ b/Scripts/process_build_artifacts.sh
@@ -0,0 +1,8 @@
+#!/bin/bash
+
+echo "Listing all the build tools"
+ls -al build/Ninja-ReleaseAssert/swift-macosx-x86_64/bin/
+
+echo "Listing all the libraries"
+ls -al build/Ninja-ReleaseAssert/swift-macosx-x86_64/lib/
+
diff --git a/Scripts/run_tests_on_ci.sh b/Scripts/run_tests_on_ci.sh
new file mode 100644
index 00000000000..e2d6e58689b
--- /dev/null
+++ b/Scripts/run_tests_on_ci.sh
@@ -0,0 +1,4 @@
+#!/bin/bash
+
+./swift/utils/build-script -R -T
+
diff --git a/Scripts/setup_from_cache.sh b/Scripts/setup_from_cache.sh
new file mode 100644
index 00000000000..0d86fd7599d
--- /dev/null
+++ b/Scripts/setup_from_cache.sh
@@ -0,0 +1,46 @@
+#!/bin/bash
+
+echo "Identifying current commit"
+git rev-parse --verify HEAD
+commit_sha=$(git rev-parse --verify HEAD)
+echo "Current commit SHA is ${commit_sha}"
+
+echo "Remove current sources"
+rm -f -r llvm
+rm -f -r clang
+rm -f -r swift
+rm -f -r lldb
+rm -f -r cmark
+rm -f -r llbuild
+rm -f -r swiftpm
+rm -f -r compiler-rt
+rm -f -r swift-corelibs-xctest
+rm -f -r swift-corelibs-foundation
+rm -f -r swift-corelibs-libdispatch
+rm -f -r swift-integration-tests
+rm -f -r swift-xcode-playground-support
+rm -f -r ninja
+echo "Removing finished"
+
+echo "Copy vanilla sources"
+cp -r -p build/TMP_SOURCES/llvm/ llvm/ 
+cp -r -p build/TMP_SOURCES/clang/ clang/ 
+cp -r -p build/TMP_SOURCES/swift/ swift/ 
+cp -r -p build/TMP_SOURCES/lldb/ lldb/ 
+cp -r -p build/TMP_SOURCES/cmark/ cmark/ 
+cp -r -p build/TMP_SOURCES/llbuild/ llbuild/ 
+cp -r -p build/TMP_SOURCES/swiftpm/ swiftpm/ 
+cp -r -p build/TMP_SOURCES/compiler-rt/ compiler-rt/ 
+cp -r -p build/TMP_SOURCES/swift-corelibs-xctest/ swift-corelibs-xctest/ 
+cp -r -p build/TMP_SOURCES/swift-corelibs-foundation/ swift-corelibs-foundation/ 
+cp -r -p build/TMP_SOURCES/swift-corelibs-libdispatch/ swift-corelibs-libdispatch/ 
+cp -r -p build/TMP_SOURCES/swift-integration-tests/ swift-integration-tests/ 
+cp -r -p build/TMP_SOURCES/swift-xcode-playground-support/ swift-xcode-playground-support/ 
+cp -r -p build/TMP_SOURCES/ninja/ ninja/ 
+
+rm -f -r build/TMP_SOURCES/
+echo "Copying finished"
+
+echo "Checking out the actual branch at ${commit_sha}"
+git add . -A
+git reset --hard ${commit_sha}
-- 
2.17.1 (Apple Git-112)


From 954ff499a350338da1c1c7bfd721f7363afd2101 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Mon, 22 Jan 2018 09:59:14 +0100
Subject: [PATCH 028/138] Added additional CI programs

---
 .gitlab-ci.yml | 25 +++++++++++++++++++++++++
 1 file changed, 25 insertions(+)

diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml
index cb27b3786cc..f6c70102944 100644
--- a/.gitlab-ci.yml
+++ b/.gitlab-ci.yml
@@ -8,4 +8,29 @@ obfuscator_debug:
         - /bin/bash Scripts/process_build_artifacts.sh
     tags:
         - xcode-9.0
+    except:
+        - master
+
+obfuscator_master:
+    stage: test
+    before_script:
+        - /bin/bash $CACHE_DIR/ninjaScript.bash "./Scripts/build_vanilla_compiler.sh"
+        - /bin/bash Scripts/setup_from_cache.sh
+    script:
+        - /bin/bash Scripts/build.sh
+        - /bin/bash Scripts/process_build_artifacts.sh
+    tags:
+        - xcode-9.0
+    only:
+        - master
+
+obfuscator_release:
+    stage: test
+    script:
+        - /bin/bash Scripts/build.sh
+        - /bin/bash Scripts/process_build_artifacts.sh
+    tags:
+        - xcode-9.0
+    only:
+        - tags
 
-- 
2.17.1 (Apple Git-112)


From 4fb0bd5fe96f594586a80f028580fb2243cac165 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Fri, 19 Jan 2018 17:56:09 +0100
Subject: [PATCH 029/138] Added doxygen configuration file and instructions for
 generating Doxygen documentation to README.md

Reviewers: jakub.sowa, jerzy.kleszcz

Reviewed By: jakub.sowa, jerzy.kleszcz

Subscribers: jerzy.kleszcz, jakub.sowa

Differential Revision: https://phabricator.polidea.com/D2767
---
 .gitignore |    1 +
 Doxyfile   | 2483 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 README.md  |   16 +-
 3 files changed, 2499 insertions(+), 1 deletion(-)
 create mode 100644 Doxyfile

diff --git a/.gitignore b/.gitignore
index 4978360907f..c3892fcad04 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,2 +1,3 @@
 /build
+/Documentation/doxygen
 .idea
diff --git a/Doxyfile b/Doxyfile
new file mode 100644
index 00000000000..059e257e7c8
--- /dev/null
+++ b/Doxyfile
@@ -0,0 +1,2483 @@
+# Doxyfile 1.8.14
+
+# This file describes the settings to be used by the documentation system
+# doxygen (www.doxygen.org) for a project.
+#
+# All text after a double hash (##) is considered a comment and is placed in
+# front of the TAG it is preceding.
+#
+# All text after a single hash (#) is considered a comment and will be ignored.
+# The format is:
+# TAG = value [value, ...]
+# For lists, items can also be appended using:
+# TAG += value [value, ...]
+# Values that contain spaces should be placed between quotes (\" \").
+
+#---------------------------------------------------------------------------
+# Project related configuration options
+#---------------------------------------------------------------------------
+
+# This tag specifies the encoding used for all characters in the config file
+# that follow. The default is UTF-8 which is also the encoding used for all text
+# before the first occurrence of this tag. Doxygen uses libiconv (or the iconv
+# built into libc) for the transcoding. See
+# https://www.gnu.org/software/libiconv/ for the list of possible encodings.
+# The default value is: UTF-8.
+
+DOXYFILE_ENCODING      = UTF-8
+
+# The PROJECT_NAME tag is a single word (or a sequence of words surrounded by
+# double-quotes, unless you are using Doxywizard) that should identify the
+# project for which the documentation is generated. This name is used in the
+# title of most generated pages and in a few other places.
+# The default value is: My Project.
+
+PROJECT_NAME           = "SwiftObfuscationLib"
+
+# The PROJECT_NUMBER tag can be used to enter a project or revision number. This
+# could be handy for archiving the generated documentation or if some version
+# control system is used.
+
+PROJECT_NUMBER         =
+
+# Using the PROJECT_BRIEF tag one can provide an optional one line description
+# for a project that appears at the top of each page and should give viewer a
+# quick idea about the purpose of the project. Keep the description short.
+
+PROJECT_BRIEF          =
+
+# With the PROJECT_LOGO tag one can specify a logo or an icon that is included
+# in the documentation. The maximum height of the logo should not exceed 55
+# pixels and the maximum width should not exceed 200 pixels. Doxygen will copy
+# the logo to the output directory.
+
+PROJECT_LOGO           =
+
+# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute) path
+# into which the generated documentation will be written. If a relative path is
+# entered, it will be relative to the location where doxygen was started. If
+# left blank the current directory will be used.
+
+OUTPUT_DIRECTORY       = Documentation
+
+# If the CREATE_SUBDIRS tag is set to YES then doxygen will create 4096 sub-
+# directories (in 2 levels) under the output directory of each output format and
+# will distribute the generated files over these directories. Enabling this
+# option can be useful when feeding doxygen a huge amount of source files, where
+# putting all generated files in the same directory would otherwise causes
+# performance problems for the file system.
+# The default value is: NO.
+
+CREATE_SUBDIRS         = NO
+
+# If the ALLOW_UNICODE_NAMES tag is set to YES, doxygen will allow non-ASCII
+# characters to appear in the names of generated files. If set to NO, non-ASCII
+# characters will be escaped, for example _xE3_x81_x84 will be used for Unicode
+# U+3044.
+# The default value is: NO.
+
+ALLOW_UNICODE_NAMES    = NO
+
+# The OUTPUT_LANGUAGE tag is used to specify the language in which all
+# documentation generated by doxygen is written. Doxygen will use this
+# information to generate all constant output in the proper language.
+# Possible values are: Afrikaans, Arabic, Armenian, Brazilian, Catalan, Chinese,
+# Chinese-Traditional, Croatian, Czech, Danish, Dutch, English (United States),
+# Esperanto, Farsi (Persian), Finnish, French, German, Greek, Hungarian,
+# Indonesian, Italian, Japanese, Japanese-en (Japanese with English messages),
+# Korean, Korean-en (Korean with English messages), Latvian, Lithuanian,
+# Macedonian, Norwegian, Persian (Farsi), Polish, Portuguese, Romanian, Russian,
+# Serbian, Serbian-Cyrillic, Slovak, Slovene, Spanish, Swedish, Turkish,
+# Ukrainian and Vietnamese.
+# The default value is: English.
+
+OUTPUT_LANGUAGE        = English
+
+# If the BRIEF_MEMBER_DESC tag is set to YES, doxygen will include brief member
+# descriptions after the members that are listed in the file and class
+# documentation (similar to Javadoc). Set to NO to disable this.
+# The default value is: YES.
+
+BRIEF_MEMBER_DESC      = YES
+
+# If the REPEAT_BRIEF tag is set to YES, doxygen will prepend the brief
+# description of a member or function before the detailed description
+#
+# Note: If both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the
+# brief descriptions will be completely suppressed.
+# The default value is: YES.
+
+REPEAT_BRIEF           = YES
+
+# This tag implements a quasi-intelligent brief description abbreviator that is
+# used to form the text in various listings. Each string in this list, if found
+# as the leading text of the brief description, will be stripped from the text
+# and the result, after processing the whole list, is used as the annotated
+# text. Otherwise, the brief description is used as-is. If left blank, the
+# following values are used ($name is automatically replaced with the name of
+# the entity):The $name class, The $name widget, The $name file, is, provides,
+# specifies, contains, represents, a, an and the.
+
+ABBREVIATE_BRIEF       = "The $name class" \
+                         "The $name widget" \
+                         "The $name file" \
+                         is \
+                         provides \
+                         specifies \
+                         contains \
+                         represents \
+                         a \
+                         an \
+                         the
+
+# If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then
+# doxygen will generate a detailed section even if there is only a brief
+# description.
+# The default value is: NO.
+
+ALWAYS_DETAILED_SEC    = NO
+
+# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all
+# inherited members of a class in the documentation of that class as if those
+# members were ordinary class members. Constructors, destructors and assignment
+# operators of the base classes will not be shown.
+# The default value is: NO.
+
+INLINE_INHERITED_MEMB  = NO
+
+# If the FULL_PATH_NAMES tag is set to YES, doxygen will prepend the full path
+# before files name in the file list and in the header files. If set to NO the
+# shortest path that makes the file name unique will be used
+# The default value is: YES.
+
+FULL_PATH_NAMES        = YES
+
+# The STRIP_FROM_PATH tag can be used to strip a user-defined part of the path.
+# Stripping is only done if one of the specified strings matches the left-hand
+# part of the path. The tag can be used to show relative paths in the file list.
+# If left blank the directory from which doxygen is run is used as the path to
+# strip.
+#
+# Note that you can specify absolute paths here, but also relative paths, which
+# will be relative from the directory where doxygen is started.
+# This tag requires that the tag FULL_PATH_NAMES is set to YES.
+
+STRIP_FROM_PATH        =
+
+# The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of the
+# path mentioned in the documentation of a class, which tells the reader which
+# header file to include in order to use a class. If left blank only the name of
+# the header file containing the class definition is used. Otherwise one should
+# specify the list of include paths that are normally passed to the compiler
+# using the -I flag.
+
+STRIP_FROM_INC_PATH    =
+
+# If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter (but
+# less readable) file names. This can be useful is your file systems doesn't
+# support long names like on DOS, Mac, or CD-ROM.
+# The default value is: NO.
+
+SHORT_NAMES            = NO
+
+# If the JAVADOC_AUTOBRIEF tag is set to YES then doxygen will interpret the
+# first line (until the first dot) of a Javadoc-style comment as the brief
+# description. If set to NO, the Javadoc-style will behave just like regular Qt-
+# style comments (thus requiring an explicit @brief command for a brief
+# description.)
+# The default value is: NO.
+
+JAVADOC_AUTOBRIEF      = NO
+
+# If the QT_AUTOBRIEF tag is set to YES then doxygen will interpret the first
+# line (until the first dot) of a Qt-style comment as the brief description. If
+# set to NO, the Qt-style will behave just like regular Qt-style comments (thus
+# requiring an explicit \brief command for a brief description.)
+# The default value is: NO.
+
+QT_AUTOBRIEF           = NO
+
+# The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make doxygen treat a
+# multi-line C++ special comment block (i.e. a block of //! or /// comments) as
+# a brief description. This used to be the default behavior. The new default is
+# to treat a multi-line C++ comment block as a detailed description. Set this
+# tag to YES if you prefer the old behavior instead.
+#
+# Note that setting this tag to YES also means that rational rose comments are
+# not recognized any more.
+# The default value is: NO.
+
+MULTILINE_CPP_IS_BRIEF = NO
+
+# If the INHERIT_DOCS tag is set to YES then an undocumented member inherits the
+# documentation from any documented member that it re-implements.
+# The default value is: YES.
+
+INHERIT_DOCS           = YES
+
+# If the SEPARATE_MEMBER_PAGES tag is set to YES then doxygen will produce a new
+# page for each member. If set to NO, the documentation of a member will be part
+# of the file/class/namespace that contains it.
+# The default value is: NO.
+
+SEPARATE_MEMBER_PAGES  = NO
+
+# The TAB_SIZE tag can be used to set the number of spaces in a tab. Doxygen
+# uses this value to replace tabs by spaces in code fragments.
+# Minimum value: 1, maximum value: 16, default value: 4.
+
+TAB_SIZE               = 2
+
+# This tag can be used to specify a number of aliases that act as commands in
+# the documentation. An alias has the form:
+# name=value
+# For example adding
+# "sideeffect=@par Side Effects:\n"
+# will allow you to put the command \sideeffect (or @sideeffect) in the
+# documentation, which will result in a user-defined paragraph with heading
+# "Side Effects:". You can put \n's in the value part of an alias to insert
+# newlines (in the resulting output). You can put ^^ in the value part of an
+# alias to insert a newline as if a physical newline was in the original file.
+
+ALIASES                =
+
+# This tag can be used to specify a number of word-keyword mappings (TCL only).
+# A mapping has the form "name=value". For example adding "class=itcl::class"
+# will allow you to use the command class in the itcl::class meaning.
+
+TCL_SUBST              =
+
+# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C sources
+# only. Doxygen will then generate output that is more tailored for C. For
+# instance, some of the names that are used will be different. The list of all
+# members will be omitted, etc.
+# The default value is: NO.
+
+OPTIMIZE_OUTPUT_FOR_C  = NO
+
+# Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java or
+# Python sources only. Doxygen will then generate output that is more tailored
+# for that language. For instance, namespaces will be presented as packages,
+# qualified scopes will look different, etc.
+# The default value is: NO.
+
+OPTIMIZE_OUTPUT_JAVA   = NO
+
+# Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran
+# sources. Doxygen will then generate output that is tailored for Fortran.
+# The default value is: NO.
+
+OPTIMIZE_FOR_FORTRAN   = NO
+
+# Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL
+# sources. Doxygen will then generate output that is tailored for VHDL.
+# The default value is: NO.
+
+OPTIMIZE_OUTPUT_VHDL   = NO
+
+# Doxygen selects the parser to use depending on the extension of the files it
+# parses. With this tag you can assign which parser to use for a given
+# extension. Doxygen has a built-in mapping, but you can override or extend it
+# using this tag. The format is ext=language, where ext is a file extension, and
+# language is one of the parsers supported by doxygen: IDL, Java, Javascript,
+# C#, C, C++, D, PHP, Objective-C, Python, Fortran (fixed format Fortran:
+# FortranFixed, free formatted Fortran: FortranFree, unknown formatted Fortran:
+# Fortran. In the later case the parser tries to guess whether the code is fixed
+# or free formatted code, this is the default for Fortran type files), VHDL. For
+# instance to make doxygen treat .inc files as Fortran files (default is PHP),
+# and .f files as C (default is Fortran), use: inc=Fortran f=C.
+#
+# Note: For files without extension you can use no_extension as a placeholder.
+#
+# Note that for custom extensions you also need to set FILE_PATTERNS otherwise
+# the files are not read by doxygen.
+
+EXTENSION_MAPPING      =
+
+# If the MARKDOWN_SUPPORT tag is enabled then doxygen pre-processes all comments
+# according to the Markdown format, which allows for more readable
+# documentation. See http://daringfireball.net/projects/markdown/ for details.
+# The output of markdown processing is further processed by doxygen, so you can
+# mix doxygen, HTML, and XML commands with Markdown formatting. Disable only in
+# case of backward compatibilities issues.
+# The default value is: YES.
+
+MARKDOWN_SUPPORT       = YES
+
+# When the TOC_INCLUDE_HEADINGS tag is set to a non-zero value, all headings up
+# to that level are automatically included in the table of contents, even if
+# they do not have an id attribute.
+# Note: This feature currently applies only to Markdown headings.
+# Minimum value: 0, maximum value: 99, default value: 0.
+# This tag requires that the tag MARKDOWN_SUPPORT is set to YES.
+
+TOC_INCLUDE_HEADINGS   = 0
+
+# When enabled doxygen tries to link words that correspond to documented
+# classes, or namespaces to their corresponding documentation. Such a link can
+# be prevented in individual cases by putting a % sign in front of the word or
+# globally by setting AUTOLINK_SUPPORT to NO.
+# The default value is: YES.
+
+AUTOLINK_SUPPORT       = YES
+
+# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want
+# to include (a tag file for) the STL sources as input, then you should set this
+# tag to YES in order to let doxygen match functions declarations and
+# definitions whose arguments contain STL classes (e.g. func(std::string);
+# versus func(std::string) {}). This also make the inheritance and collaboration
+# diagrams that involve STL classes more complete and accurate.
+# The default value is: NO.
+
+BUILTIN_STL_SUPPORT    = NO
+
+# If you use Microsoft's C++/CLI language, you should set this option to YES to
+# enable parsing support.
+# The default value is: NO.
+
+CPP_CLI_SUPPORT        = NO
+
+# Set the SIP_SUPPORT tag to YES if your project consists of sip (see:
+# https://www.riverbankcomputing.com/software/sip/intro) sources only. Doxygen
+# will parse them like normal C++ but will assume all classes use public instead
+# of private inheritance when no explicit protection keyword is present.
+# The default value is: NO.
+
+SIP_SUPPORT            = NO
+
+# For Microsoft's IDL there are propget and propput attributes to indicate
+# getter and setter methods for a property. Setting this option to YES will make
+# doxygen to replace the get and set methods by a property in the documentation.
+# This will only work if the methods are indeed getting or setting a simple
+# type. If this is not the case, or you want to show the methods anyway, you
+# should set this option to NO.
+# The default value is: YES.
+
+IDL_PROPERTY_SUPPORT   = YES
+
+# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC
+# tag is set to YES then doxygen will reuse the documentation of the first
+# member in the group (if any) for the other members of the group. By default
+# all members of a group must be documented explicitly.
+# The default value is: NO.
+
+DISTRIBUTE_GROUP_DOC   = NO
+
+# If one adds a struct or class to a group and this option is enabled, then also
+# any nested class or struct is added to the same group. By default this option
+# is disabled and one has to add nested compounds explicitly via \ingroup.
+# The default value is: NO.
+
+GROUP_NESTED_COMPOUNDS = NO
+
+# Set the SUBGROUPING tag to YES to allow class member groups of the same type
+# (for instance a group of public functions) to be put as a subgroup of that
+# type (e.g. under the Public Functions section). Set it to NO to prevent
+# subgrouping. Alternatively, this can be done per class using the
+# \nosubgrouping command.
+# The default value is: YES.
+
+SUBGROUPING            = YES
+
+# When the INLINE_GROUPED_CLASSES tag is set to YES, classes, structs and unions
+# are shown inside the group in which they are included (e.g. using \ingroup)
+# instead of on a separate page (for HTML and Man pages) or section (for LaTeX
+# and RTF).
+#
+# Note that this feature does not work in combination with
+# SEPARATE_MEMBER_PAGES.
+# The default value is: NO.
+
+INLINE_GROUPED_CLASSES = NO
+
+# When the INLINE_SIMPLE_STRUCTS tag is set to YES, structs, classes, and unions
+# with only public data fields or simple typedef fields will be shown inline in
+# the documentation of the scope in which they are defined (i.e. file,
+# namespace, or group documentation), provided this scope is documented. If set
+# to NO, structs, classes, and unions are shown on a separate page (for HTML and
+# Man pages) or section (for LaTeX and RTF).
+# The default value is: NO.
+
+INLINE_SIMPLE_STRUCTS  = NO
+
+# When TYPEDEF_HIDES_STRUCT tag is enabled, a typedef of a struct, union, or
+# enum is documented as struct, union, or enum with the name of the typedef. So
+# typedef struct TypeS {} TypeT, will appear in the documentation as a struct
+# with name TypeT. When disabled the typedef will appear as a member of a file,
+# namespace, or class. And the struct will be named TypeS. This can typically be
+# useful for C code in case the coding convention dictates that all compound
+# types are typedef'ed and only the typedef is referenced, never the tag name.
+# The default value is: NO.
+
+TYPEDEF_HIDES_STRUCT   = NO
+
+# The size of the symbol lookup cache can be set using LOOKUP_CACHE_SIZE. This
+# cache is used to resolve symbols given their name and scope. Since this can be
+# an expensive process and often the same symbol appears multiple times in the
+# code, doxygen keeps a cache of pre-resolved symbols. If the cache is too small
+# doxygen will become slower. If the cache is too large, memory is wasted. The
+# cache size is given by this formula: 2^(16+LOOKUP_CACHE_SIZE). The valid range
+# is 0..9, the default is 0, corresponding to a cache size of 2^16=65536
+# symbols. At the end of a run doxygen will report the cache usage and suggest
+# the optimal cache size from a speed point of view.
+# Minimum value: 0, maximum value: 9, default value: 0.
+
+LOOKUP_CACHE_SIZE      = 0
+
+#---------------------------------------------------------------------------
+# Build related configuration options
+#---------------------------------------------------------------------------
+
+# If the EXTRACT_ALL tag is set to YES, doxygen will assume all entities in
+# documentation are documented, even if no documentation was available. Private
+# class members and static file members will be hidden unless the
+# EXTRACT_PRIVATE respectively EXTRACT_STATIC tags are set to YES.
+# Note: This will also disable the warnings about undocumented members that are
+# normally produced when WARNINGS is set to YES.
+# The default value is: NO.
+
+EXTRACT_ALL            = YES
+
+# If the EXTRACT_PRIVATE tag is set to YES, all private members of a class will
+# be included in the documentation.
+# The default value is: NO.
+
+EXTRACT_PRIVATE        = NO
+
+# If the EXTRACT_PACKAGE tag is set to YES, all members with package or internal
+# scope will be included in the documentation.
+# The default value is: NO.
+
+EXTRACT_PACKAGE        = NO
+
+# If the EXTRACT_STATIC tag is set to YES, all static members of a file will be
+# included in the documentation.
+# The default value is: NO.
+
+EXTRACT_STATIC         = YES
+
+# If the EXTRACT_LOCAL_CLASSES tag is set to YES, classes (and structs) defined
+# locally in source files will be included in the documentation. If set to NO,
+# only classes defined in header files are included. Does not have any effect
+# for Java sources.
+# The default value is: YES.
+
+EXTRACT_LOCAL_CLASSES  = YES
+
+# This flag is only useful for Objective-C code. If set to YES, local methods,
+# which are defined in the implementation section but not in the interface are
+# included in the documentation. If set to NO, only methods in the interface are
+# included.
+# The default value is: NO.
+
+EXTRACT_LOCAL_METHODS  = NO
+
+# If this flag is set to YES, the members of anonymous namespaces will be
+# extracted and appear in the documentation as a namespace called
+# 'anonymous_namespace{file}', where file will be replaced with the base name of
+# the file that contains the anonymous namespace. By default anonymous namespace
+# are hidden.
+# The default value is: NO.
+
+EXTRACT_ANON_NSPACES   = NO
+
+# If the HIDE_UNDOC_MEMBERS tag is set to YES, doxygen will hide all
+# undocumented members inside documented classes or files. If set to NO these
+# members will be included in the various overviews, but no documentation
+# section is generated. This option has no effect if EXTRACT_ALL is enabled.
+# The default value is: NO.
+
+HIDE_UNDOC_MEMBERS     = NO
+
+# If the HIDE_UNDOC_CLASSES tag is set to YES, doxygen will hide all
+# undocumented classes that are normally visible in the class hierarchy. If set
+# to NO, these classes will be included in the various overviews. This option
+# has no effect if EXTRACT_ALL is enabled.
+# The default value is: NO.
+
+HIDE_UNDOC_CLASSES     = NO
+
+# If the HIDE_FRIEND_COMPOUNDS tag is set to YES, doxygen will hide all friend
+# (class|struct|union) declarations. If set to NO, these declarations will be
+# included in the documentation.
+# The default value is: NO.
+
+HIDE_FRIEND_COMPOUNDS  = NO
+
+# If the HIDE_IN_BODY_DOCS tag is set to YES, doxygen will hide any
+# documentation blocks found inside the body of a function. If set to NO, these
+# blocks will be appended to the function's detailed documentation block.
+# The default value is: NO.
+
+HIDE_IN_BODY_DOCS      = NO
+
+# The INTERNAL_DOCS tag determines if documentation that is typed after a
+# \internal command is included. If the tag is set to NO then the documentation
+# will be excluded. Set it to YES to include the internal documentation.
+# The default value is: NO.
+
+INTERNAL_DOCS          = NO
+
+# If the CASE_SENSE_NAMES tag is set to NO then doxygen will only generate file
+# names in lower-case letters. If set to YES, upper-case letters are also
+# allowed. This is useful if you have classes or files whose names only differ
+# in case and if your file system supports case sensitive file names. Windows
+# and Mac users are advised to set this option to NO.
+# The default value is: system dependent.
+
+CASE_SENSE_NAMES       = NO
+
+# If the HIDE_SCOPE_NAMES tag is set to NO then doxygen will show members with
+# their full class and namespace scopes in the documentation. If set to YES, the
+# scope will be hidden.
+# The default value is: NO.
+
+HIDE_SCOPE_NAMES       = NO
+
+# If the HIDE_COMPOUND_REFERENCE tag is set to NO (default) then doxygen will
+# append additional text to a page's title, such as Class Reference. If set to
+# YES the compound reference will be hidden.
+# The default value is: NO.
+
+HIDE_COMPOUND_REFERENCE= NO
+
+# If the SHOW_INCLUDE_FILES tag is set to YES then doxygen will put a list of
+# the files that are included by a file in the documentation of that file.
+# The default value is: YES.
+
+SHOW_INCLUDE_FILES     = YES
+
+# If the SHOW_GROUPED_MEMB_INC tag is set to YES then Doxygen will add for each
+# grouped member an include statement to the documentation, telling the reader
+# which file to include in order to use the member.
+# The default value is: NO.
+
+SHOW_GROUPED_MEMB_INC  = NO
+
+# If the FORCE_LOCAL_INCLUDES tag is set to YES then doxygen will list include
+# files with double quotes in the documentation rather than with sharp brackets.
+# The default value is: NO.
+
+FORCE_LOCAL_INCLUDES   = NO
+
+# If the INLINE_INFO tag is set to YES then a tag [inline] is inserted in the
+# documentation for inline members.
+# The default value is: YES.
+
+INLINE_INFO            = YES
+
+# If the SORT_MEMBER_DOCS tag is set to YES then doxygen will sort the
+# (detailed) documentation of file and class members alphabetically by member
+# name. If set to NO, the members will appear in declaration order.
+# The default value is: YES.
+
+SORT_MEMBER_DOCS       = YES
+
+# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the brief
+# descriptions of file, namespace and class members alphabetically by member
+# name. If set to NO, the members will appear in declaration order. Note that
+# this will also influence the order of the classes in the class list.
+# The default value is: NO.
+
+SORT_BRIEF_DOCS        = NO
+
+# If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen will sort the
+# (brief and detailed) documentation of class members so that constructors and
+# destructors are listed first. If set to NO the constructors will appear in the
+# respective orders defined by SORT_BRIEF_DOCS and SORT_MEMBER_DOCS.
+# Note: If SORT_BRIEF_DOCS is set to NO this option is ignored for sorting brief
+# member documentation.
+# Note: If SORT_MEMBER_DOCS is set to NO this option is ignored for sorting
+# detailed member documentation.
+# The default value is: NO.
+
+SORT_MEMBERS_CTORS_1ST = NO
+
+# If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the hierarchy
+# of group names into alphabetical order. If set to NO the group names will
+# appear in their defined order.
+# The default value is: NO.
+
+SORT_GROUP_NAMES       = NO
+
+# If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be sorted by
+# fully-qualified names, including namespaces. If set to NO, the class list will
+# be sorted only by class name, not including the namespace part.
+# Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES.
+# Note: This option applies only to the class list, not to the alphabetical
+# list.
+# The default value is: NO.
+
+SORT_BY_SCOPE_NAME     = NO
+
+# If the STRICT_PROTO_MATCHING option is enabled and doxygen fails to do proper
+# type resolution of all parameters of a function it will reject a match between
+# the prototype and the implementation of a member function even if there is
+# only one candidate or it is obvious which candidate to choose by doing a
+# simple string match. By disabling STRICT_PROTO_MATCHING doxygen will still
+# accept a match between prototype and implementation in such cases.
+# The default value is: NO.
+
+STRICT_PROTO_MATCHING  = NO
+
+# The GENERATE_TODOLIST tag can be used to enable (YES) or disable (NO) the todo
+# list. This list is created by putting \todo commands in the documentation.
+# The default value is: YES.
+
+GENERATE_TODOLIST      = YES
+
+# The GENERATE_TESTLIST tag can be used to enable (YES) or disable (NO) the test
+# list. This list is created by putting \test commands in the documentation.
+# The default value is: YES.
+
+GENERATE_TESTLIST      = YES
+
+# The GENERATE_BUGLIST tag can be used to enable (YES) or disable (NO) the bug
+# list. This list is created by putting \bug commands in the documentation.
+# The default value is: YES.
+
+GENERATE_BUGLIST       = YES
+
+# The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or disable (NO)
+# the deprecated list. This list is created by putting \deprecated commands in
+# the documentation.
+# The default value is: YES.
+
+GENERATE_DEPRECATEDLIST= YES
+
+# The ENABLED_SECTIONS tag can be used to enable conditional documentation
+# sections, marked by \if <section_label> ... \endif and \cond <section_label>
+# ... \endcond blocks.
+
+ENABLED_SECTIONS       =
+
+# The MAX_INITIALIZER_LINES tag determines the maximum number of lines that the
+# initial value of a variable or macro / define can have for it to appear in the
+# documentation. If the initializer consists of more lines than specified here
+# it will be hidden. Use a value of 0 to hide initializers completely. The
+# appearance of the value of individual variables and macros / defines can be
+# controlled using \showinitializer or \hideinitializer command in the
+# documentation regardless of this setting.
+# Minimum value: 0, maximum value: 10000, default value: 30.
+
+MAX_INITIALIZER_LINES  = 30
+
+# Set the SHOW_USED_FILES tag to NO to disable the list of files generated at
+# the bottom of the documentation of classes and structs. If set to YES, the
+# list will mention the files that were used to generate the documentation.
+# The default value is: YES.
+
+SHOW_USED_FILES        = YES
+
+# Set the SHOW_FILES tag to NO to disable the generation of the Files page. This
+# will remove the Files entry from the Quick Index and from the Folder Tree View
+# (if specified).
+# The default value is: YES.
+
+SHOW_FILES             = YES
+
+# Set the SHOW_NAMESPACES tag to NO to disable the generation of the Namespaces
+# page. This will remove the Namespaces entry from the Quick Index and from the
+# Folder Tree View (if specified).
+# The default value is: YES.
+
+SHOW_NAMESPACES        = YES
+
+# The FILE_VERSION_FILTER tag can be used to specify a program or script that
+# doxygen should invoke to get the current version for each file (typically from
+# the version control system). Doxygen will invoke the program by executing (via
+# popen()) the command command input-file, where command is the value of the
+# FILE_VERSION_FILTER tag, and input-file is the name of an input file provided
+# by doxygen. Whatever the program writes to standard output is used as the file
+# version. For an example see the documentation.
+
+FILE_VERSION_FILTER    =
+
+# The LAYOUT_FILE tag can be used to specify a layout file which will be parsed
+# by doxygen. The layout file controls the global structure of the generated
+# output files in an output format independent way. To create the layout file
+# that represents doxygen's defaults, run doxygen with the -l option. You can
+# optionally specify a file name after the option, if omitted DoxygenLayout.xml
+# will be used as the name of the layout file.
+#
+# Note that if you run doxygen from a directory containing a file called
+# DoxygenLayout.xml, doxygen will parse it automatically even if the LAYOUT_FILE
+# tag is left empty.
+
+LAYOUT_FILE            =
+
+# The CITE_BIB_FILES tag can be used to specify one or more bib files containing
+# the reference definitions. This must be a list of .bib files. The .bib
+# extension is automatically appended if omitted. This requires the bibtex tool
+# to be installed. See also https://en.wikipedia.org/wiki/BibTeX for more info.
+# For LaTeX the style of the bibliography can be controlled using
+# LATEX_BIB_STYLE. To use this feature you need bibtex and perl available in the
+# search path. See also \cite for info how to create references.
+
+CITE_BIB_FILES         =
+
+#---------------------------------------------------------------------------
+# Configuration options related to warning and progress messages
+#---------------------------------------------------------------------------
+
+# The QUIET tag can be used to turn on/off the messages that are generated to
+# standard output by doxygen. If QUIET is set to YES this implies that the
+# messages are off.
+# The default value is: NO.
+
+QUIET                  = NO
+
+# The WARNINGS tag can be used to turn on/off the warning messages that are
+# generated to standard error (stderr) by doxygen. If WARNINGS is set to YES
+# this implies that the warnings are on.
+#
+# Tip: Turn warnings on while writing the documentation.
+# The default value is: YES.
+
+WARNINGS               = YES
+
+# If the WARN_IF_UNDOCUMENTED tag is set to YES then doxygen will generate
+# warnings for undocumented members. If EXTRACT_ALL is set to YES then this flag
+# will automatically be disabled.
+# The default value is: YES.
+
+WARN_IF_UNDOCUMENTED   = YES
+
+# If the WARN_IF_DOC_ERROR tag is set to YES, doxygen will generate warnings for
+# potential errors in the documentation, such as not documenting some parameters
+# in a documented function, or documenting parameters that don't exist or using
+# markup commands wrongly.
+# The default value is: YES.
+
+WARN_IF_DOC_ERROR      = YES
+
+# This WARN_NO_PARAMDOC option can be enabled to get warnings for functions that
+# are documented, but have no documentation for their parameters or return
+# value. If set to NO, doxygen will only warn about wrong or incomplete
+# parameter documentation, but not about the absence of documentation.
+# The default value is: NO.
+
+WARN_NO_PARAMDOC       = NO
+
+# If the WARN_AS_ERROR tag is set to YES then doxygen will immediately stop when
+# a warning is encountered.
+# The default value is: NO.
+
+WARN_AS_ERROR          = NO
+
+# The WARN_FORMAT tag determines the format of the warning messages that doxygen
+# can produce. The string should contain the $file, $line, and $text tags, which
+# will be replaced by the file and line number from which the warning originated
+# and the warning text. Optionally the format may contain $version, which will
+# be replaced by the version of the file (if it could be obtained via
+# FILE_VERSION_FILTER)
+# The default value is: $file:$line: $text.
+
+WARN_FORMAT            = "$file:$line: $text"
+
+# The WARN_LOGFILE tag can be used to specify a file to which warning and error
+# messages should be written. If left blank the output is written to standard
+# error (stderr).
+
+WARN_LOGFILE           =
+
+#---------------------------------------------------------------------------
+# Configuration options related to the input files
+#---------------------------------------------------------------------------
+
+# The INPUT tag is used to specify the files and/or directories that contain
+# documented source files. You may enter file names like myfile.cpp or
+# directories like /usr/src/myproject. Separate the files or directories with
+# spaces. See also FILE_PATTERNS and EXTENSION_MAPPING
+# Note: If this tag is empty the current directory is searched.
+
+INPUT                  = ./swift/include/swift/Obfuscation/ 
+INPUT += README.md
+
+# This tag can be used to specify the character encoding of the source files
+# that doxygen parses. Internally doxygen uses the UTF-8 encoding. Doxygen uses
+# libiconv (or the iconv built into libc) for the transcoding. See the libiconv
+# documentation (see: https://www.gnu.org/software/libiconv/) for the list of
+# possible encodings.
+# The default value is: UTF-8.
+
+INPUT_ENCODING         = UTF-8
+
+# If the value of the INPUT tag contains directories, you can use the
+# FILE_PATTERNS tag to specify one or more wildcard patterns (like *.cpp and
+# *.h) to filter out the source-files in the directories.
+#
+# Note that for custom extensions or not directly supported extensions you also
+# need to set EXTENSION_MAPPING for the extension otherwise the files are not
+# read by doxygen.
+#
+# If left blank the following patterns are tested:*.c, *.cc, *.cxx, *.cpp,
+# *.c++, *.java, *.ii, *.ixx, *.ipp, *.i++, *.inl, *.idl, *.ddl, *.odl, *.h,
+# *.hh, *.hxx, *.hpp, *.h++, *.cs, *.d, *.php, *.php4, *.php5, *.phtml, *.inc,
+# *.m, *.markdown, *.md, *.mm, *.dox, *.py, *.pyw, *.f90, *.f95, *.f03, *.f08,
+# *.f, *.for, *.tcl, *.vhd, *.vhdl, *.ucf and *.qsf.
+
+FILE_PATTERNS          = *.c \
+                         *.cc \
+                         *.cxx \
+                         *.cpp \
+                         *.c++ \
+                         *.java \
+                         *.ii \
+                         *.ixx \
+                         *.ipp \
+                         *.i++ \
+                         *.inl \
+                         *.idl \
+                         *.ddl \
+                         *.odl \
+                         *.h \
+                         *.hh \
+                         *.hxx \
+                         *.hpp \
+                         *.h++ \
+                         *.cs \
+                         *.d \
+                         *.php \
+                         *.php4 \
+                         *.php5 \
+                         *.phtml \
+                         *.inc \
+                         *.m \
+                         *.markdown \
+                         *.md \
+                         *.mm \
+                         *.dox \
+                         *.py \
+                         *.pyw \
+                         *.f90 \
+                         *.f95 \
+                         *.f03 \
+                         *.f08 \
+                         *.f \
+                         *.for \
+                         *.tcl \
+                         *.vhd \
+                         *.vhdl \
+                         *.ucf \
+                         *.qsf
+
+# The RECURSIVE tag can be used to specify whether or not subdirectories should
+# be searched for input files as well.
+# The default value is: NO.
+
+RECURSIVE              = NO
+
+# The EXCLUDE tag can be used to specify files and/or directories that should be
+# excluded from the INPUT source files. This way you can easily exclude a
+# subdirectory from a directory tree whose root is specified with the INPUT tag.
+#
+# Note that relative paths are relative to the directory from which doxygen is
+# run.
+
+EXCLUDE                =
+
+# The EXCLUDE_SYMLINKS tag can be used to select whether or not files or
+# directories that are symbolic links (a Unix file system feature) are excluded
+# from the input.
+# The default value is: NO.
+
+EXCLUDE_SYMLINKS       = NO
+
+# If the value of the INPUT tag contains directories, you can use the
+# EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude
+# certain files from those directories.
+#
+# Note that the wildcards are matched against the file with absolute path, so to
+# exclude all test directories for example use the pattern */test/*
+
+EXCLUDE_PATTERNS       =
+
+# The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names
+# (namespaces, classes, functions, etc.) that should be excluded from the
+# output. The symbol name can be a fully qualified name, a word, or if the
+# wildcard * is used, a substring. Examples: ANamespace, AClass,
+# AClass::ANamespace, ANamespace::*Test
+#
+# Note that the wildcards are matched against the file with absolute path, so to
+# exclude all test directories use the pattern */test/*
+
+EXCLUDE_SYMBOLS        =
+
+# The EXAMPLE_PATH tag can be used to specify one or more files or directories
+# that contain example code fragments that are included (see the \include
+# command).
+
+EXAMPLE_PATH           =
+
+# If the value of the EXAMPLE_PATH tag contains directories, you can use the
+# EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp and
+# *.h) to filter out the source-files in the directories. If left blank all
+# files are included.
+
+EXAMPLE_PATTERNS       = *
+
+# If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be
+# searched for input files to be used with the \include or \dontinclude commands
+# irrespective of the value of the RECURSIVE tag.
+# The default value is: NO.
+
+EXAMPLE_RECURSIVE      = NO
+
+# The IMAGE_PATH tag can be used to specify one or more files or directories
+# that contain images that are to be included in the documentation (see the
+# \image command).
+
+IMAGE_PATH             =
+
+# The INPUT_FILTER tag can be used to specify a program that doxygen should
+# invoke to filter for each input file. Doxygen will invoke the filter program
+# by executing (via popen()) the command:
+#
+# <filter> <input-file>
+#
+# where <filter> is the value of the INPUT_FILTER tag, and <input-file> is the
+# name of an input file. Doxygen will then use the output that the filter
+# program writes to standard output. If FILTER_PATTERNS is specified, this tag
+# will be ignored.
+#
+# Note that the filter must not add or remove lines; it is applied before the
+# code is scanned, but not when the output code is generated. If lines are added
+# or removed, the anchors will not be placed correctly.
+#
+# Note that for custom extensions or not directly supported extensions you also
+# need to set EXTENSION_MAPPING for the extension otherwise the files are not
+# properly processed by doxygen.
+
+INPUT_FILTER           =
+
+# The FILTER_PATTERNS tag can be used to specify filters on a per file pattern
+# basis. Doxygen will compare the file name with each pattern and apply the
+# filter if there is a match. The filters are a list of the form: pattern=filter
+# (like *.cpp=my_cpp_filter). See INPUT_FILTER for further information on how
+# filters are used. If the FILTER_PATTERNS tag is empty or if none of the
+# patterns match the file name, INPUT_FILTER is applied.
+#
+# Note that for custom extensions or not directly supported extensions you also
+# need to set EXTENSION_MAPPING for the extension otherwise the files are not
+# properly processed by doxygen.
+
+FILTER_PATTERNS        =
+
+# If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using
+# INPUT_FILTER) will also be used to filter the input files that are used for
+# producing the source files to browse (i.e. when SOURCE_BROWSER is set to YES).
+# The default value is: NO.
+
+FILTER_SOURCE_FILES    = NO
+
+# The FILTER_SOURCE_PATTERNS tag can be used to specify source filters per file
+# pattern. A pattern will override the setting for FILTER_PATTERN (if any) and
+# it is also possible to disable source filtering for a specific pattern using
+# *.ext= (so without naming a filter).
+# This tag requires that the tag FILTER_SOURCE_FILES is set to YES.
+
+FILTER_SOURCE_PATTERNS =
+
+# If the USE_MDFILE_AS_MAINPAGE tag refers to the name of a markdown file that
+# is part of the input, its contents will be placed on the main page
+# (index.html). This can be useful if you have a project on for instance GitHub
+# and want to reuse the introduction page also for the doxygen output.
+
+USE_MDFILE_AS_MAINPAGE = README.md
+
+#---------------------------------------------------------------------------
+# Configuration options related to source browsing
+#---------------------------------------------------------------------------
+
+# If the SOURCE_BROWSER tag is set to YES then a list of source files will be
+# generated. Documented entities will be cross-referenced with these sources.
+#
+# Note: To get rid of all source code in the generated output, make sure that
+# also VERBATIM_HEADERS is set to NO.
+# The default value is: NO.
+
+SOURCE_BROWSER         = YES
+
+# Setting the INLINE_SOURCES tag to YES will include the body of functions,
+# classes and enums directly into the documentation.
+# The default value is: NO.
+
+INLINE_SOURCES         = YES
+
+# Setting the STRIP_CODE_COMMENTS tag to YES will instruct doxygen to hide any
+# special comment blocks from generated source code fragments. Normal C, C++ and
+# Fortran comments will always remain visible.
+# The default value is: YES.
+
+STRIP_CODE_COMMENTS    = YES
+
+# If the REFERENCED_BY_RELATION tag is set to YES then for each documented
+# function all documented functions referencing it will be listed.
+# The default value is: NO.
+
+REFERENCED_BY_RELATION = NO
+
+# If the REFERENCES_RELATION tag is set to YES then for each documented function
+# all documented entities called/used by that function will be listed.
+# The default value is: NO.
+
+REFERENCES_RELATION    = NO
+
+# If the REFERENCES_LINK_SOURCE tag is set to YES and SOURCE_BROWSER tag is set
+# to YES then the hyperlinks from functions in REFERENCES_RELATION and
+# REFERENCED_BY_RELATION lists will link to the source code. Otherwise they will
+# link to the documentation.
+# The default value is: YES.
+
+REFERENCES_LINK_SOURCE = YES
+
+# If SOURCE_TOOLTIPS is enabled (the default) then hovering a hyperlink in the
+# source code will show a tooltip with additional information such as prototype,
+# brief description and links to the definition and documentation. Since this
+# will make the HTML file larger and loading of large files a bit slower, you
+# can opt to disable this feature.
+# The default value is: YES.
+# This tag requires that the tag SOURCE_BROWSER is set to YES.
+
+SOURCE_TOOLTIPS        = YES
+
+# If the USE_HTAGS tag is set to YES then the references to source code will
+# point to the HTML generated by the htags(1) tool instead of doxygen built-in
+# source browser. The htags tool is part of GNU's global source tagging system
+# (see https://www.gnu.org/software/global/global.html). You will need version
+# 4.8.6 or higher.
+#
+# To use it do the following:
+# - Install the latest version of global
+# - Enable SOURCE_BROWSER and USE_HTAGS in the config file
+# - Make sure the INPUT points to the root of the source tree
+# - Run doxygen as normal
+#
+# Doxygen will invoke htags (and that will in turn invoke gtags), so these
+# tools must be available from the command line (i.e. in the search path).
+#
+# The result: instead of the source browser generated by doxygen, the links to
+# source code will now point to the output of htags.
+# The default value is: NO.
+# This tag requires that the tag SOURCE_BROWSER is set to YES.
+
+USE_HTAGS              = NO
+
+# If the VERBATIM_HEADERS tag is set the YES then doxygen will generate a
+# verbatim copy of the header file for each class for which an include is
+# specified. Set to NO to disable this.
+# See also: Section \class.
+# The default value is: YES.
+
+VERBATIM_HEADERS       = YES
+
+#---------------------------------------------------------------------------
+# Configuration options related to the alphabetical class index
+#---------------------------------------------------------------------------
+
+# If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index of all
+# compounds will be generated. Enable this if the project contains a lot of
+# classes, structs, unions or interfaces.
+# The default value is: YES.
+
+ALPHABETICAL_INDEX     = YES
+
+# The COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns in
+# which the alphabetical index list will be split.
+# Minimum value: 1, maximum value: 20, default value: 5.
+# This tag requires that the tag ALPHABETICAL_INDEX is set to YES.
+
+COLS_IN_ALPHA_INDEX    = 5
+
+# In case all classes in a project start with a common prefix, all classes will
+# be put under the same header in the alphabetical index. The IGNORE_PREFIX tag
+# can be used to specify a prefix (or a list of prefixes) that should be ignored
+# while generating the index headers.
+# This tag requires that the tag ALPHABETICAL_INDEX is set to YES.
+
+IGNORE_PREFIX          =
+
+#---------------------------------------------------------------------------
+# Configuration options related to the HTML output
+#---------------------------------------------------------------------------
+
+# If the GENERATE_HTML tag is set to YES, doxygen will generate HTML output
+# The default value is: YES.
+
+GENERATE_HTML          = YES
+
+# The HTML_OUTPUT tag is used to specify where the HTML docs will be put. If a
+# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of
+# it.
+# The default directory is: html.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_OUTPUT            = doxygen
+
+# The HTML_FILE_EXTENSION tag can be used to specify the file extension for each
+# generated HTML page (for example: .htm, .php, .asp).
+# The default value is: .html.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_FILE_EXTENSION    = .html
+
+# The HTML_HEADER tag can be used to specify a user-defined HTML header file for
+# each generated HTML page. If the tag is left blank doxygen will generate a
+# standard header.
+#
+# To get valid HTML the header file that includes any scripts and style sheets
+# that doxygen needs, which is dependent on the configuration options used (e.g.
+# the setting GENERATE_TREEVIEW). It is highly recommended to start with a
+# default header using
+# doxygen -w html new_header.html new_footer.html new_stylesheet.css
+# YourConfigFile
+# and then modify the file new_header.html. See also section "Doxygen usage"
+# for information on how to generate the default header that doxygen normally
+# uses.
+# Note: The header is subject to change so you typically have to regenerate the
+# default header when upgrading to a newer version of doxygen. For a description
+# of the possible markers and block names see the documentation.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_HEADER            =
+
+# The HTML_FOOTER tag can be used to specify a user-defined HTML footer for each
+# generated HTML page. If the tag is left blank doxygen will generate a standard
+# footer. See HTML_HEADER for more information on how to generate a default
+# footer and what special commands can be used inside the footer. See also
+# section "Doxygen usage" for information on how to generate the default footer
+# that doxygen normally uses.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_FOOTER            =
+
+# The HTML_STYLESHEET tag can be used to specify a user-defined cascading style
+# sheet that is used by each HTML page. It can be used to fine-tune the look of
+# the HTML output. If left blank doxygen will generate a default style sheet.
+# See also section "Doxygen usage" for information on how to generate the style
+# sheet that doxygen normally uses.
+# Note: It is recommended to use HTML_EXTRA_STYLESHEET instead of this tag, as
+# it is more robust and this tag (HTML_STYLESHEET) will in the future become
+# obsolete.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_STYLESHEET        =
+
+# The HTML_EXTRA_STYLESHEET tag can be used to specify additional user-defined
+# cascading style sheets that are included after the standard style sheets
+# created by doxygen. Using this option one can overrule certain style aspects.
+# This is preferred over using HTML_STYLESHEET since it does not replace the
+# standard style sheet and is therefore more robust against future updates.
+# Doxygen will copy the style sheet files to the output directory.
+# Note: The order of the extra style sheet files is of importance (e.g. the last
+# style sheet in the list overrules the setting of the previous ones in the
+# list). For an example see the documentation.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_EXTRA_STYLESHEET  =
+
+# The HTML_EXTRA_FILES tag can be used to specify one or more extra images or
+# other source files which should be copied to the HTML output directory. Note
+# that these files will be copied to the base HTML output directory. Use the
+# $relpath^ marker in the HTML_HEADER and/or HTML_FOOTER files to load these
+# files. In the HTML_STYLESHEET file, use the file name only. Also note that the
+# files will be copied as-is; there are no commands or markers available.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_EXTRA_FILES       =
+
+# The HTML_COLORSTYLE_HUE tag controls the color of the HTML output. Doxygen
+# will adjust the colors in the style sheet and background images according to
+# this color. Hue is specified as an angle on a colorwheel, see
+# https://en.wikipedia.org/wiki/Hue for more information. For instance the value
+# 0 represents red, 60 is yellow, 120 is green, 180 is cyan, 240 is blue, 300
+# purple, and 360 is red again.
+# Minimum value: 0, maximum value: 359, default value: 220.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_COLORSTYLE_HUE    = 220
+
+# The HTML_COLORSTYLE_SAT tag controls the purity (or saturation) of the colors
+# in the HTML output. For a value of 0 the output will use grayscales only. A
+# value of 255 will produce the most vivid colors.
+# Minimum value: 0, maximum value: 255, default value: 100.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_COLORSTYLE_SAT    = 100
+
+# The HTML_COLORSTYLE_GAMMA tag controls the gamma correction applied to the
+# luminance component of the colors in the HTML output. Values below 100
+# gradually make the output lighter, whereas values above 100 make the output
+# darker. The value divided by 100 is the actual gamma applied, so 80 represents
+# a gamma of 0.8, The value 220 represents a gamma of 2.2, and 100 does not
+# change the gamma.
+# Minimum value: 40, maximum value: 240, default value: 80.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_COLORSTYLE_GAMMA  = 80
+
+# If the HTML_TIMESTAMP tag is set to YES then the footer of each generated HTML
+# page will contain the date and time when the page was generated. Setting this
+# to YES can help to show when doxygen was last run and thus if the
+# documentation is up to date.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_TIMESTAMP         = NO
+
+# If the HTML_DYNAMIC_MENUS tag is set to YES then the generated HTML
+# documentation will contain a main index with vertical navigation menus that
+# are dynamically created via Javascript. If disabled, the navigation index will
+# consists of multiple levels of tabs that are statically embedded in every HTML
+# page. Disable this option to support browsers that do not have Javascript,
+# like the Qt help browser.
+# The default value is: YES.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_DYNAMIC_MENUS     = YES
+
+# If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML
+# documentation will contain sections that can be hidden and shown after the
+# page has loaded.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_DYNAMIC_SECTIONS  = NO
+
+# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of entries
+# shown in the various tree structured indices initially; the user can expand
+# and collapse entries dynamically later on. Doxygen will expand the tree to
+# such a level that at most the specified number of entries are visible (unless
+# a fully collapsed tree already exceeds this amount). So setting the number of
+# entries 1 will produce a full collapsed tree by default. 0 is a special value
+# representing an infinite number of entries and will result in a full expanded
+# tree by default.
+# Minimum value: 0, maximum value: 9999, default value: 100.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_INDEX_NUM_ENTRIES = 100
+
+# If the GENERATE_DOCSET tag is set to YES, additional index files will be
+# generated that can be used as input for Apple's Xcode 3 integrated development
+# environment (see: https://developer.apple.com/tools/xcode/), introduced with
+# OSX 10.5 (Leopard). To create a documentation set, doxygen will generate a
+# Makefile in the HTML output directory. Running make will produce the docset in
+# that directory and running make install will install the docset in
+# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find it at
+# startup. See https://developer.apple.com/tools/creatingdocsetswithdoxygen.html
+# for more information.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+GENERATE_DOCSET        = NO
+
+# This tag determines the name of the docset feed. A documentation feed provides
+# an umbrella under which multiple documentation sets from a single provider
+# (such as a company or product suite) can be grouped.
+# The default value is: Doxygen generated docs.
+# This tag requires that the tag GENERATE_DOCSET is set to YES.
+
+DOCSET_FEEDNAME        = "Doxygen generated docs"
+
+# This tag specifies a string that should uniquely identify the documentation
+# set bundle. This should be a reverse domain-name style string, e.g.
+# com.mycompany.MyDocSet. Doxygen will append .docset to the name.
+# The default value is: org.doxygen.Project.
+# This tag requires that the tag GENERATE_DOCSET is set to YES.
+
+DOCSET_BUNDLE_ID       = pl.polidea.swift.obfuscation
+
+# The DOCSET_PUBLISHER_ID tag specifies a string that should uniquely identify
+# the documentation publisher. This should be a reverse domain-name style
+# string, e.g. com.mycompany.MyDocSet.documentation.
+# The default value is: org.doxygen.Publisher.
+# This tag requires that the tag GENERATE_DOCSET is set to YES.
+
+DOCSET_PUBLISHER_ID    = pl.polidea.swift.obfuscation.documentation
+
+# The DOCSET_PUBLISHER_NAME tag identifies the documentation publisher.
+# The default value is: Publisher.
+# This tag requires that the tag GENERATE_DOCSET is set to YES.
+
+DOCSET_PUBLISHER_NAME  = Polidea
+
+# If the GENERATE_HTMLHELP tag is set to YES then doxygen generates three
+# additional HTML index files: index.hhp, index.hhc, and index.hhk. The
+# index.hhp is a project file that can be read by Microsoft's HTML Help Workshop
+# (see: http://www.microsoft.com/en-us/download/details.aspx?id=21138) on
+# Windows.
+#
+# The HTML Help Workshop contains a compiler that can convert all HTML output
+# generated by doxygen into a single compiled HTML file (.chm). Compiled HTML
+# files are now used as the Windows 98 help format, and will replace the old
+# Windows help format (.hlp) on all Windows platforms in the future. Compressed
+# HTML files also contain an index, a table of contents, and you can search for
+# words in the documentation. The HTML workshop also contains a viewer for
+# compressed HTML files.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+GENERATE_HTMLHELP      = NO
+
+# The CHM_FILE tag can be used to specify the file name of the resulting .chm
+# file. You can add a path in front of the file if the result should not be
+# written to the html output directory.
+# This tag requires that the tag GENERATE_HTMLHELP is set to YES.
+
+CHM_FILE               =
+
+# The HHC_LOCATION tag can be used to specify the location (absolute path
+# including file name) of the HTML help compiler (hhc.exe). If non-empty,
+# doxygen will try to run the HTML help compiler on the generated index.hhp.
+# The file has to be specified with full path.
+# This tag requires that the tag GENERATE_HTMLHELP is set to YES.
+
+HHC_LOCATION           =
+
+# The GENERATE_CHI flag controls if a separate .chi index file is generated
+# (YES) or that it should be included in the master .chm file (NO).
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTMLHELP is set to YES.
+
+GENERATE_CHI           = NO
+
+# The CHM_INDEX_ENCODING is used to encode HtmlHelp index (hhk), content (hhc)
+# and project file content.
+# This tag requires that the tag GENERATE_HTMLHELP is set to YES.
+
+CHM_INDEX_ENCODING     =
+
+# The BINARY_TOC flag controls whether a binary table of contents is generated
+# (YES) or a normal table of contents (NO) in the .chm file. Furthermore it
+# enables the Previous and Next buttons.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTMLHELP is set to YES.
+
+BINARY_TOC             = NO
+
+# The TOC_EXPAND flag can be set to YES to add extra items for group members to
+# the table of contents of the HTML help documentation and to the tree view.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTMLHELP is set to YES.
+
+TOC_EXPAND             = NO
+
+# If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and
+# QHP_VIRTUAL_FOLDER are set, an additional index file will be generated that
+# can be used as input for Qt's qhelpgenerator to generate a Qt Compressed Help
+# (.qch) of the generated HTML documentation.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+GENERATE_QHP           = NO
+
+# If the QHG_LOCATION tag is specified, the QCH_FILE tag can be used to specify
+# the file name of the resulting .qch file. The path specified is relative to
+# the HTML output folder.
+# This tag requires that the tag GENERATE_QHP is set to YES.
+
+QCH_FILE               =
+
+# The QHP_NAMESPACE tag specifies the namespace to use when generating Qt Help
+# Project output. For more information please see Qt Help Project / Namespace
+# (see: http://doc.qt.io/qt-4.8/qthelpproject.html#namespace).
+# The default value is: org.doxygen.Project.
+# This tag requires that the tag GENERATE_QHP is set to YES.
+
+QHP_NAMESPACE          = org.doxygen.Project
+
+# The QHP_VIRTUAL_FOLDER tag specifies the namespace to use when generating Qt
+# Help Project output. For more information please see Qt Help Project / Virtual
+# Folders (see: http://doc.qt.io/qt-4.8/qthelpproject.html#virtual-folders).
+# The default value is: doc.
+# This tag requires that the tag GENERATE_QHP is set to YES.
+
+QHP_VIRTUAL_FOLDER     = doc
+
+# If the QHP_CUST_FILTER_NAME tag is set, it specifies the name of a custom
+# filter to add. For more information please see Qt Help Project / Custom
+# Filters (see: http://doc.qt.io/qt-4.8/qthelpproject.html#custom-filters).
+# This tag requires that the tag GENERATE_QHP is set to YES.
+
+QHP_CUST_FILTER_NAME   =
+
+# The QHP_CUST_FILTER_ATTRS tag specifies the list of the attributes of the
+# custom filter to add. For more information please see Qt Help Project / Custom
+# Filters (see: http://doc.qt.io/qt-4.8/qthelpproject.html#custom-filters).
+# This tag requires that the tag GENERATE_QHP is set to YES.
+
+QHP_CUST_FILTER_ATTRS  =
+
+# The QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this
+# project's filter section matches. Qt Help Project / Filter Attributes (see:
+# http://doc.qt.io/qt-4.8/qthelpproject.html#filter-attributes).
+# This tag requires that the tag GENERATE_QHP is set to YES.
+
+QHP_SECT_FILTER_ATTRS  =
+
+# The QHG_LOCATION tag can be used to specify the location of Qt's
+# qhelpgenerator. If non-empty doxygen will try to run qhelpgenerator on the
+# generated .qhp file.
+# This tag requires that the tag GENERATE_QHP is set to YES.
+
+QHG_LOCATION           =
+
+# If the GENERATE_ECLIPSEHELP tag is set to YES, additional index files will be
+# generated, together with the HTML files, they form an Eclipse help plugin. To
+# install this plugin and make it available under the help contents menu in
+# Eclipse, the contents of the directory containing the HTML and XML files needs
+# to be copied into the plugins directory of eclipse. The name of the directory
+# within the plugins directory should be the same as the ECLIPSE_DOC_ID value.
+# After copying Eclipse needs to be restarted before the help appears.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+GENERATE_ECLIPSEHELP   = NO
+
+# A unique identifier for the Eclipse help plugin. When installing the plugin
+# the directory name containing the HTML and XML files should also have this
+# name. Each documentation set should have its own identifier.
+# The default value is: org.doxygen.Project.
+# This tag requires that the tag GENERATE_ECLIPSEHELP is set to YES.
+
+ECLIPSE_DOC_ID         = org.doxygen.Project
+
+# If you want full control over the layout of the generated HTML pages it might
+# be necessary to disable the index and replace it with your own. The
+# DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) at top
+# of each HTML page. A value of NO enables the index and the value YES disables
+# it. Since the tabs in the index contain the same information as the navigation
+# tree, you can set this option to YES if you also set GENERATE_TREEVIEW to YES.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+DISABLE_INDEX          = NO
+
+# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index
+# structure should be generated to display hierarchical information. If the tag
+# value is set to YES, a side panel will be generated containing a tree-like
+# index structure (just like the one that is generated for HTML Help). For this
+# to work a browser that supports JavaScript, DHTML, CSS and frames is required
+# (i.e. any modern browser). Windows users are probably better off using the
+# HTML help feature. Via custom style sheets (see HTML_EXTRA_STYLESHEET) one can
+# further fine-tune the look of the index. As an example, the default style
+# sheet generated by doxygen has an example that shows how to put an image at
+# the root of the tree instead of the PROJECT_NAME. Since the tree basically has
+# the same information as the tab index, you could consider setting
+# DISABLE_INDEX to YES when enabling this option.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+GENERATE_TREEVIEW      = NO
+
+# The ENUM_VALUES_PER_LINE tag can be used to set the number of enum values that
+# doxygen will group on one line in the generated HTML documentation.
+#
+# Note that a value of 0 will completely suppress the enum values from appearing
+# in the overview section.
+# Minimum value: 0, maximum value: 20, default value: 4.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+ENUM_VALUES_PER_LINE   = 4
+
+# If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be used
+# to set the initial width (in pixels) of the frame in which the tree is shown.
+# Minimum value: 0, maximum value: 1500, default value: 250.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+TREEVIEW_WIDTH         = 250
+
+# If the EXT_LINKS_IN_WINDOW option is set to YES, doxygen will open links to
+# external symbols imported via tag files in a separate window.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+EXT_LINKS_IN_WINDOW    = NO
+
+# Use this tag to change the font size of LaTeX formulas included as images in
+# the HTML documentation. When you change the font size after a successful
+# doxygen run you need to manually remove any form_*.png images from the HTML
+# output directory to force them to be regenerated.
+# Minimum value: 8, maximum value: 50, default value: 10.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+FORMULA_FONTSIZE       = 10
+
+# Use the FORMULA_TRANSPARENT tag to determine whether or not the images
+# generated for formulas are transparent PNGs. Transparent PNGs are not
+# supported properly for IE 6.0, but are supported on all modern browsers.
+#
+# Note that when changing this option you need to delete any form_*.png files in
+# the HTML output directory before the changes have effect.
+# The default value is: YES.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+FORMULA_TRANSPARENT    = YES
+
+# Enable the USE_MATHJAX option to render LaTeX formulas using MathJax (see
+# https://www.mathjax.org) which uses client side Javascript for the rendering
+# instead of using pre-rendered bitmaps. Use this if you do not have LaTeX
+# installed or if you want to formulas look prettier in the HTML output. When
+# enabled you may also need to install MathJax separately and configure the path
+# to it using the MATHJAX_RELPATH option.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+USE_MATHJAX            = NO
+
+# When MathJax is enabled you can set the default output format to be used for
+# the MathJax output. See the MathJax site (see:
+# http://docs.mathjax.org/en/latest/output.html) for more details.
+# Possible values are: HTML-CSS (which is slower, but has the best
+# compatibility), NativeMML (i.e. MathML) and SVG.
+# The default value is: HTML-CSS.
+# This tag requires that the tag USE_MATHJAX is set to YES.
+
+MATHJAX_FORMAT         = HTML-CSS
+
+# When MathJax is enabled you need to specify the location relative to the HTML
+# output directory using the MATHJAX_RELPATH option. The destination directory
+# should contain the MathJax.js script. For instance, if the mathjax directory
+# is located at the same level as the HTML output directory, then
+# MATHJAX_RELPATH should be ../mathjax. The default value points to the MathJax
+# Content Delivery Network so you can quickly see the result without installing
+# MathJax. However, it is strongly recommended to install a local copy of
+# MathJax from https://www.mathjax.org before deployment.
+# The default value is: https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/.
+# This tag requires that the tag USE_MATHJAX is set to YES.
+
+MATHJAX_RELPATH        = https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/
+
+# The MATHJAX_EXTENSIONS tag can be used to specify one or more MathJax
+# extension names that should be enabled during MathJax rendering. For example
+# MATHJAX_EXTENSIONS = TeX/AMSmath TeX/AMSsymbols
+# This tag requires that the tag USE_MATHJAX is set to YES.
+
+MATHJAX_EXTENSIONS     =
+
+# The MATHJAX_CODEFILE tag can be used to specify a file with javascript pieces
+# of code that will be used on startup of the MathJax code. See the MathJax site
+# (see: http://docs.mathjax.org/en/latest/output.html) for more details. For an
+# example see the documentation.
+# This tag requires that the tag USE_MATHJAX is set to YES.
+
+MATHJAX_CODEFILE       =
+
+# When the SEARCHENGINE tag is enabled doxygen will generate a search box for
+# the HTML output. The underlying search engine uses javascript and DHTML and
+# should work on any modern browser. Note that when using HTML help
+# (GENERATE_HTMLHELP), Qt help (GENERATE_QHP), or docsets (GENERATE_DOCSET)
+# there is already a search function so this one should typically be disabled.
+# For large projects the javascript based search engine can be slow, then
+# enabling SERVER_BASED_SEARCH may provide a better solution. It is possible to
+# search using the keyboard; to jump to the search box use <access key> + S
+# (what the <access key> is depends on the OS and browser, but it is typically
+# <CTRL>, <ALT>/<option>, or both). Inside the search box use the <cursor down
+# key> to jump into the search results window, the results can be navigated
+# using the <cursor keys>. Press <Enter> to select an item or <escape> to cancel
+# the search. The filter options can be selected when the cursor is inside the
+# search box by pressing <Shift>+<cursor down>. Also here use the <cursor keys>
+# to select a filter and <Enter> or <escape> to activate or cancel the filter
+# option.
+# The default value is: YES.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+SEARCHENGINE           = YES
+
+# When the SERVER_BASED_SEARCH tag is enabled the search engine will be
+# implemented using a web server instead of a web client using Javascript. There
+# are two flavors of web server based searching depending on the EXTERNAL_SEARCH
+# setting. When disabled, doxygen will generate a PHP script for searching and
+# an index file used by the script. When EXTERNAL_SEARCH is enabled the indexing
+# and searching needs to be provided by external tools. See the section
+# "External Indexing and Searching" for details.
+# The default value is: NO.
+# This tag requires that the tag SEARCHENGINE is set to YES.
+
+SERVER_BASED_SEARCH    = NO
+
+# When EXTERNAL_SEARCH tag is enabled doxygen will no longer generate the PHP
+# script for searching. Instead the search results are written to an XML file
+# which needs to be processed by an external indexer. Doxygen will invoke an
+# external search engine pointed to by the SEARCHENGINE_URL option to obtain the
+# search results.
+#
+# Doxygen ships with an example indexer (doxyindexer) and search engine
+# (doxysearch.cgi) which are based on the open source search engine library
+# Xapian (see: https://xapian.org/).
+#
+# See the section "External Indexing and Searching" for details.
+# The default value is: NO.
+# This tag requires that the tag SEARCHENGINE is set to YES.
+
+EXTERNAL_SEARCH        = NO
+
+# The SEARCHENGINE_URL should point to a search engine hosted by a web server
+# which will return the search results when EXTERNAL_SEARCH is enabled.
+#
+# Doxygen ships with an example indexer (doxyindexer) and search engine
+# (doxysearch.cgi) which are based on the open source search engine library
+# Xapian (see: https://xapian.org/). See the section "External Indexing and
+# Searching" for details.
+# This tag requires that the tag SEARCHENGINE is set to YES.
+
+SEARCHENGINE_URL       =
+
+# When SERVER_BASED_SEARCH and EXTERNAL_SEARCH are both enabled the unindexed
+# search data is written to a file for indexing by an external tool. With the
+# SEARCHDATA_FILE tag the name of this file can be specified.
+# The default file is: searchdata.xml.
+# This tag requires that the tag SEARCHENGINE is set to YES.
+
+SEARCHDATA_FILE        = searchdata.xml
+
+# When SERVER_BASED_SEARCH and EXTERNAL_SEARCH are both enabled the
+# EXTERNAL_SEARCH_ID tag can be used as an identifier for the project. This is
+# useful in combination with EXTRA_SEARCH_MAPPINGS to search through multiple
+# projects and redirect the results back to the right project.
+# This tag requires that the tag SEARCHENGINE is set to YES.
+
+EXTERNAL_SEARCH_ID     =
+
+# The EXTRA_SEARCH_MAPPINGS tag can be used to enable searching through doxygen
+# projects other than the one defined by this configuration file, but that are
+# all added to the same external search index. Each project needs to have a
+# unique id set via EXTERNAL_SEARCH_ID. The search mapping then maps the id of
+# to a relative location where the documentation can be found. The format is:
+# EXTRA_SEARCH_MAPPINGS = tagname1=loc1 tagname2=loc2 ...
+# This tag requires that the tag SEARCHENGINE is set to YES.
+
+EXTRA_SEARCH_MAPPINGS  =
+
+#---------------------------------------------------------------------------
+# Configuration options related to the LaTeX output
+#---------------------------------------------------------------------------
+
+# If the GENERATE_LATEX tag is set to YES, doxygen will generate LaTeX output.
+# The default value is: YES.
+
+GENERATE_LATEX         = NO
+
+# The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put. If a
+# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of
+# it.
+# The default directory is: latex.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+LATEX_OUTPUT           = latex
+
+# The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be
+# invoked.
+#
+# Note that when enabling USE_PDFLATEX this option is only used for generating
+# bitmaps for formulas in the HTML output, but not in the Makefile that is
+# written to the output directory.
+# The default file is: latex.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+LATEX_CMD_NAME         = latex
+
+# The MAKEINDEX_CMD_NAME tag can be used to specify the command name to generate
+# index for LaTeX.
+# The default file is: makeindex.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+MAKEINDEX_CMD_NAME     = makeindex
+
+# If the COMPACT_LATEX tag is set to YES, doxygen generates more compact LaTeX
+# documents. This may be useful for small projects and may help to save some
+# trees in general.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+COMPACT_LATEX          = NO
+
+# The PAPER_TYPE tag can be used to set the paper type that is used by the
+# printer.
+# Possible values are: a4 (210 x 297 mm), letter (8.5 x 11 inches), legal (8.5 x
+# 14 inches) and executive (7.25 x 10.5 inches).
+# The default value is: a4.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+PAPER_TYPE             = a4
+
+# The EXTRA_PACKAGES tag can be used to specify one or more LaTeX package names
+# that should be included in the LaTeX output. The package can be specified just
+# by its name or with the correct syntax as to be used with the LaTeX
+# \usepackage command. To get the times font for instance you can specify :
+# EXTRA_PACKAGES=times or EXTRA_PACKAGES={times}
+# To use the option intlimits with the amsmath package you can specify:
+# EXTRA_PACKAGES=[intlimits]{amsmath}
+# If left blank no extra packages will be included.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+EXTRA_PACKAGES         =
+
+# The LATEX_HEADER tag can be used to specify a personal LaTeX header for the
+# generated LaTeX document. The header should contain everything until the first
+# chapter. If it is left blank doxygen will generate a standard header. See
+# section "Doxygen usage" for information on how to let doxygen write the
+# default header to a separate file.
+#
+# Note: Only use a user-defined header if you know what you are doing! The
+# following commands have a special meaning inside the header: $title,
+# $datetime, $date, $doxygenversion, $projectname, $projectnumber,
+# $projectbrief, $projectlogo. Doxygen will replace $title with the empty
+# string, for the replacement values of the other commands the user is referred
+# to HTML_HEADER.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+LATEX_HEADER           =
+
+# The LATEX_FOOTER tag can be used to specify a personal LaTeX footer for the
+# generated LaTeX document. The footer should contain everything after the last
+# chapter. If it is left blank doxygen will generate a standard footer. See
+# LATEX_HEADER for more information on how to generate a default footer and what
+# special commands can be used inside the footer.
+#
+# Note: Only use a user-defined footer if you know what you are doing!
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+LATEX_FOOTER           =
+
+# The LATEX_EXTRA_STYLESHEET tag can be used to specify additional user-defined
+# LaTeX style sheets that are included after the standard style sheets created
+# by doxygen. Using this option one can overrule certain style aspects. Doxygen
+# will copy the style sheet files to the output directory.
+# Note: The order of the extra style sheet files is of importance (e.g. the last
+# style sheet in the list overrules the setting of the previous ones in the
+# list).
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+LATEX_EXTRA_STYLESHEET =
+
+# The LATEX_EXTRA_FILES tag can be used to specify one or more extra images or
+# other source files which should be copied to the LATEX_OUTPUT output
+# directory. Note that the files will be copied as-is; there are no commands or
+# markers available.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+LATEX_EXTRA_FILES      =
+
+# If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated is
+# prepared for conversion to PDF (using ps2pdf or pdflatex). The PDF file will
+# contain links (just like the HTML output) instead of page references. This
+# makes the output suitable for online browsing using a PDF viewer.
+# The default value is: YES.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+PDF_HYPERLINKS         = YES
+
+# If the USE_PDFLATEX tag is set to YES, doxygen will use pdflatex to generate
+# the PDF file directly from the LaTeX files. Set this option to YES, to get a
+# higher quality PDF documentation.
+# The default value is: YES.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+USE_PDFLATEX           = YES
+
+# If the LATEX_BATCHMODE tag is set to YES, doxygen will add the \batchmode
+# command to the generated LaTeX files. This will instruct LaTeX to keep running
+# if errors occur, instead of asking the user for help. This option is also used
+# when generating formulas in HTML.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+LATEX_BATCHMODE        = NO
+
+# If the LATEX_HIDE_INDICES tag is set to YES then doxygen will not include the
+# index chapters (such as File Index, Compound Index, etc.) in the output.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+LATEX_HIDE_INDICES     = NO
+
+# If the LATEX_SOURCE_CODE tag is set to YES then doxygen will include source
+# code with syntax highlighting in the LaTeX output.
+#
+# Note that which sources are shown also depends on other settings such as
+# SOURCE_BROWSER.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+LATEX_SOURCE_CODE      = NO
+
+# The LATEX_BIB_STYLE tag can be used to specify the style to use for the
+# bibliography, e.g. plainnat, or ieeetr. See
+# https://en.wikipedia.org/wiki/BibTeX and \cite for more info.
+# The default value is: plain.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+LATEX_BIB_STYLE        = plain
+
+# If the LATEX_TIMESTAMP tag is set to YES then the footer of each generated
+# page will contain the date and time when the page was generated. Setting this
+# to NO can help when comparing the output of multiple runs.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+LATEX_TIMESTAMP        = NO
+
+#---------------------------------------------------------------------------
+# Configuration options related to the RTF output
+#---------------------------------------------------------------------------
+
+# If the GENERATE_RTF tag is set to YES, doxygen will generate RTF output. The
+# RTF output is optimized for Word 97 and may not look too pretty with other RTF
+# readers/editors.
+# The default value is: NO.
+
+GENERATE_RTF           = NO
+
+# The RTF_OUTPUT tag is used to specify where the RTF docs will be put. If a
+# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of
+# it.
+# The default directory is: rtf.
+# This tag requires that the tag GENERATE_RTF is set to YES.
+
+RTF_OUTPUT             = rtf
+
+# If the COMPACT_RTF tag is set to YES, doxygen generates more compact RTF
+# documents. This may be useful for small projects and may help to save some
+# trees in general.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_RTF is set to YES.
+
+COMPACT_RTF            = NO
+
+# If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated will
+# contain hyperlink fields. The RTF file will contain links (just like the HTML
+# output) instead of page references. This makes the output suitable for online
+# browsing using Word or some other Word compatible readers that support those
+# fields.
+#
+# Note: WordPad (write) and others do not support links.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_RTF is set to YES.
+
+RTF_HYPERLINKS         = NO
+
+# Load stylesheet definitions from file. Syntax is similar to doxygen's config
+# file, i.e. a series of assignments. You only have to provide replacements,
+# missing definitions are set to their default value.
+#
+# See also section "Doxygen usage" for information on how to generate the
+# default style sheet that doxygen normally uses.
+# This tag requires that the tag GENERATE_RTF is set to YES.
+
+RTF_STYLESHEET_FILE    =
+
+# Set optional variables used in the generation of an RTF document. Syntax is
+# similar to doxygen's config file. A template extensions file can be generated
+# using doxygen -e rtf extensionFile.
+# This tag requires that the tag GENERATE_RTF is set to YES.
+
+RTF_EXTENSIONS_FILE    =
+
+# If the RTF_SOURCE_CODE tag is set to YES then doxygen will include source code
+# with syntax highlighting in the RTF output.
+#
+# Note that which sources are shown also depends on other settings such as
+# SOURCE_BROWSER.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_RTF is set to YES.
+
+RTF_SOURCE_CODE        = NO
+
+#---------------------------------------------------------------------------
+# Configuration options related to the man page output
+#---------------------------------------------------------------------------
+
+# If the GENERATE_MAN tag is set to YES, doxygen will generate man pages for
+# classes and files.
+# The default value is: NO.
+
+GENERATE_MAN           = NO
+
+# The MAN_OUTPUT tag is used to specify where the man pages will be put. If a
+# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of
+# it. A directory man3 will be created inside the directory specified by
+# MAN_OUTPUT.
+# The default directory is: man.
+# This tag requires that the tag GENERATE_MAN is set to YES.
+
+MAN_OUTPUT             = man
+
+# The MAN_EXTENSION tag determines the extension that is added to the generated
+# man pages. In case the manual section does not start with a number, the number
+# 3 is prepended. The dot (.) at the beginning of the MAN_EXTENSION tag is
+# optional.
+# The default value is: .3.
+# This tag requires that the tag GENERATE_MAN is set to YES.
+
+MAN_EXTENSION          = .3
+
+# The MAN_SUBDIR tag determines the name of the directory created within
+# MAN_OUTPUT in which the man pages are placed. If defaults to man followed by
+# MAN_EXTENSION with the initial . removed.
+# This tag requires that the tag GENERATE_MAN is set to YES.
+
+MAN_SUBDIR             =
+
+# If the MAN_LINKS tag is set to YES and doxygen generates man output, then it
+# will generate one additional man file for each entity documented in the real
+# man page(s). These additional files only source the real man page, but without
+# them the man command would be unable to find the correct page.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_MAN is set to YES.
+
+MAN_LINKS              = NO
+
+#---------------------------------------------------------------------------
+# Configuration options related to the XML output
+#---------------------------------------------------------------------------
+
+# If the GENERATE_XML tag is set to YES, doxygen will generate an XML file that
+# captures the structure of the code including all documentation.
+# The default value is: NO.
+
+GENERATE_XML           = NO
+
+# The XML_OUTPUT tag is used to specify where the XML pages will be put. If a
+# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of
+# it.
+# The default directory is: xml.
+# This tag requires that the tag GENERATE_XML is set to YES.
+
+XML_OUTPUT             = xml
+
+# If the XML_PROGRAMLISTING tag is set to YES, doxygen will dump the program
+# listings (including syntax highlighting and cross-referencing information) to
+# the XML output. Note that enabling this will significantly increase the size
+# of the XML output.
+# The default value is: YES.
+# This tag requires that the tag GENERATE_XML is set to YES.
+
+XML_PROGRAMLISTING     = YES
+
+#---------------------------------------------------------------------------
+# Configuration options related to the DOCBOOK output
+#---------------------------------------------------------------------------
+
+# If the GENERATE_DOCBOOK tag is set to YES, doxygen will generate Docbook files
+# that can be used to generate PDF.
+# The default value is: NO.
+
+GENERATE_DOCBOOK       = NO
+
+# The DOCBOOK_OUTPUT tag is used to specify where the Docbook pages will be put.
+# If a relative path is entered the value of OUTPUT_DIRECTORY will be put in
+# front of it.
+# The default directory is: docbook.
+# This tag requires that the tag GENERATE_DOCBOOK is set to YES.
+
+DOCBOOK_OUTPUT         = docbook
+
+# If the DOCBOOK_PROGRAMLISTING tag is set to YES, doxygen will include the
+# program listings (including syntax highlighting and cross-referencing
+# information) to the DOCBOOK output. Note that enabling this will significantly
+# increase the size of the DOCBOOK output.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_DOCBOOK is set to YES.
+
+DOCBOOK_PROGRAMLISTING = NO
+
+#---------------------------------------------------------------------------
+# Configuration options for the AutoGen Definitions output
+#---------------------------------------------------------------------------
+
+# If the GENERATE_AUTOGEN_DEF tag is set to YES, doxygen will generate an
+# AutoGen Definitions (see http://autogen.sourceforge.net/) file that captures
+# the structure of the code including all documentation. Note that this feature
+# is still experimental and incomplete at the moment.
+# The default value is: NO.
+
+GENERATE_AUTOGEN_DEF   = NO
+
+#---------------------------------------------------------------------------
+# Configuration options related to the Perl module output
+#---------------------------------------------------------------------------
+
+# If the GENERATE_PERLMOD tag is set to YES, doxygen will generate a Perl module
+# file that captures the structure of the code including all documentation.
+#
+# Note that this feature is still experimental and incomplete at the moment.
+# The default value is: NO.
+
+GENERATE_PERLMOD       = NO
+
+# If the PERLMOD_LATEX tag is set to YES, doxygen will generate the necessary
+# Makefile rules, Perl scripts and LaTeX code to be able to generate PDF and DVI
+# output from the Perl module output.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_PERLMOD is set to YES.
+
+PERLMOD_LATEX          = NO
+
+# If the PERLMOD_PRETTY tag is set to YES, the Perl module output will be nicely
+# formatted so it can be parsed by a human reader. This is useful if you want to
+# understand what is going on. On the other hand, if this tag is set to NO, the
+# size of the Perl module output will be much smaller and Perl will parse it
+# just the same.
+# The default value is: YES.
+# This tag requires that the tag GENERATE_PERLMOD is set to YES.
+
+PERLMOD_PRETTY         = YES
+
+# The names of the make variables in the generated doxyrules.make file are
+# prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX. This is useful
+# so different doxyrules.make files included by the same Makefile don't
+# overwrite each other's variables.
+# This tag requires that the tag GENERATE_PERLMOD is set to YES.
+
+PERLMOD_MAKEVAR_PREFIX =
+
+#---------------------------------------------------------------------------
+# Configuration options related to the preprocessor
+#---------------------------------------------------------------------------
+
+# If the ENABLE_PREPROCESSING tag is set to YES, doxygen will evaluate all
+# C-preprocessor directives found in the sources and include files.
+# The default value is: YES.
+
+ENABLE_PREPROCESSING   = YES
+
+# If the MACRO_EXPANSION tag is set to YES, doxygen will expand all macro names
+# in the source code. If set to NO, only conditional compilation will be
+# performed. Macro expansion can be done in a controlled way by setting
+# EXPAND_ONLY_PREDEF to YES.
+# The default value is: NO.
+# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.
+
+MACRO_EXPANSION        = NO
+
+# If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES then
+# the macro expansion is limited to the macros specified with the PREDEFINED and
+# EXPAND_AS_DEFINED tags.
+# The default value is: NO.
+# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.
+
+EXPAND_ONLY_PREDEF     = NO
+
+# If the SEARCH_INCLUDES tag is set to YES, the include files in the
+# INCLUDE_PATH will be searched if a #include is found.
+# The default value is: YES.
+# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.
+
+SEARCH_INCLUDES        = YES
+
+# The INCLUDE_PATH tag can be used to specify one or more directories that
+# contain include files that are not input files but should be processed by the
+# preprocessor.
+# This tag requires that the tag SEARCH_INCLUDES is set to YES.
+
+INCLUDE_PATH           =
+
+# You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard
+# patterns (like *.h and *.hpp) to filter out the header-files in the
+# directories. If left blank, the patterns specified with FILE_PATTERNS will be
+# used.
+# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.
+
+INCLUDE_FILE_PATTERNS  =
+
+# The PREDEFINED tag can be used to specify one or more macro names that are
+# defined before the preprocessor is started (similar to the -D option of e.g.
+# gcc). The argument of the tag is a list of macros of the form: name or
+# name=definition (no spaces). If the definition and the "=" are omitted, "=1"
+# is assumed. To prevent a macro definition from being undefined via #undef or
+# recursively expanded use the := operator instead of the = operator.
+# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.
+
+PREDEFINED             =
+
+# If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then this
+# tag can be used to specify a list of macro names that should be expanded. The
+# macro definition that is found in the sources will be used. Use the PREDEFINED
+# tag if you want to use a different macro definition that overrules the
+# definition found in the source code.
+# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.
+
+EXPAND_AS_DEFINED      =
+
+# If the SKIP_FUNCTION_MACROS tag is set to YES then doxygen's preprocessor will
+# remove all references to function-like macros that are alone on a line, have
+# an all uppercase name, and do not end with a semicolon. Such function macros
+# are typically used for boiler-plate code, and will confuse the parser if not
+# removed.
+# The default value is: YES.
+# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.
+
+SKIP_FUNCTION_MACROS   = YES
+
+#---------------------------------------------------------------------------
+# Configuration options related to external references
+#---------------------------------------------------------------------------
+
+# The TAGFILES tag can be used to specify one or more tag files. For each tag
+# file the location of the external documentation should be added. The format of
+# a tag file without this location is as follows:
+# TAGFILES = file1 file2 ...
+# Adding location for the tag files is done as follows:
+# TAGFILES = file1=loc1 "file2 = loc2" ...
+# where loc1 and loc2 can be relative or absolute paths or URLs. See the
+# section "Linking to external documentation" for more information about the use
+# of tag files.
+# Note: Each tag file must have a unique name (where the name does NOT include
+# the path). If a tag file is not located in the directory in which doxygen is
+# run, you must also specify the path to the tagfile here.
+
+TAGFILES               =
+
+# When a file name is specified after GENERATE_TAGFILE, doxygen will create a
+# tag file that is based on the input files it reads. See section "Linking to
+# external documentation" for more information about the usage of tag files.
+
+GENERATE_TAGFILE       =
+
+# If the ALLEXTERNALS tag is set to YES, all external class will be listed in
+# the class index. If set to NO, only the inherited external classes will be
+# listed.
+# The default value is: NO.
+
+ALLEXTERNALS           = NO
+
+# If the EXTERNAL_GROUPS tag is set to YES, all external groups will be listed
+# in the modules index. If set to NO, only the current project's groups will be
+# listed.
+# The default value is: YES.
+
+EXTERNAL_GROUPS        = YES
+
+# If the EXTERNAL_PAGES tag is set to YES, all external pages will be listed in
+# the related pages index. If set to NO, only the current project's pages will
+# be listed.
+# The default value is: YES.
+
+EXTERNAL_PAGES         = YES
+
+# The PERL_PATH should be the absolute path and name of the perl script
+# interpreter (i.e. the result of 'which perl').
+# The default file (with absolute path) is: /usr/bin/perl.
+
+PERL_PATH              = /usr/bin/perl
+
+#---------------------------------------------------------------------------
+# Configuration options related to the dot tool
+#---------------------------------------------------------------------------
+
+# If the CLASS_DIAGRAMS tag is set to YES, doxygen will generate a class diagram
+# (in HTML and LaTeX) for classes with base or super classes. Setting the tag to
+# NO turns the diagrams off. Note that this option also works with HAVE_DOT
+# disabled, but it is recommended to install and use dot, since it yields more
+# powerful graphs.
+# The default value is: YES.
+
+CLASS_DIAGRAMS         = YES
+
+# You can define message sequence charts within doxygen comments using the \msc
+# command. Doxygen will then run the mscgen tool (see:
+# http://www.mcternan.me.uk/mscgen/)) to produce the chart and insert it in the
+# documentation. The MSCGEN_PATH tag allows you to specify the directory where
+# the mscgen tool resides. If left empty the tool is assumed to be found in the
+# default search path.
+
+MSCGEN_PATH            =
+
+# You can include diagrams made with dia in doxygen documentation. Doxygen will
+# then run dia to produce the diagram and insert it in the documentation. The
+# DIA_PATH tag allows you to specify the directory where the dia binary resides.
+# If left empty dia is assumed to be found in the default search path.
+
+DIA_PATH               =
+
+# If set to YES the inheritance and collaboration graphs will hide inheritance
+# and usage relations if the target is undocumented or is not a class.
+# The default value is: YES.
+
+HIDE_UNDOC_RELATIONS   = YES
+
+# If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is
+# available from the path. This tool is part of Graphviz (see:
+# http://www.graphviz.org/), a graph visualization toolkit from AT&T and Lucent
+# Bell Labs. The other options in this section have no effect if this option is
+# set to NO
+# The default value is: NO.
+
+HAVE_DOT               = YES
+
+# The DOT_NUM_THREADS specifies the number of dot invocations doxygen is allowed
+# to run in parallel. When set to 0 doxygen will base this on the number of
+# processors available in the system. You can set it explicitly to a value
+# larger than 0 to get control over the balance between CPU load and processing
+# speed.
+# Minimum value: 0, maximum value: 32, default value: 0.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+DOT_NUM_THREADS        = 0
+
+# When you want a differently looking font in the dot files that doxygen
+# generates you can specify the font name using DOT_FONTNAME. You need to make
+# sure dot is able to find the font, which can be done by putting it in a
+# standard location or by setting the DOTFONTPATH environment variable or by
+# setting DOT_FONTPATH to the directory containing the font.
+# The default value is: Helvetica.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+DOT_FONTNAME           = Helvetica
+
+# The DOT_FONTSIZE tag can be used to set the size (in points) of the font of
+# dot graphs.
+# Minimum value: 4, maximum value: 24, default value: 10.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+DOT_FONTSIZE           = 10
+
+# By default doxygen will tell dot to use the default font as specified with
+# DOT_FONTNAME. If you specify a different font using DOT_FONTNAME you can set
+# the path where dot can find it using this tag.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+DOT_FONTPATH           =
+
+# If the CLASS_GRAPH tag is set to YES then doxygen will generate a graph for
+# each documented class showing the direct and indirect inheritance relations.
+# Setting this tag to YES will force the CLASS_DIAGRAMS tag to NO.
+# The default value is: YES.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+CLASS_GRAPH            = YES
+
+# If the COLLABORATION_GRAPH tag is set to YES then doxygen will generate a
+# graph for each documented class showing the direct and indirect implementation
+# dependencies (inheritance, containment, and class references variables) of the
+# class with other documented classes.
+# The default value is: YES.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+COLLABORATION_GRAPH    = YES
+
+# If the GROUP_GRAPHS tag is set to YES then doxygen will generate a graph for
+# groups, showing the direct groups dependencies.
+# The default value is: YES.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+GROUP_GRAPHS           = YES
+
+# If the UML_LOOK tag is set to YES, doxygen will generate inheritance and
+# collaboration diagrams in a style similar to the OMG's Unified Modeling
+# Language.
+# The default value is: NO.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+UML_LOOK               = NO
+
+# If the UML_LOOK tag is enabled, the fields and methods are shown inside the
+# class node. If there are many fields or methods and many nodes the graph may
+# become too big to be useful. The UML_LIMIT_NUM_FIELDS threshold limits the
+# number of items for each type to make the size more manageable. Set this to 0
+# for no limit. Note that the threshold may be exceeded by 50% before the limit
+# is enforced. So when you set the threshold to 10, up to 15 fields may appear,
+# but if the number exceeds 15, the total amount of fields shown is limited to
+# 10.
+# Minimum value: 0, maximum value: 100, default value: 10.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+UML_LIMIT_NUM_FIELDS   = 10
+
+# If the TEMPLATE_RELATIONS tag is set to YES then the inheritance and
+# collaboration graphs will show the relations between templates and their
+# instances.
+# The default value is: NO.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+TEMPLATE_RELATIONS     = NO
+
+# If the INCLUDE_GRAPH, ENABLE_PREPROCESSING and SEARCH_INCLUDES tags are set to
+# YES then doxygen will generate a graph for each documented file showing the
+# direct and indirect include dependencies of the file with other documented
+# files.
+# The default value is: YES.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+INCLUDE_GRAPH          = YES
+
+# If the INCLUDED_BY_GRAPH, ENABLE_PREPROCESSING and SEARCH_INCLUDES tags are
+# set to YES then doxygen will generate a graph for each documented file showing
+# the direct and indirect include dependencies of the file with other documented
+# files.
+# The default value is: YES.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+INCLUDED_BY_GRAPH      = YES
+
+# If the CALL_GRAPH tag is set to YES then doxygen will generate a call
+# dependency graph for every global function or class method.
+#
+# Note that enabling this option will significantly increase the time of a run.
+# So in most cases it will be better to enable call graphs for selected
+# functions only using the \callgraph command. Disabling a call graph can be
+# accomplished by means of the command \hidecallgraph.
+# The default value is: NO.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+CALL_GRAPH             = NO
+
+# If the CALLER_GRAPH tag is set to YES then doxygen will generate a caller
+# dependency graph for every global function or class method.
+#
+# Note that enabling this option will significantly increase the time of a run.
+# So in most cases it will be better to enable caller graphs for selected
+# functions only using the \callergraph command. Disabling a caller graph can be
+# accomplished by means of the command \hidecallergraph.
+# The default value is: NO.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+CALLER_GRAPH           = NO
+
+# If the GRAPHICAL_HIERARCHY tag is set to YES then doxygen will graphical
+# hierarchy of all classes instead of a textual one.
+# The default value is: YES.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+GRAPHICAL_HIERARCHY    = YES
+
+# If the DIRECTORY_GRAPH tag is set to YES then doxygen will show the
+# dependencies a directory has on other directories in a graphical way. The
+# dependency relations are determined by the #include relations between the
+# files in the directories.
+# The default value is: YES.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+DIRECTORY_GRAPH        = YES
+
+# The DOT_IMAGE_FORMAT tag can be used to set the image format of the images
+# generated by dot. For an explanation of the image formats see the section
+# output formats in the documentation of the dot tool (Graphviz (see:
+# http://www.graphviz.org/)).
+# Note: If you choose svg you need to set HTML_FILE_EXTENSION to xhtml in order
+# to make the SVG files visible in IE 9+ (other browsers do not have this
+# requirement).
+# Possible values are: png, jpg, gif, svg, png:gd, png:gd:gd, png:cairo,
+# png:cairo:gd, png:cairo:cairo, png:cairo:gdiplus, png:gdiplus and
+# png:gdiplus:gdiplus.
+# The default value is: png.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+DOT_IMAGE_FORMAT       = png
+
+# If DOT_IMAGE_FORMAT is set to svg, then this option can be set to YES to
+# enable generation of interactive SVG images that allow zooming and panning.
+#
+# Note that this requires a modern browser other than Internet Explorer. Tested
+# and working are Firefox, Chrome, Safari, and Opera.
+# Note: For IE 9+ you need to set HTML_FILE_EXTENSION to xhtml in order to make
+# the SVG files visible. Older versions of IE do not have SVG support.
+# The default value is: NO.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+INTERACTIVE_SVG        = NO
+
+# The DOT_PATH tag can be used to specify the path where the dot tool can be
+# found. If left blank, it is assumed the dot tool can be found in the path.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+DOT_PATH               =
+
+# The DOTFILE_DIRS tag can be used to specify one or more directories that
+# contain dot files that are included in the documentation (see the \dotfile
+# command).
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+DOTFILE_DIRS           =
+
+# The MSCFILE_DIRS tag can be used to specify one or more directories that
+# contain msc files that are included in the documentation (see the \mscfile
+# command).
+
+MSCFILE_DIRS           =
+
+# The DIAFILE_DIRS tag can be used to specify one or more directories that
+# contain dia files that are included in the documentation (see the \diafile
+# command).
+
+DIAFILE_DIRS           =
+
+# When using plantuml, the PLANTUML_JAR_PATH tag should be used to specify the
+# path where java can find the plantuml.jar file. If left blank, it is assumed
+# PlantUML is not used or called during a preprocessing step. Doxygen will
+# generate a warning when it encounters a \startuml command in this case and
+# will not generate output for the diagram.
+
+PLANTUML_JAR_PATH      =
+
+# When using plantuml, the PLANTUML_CFG_FILE tag can be used to specify a
+# configuration file for plantuml.
+
+PLANTUML_CFG_FILE      =
+
+# When using plantuml, the specified paths are searched for files specified by
+# the !include statement in a plantuml block.
+
+PLANTUML_INCLUDE_PATH  =
+
+# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of nodes
+# that will be shown in the graph. If the number of nodes in a graph becomes
+# larger than this value, doxygen will truncate the graph, which is visualized
+# by representing a node as a red box. Note that doxygen if the number of direct
+# children of the root node in a graph is already larger than
+# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note that
+# the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.
+# Minimum value: 0, maximum value: 10000, default value: 50.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+DOT_GRAPH_MAX_NODES    = 50
+
+# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the graphs
+# generated by dot. A depth value of 3 means that only nodes reachable from the
+# root by following a path via at most 3 edges will be shown. Nodes that lay
+# further from the root node will be omitted. Note that setting this option to 1
+# or 2 may greatly reduce the computation time needed for large code bases. Also
+# note that the size of a graph can be further restricted by
+# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.
+# Minimum value: 0, maximum value: 1000, default value: 0.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+MAX_DOT_GRAPH_DEPTH    = 0
+
+# Set the DOT_TRANSPARENT tag to YES to generate images with a transparent
+# background. This is disabled by default, because dot on Windows does not seem
+# to support this out of the box.
+#
+# Warning: Depending on the platform used, enabling this option may lead to
+# badly anti-aliased labels on the edges of a graph (i.e. they become hard to
+# read).
+# The default value is: NO.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+DOT_TRANSPARENT        = NO
+
+# Set the DOT_MULTI_TARGETS tag to YES to allow dot to generate multiple output
+# files in one run (i.e. multiple -o and -T options on the command line). This
+# makes dot run faster, but since only newer versions of dot (>1.8.10) support
+# this, this feature is disabled by default.
+# The default value is: NO.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+DOT_MULTI_TARGETS      = NO
+
+# If the GENERATE_LEGEND tag is set to YES doxygen will generate a legend page
+# explaining the meaning of the various boxes and arrows in the dot generated
+# graphs.
+# The default value is: YES.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+GENERATE_LEGEND        = YES
+
+# If the DOT_CLEANUP tag is set to YES, doxygen will remove the intermediate dot
+# files that are used to generate the various graphs.
+# The default value is: YES.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+DOT_CLEANUP            = YES
diff --git a/README.md b/README.md
index 53fe106f706..81cd58f1213 100644
--- a/README.md
+++ b/README.md
@@ -161,7 +161,21 @@ The input data formats are `Files.json` and `Renames.json` and are described in
    `swift/utils/build-script --clean --xcode --release-debuginfo --debug-swift`
 
 6. (optional) Build the Swift compiler in the version allowing for the fast incremental compilation with ninja  
-   `swift/utils/build-script --release-debuginfo`
+   `swift/utils/build-script -R`
+
+### Build documentation (optional)
+
+1. Install doxygen
+   `brew install doxygen`
+
+2. Install graphviz
+   `brew install graphviz`
+
+3. Build documentation
+   `doxygen Doxyfile`
+
+4. Open documentation
+   `open Documentation/doxygen/index.html`
 
 ## Further read
 
-- 
2.17.1 (Apple Git-112)


From c2bcc6036829d6e4705affb1ffd472735a4801c4 Mon Sep 17 00:00:00 2001
From: Jakub Sowa <jakub.sowa@polidea.com>
Date: Mon, 22 Jan 2018 16:26:08 +0100
Subject: [PATCH 030/138] FileIO tests.

Reviewers: jerzy.kleszcz, krzysztof.siejkowski

Reviewed By: jerzy.kleszcz, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2769
---
 .../swift/Obfuscation/DataStructures.h        |   4 +
 .../swift/Obfuscation/FileIO-Template.h       |  64 ++++++
 swift/include/swift/Obfuscation/FileIO.h      |  21 +-
 swift/lib/Obfuscation/DataStructures.cpp      |  12 ++
 swift/lib/Obfuscation/FileIO.cpp              |  57 ++---
 .../obfuscator-name-mapper.cpp                |   9 +-
 .../obfuscator-renamer/obfuscator-renamer.cpp |   7 +-
 .../obfuscator-symbol-extractor.cpp           |  16 +-
 .../unittests/SwiftObfuscation/CMakeLists.txt |   1 +
 .../SwiftObfuscation/FileIOTests.cpp          | 201 ++++++++++++++++++
 10 files changed, 335 insertions(+), 57 deletions(-)
 create mode 100644 swift/include/swift/Obfuscation/FileIO-Template.h
 create mode 100644 swift/unittests/SwiftObfuscation/FileIOTests.cpp

diff --git a/swift/include/swift/Obfuscation/DataStructures.h b/swift/include/swift/Obfuscation/DataStructures.h
index 3dbb48dfea4..354c60be699 100644
--- a/swift/include/swift/Obfuscation/DataStructures.h
+++ b/swift/include/swift/Obfuscation/DataStructures.h
@@ -2,6 +2,7 @@
 #define DataStructures_h
 
 #include "llvm/Support/YAMLTraits.h"
+#include "llvm/Support/Error.h"
 #include "swift/Basic/JSONSerialization.h"
 
 #include <vector>
@@ -158,6 +159,9 @@ struct ObjectTraits<SymbolRenaming> {
   static void mapping(Output &Out, SymbolRenaming &Object);
 };
 
+template<class T>
+llvm::Expected<std::string> serialize(T &Object);
+
 } // namespace json
 } // namespace swift
 
diff --git a/swift/include/swift/Obfuscation/FileIO-Template.h b/swift/include/swift/Obfuscation/FileIO-Template.h
new file mode 100644
index 00000000000..3444010f9aa
--- /dev/null
+++ b/swift/include/swift/Obfuscation/FileIO-Template.h
@@ -0,0 +1,64 @@
+#ifndef FileIOTemplate_h
+#define FileIOTemplate_h
+
+#include "llvm/Support/Error.h"
+#include "llvm/Support/MemoryBuffer.h"
+#include "llvm/Support/FileSystem.h"
+#include "swift/Obfuscation/DataStructures.h"
+#include "swift/Obfuscation/Utils.h"
+
+#include <string>
+
+namespace swift {
+namespace obfuscation {
+
+template<class FileType>
+llvm::ErrorOr<std::unique_ptr<FileType>>
+    FileFactory<FileType>::getFile(std::string Path) {
+    std::error_code Error;
+    auto File = llvm::make_unique<FileType>(Path, Error, llvm::sys::fs::F_None);
+    if (Error) {
+        return Error;
+    }
+
+    return File;
+}
+
+template<class T, typename FileType>
+llvm::Error writeToPath(T &Object,
+                        std::string PathToOutput,
+                        FileFactory<FileType> Factory,
+                        llvm::raw_ostream &LogStream) {
+
+    std::error_code Error;
+    auto File = Factory.getFile(PathToOutput);
+    if (auto FileError = File.getError()) {
+        return stringError("Failed to open file: " + PathToOutput, FileError);
+    }
+
+    return writeToFile(Object, LogStream, std::move(File.get()));
+}
+
+template<typename T, typename FileType>
+llvm::Error writeToFile(T &Object,
+                        llvm::raw_ostream &LogStream,
+                        std::unique_ptr<FileType> File) {
+
+
+    auto SerializedObject = json::serialize(Object);
+    if (auto Error = SerializedObject.takeError()) {
+        return Error;
+    }
+    *File << SerializedObject.get();
+    File->close();
+
+    LogStream << "Written to file: " << '\n'
+    << &SerializedObject << '\n';
+
+    return llvm::Error::success();
+}
+
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* FileIOTemplate_h */
diff --git a/swift/include/swift/Obfuscation/FileIO.h b/swift/include/swift/Obfuscation/FileIO.h
index 705c99bbff0..ffd4d89d178 100644
--- a/swift/include/swift/Obfuscation/FileIO.h
+++ b/swift/include/swift/Obfuscation/FileIO.h
@@ -2,21 +2,32 @@
 #define FileIO_h
 
 #include "llvm/Support/Error.h"
+#include "llvm/Support/MemoryBuffer.h"
 
 #include <string>
 
 namespace swift {
 namespace obfuscation {
 
-template<typename T>
-llvm::Expected<T> parseJson(std::string PathToJson);
+struct MemoryBufferProvider {
+    virtual ~MemoryBufferProvider() = default;
+    virtual llvm::ErrorOr<std::unique_ptr<llvm::MemoryBuffer>>
+    getBuffer(std::string Path) const;
+};
+
+template <typename FileType>
+struct FileFactory {
+    virtual ~FileFactory() = default;
+    virtual llvm::ErrorOr<std::unique_ptr<FileType>> getFile(std::string Path);
+};
 
 template<typename T>
-llvm::Error writeToFile(T &Object,
-                        std::string PathToOutput,
-                        llvm::raw_ostream &LogStream);
+llvm::Expected<T> parseJson(std::string PathToJson,
+                            const MemoryBufferProvider &BufferProvider = MemoryBufferProvider());
 
 } //namespace obfuscation
 } //namespace swift
 
+#include "FileIO-Template.h"
+
 #endif /* FileIO_h */
diff --git a/swift/lib/Obfuscation/DataStructures.cpp b/swift/lib/Obfuscation/DataStructures.cpp
index 27803a56d8b..d7eccc4d925 100644
--- a/swift/lib/Obfuscation/DataStructures.cpp
+++ b/swift/lib/Obfuscation/DataStructures.cpp
@@ -110,6 +110,18 @@ void ObjectTraits<SymbolRenaming>::mapping(Output &Out,
   Out.mapRequired("module", Object.Module);
 }
 
+template<class T>
+llvm::Expected<std::string> serialize(T &Object) {
+    std::string OutputString;
+    llvm::raw_string_ostream OutputStringStream(OutputString);
+    swift::json::Output Output(OutputStringStream);
+    Output << Object;
+    return OutputStringStream.str();
+}
+
+template llvm::Expected<std::string> serialize(SymbolsJson &Object);
+template llvm::Expected<std::string> serialize(RenamesJson &Object);
+
 } // namespace json
 } // namespace swift
 
diff --git a/swift/lib/Obfuscation/FileIO.cpp b/swift/lib/Obfuscation/FileIO.cpp
index 6c275331f61..6d90e0a37b2 100644
--- a/swift/lib/Obfuscation/FileIO.cpp
+++ b/swift/lib/Obfuscation/FileIO.cpp
@@ -1,22 +1,27 @@
 #include "swift/Obfuscation/FileIO.h"
-#include "swift/Obfuscation/DataStructures.h"
 #include "swift/Obfuscation/Utils.h"
 
 #include "llvm/Support/FileSystem.h"
-#include "llvm/Support/MemoryBuffer.h"
 #include "llvm/Support/YAMLParser.h"
 #include "swift/Basic/JSONSerialization.h"
 
 namespace swift {
 namespace obfuscation {
 
+llvm::ErrorOr<std::unique_ptr<llvm::MemoryBuffer>>
+MemoryBufferProvider::getBuffer(std::string Path) const {
+    return llvm::MemoryBuffer::getFile(Path);
+}
+
 template<class T>
-llvm::Expected<T> parseJson(std::string PathToJson) {
-  auto Buffer = llvm::MemoryBuffer::getFile(PathToJson);
+llvm::Expected<T> parseJson(std::string PathToJson,
+                            const MemoryBufferProvider &BufferProvider) {
+
+  auto Buffer = BufferProvider.getBuffer(PathToJson);
   if (auto ErrorCode = Buffer.getError()) {
     return stringError("Error during JSON file read", ErrorCode);
   }
-  
+
   llvm::yaml::Input Input(std::move(Buffer.get())->getBuffer());
   T Json;
   Input >> Json;
@@ -27,44 +32,14 @@ llvm::Expected<T> parseJson(std::string PathToJson) {
   return Json;
 }
 
-template llvm::Expected<FilesJson> parseJson(std::string);
-
-template llvm::Expected<SymbolsJson> parseJson(std::string);
-
-template llvm::Expected<RenamesJson> parseJson(std::string);
-
-template<class T>
-llvm::Error writeToFile(T &Object,
-                        std::string PathToOutput,
-                        llvm::raw_ostream &LogStream) {
-  
-  std::string OutputString;
-  llvm::raw_string_ostream OutputStringStream(OutputString);
-  swift::json::Output Output(OutputStringStream);
-  Output << Object;
-  // TODO: add serialization error handling
-  
-  std::error_code Error;
-  llvm::raw_fd_ostream File(PathToOutput, Error, llvm::sys::fs::F_None);
-  if (File.has_error() || Error) {
-    return stringError("Failed to open file: " + PathToOutput, Error);
-  }
-  File << OutputStringStream.str();
-  File.close();
-  
-  LogStream << "Written to file: " << '\n'
-    << OutputStringStream.str() << '\n';
-  
-  return llvm::Error::success();
-}
+template llvm::Expected<FilesJson> parseJson(std::string,
+                                             const MemoryBufferProvider &BufferProvider = MemoryBufferProvider());
 
-template llvm::Error writeToFile(SymbolsJson &,
-                                 std::string,
-                                 llvm::raw_ostream &);
+template llvm::Expected<SymbolsJson> parseJson(std::string,
+                                               const MemoryBufferProvider &BufferProvider = MemoryBufferProvider());
 
-template llvm::Error writeToFile(RenamesJson &,
-                                 std::string,
-                                 llvm::raw_ostream &);
+template llvm::Expected<RenamesJson> parseJson(std::string,
+                                               const MemoryBufferProvider &BufferProvider = MemoryBufferProvider());
 
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp b/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
index f55de94cb90..dcf131a80cb 100644
--- a/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
+++ b/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
@@ -50,9 +50,10 @@ int main(int argc, char *argv[]) {
     llvm::errs() << "cannot find Symbols json file" << '\n';
     return 1;
   }
-  
+
+  MemoryBufferProvider BufferProvider = MemoryBufferProvider();
   std::string PathToJson = options::SymbolsJsonPath;
-  auto SymbolsJsonOrError = parseJson<SymbolsJson>(PathToJson);
+  auto SymbolsJsonOrError = parseJson<SymbolsJson>(PathToJson, BufferProvider);
   if (auto Error = SymbolsJsonOrError.takeError()) {
     ExitOnError(std::move(Error));
   }
@@ -66,7 +67,9 @@ int main(int argc, char *argv[]) {
   printRenamings(Renamings.Symbols);
   
   std::string PathToOutput = options::RenamesJsonPath;
-  if (auto Error = writeToFile(Renamings, PathToOutput, llvm::outs())) {
+  FileFactory<llvm::raw_fd_ostream> Factory = FileFactory<llvm::raw_fd_ostream>();
+
+  if (auto Error = writeToPath(Renamings, PathToOutput, Factory, llvm::outs())) {
     ExitOnError(std::move(Error));
   }
   return 0;
diff --git a/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp b/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
index d6a8122c4c7..ed9b3ae1f9f 100644
--- a/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
+++ b/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
@@ -67,12 +67,13 @@ int main(int argc, char *argv[]) {
     llvm::errs() << "cannot find path to the obfuscated project" << '\n';
     return 1;
   }
-  
-  auto FilesJsonOrError = parseJson<FilesJson>(options::FilesJsonPath);
+
+  MemoryBufferProvider BufferProvider = MemoryBufferProvider();
+  auto FilesJsonOrError = parseJson<FilesJson>(options::FilesJsonPath, BufferProvider);
   if (auto Error = FilesJsonOrError.takeError()) {
     ExitOnError(std::move(Error));
   }
-  auto RenamesJsonOrError = parseJson<RenamesJson>(options::RenamesJsonPath);
+  auto RenamesJsonOrError = parseJson<RenamesJson>(options::RenamesJsonPath, BufferProvider);
   if (auto Error = RenamesJsonOrError.takeError()) {
     ExitOnError(std::move(Error));
   }
diff --git a/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp b/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
index cc5dbd6c877..393b5f39b73 100644
--- a/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
+++ b/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
@@ -62,10 +62,12 @@ int main(int argc, char *argv[]) {
     reinterpret_cast<void *>(&anchorForGetMainExecutable);
   std::string MainExecutablePath =
     llvm::sys::fs::getMainExecutable(argv[0], MainExecutablePointer);
-  auto FilesJsonOrError = parseJson<FilesJson>(PathToJson);
-  if (auto Error = FilesJsonOrError.takeError()) {
-    ExitOnError(std::move(Error));
-  }
+
+    auto FilesJsonOrError = parseJson<FilesJson>(PathToJson);
+
+    if (auto Error = FilesJsonOrError.takeError()) {
+        ExitOnError(std::move(Error));
+    }
   
   auto SymbolsOrError = extractSymbols(FilesJsonOrError.get(),
                                        MainExecutablePath);
@@ -78,9 +80,13 @@ int main(int argc, char *argv[]) {
     llvm::errs() << "there is no path to write extracted symbols to" << '\n';
     return 1;
   }
+
   std::string PathToOutput = options::SymbolJsonPath;
-  auto WriteErrorCode = writeToFile(SymbolsOrError.get(),
+  FileFactory<llvm::raw_fd_ostream> Factory = FileFactory<llvm::raw_fd_ostream>();
+
+  auto WriteErrorCode = writeToPath(SymbolsOrError.get(),
                                     PathToOutput,
+                                    Factory,
                                     llvm::outs());
   ExitOnError(std::move(WriteErrorCode));
   return 0;
diff --git a/swift/unittests/SwiftObfuscation/CMakeLists.txt b/swift/unittests/SwiftObfuscation/CMakeLists.txt
index eeef4541e3a..db09bf3b517 100644
--- a/swift/unittests/SwiftObfuscation/CMakeLists.txt
+++ b/swift/unittests/SwiftObfuscation/CMakeLists.txt
@@ -1,6 +1,7 @@
 add_swift_unittest(SwiftObfuscationTests
     RandomTests.cpp
     SwiftObfuscationTests.cpp
+    FileIOTests.cpp
 )
 
 target_link_libraries(SwiftObfuscationTests
diff --git a/swift/unittests/SwiftObfuscation/FileIOTests.cpp b/swift/unittests/SwiftObfuscation/FileIOTests.cpp
new file mode 100644
index 00000000000..7293af373d2
--- /dev/null
+++ b/swift/unittests/SwiftObfuscation/FileIOTests.cpp
@@ -0,0 +1,201 @@
+#include "llvm/Support/FileSystem.h"
+
+#include "swift/Obfuscation/DataStructures.h"
+#include "swift/Obfuscation/FileIO.h"
+#include "swift/Obfuscation/Utils.h"
+#include "gtest/gtest.h"
+
+namespace swift {
+namespace obfuscation {
+
+using BufferOrError = llvm::ErrorOr<std::unique_ptr<llvm::MemoryBuffer>>;
+
+struct FakeMemoryBuffer: protected llvm::MemoryBuffer {
+
+    bool hasAskedForBufferViaGetFile;
+    std::string Path;
+
+    FakeMemoryBuffer(bool hasAskedForBufferViaGetFile, std::string Path)
+    : hasAskedForBufferViaGetFile(hasAskedForBufferViaGetFile), Path(Path) {};
+
+    BufferKind getBufferKind() const override { return MemoryBuffer_Malloc; }
+
+    StringRef getBufferIdentifier() const override {
+        return StringRef("Fake");
+    }
+
+    static std::string Payload;
+
+    static llvm::ErrorOr<std::unique_ptr<MemoryBuffer>>
+    getFile(const Twine &Filename, int64_t FileSize = -1,
+            bool RequiresNullTerminator = true, bool IsVolatileSize = false) {
+        FakeMemoryBuffer *Buffer = new FakeMemoryBuffer(true, Filename.str());
+        StringRef Text(Payload);
+        Buffer->init(reinterpret_cast<const char *>(Text.bytes_begin()),
+                     reinterpret_cast<const char *>(Text.bytes_end()),
+                     false);
+        std::unique_ptr<llvm::MemoryBuffer> MB(Buffer);
+        return std::move(MB);
+    }
+};
+
+std::string FakeMemoryBuffer::Payload;
+
+struct FakeMemoryBufferProvider: MemoryBufferProvider {
+    std::error_code Error;
+
+    virtual llvm::ErrorOr<std::unique_ptr<llvm::MemoryBuffer>>
+    getBuffer(std::string Path) const override {
+        if (Error) {
+            return Error;
+        }
+        return FakeMemoryBuffer::getFile(Path);
+    }
+};
+
+TEST(ParseJson, ErrorReadingFile) {
+    FakeMemoryBufferProvider FakeProvider = FakeMemoryBufferProvider();
+    std::error_code Error(1, std::generic_category());
+    FakeProvider.Error = Error;
+    std::string Path = "";
+    std::string Expected = "Error during JSON file read";
+
+    auto Result = parseJson<FilesJson>(Path, FakeProvider);
+
+    if (llvm::Error Error = Result.takeError()) {
+        std::string Result = llvm::toString(std::move(Error));
+        EXPECT_EQ(Result, Expected);
+        return;
+    }
+    EXPECT_TRUE(false);
+}
+
+TEST(ParseJson, ErrorParsingText) {
+    FakeMemoryBufferProvider FakeProvider = FakeMemoryBufferProvider();
+    FakeMemoryBuffer::Payload = "test json";
+    std::string Path = "";
+    std::string Expected = "Error during JSON parse";
+
+    auto Result = parseJson<FilesJson>(Path, FakeProvider);
+
+    if (llvm::Error Error = Result.takeError()) {
+        std::string Result = llvm::toString(std::move(Error));
+        EXPECT_EQ(Result, Expected);
+        return;
+    }
+    EXPECT_TRUE(false);
+}
+
+TEST(ParseJson, SuccessParsingText) {
+    FakeMemoryBufferProvider FakeProvider = FakeMemoryBufferProvider();
+    std::string RootPath = "testRootPath";
+    std::string ModuleName = "testModuleName";
+    std::string SdkName = "testName";
+    std::string SdkPath = "testSDKPath";
+    std::string FileName1 = "testFileName1";
+    std::string FileName2 = "testFileName2";
+    std::string ExplicitFrameworkName = "testExplicitFrameworkName";
+    std::string ExplicitFrameworkPath = "testExplicitFrameworkPath";
+    std::string SystemFramework = "testSystemFramework";
+    FakeMemoryBuffer::Payload = "{\r\n  \"project\":{\r\n"
+        "\"rootPath\":\"" + RootPath + "\"\r\n   },"
+        "\"module\":{\r\n"
+        "\"name\":\"" + ModuleName + "\"\r\n   },\r\n"
+        "\"sdk\":{\r\n"
+        "\"name\":\"" + SdkName + "\",\r\n"
+        "\"path\":\"" + SdkPath + "\"\r\n   },\r\n"
+        "\"filenames\":[\r\n"
+        "\"" + FileName1 + "\",\r\n"
+        "\"" + FileName2 + "\"\r\n   ],\r\n"
+        "\"explicitelyLinkedFrameworks\":[\r\n {\r\n"
+        "\"name\":\"" + ExplicitFrameworkName + "\",\r\n"
+        "\"path\":\"" + ExplicitFrameworkPath + "\"\r\n }\r\n ],\r\n"
+        "\"systemLinkedFrameworks\":[\r\n \"" + SystemFramework + "\"\r\n   ]\r\n}";
+    std::string Path = "";
+    std::string Expected = "Error during JSON parse";
+
+    auto Result = parseJson<FilesJson>(Path, FakeProvider);
+
+    if (llvm::Error Error = Result.takeError()) {
+        std::string Result = llvm::toString(std::move(Error));
+        FAIL() << "Json should be parsed";
+        return;
+    }
+    auto FilesJson = Result.get();
+    EXPECT_EQ(FilesJson.Project.RootPath, RootPath);
+    EXPECT_EQ(FilesJson.Module.Name, ModuleName);
+    EXPECT_EQ(FilesJson.Sdk.Name, SdkName);
+    EXPECT_EQ(FilesJson.Sdk.Path, SdkPath);
+    std::vector<std::string> ExpectedFilenames = {FileName1, FileName2};
+    EXPECT_EQ(FilesJson.Filenames, ExpectedFilenames);
+    EXPECT_EQ(FilesJson.ExplicitelyLinkedFrameworks.size(), 1);
+    EXPECT_EQ(FilesJson.ExplicitelyLinkedFrameworks[0].Name, ExplicitFrameworkName);
+    EXPECT_EQ(FilesJson.ExplicitelyLinkedFrameworks[0].Path, ExplicitFrameworkPath);
+    EXPECT_EQ(FilesJson.SystemLinkedFrameworks.size(), 1);
+    EXPECT_EQ(FilesJson.SystemLinkedFrameworks[0], SystemFramework);
+}
+
+struct FakeFile {
+    static bool DidClose;
+    static std::string CapturedString;
+
+    FakeFile() { }
+
+    FakeFile(StringRef Filename, std::error_code &EC,
+             llvm::sys::fs::OpenFlags Flags) { }
+
+    FakeFile &operator<<(const std::string &Str) {
+        CapturedString = Str;
+        return *this;
+    }
+
+    void close() {
+        DidClose = true;
+    }
+};
+
+bool FakeFile::DidClose;
+std::string FakeFile::CapturedString;
+
+struct FakeFileFactory: FileFactory<FakeFile> {
+    std::error_code Error;
+
+    FakeFileFactory() { };
+
+    llvm::ErrorOr<std::unique_ptr<FakeFile>>
+    getFile(std::string Path) override {
+        if (Error) {
+            return Error;
+        }
+
+        return llvm::make_unique<FakeFile>();
+    }
+};
+
+TEST(WriteToFile, SuccessWriting) {
+    std::string PathToOutput = "";
+    Symbol FakeSymbol = Symbol("testIdentifier", "testName", "testModule");
+    SymbolsJson JsonToWrite;
+    JsonToWrite.Symbols.push_back(FakeSymbol);
+    FakeFileFactory Factory = FakeFileFactory();
+    FakeFile::DidClose = false;
+    std::string Expected = "{\n  \"symbols\": [\n    {\n      "
+        "\"name\": \"testName\",\n      "
+        "\"identifier\": \"testIdentifier\",\n      "
+        "\"module\": \"testModule\"\n    }\n  ]\n}";
+
+    auto Error = writeToPath(JsonToWrite,
+                             PathToOutput,
+                             Factory,
+                             llvm::outs());
+    if (Error) {
+        llvm::consumeError(std::move(Error));
+        EXPECT_TRUE(false) << "should be parsed correctly";
+    }
+
+    EXPECT_EQ(FakeFile::CapturedString, Expected) << "should write correct string";
+    EXPECT_TRUE(FakeFile::DidClose) << "should close file after write";
+}
+
+}
+}
-- 
2.17.1 (Apple Git-112)


From 0f15809c4c4c9278de32c56d4bc40a39f8be6c21 Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Tue, 23 Jan 2018 14:32:05 +0100
Subject: [PATCH 031/138] Added data structures tests

Reviewers: jakub.sowa, krzysztof.siejkowski

Reviewed By: jakub.sowa, krzysztof.siejkowski

Subscribers: jakub.sowa, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2770
---
 .../swift/Obfuscation/DataStructures.h        |  35 ++-
 .../swift/Obfuscation/FileIO-Template.h       |   5 +-
 .../swift/Obfuscation/SourceFileWalker.h      |  16 --
 swift/lib/Obfuscation/DataStructures.cpp      |  73 ++++++-
 swift/lib/Obfuscation/FileIO.cpp              |   9 +-
 swift/lib/Obfuscation/SourceFileWalker.cpp    |  17 --
 .../unittests/SwiftObfuscation/CMakeLists.txt |   3 +
 .../DataStructuresDeserializationTests.cpp    | 199 ++++++++++++++++++
 .../DataStructuresOperatorsTests.cpp          | 120 +++++++++++
 .../DataStructuresSerializationTests.cpp      |  98 +++++++++
 10 files changed, 522 insertions(+), 53 deletions(-)
 create mode 100644 swift/unittests/SwiftObfuscation/DataStructuresDeserializationTests.cpp
 create mode 100644 swift/unittests/SwiftObfuscation/DataStructuresOperatorsTests.cpp
 create mode 100644 swift/unittests/SwiftObfuscation/DataStructuresSerializationTests.cpp

diff --git a/swift/include/swift/Obfuscation/DataStructures.h b/swift/include/swift/Obfuscation/DataStructures.h
index 354c60be699..1c8d8bff61f 100644
--- a/swift/include/swift/Obfuscation/DataStructures.h
+++ b/swift/include/swift/Obfuscation/DataStructures.h
@@ -1,6 +1,7 @@
 #ifndef DataStructures_h
 #define DataStructures_h
 
+#include "swift/Frontend/Frontend.h"
 #include "llvm/Support/YAMLTraits.h"
 #include "llvm/Support/Error.h"
 #include "swift/Basic/JSONSerialization.h"
@@ -47,10 +48,10 @@ struct Symbol {
   
   Symbol(const std::string &Identifier,
          const std::string &Name,
-         const std::string &Module)
-  : Identifier(Identifier), Name(Name), Module(Module) {};
+         const std::string &Module);
   
   bool operator< (const Symbol &Right) const;
+  bool operator== (const Symbol &Right) const;
 };
 
 struct SymbolsJson {
@@ -63,12 +64,35 @@ struct SymbolRenaming {
   std::string ObfuscatedName;
   std::string Module;
   
-  bool operator< (const SymbolRenaming &Right) const;
+  SymbolRenaming() = default;
+  
+  SymbolRenaming(const std::string &Identifier,
+         const std::string &OriginalName,
+         const std::string &ObfuscatedName,
+         const std::string &Module);
+  
+  bool operator== (const SymbolRenaming &Right) const;
 };
 
 struct RenamesJson {
   std::vector<SymbolRenaming> Symbols;
 };
+  
+/// SymbolWithRange - struct for linking the symbol identified in the Swift
+/// source code with the range in which it was encountered.
+struct SymbolWithRange {
+  Symbol Symbol;
+  CharSourceRange Range;
+  
+  /// @brief Trivial memberwise-like constructor
+  SymbolWithRange(const swift::obfuscation::Symbol &Symbol,
+                  const CharSourceRange &Range)
+  : Symbol(Symbol), Range(Range) {}
+  
+  /// @brief Comparison operator required for containing SymbolWithRange in
+  /// sets. It's taking into consideration both symbol identifier and range.
+  bool operator< (const SymbolWithRange &Right) const;
+};
 
 } //namespace obfuscation
 } //namespace swift
@@ -130,6 +154,9 @@ struct SequenceTraits<std::vector<U>> {
   static size_t size(IO &Io, std::vector<U> &Vec);
   static U &element(IO &Io, std::vector<U> &Vec, size_t Index);
 };
+  
+template<class T>
+Expected<T> deserialize(StringRef Json);
 
 } // namespace yaml
 } // namespace llvm
@@ -160,7 +187,7 @@ struct ObjectTraits<SymbolRenaming> {
 };
 
 template<class T>
-llvm::Expected<std::string> serialize(T &Object);
+std::string serialize(T &Object);
 
 } // namespace json
 } // namespace swift
diff --git a/swift/include/swift/Obfuscation/FileIO-Template.h b/swift/include/swift/Obfuscation/FileIO-Template.h
index 3444010f9aa..9956bfba1da 100644
--- a/swift/include/swift/Obfuscation/FileIO-Template.h
+++ b/swift/include/swift/Obfuscation/FileIO-Template.h
@@ -46,10 +46,7 @@ llvm::Error writeToFile(T &Object,
 
 
     auto SerializedObject = json::serialize(Object);
-    if (auto Error = SerializedObject.takeError()) {
-        return Error;
-    }
-    *File << SerializedObject.get();
+    *File << SerializedObject;
     File->close();
 
     LogStream << "Written to file: " << '\n'
diff --git a/swift/include/swift/Obfuscation/SourceFileWalker.h b/swift/include/swift/Obfuscation/SourceFileWalker.h
index 4b3bb1cf16d..0369058a03a 100644
--- a/swift/include/swift/Obfuscation/SourceFileWalker.h
+++ b/swift/include/swift/Obfuscation/SourceFileWalker.h
@@ -9,22 +9,6 @@
 namespace swift {
 namespace obfuscation {
 
-/// SymbolWithRange - struct for linking the symbol identified in the Swift
-/// source code with the range in which it was encountered.
-struct SymbolWithRange {
-  Symbol Symbol;
-  CharSourceRange Range;
-  
-  /// @brief Trivial memberwise-like constructor
-  SymbolWithRange(const swift::obfuscation::Symbol &Symbol,
-                  const CharSourceRange &Range)
-  : Symbol(Symbol), Range(Range) {}
-  
-  /// @brief Comparison operator required for containing SymbolWithRange in
-  /// sets. It's taking into consideration both symbol identifier and range.
-  bool operator< (const SymbolWithRange &Right) const;
-};
-
 /// Identifies the symbols in the given Swift AST SourceFile object.
 ///
 /// The SourceFile might be extracted from the compiler after it consumes and
diff --git a/swift/lib/Obfuscation/DataStructures.cpp b/swift/lib/Obfuscation/DataStructures.cpp
index d7eccc4d925..48974ce5438 100644
--- a/swift/lib/Obfuscation/DataStructures.cpp
+++ b/swift/lib/Obfuscation/DataStructures.cpp
@@ -1,14 +1,56 @@
 #include "swift/Obfuscation/DataStructures.h"
+#include "swift/Obfuscation/Utils.h"
 
 using namespace swift::obfuscation;
 
 namespace swift {
 namespace obfuscation {
 
+Symbol::Symbol(const std::string &Identifier,
+       const std::string &Name,
+       const std::string &Module)
+: Identifier(Identifier), Name(Name), Module(Module) {};
+
 bool Symbol::operator< (const Symbol &Right) const {
   return Identifier < Right.Identifier;
 }
-
+  
+bool Symbol::operator== (const Symbol &Right) const {
+  return Identifier == Right.Identifier
+  && Name == Right.Name
+  && Module == Right.Module;
+}
+  
+SymbolRenaming::SymbolRenaming(const std::string &Identifier,
+                               const std::string &OriginalName,
+                               const std::string &ObfuscatedName,
+                               const std::string &Module)
+: Identifier(Identifier), OriginalName(OriginalName), ObfuscatedName(ObfuscatedName), Module(Module) {};
+
+bool SymbolRenaming::operator== (const SymbolRenaming &Right) const {
+  return Identifier == Right.Identifier
+  && ObfuscatedName == Right.ObfuscatedName
+  && OriginalName == Right.OriginalName
+  && Module == Right.Module;
+}
+
+const char* pointerToRangeValue(const SymbolWithRange &Symbol) {
+  auto Pointer = Symbol.Range.getStart().getOpaquePointerValue();
+  return static_cast<const char *>(Pointer);
+}
+
+bool SymbolWithRange::operator< (const SymbolWithRange &Right) const {
+  auto less = std::less<const char *>();
+  if (const auto* RangeValuePointer = pointerToRangeValue(*this)) {
+    if (const auto* RightRangeValuePointer = pointerToRangeValue(Right)) {
+      auto isRangeLess = less(RangeValuePointer, RightRangeValuePointer);
+      return Symbol < Right.Symbol || isRangeLess;
+    }
+  }
+  assert(false && "Comparing Symbols with Ranges requires Ranges Start "
+         "Location Values Pointers to be of const char type");
+}
+  
 } //namespace obfuscation
 } //namespace swift
 
@@ -81,6 +123,27 @@ U& SequenceTraits<std::vector<U>>::element(IO &Io,
   }
   return Vec[Index];
 }
+  
+template<class T>
+Expected<T> deserialize(StringRef Json) {
+  Input Input(Json);
+  T Deserialized;
+  Input >> Deserialized;
+  if (auto ErrorCode = Input.error()) {
+    return stringError("Error during JSON parse", ErrorCode);
+  }
+  return Deserialized;
+}
+  
+template Expected<FilesJson> deserialize(StringRef Json);
+template Expected<Project> deserialize(StringRef Json);
+template Expected<ObfuscationModule> deserialize(StringRef Json);
+template Expected<Sdk> deserialize(StringRef Json);
+template Expected<ELF> deserialize(StringRef Json);
+template Expected<SymbolsJson> deserialize(StringRef Json);
+template Expected<Symbol> deserialize(StringRef Json);
+template Expected<RenamesJson> deserialize(StringRef Json);
+template Expected<SymbolRenaming> deserialize(StringRef Json);
 
 } // namespace yaml
 } // namespace llvm
@@ -111,7 +174,7 @@ void ObjectTraits<SymbolRenaming>::mapping(Output &Out,
 }
 
 template<class T>
-llvm::Expected<std::string> serialize(T &Object) {
+std::string serialize(T &Object) {
     std::string OutputString;
     llvm::raw_string_ostream OutputStringStream(OutputString);
     swift::json::Output Output(OutputStringStream);
@@ -119,8 +182,10 @@ llvm::Expected<std::string> serialize(T &Object) {
     return OutputStringStream.str();
 }
 
-template llvm::Expected<std::string> serialize(SymbolsJson &Object);
-template llvm::Expected<std::string> serialize(RenamesJson &Object);
+template std::string serialize(SymbolsJson &Object);
+template std::string serialize(Symbol &Object);
+template std::string serialize(RenamesJson &Object);
+template std::string serialize(SymbolRenaming &Object);
 
 } // namespace json
 } // namespace swift
diff --git a/swift/lib/Obfuscation/FileIO.cpp b/swift/lib/Obfuscation/FileIO.cpp
index 6d90e0a37b2..e4916b201f1 100644
--- a/swift/lib/Obfuscation/FileIO.cpp
+++ b/swift/lib/Obfuscation/FileIO.cpp
@@ -21,15 +21,8 @@ llvm::Expected<T> parseJson(std::string PathToJson,
   if (auto ErrorCode = Buffer.getError()) {
     return stringError("Error during JSON file read", ErrorCode);
   }
-
-  llvm::yaml::Input Input(std::move(Buffer.get())->getBuffer());
-  T Json;
-  Input >> Json;
-  if (auto ErrorCode = Input.error()) {
-    return stringError("Error during JSON parse", ErrorCode);
-  }
   
-  return Json;
+  return llvm::yaml::deserialize<T>(std::move(Buffer.get())->getBuffer());
 }
 
 template llvm::Expected<FilesJson> parseJson(std::string,
diff --git a/swift/lib/Obfuscation/SourceFileWalker.cpp b/swift/lib/Obfuscation/SourceFileWalker.cpp
index a00b29ff771..44d654de792 100644
--- a/swift/lib/Obfuscation/SourceFileWalker.cpp
+++ b/swift/lib/Obfuscation/SourceFileWalker.cpp
@@ -5,23 +5,6 @@
 
 namespace swift {
 namespace obfuscation {
-  
-const char* pointerToRangeValue(const SymbolWithRange &Symbol) {
-  auto Pointer = Symbol.Range.getStart().getOpaquePointerValue();
-  return static_cast<const char *>(Pointer);
-}
-  
-bool SymbolWithRange::operator< (const SymbolWithRange &Right) const {
-  auto less = std::less<const char *>();
-  if (const auto* RangeValuePointer = pointerToRangeValue(*this)) {
-    if (const auto* RightRangeValuePointer = pointerToRangeValue(Right)) {
-      auto isRangeLess = less(RangeValuePointer, RightRangeValuePointer);
-      return Symbol < Right.Symbol || isRangeLess;
-    }
-  }
-  assert(false && "Comparing Symbols with Ranges requires Ranges Start "
-                  "Location Values Pointers to be of const char type");
-}
 
 struct RenamesCollector: public SourceEntityWalker {
   std::set<SymbolWithRange> Bucket;
diff --git a/swift/unittests/SwiftObfuscation/CMakeLists.txt b/swift/unittests/SwiftObfuscation/CMakeLists.txt
index db09bf3b517..d36bcb164ae 100644
--- a/swift/unittests/SwiftObfuscation/CMakeLists.txt
+++ b/swift/unittests/SwiftObfuscation/CMakeLists.txt
@@ -2,6 +2,9 @@ add_swift_unittest(SwiftObfuscationTests
     RandomTests.cpp
     SwiftObfuscationTests.cpp
     FileIOTests.cpp
+    DataStructuresOperatorsTests.cpp
+    DataStructuresSerializationTests.cpp
+    DataStructuresDeserializationTests.cpp
 )
 
 target_link_libraries(SwiftObfuscationTests
diff --git a/swift/unittests/SwiftObfuscation/DataStructuresDeserializationTests.cpp b/swift/unittests/SwiftObfuscation/DataStructuresDeserializationTests.cpp
new file mode 100644
index 00000000000..bb36f852ac0
--- /dev/null
+++ b/swift/unittests/SwiftObfuscation/DataStructuresDeserializationTests.cpp
@@ -0,0 +1,199 @@
+#include "swift/Obfuscation/DataStructures.h"
+#include "gtest/gtest.h"
+
+using namespace swift::obfuscation;
+using namespace llvm::yaml;
+
+template<class T>
+bool vectorContains(const std::vector<T> &Vector, const T &Element) {
+  return std::end(Vector) != std::find(Vector.begin(), Vector.end(), Element);
+}
+
+TEST(DataStructuresDeserialization, DeserializeProject) {
+  std::string JsonString = "{\n\"rootPath\": \"samplePath\"\n}";
+  
+  auto DeserializedOrError = deserialize<Project>(JsonString);
+  
+  auto Expected = Project();
+  Expected.RootPath = "samplePath";
+  
+  if (auto ErrorCode = DeserializedOrError.takeError()) {
+    llvm::consumeError(std::move(ErrorCode));
+    FAIL() << "Error during json parsing";
+  }
+  auto Deserialized = DeserializedOrError.get();
+  
+  EXPECT_EQ(Deserialized.RootPath, Expected.RootPath);
+}
+
+TEST(DataStructuresDeserialization, DeserializeModule) {
+  std::string JsonString = "{\n\"name\": \"sampleName\"\n}";
+
+  auto DeserializedOrError = deserialize<Module>(JsonString);
+
+  auto Expected = Module();
+  Expected.Name = "sampleName";
+  
+  if (auto ErrorCode = DeserializedOrError.takeError()) {
+    llvm::consumeError(std::move(ErrorCode));
+    FAIL() << "Error during json parsing";
+  }
+  auto Deserialized = DeserializedOrError.get();
+
+  EXPECT_EQ(Deserialized.Name, Expected.Name);
+}
+
+TEST(DataStructuresDeserialization, DeserializeSdk) {
+  std::string JsonString = "{\n"
+  "\"name\": \"sampleName\"\n,"
+  "\"path\": \"samplePath\",\n}";
+
+  auto DeserializedOrError = deserialize<Sdk>(JsonString);
+
+  auto Expected = Sdk();
+  Expected.Name = "sampleName";
+  Expected.Path = "samplePath";
+
+  if (auto ErrorCode = DeserializedOrError.takeError()) {
+    llvm::consumeError(std::move(ErrorCode));
+    FAIL() << "Error during json parsing";
+  }
+  auto Deserialized = DeserializedOrError.get();
+  
+  EXPECT_EQ(Deserialized.Name, Expected.Name);
+}
+
+TEST(DataStructuresDeserialization, DeserializeExplicitlyLinkedFramework) {
+  std::string JsonString = "{\n"
+  "\"name\": \"sampleName\"\n,"
+  "\"path\": \"samplePath\",\n}";
+
+  auto DeserializedOrError = deserialize<ExplicitelyLinkedFrameworks>(JsonString);
+
+  auto Expected = ExplicitelyLinkedFrameworks();
+  Expected.Name = "sampleName";
+  Expected.Path = "samplePath";
+
+  if (auto ErrorCode = DeserializedOrError.takeError()) {
+    llvm::consumeError(std::move(ErrorCode));
+    FAIL() << "Error during json parsing";
+  }
+  auto Deserialized = DeserializedOrError.get();
+  
+  EXPECT_EQ(Deserialized.Name, Expected.Name);
+}
+
+TEST(DataStructuresDeserialization, DeserializeSymbolsJson) {
+  std::string JsonString =
+  "{\n"
+  "symbols: [\n"
+  "{\n"
+  "\"name\": \"sampleName0\",\n"
+  "\"identifier\": \"sampleIdentifier0\",\n"
+  "\"module\": \"sampleModule0\"\n"
+  "},\n"
+  "{\n"
+  "\"name\": \"sampleName1\",\n"
+  "\"identifier\": \"sampleIdentifier1\",\n"
+  "\"module\": \"sampleModule1\"\n"
+  "}\n"
+  "]\n"
+  "}";
+
+  auto DeserializedOrError = deserialize<SymbolsJson>(JsonString);
+
+  if (auto ErrorCode = DeserializedOrError.takeError()) {
+    llvm::consumeError(std::move(ErrorCode));
+    FAIL() << "Error during json parsing";
+  }
+  auto Deserialized = DeserializedOrError.get();
+  
+  size_t ExpectedSize = 2;
+  EXPECT_EQ(Deserialized.Symbols.size(), ExpectedSize);
+
+  Symbol Expected0("sampleIdentifier0", "sampleName0", "sampleModule0");
+  Symbol Expected1("sampleIdentifier1", "sampleName1", "sampleModule1");
+
+  EXPECT_TRUE(vectorContains<Symbol>(Deserialized.Symbols, Expected0));
+  EXPECT_TRUE(vectorContains<Symbol>(Deserialized.Symbols, Expected1));
+}
+
+TEST(DataStructuresDeserialization, DeserializeSymbol) {
+  std::string JsonString = "{\n"
+  "\"name\": \"sampleName\"\n,"
+  "\"identifier\": \"sampleIdentifier\",\n"
+  "\"module\": \"sampleModule\"\n}";
+
+  auto DeserializedOrError = deserialize<Symbol>(JsonString);
+
+  Symbol Expected("sampleIdentifier", "sampleName", "sampleModule");
+
+  if (auto ErrorCode = DeserializedOrError.takeError()) {
+    llvm::consumeError(std::move(ErrorCode));
+    FAIL() << "Error during json parsing";
+  }
+  auto Deserialized = DeserializedOrError.get();
+  
+  EXPECT_EQ(Deserialized, Expected);
+}
+
+TEST(DataStructuresDeserialization, DeserializeRenamesJson) {
+  std::string JsonString =
+  "{\n"
+  "symbols: [\n"
+  "{\n"
+  "\"identifier\": \"sampleIdentifier0\",\n"
+  "\"originalName\": \"sampleName0\",\n"
+  "\"obfuscatedName\": \"sampleObfuscatedName0\",\n"
+  "\"module\": \"sampleModule0\"\n"
+  "},\n"
+  "{\n"
+  "\"identifier\": \"sampleIdentifier1\",\n"
+  "\"originalName\": \"sampleName1\",\n"
+  "\"obfuscatedName\": \"sampleObfuscatedName1\",\n"
+  "\"module\": \"sampleModule1\"\n"
+  "}\n"
+  "]\n"
+  "}";
+
+  auto DeserializedOrError = deserialize<RenamesJson>(JsonString);
+
+  if (auto ErrorCode = DeserializedOrError.takeError()) {
+    llvm::consumeError(std::move(ErrorCode));
+    FAIL() << "Error during json parsing";
+  }
+  auto Deserialized = DeserializedOrError.get();
+  
+  size_t ExpectedSize = 2;
+  EXPECT_EQ(Deserialized.Symbols.size(), ExpectedSize);
+
+  SymbolRenaming Expected0("sampleIdentifier0", "sampleName0", "sampleObfuscatedName0", "sampleModule0");
+  SymbolRenaming Expected1("sampleIdentifier1", "sampleName1", "sampleObfuscatedName1", "sampleModule1");
+
+  EXPECT_TRUE(vectorContains<SymbolRenaming>(Deserialized.Symbols, Expected0));
+  EXPECT_TRUE(vectorContains<SymbolRenaming>(Deserialized.Symbols, Expected1));
+}
+
+TEST(DataStructuresDeserialization, DeserializeSymbolRenaming) {
+  std::string JsonString = "{\n"
+  "\"originalName\": \"sampleName\"\n,"
+  "\"identifier\": \"sampleIdentifier\",\n"
+  "\"obfuscatedName\": \"sampleObfuscatedName\",\n"
+  "\"module\": \"sampleModule\"\n}";
+
+  auto DeserializedOrError = deserialize<SymbolRenaming>(JsonString);
+
+  auto Expected = SymbolRenaming();
+  Expected.Identifier = "sampleIdentifier";
+  Expected.OriginalName = "sampleName";
+  Expected.ObfuscatedName = "sampleObfuscatedName";
+  Expected.Module = "sampleModule";
+  
+  if (auto ErrorCode = DeserializedOrError.takeError()) {
+    llvm::consumeError(std::move(ErrorCode));
+    FAIL() << "Error during json parsing";
+  }
+  auto Deserialized = DeserializedOrError.get();
+  
+  EXPECT_EQ(Deserialized, Expected);
+}
diff --git a/swift/unittests/SwiftObfuscation/DataStructuresOperatorsTests.cpp b/swift/unittests/SwiftObfuscation/DataStructuresOperatorsTests.cpp
new file mode 100644
index 00000000000..233648c600c
--- /dev/null
+++ b/swift/unittests/SwiftObfuscation/DataStructuresOperatorsTests.cpp
@@ -0,0 +1,120 @@
+#include "swift/Obfuscation/DataStructures.h"
+#include "gtest/gtest.h"
+
+using namespace swift;
+using namespace swift::obfuscation;
+using namespace llvm;
+
+auto Symbol1 = Symbol("a_id", "a_name", "a_module");
+auto Symbol1_1 = Symbol("a_id", "a_name", "a_module");
+auto Symbol2 = Symbol("b_id", "a_name", "a_module");
+auto Symbol3 = Symbol("a_id", "b_name", "a_module");
+auto Symbol4 = Symbol("a_id", "a_name", "b_module");
+
+TEST(SymbolLessThanOperator, ComparingIdentifierLess) {
+  EXPECT_TRUE(Symbol1 < Symbol2);
+}
+
+TEST(SymbolLessThanOperator, ComparingIdentifierGreater) {
+  EXPECT_FALSE(Symbol2 < Symbol1);
+}
+
+TEST(SymbolLessThanOperator, ComparingIdentifierEqual) {
+  EXPECT_FALSE(Symbol1 < Symbol1_1);
+}
+
+TEST(SymbolEqualOperator, ComparingSymbolEqual) {
+  EXPECT_TRUE(Symbol1 == Symbol1_1);
+}
+
+TEST(SymbolEqualOperator, ComparingSymbolNotEqualIdentifier) {
+  EXPECT_FALSE(Symbol1 == Symbol2);
+}
+
+TEST(SymbolEqualOperator, ComparingSymbolNotEqualName) {
+  EXPECT_FALSE(Symbol1 == Symbol3);
+}
+
+TEST(SymbolEqualOperator, ComparingSymbolNotEqualModule) {
+  EXPECT_FALSE(Symbol1 == Symbol4);
+}
+
+std::string SourceContents = "sample source contents";
+
+auto SourceLoc1 = SourceLoc(SMLoc::getFromPointer(SourceContents.c_str()));
+auto SourceLoc2 = SourceLoc(SMLoc::getFromPointer(SourceContents.substr(1).c_str()));
+
+auto SourceRange1 = CharSourceRange(SourceLoc1, 2);
+auto SourceRange2 = CharSourceRange(SourceLoc2, 3);
+
+TEST(SymbolWithRangeLessThanOperator, ComparingSymbolsLessRangesLess) {
+  EXPECT_TRUE(SymbolWithRange(Symbol1, SourceRange1)
+              < SymbolWithRange(Symbol2, SourceRange2));
+}
+
+TEST(SymbolWithRangeLessThanOperator, ComparingSymbolsLessRangesGreater) {
+  EXPECT_TRUE(SymbolWithRange(Symbol1, SourceRange2)
+              < SymbolWithRange(Symbol2, SourceRange1));
+}
+
+TEST(SymbolWithRangeLessThanOperator, ComparingSymbolsLessRangesEqual) {
+  EXPECT_TRUE(SymbolWithRange(Symbol1, SourceRange1)
+              < SymbolWithRange(Symbol2, SourceRange1));
+}
+
+TEST(SymbolWithRangeLessThanOperator, ComparingSymbolsGreaterRangesLess) {
+  EXPECT_TRUE(SymbolWithRange(Symbol2, SourceRange1)
+              < SymbolWithRange(Symbol1, SourceRange2));
+}
+
+TEST(SymbolWithRangeLessThanOperator, ComparingSymbolsGreaterRangesGreater) {
+  EXPECT_FALSE(SymbolWithRange(Symbol2, SourceRange2)
+               < SymbolWithRange(Symbol1, SourceRange1));
+}
+
+TEST(SymbolWithRangeLessThanOperator, ComparingSymbolsGreaterRangesEqual) {
+  EXPECT_FALSE(SymbolWithRange(Symbol2, SourceRange1)
+               < SymbolWithRange(Symbol1, SourceRange1));
+}
+
+TEST(SymbolWithRangeLessThanOperator, ComparingSymbolsEqualRangesLess) {
+  EXPECT_TRUE(SymbolWithRange(Symbol1, SourceRange1)
+              < SymbolWithRange(Symbol1, SourceRange2));
+}
+
+TEST(SymbolWithRangeLessThanOperator, ComparingSymbolsEqualRangesGreater) {
+  EXPECT_FALSE(SymbolWithRange(Symbol1, SourceRange2)
+               < SymbolWithRange(Symbol1, SourceRange1));
+}
+
+TEST(SymbolWithRangeLessThanOperator, ComparingSymbolsEqualRangesEqual) {
+  EXPECT_FALSE(SymbolWithRange(Symbol1, SourceRange1)
+               < SymbolWithRange(Symbol1, SourceRange1));
+}
+
+auto SymbolRenaming1 = SymbolRenaming("a_id", "a_name", "a_obfuscated_name", "a_module");
+auto SymbolRenaming1_1 = SymbolRenaming("a_id", "a_name", "a_obfuscated_name", "a_module");
+auto SymbolRenaming2 = SymbolRenaming("b_id", "a_name", "a_obfuscated_name", "a_module");
+auto SymbolRenaming3 = SymbolRenaming("a_id", "b_name", "a_obfuscated_name", "a_module");
+auto SymbolRenaming4 = SymbolRenaming("a_id", "a_name", "b_obfuscated_name", "a_module");
+auto SymbolRenaming5 = SymbolRenaming("a_id", "a_name", "a_obfuscated_name", "b_module");
+
+TEST(SymbolRenamingEqualOperator, ComparingSymbolRenamingsEqual) {
+  EXPECT_TRUE(SymbolRenaming1 == SymbolRenaming1_1);
+}
+
+TEST(SymbolRenamingEqualOperator, ComparingSymbolRenamingsNotEqualIdentifier) {
+  EXPECT_FALSE(SymbolRenaming1 == SymbolRenaming2);
+}
+
+TEST(SymbolRenamingEqualOperator, ComparingSymbolRenamingsNotEqualOriginalName) {
+  EXPECT_FALSE(SymbolRenaming1 == SymbolRenaming3);
+}
+
+TEST(SymbolRenamingEqualOperator, ComparingSymbolRenamingsNotEqualObfuscatedName) {
+  EXPECT_FALSE(SymbolRenaming1 == SymbolRenaming4);
+}
+
+TEST(SymbolRenamingEqualOperator, ComparingSymbolRenamingsNotEqualModule) {
+  EXPECT_FALSE(SymbolRenaming1 == SymbolRenaming5);
+}
diff --git a/swift/unittests/SwiftObfuscation/DataStructuresSerializationTests.cpp b/swift/unittests/SwiftObfuscation/DataStructuresSerializationTests.cpp
new file mode 100644
index 00000000000..5256568eb38
--- /dev/null
+++ b/swift/unittests/SwiftObfuscation/DataStructuresSerializationTests.cpp
@@ -0,0 +1,98 @@
+#include "swift/Obfuscation/DataStructures.h"
+#include "gtest/gtest.h"
+
+using namespace swift::json;
+using namespace llvm;
+
+TEST(DataStructuresSerialization, SerializeSymbol) {
+  Symbol Object("sampleIdentifier", "sampleName", "sampleModule");
+  
+  auto Serialized = serialize(Object);
+  
+  std::string Expected =
+  "{\n"
+  "  \"name\": \"sampleName\",\n"
+  "  \"identifier\": \"sampleIdentifier\",\n"
+  "  \"module\": \"sampleModule\"\n"
+  "}";
+  
+  EXPECT_EQ(Serialized, Expected);
+}
+
+TEST(DataStructuresSerialization, SerializeSymbolsJson) {
+  Symbol Symbol0("sampleIdentifier0", "sampleName0", "sampleModule0");
+  Symbol Symbol1("sampleIdentifier1", "sampleName1", "sampleModule1");
+  
+  auto Object = SymbolsJson();
+  Object.Symbols.push_back(Symbol0);
+  Object.Symbols.push_back(Symbol1);
+  
+  auto Serialized = serialize(Object);
+  
+  std::string Expected =
+  "{\n"
+  "  \"symbols\": [\n"
+  "    {\n"
+  "      \"name\": \"sampleName0\",\n"
+  "      \"identifier\": \"sampleIdentifier0\",\n"
+  "      \"module\": \"sampleModule0\"\n"
+  "    },\n"
+  "    {\n      \"name\": \"sampleName1\",\n"
+  "      \"identifier\": \"sampleIdentifier1\",\n"
+  "      \"module\": \"sampleModule1\"\n"
+  "    }\n"
+  "  ]\n"
+  "}";
+  
+  EXPECT_EQ(Serialized, Expected);
+}
+
+TEST(DataStructuresSerialization, SerializeSymbolRenaming) {
+  SymbolRenaming Object("sampleIdentifier", "sampleName", "sampleObfuscatedName", "sampleModule");
+  
+  auto Serialized = serialize(Object);
+  
+  std::string Expected =
+  "{\n"
+  "  \"identifier\": \"sampleIdentifier\",\n"
+  "  \"originalName\": \"sampleName\",\n"
+  "  \"obfuscatedName\": \"sampleObfuscatedName\",\n"
+  "  \"module\": \"sampleModule\"\n"
+  "}";
+  
+  EXPECT_EQ(Serialized, Expected);
+}
+
+
+TEST(DataStructuresSerialization, SerializeRenamesJson) {
+  SymbolRenaming Symbol0("sampleIdentifier0", "sampleName0", "sampleObfuscatedName0", "sampleModule0");
+  SymbolRenaming Symbol1("sampleIdentifier1", "sampleName1", "sampleObfuscatedName1", "sampleModule1");
+  
+  auto Object = RenamesJson();
+  Object.Symbols.push_back(Symbol0);
+  Object.Symbols.push_back(Symbol1);
+  
+  auto Serialized = serialize(Object);
+  
+  std::string Expected =
+  "{\n"
+  "  \"symbols\": [\n"
+  "    {\n"
+  "      \"identifier\": \"sampleIdentifier0\",\n"
+  "      \"originalName\": \"sampleName0\",\n"
+  "      \"obfuscatedName\": \"sampleObfuscatedName0\",\n"
+  "      \"module\": \"sampleModule0\"\n"
+  "    },\n"
+  "    {\n"
+  "      \"identifier\": \"sampleIdentifier1\",\n"
+  "      \"originalName\": \"sampleName1\",\n"
+  "      \"obfuscatedName\": \"sampleObfuscatedName1\",\n"
+  "      \"module\": \"sampleModule1\"\n"
+  "    }\n"
+  "  ]\n"
+  "}";
+  
+  EXPECT_EQ(Serialized, Expected);
+}
+
+
-- 
2.17.1 (Apple Git-112)


From a795e0c5bbb3518be66a3e58eb94292069a225f1 Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Mon, 22 Jan 2018 16:49:22 +0100
Subject: [PATCH 032/138] Updated constructors renaming documentation

Reviewers: jakub.sowa, krzysztof.siejkowski

Reviewed By: jakub.sowa, krzysztof.siejkowski

Subscribers: jakub.sowa, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2772
---
 Documentation/Constructors.md | 170 ++++++++++++----------------------
 1 file changed, 60 insertions(+), 110 deletions(-)

diff --git a/Documentation/Constructors.md b/Documentation/Constructors.md
index 46c68437b35..9e3d3f3a98c 100644
--- a/Documentation/Constructors.md
+++ b/Documentation/Constructors.md
@@ -1,149 +1,99 @@
 # Constructors Renaming
 
-# Finding constructors declarations and calls in source code
+# Finding constructor calls in source code
 
-After compiling source code we extract Decl objects. To determine if the Decl object represents either constructor declaration or call we cast Decl to ConstructorDecl using dyn_cast.
-```
-if (auto *ConstructorDeclaration = dyn_cast<ConstructorDecl>(BaseDeclaration)) { ... }
-```
-
-We can also identify that Decl relates to constructor by retrieving it's kind name:
-```
-auto DeclKind = BaseDeclaration->getKind();
-auto KindName = BaseDeclaration->getKindName(DeclKind);
-```
-
-# Use Cases
-
-When renaming constructors various cases were considered. For each case we gathered ideas and Swift Compilator solutions to differenciate constructor definitions and calls in source code.
-
-## Structs
-
-### Empty struct without init
-
-#### Declaration
-
-No explicit constructor declaration in source code - nothing to obfuscate.
+## Creating AST
 
-#### Call
+After passing project source files to `CompilerInstance` via  `CompilerInvocationConfiguration` the AST is created by calling:
 
-To identify the constructor type we check the result type by calling:
 ```
-Decl->getResultInterfaceType()
+CompilerInstance.performSema();
 ```
+Next, we retrieve source files representations by calling
 
-### Empty struct with custom empty init
-
-**TODO: Differenciate constructor declarations from calls**
-
-#### Declaration
-
-To identify the constructor type we check the result type by calling:
 ```
-Decl->getResultInterfaceType()
+ComplierInstance.getMainModule()->getFiles();
 ```
+and cast each `FileUnit` object to `SourceFile`.
 
-#### Call
-
-To identify the constructor type we check the result type by calling:
-```
-Decl->getResultInterfaceType()
-```
-
-### Struct with property and memberwise init
-
-**TODO: Differenciate constructor declarations from calls**
-
-#### Declaration
-
-To identify the constructor type we check the result type by calling:
-```
-Decl->getResultInterfaceType()
-```
+For finding constructor calls we use `RenamesCollector`. It's a subclass of `SourceEntityWalker` - part of swiftAST toolchain for traversing AST and providing source information.
 
-#### Call
+We pass  `SourceFile` objects one by one to `RenamesCollector`:
 
-To identify the constructor type we check the result type by calling:
 ```
-Decl->getResultInterfaceType()
+RenamesCollector.walk(SourceFile);
 ```
+and use `SourceEntityWalker`'s callbacks to find constuctor calls.
 
-## Classes
-
-### Empty class without init
-
-**TODO: Differenciate constructor declarations from calls**
+## Finding constructor calls in AST
 
-#### Declaration
+For finding constructor calls while traversing AST we use `SourceEntityWalker`'s callback overriden by `RenamesCollector`:
 
-To identify the constructor type we check the result type by calling:
 ```
-Decl->getResultInterfaceType()
+bool visitDeclReference(ValueDecl *Declaration, CharSourceRange Range,
+TypeDecl *CtorTyRef, ExtensionDecl *ExtTyRef,
+Type T, ReferenceMetaData Data)
 ```
+If `CtorTyRef` parameter is non-null, it means that we've found constructor declaration reference and it represents the type owning this constructor.
 
-#### Call
+## Renaming
 
-To identify the constructor type we check the result type by calling:
-```
-Decl->getResultInterfaceType()
-```
+After casting `CtorTyRef` to `NominalTypeDecl` it is represented in `symbols.json` the same way as type declaration. This way we ensure that each constructor is renamed to the same name as the type of object it is constructing.
 
-### Empty class with custom empty init
+Currently only the constructor calls' names are being renamed. If the constructor has arguments, their names are not being renamed in neither constructor declarations nor calls.
 
-**TODO: Differenciate constructor declarations from calls**
+## Examples
 
-#### Declaration
+### Example 1: Implicit / empty init
 
-To identify the constructor type we check the result type by calling:
-```
-Decl->getResultInterfaceType()
-```
+```swift
+struct Sample { }
+struct Sample { init {} }
+let sample = Sample()
+let sample2 = Sample.init()
 
-#### Call
+———————————————————————————
 
-To identify the constructor type we check the result type by calling:
-```
-Decl->getResultInterfaceType()
+struct ObfuscatedSample { }
+struct ObfuscatedSample { init {} }
+let sample = ObfuscatedSample()
+let sample2 = ObfuscatedSample.init()
 ```
 
-### Empty class without init - subclass of UIViewController
-
-**TODO: Differenciate constructor declarations from calls**
+### Example 2: Memberwise init
 
-#### Declaration
-
-To identify the constructor type we check the result type by calling:
-```
-Decl->getResultInterfaceType()
-```
+```swift
+struct Sample {
+  let number: Int
+  let text: String
+}
+let sample = Sample(number: 42, text: "24")
+let sample2 = Sample.init(number: 42, text: "24")
 
-#### Call
+———————————————————————————————————————————
 
-To identify the constructor type we check the result type by calling:
-```
-Decl->getResultInterfaceType()
+struct ObfuscatedSample {
+  let number: Int
+  let text: String
+}
+let sample = ObfuscatedSample(number: 42, text: "24")
+let sample2 = ObfuscatedSample.init(number: 42, text: "24")
 ```
 
-### Empty subclass of UIViewController with custom init and `required init?(coder aDecoder: NSCoder)`
-
-**TODO: Differenciate constructor declarations from calls**
+### Example 3: Init with arguments
 
-#### Declaration
+```swift
+struct Sample {
+  init(number: Int, text: String) { /* ... */ }
+}
+let sample = Sample(number: 42, text: "24")
+let sample2 = Sample.init(number: 42, text: "24")
 
-To identify the custom constructor type we check the result type by calling:
-```
-Decl->getResultInterfaceType()
-```
+———————————————————————————————————————————
 
-For  `required init?(coder aDecoder: NSCoder)` getRequiredInterfactType() returns error. We can handle it by checking:
-```
-if (ConstructorDeclaration->getInterfaceType()->getKind() == TypeKind::Error) { ... }
+struct ObfuscatedSample {
+  init(number: Int, text: String) { /* ... */ }
+}
+let sample = ObfuscatedSample(number: 42, text: "24")
+let sample2 = ObfuscatedSample.init(number: 42, text: "24")
 ```
-
-#### Call
-
-To identify the custom constructor type we check the result type by calling:
-```
-Decl->getResultInterfaceType()
-```
-
-- 
2.17.1 (Apple Git-112)


From cc9d93d8413f5816c4e422c643058293bbe31bee Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Mon, 22 Jan 2018 15:15:26 +0100
Subject: [PATCH 033/138] Support from overriden methods

Reviewers: jakub.sowa, jerzy.kleszcz

Reviewed By: jakub.sowa, jerzy.kleszcz

Subscribers: jakub.sowa, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2771
---
 README.md                                     | 10 ++-
 .../swift/Obfuscation/DataStructures.h        | 31 +++++++--
 swift/lib/Obfuscation/DataStructures.cpp      | 48 +++++++++++--
 swift/lib/Obfuscation/DeclarationParser.cpp   | 67 ++++++++++++++-----
 swift/lib/Obfuscation/NameMapping.cpp         | 41 +++++++++---
 .../DataStructuresDeserializationTests.cpp    | 55 ++++++++++-----
 .../DataStructuresOperatorsTests.cpp          | 32 ++++++---
 .../DataStructuresSerializationTests.cpp      | 53 +++++++++++----
 .../SwiftObfuscation/FileIOTests.cpp          | 13 ++--
 9 files changed, 266 insertions(+), 84 deletions(-)

diff --git a/README.md b/README.md
index 81cd58f1213..06452ec95a0 100644
--- a/README.md
+++ b/README.md
@@ -46,7 +46,8 @@ The output data format is called `Symbols.json` and presented below:
     {
       "identifier": <string>,
       "name": <string>,
-      "module": <string>
+      "module": <string>,
+      "type": <enum string>("type", "namedFunction", "operator")
     }
   ]
 }
@@ -60,6 +61,8 @@ The output data format is called `Symbols.json` and presented below:
 
 `module` contains the name of the module that allows us to identify whether the symbol should be included in renaming or not.
 
+`type` contains the type of the symbol. It's a string of value from a strictly limited enumeration. `type` means that the symbol represents type (like class or struct name), `namedFunction` means that the symbol represents function or method with name, and `operator` means that the symbol represents the operator.
+
 ## Feature list
 
 - [] TBA
@@ -97,7 +100,8 @@ The output format is called `Renames.json` and presented below:
       "identifier": <string>,
       "originalName": <string>,
       "obfuscatedName": <string>,
-      "module": <string>
+      "module": <string>,
+      "type": <enum string>("type", "namedFunction", "operator")
     }
   ]
 }
@@ -105,7 +109,7 @@ The output format is called `Renames.json` and presented below:
 
 `symbols` is an array of objects containing the original name of symbol, its identifier and the proposes obfuscated name.
 
-`originalName` and `identifier` and `module` are the same as `name` and `identifier` and `module` fields in the `Symbols.json` format, respectively.
+`originalName` and `identifier` and `module` and `type` are the same as `name` and `identifier` and `module` and `type` fields in the `Symbols.json` format, respectively.
 
 `obfuscatedName` is the proposed name that the original name of symbol should be changed to.
 
diff --git a/swift/include/swift/Obfuscation/DataStructures.h b/swift/include/swift/Obfuscation/DataStructures.h
index 1c8d8bff61f..e1d65d90e62 100644
--- a/swift/include/swift/Obfuscation/DataStructures.h
+++ b/swift/include/swift/Obfuscation/DataStructures.h
@@ -39,16 +39,28 @@ struct FilesJson {
   std::vector<ExplicitelyLinkedFrameworks> ExplicitelyLinkedFrameworks;
 };
 
+enum class SymbolType: int {
+  
+  Type,
+  
+  NamedFunction,
+  
+  Operator
+  
+};
+
 struct Symbol {
   std::string Identifier;
   std::string Name;
   std::string Module;
+  SymbolType Type;
   
   Symbol() = default;
   
   Symbol(const std::string &Identifier,
          const std::string &Name,
-         const std::string &Module);
+         const std::string &Module,
+         SymbolType Type);
   
   bool operator< (const Symbol &Right) const;
   bool operator== (const Symbol &Right) const;
@@ -63,13 +75,15 @@ struct SymbolRenaming {
   std::string OriginalName;
   std::string ObfuscatedName;
   std::string Module;
+  SymbolType Type;
   
   SymbolRenaming() = default;
   
   SymbolRenaming(const std::string &Identifier,
          const std::string &OriginalName,
          const std::string &ObfuscatedName,
-         const std::string &Module);
+         const std::string &Module,
+         SymbolType Type);
   
   bool operator== (const SymbolRenaming &Right) const;
 };
@@ -86,8 +100,7 @@ struct SymbolWithRange {
   
   /// @brief Trivial memberwise-like constructor
   SymbolWithRange(const swift::obfuscation::Symbol &Symbol,
-                  const CharSourceRange &Range)
-  : Symbol(Symbol), Range(Range) {}
+                  const CharSourceRange &Range);
   
   /// @brief Comparison operator required for containing SymbolWithRange in
   /// sets. It's taking into consideration both symbol identifier and range.
@@ -133,6 +146,11 @@ template <>
 struct MappingTraits<SymbolsJson> {
   static void mapping(IO &Io, SymbolsJson &Object);
 };
+  
+template <>
+struct ScalarEnumerationTraits<SymbolType> {
+  static void enumeration(IO &Io, SymbolType &Enum);
+};
 
 template <>
 struct MappingTraits<Symbol> {
@@ -170,6 +188,11 @@ template <>
 struct ObjectTraits<SymbolsJson> {
   static void mapping(Output &Out, SymbolsJson &Object);
 };
+  
+template <>
+struct ScalarEnumerationTraits<SymbolType> {
+  static void enumeration(Output &Out, SymbolType &Enum);
+};
 
 template <>
 struct ObjectTraits<Symbol> {
diff --git a/swift/lib/Obfuscation/DataStructures.cpp b/swift/lib/Obfuscation/DataStructures.cpp
index 48974ce5438..40369533f0d 100644
--- a/swift/lib/Obfuscation/DataStructures.cpp
+++ b/swift/lib/Obfuscation/DataStructures.cpp
@@ -5,11 +5,18 @@ using namespace swift::obfuscation;
 
 namespace swift {
 namespace obfuscation {
+  
+namespace SymbolTypeKeys {
+  static const char* Type = "type";
+  static const char* NamedFunction = "namedFunction";
+  static const char* Operator = "operator";
+}
 
 Symbol::Symbol(const std::string &Identifier,
        const std::string &Name,
-       const std::string &Module)
-: Identifier(Identifier), Name(Name), Module(Module) {};
+       const std::string &Module,
+       SymbolType Type)
+: Identifier(Identifier), Name(Name), Module(Module), Type(Type) {};
 
 bool Symbol::operator< (const Symbol &Right) const {
   return Identifier < Right.Identifier;
@@ -18,20 +25,27 @@ bool Symbol::operator< (const Symbol &Right) const {
 bool Symbol::operator== (const Symbol &Right) const {
   return Identifier == Right.Identifier
   && Name == Right.Name
-  && Module == Right.Module;
+  && Module == Right.Module
+  && Type == Right.Type;
 }
   
 SymbolRenaming::SymbolRenaming(const std::string &Identifier,
                                const std::string &OriginalName,
                                const std::string &ObfuscatedName,
-                               const std::string &Module)
-: Identifier(Identifier), OriginalName(OriginalName), ObfuscatedName(ObfuscatedName), Module(Module) {};
+                               const std::string &Module,
+                               SymbolType Type)
+: Identifier(Identifier),
+  OriginalName(OriginalName),
+  ObfuscatedName(ObfuscatedName),
+  Module(Module),
+  Type(Type) {};
 
 bool SymbolRenaming::operator== (const SymbolRenaming &Right) const {
   return Identifier == Right.Identifier
   && ObfuscatedName == Right.ObfuscatedName
   && OriginalName == Right.OriginalName
-  && Module == Right.Module;
+  && Module == Right.Module
+  && Type == Right.Type;
 }
 
 const char* pointerToRangeValue(const SymbolWithRange &Symbol) {
@@ -39,6 +53,10 @@ const char* pointerToRangeValue(const SymbolWithRange &Symbol) {
   return static_cast<const char *>(Pointer);
 }
 
+SymbolWithRange::SymbolWithRange(const swift::obfuscation::Symbol &Symbol,
+                                 const CharSourceRange &Range)
+: Symbol(Symbol), Range(Range) {}
+  
 bool SymbolWithRange::operator< (const SymbolWithRange &Right) const {
   auto less = std::less<const char *>();
   if (const auto* RangeValuePointer = pointerToRangeValue(*this)) {
@@ -91,11 +109,19 @@ void MappingTraits<ELF>::mapping(IO &Io, ELF &Object) {
 void MappingTraits<SymbolsJson>::mapping(IO &Io, SymbolsJson &Object) {
   Io.mapRequired("symbols", Object.Symbols);
 }
+  
+void ScalarEnumerationTraits<SymbolType>::enumeration(IO &Io,
+                                                      SymbolType &Enum) {
+  Io.enumCase(Enum, SymbolTypeKeys::Type, SymbolType::Type);
+  Io.enumCase(Enum, SymbolTypeKeys::NamedFunction, SymbolType::NamedFunction);
+  Io.enumCase(Enum, SymbolTypeKeys::Operator, SymbolType::Operator);
+}
 
 void MappingTraits<Symbol>::mapping(IO &Io, Symbol &Object) {
   Io.mapRequired("identifier", Object.Identifier);
   Io.mapRequired("name", Object.Name);
   Io.mapRequired("module", Object.Module);
+  Io.mapRequired("type", Object.Type);
 }
 
 void MappingTraits<RenamesJson>::mapping(IO &Io, RenamesJson &Object) {
@@ -107,6 +133,7 @@ void MappingTraits<SymbolRenaming>::mapping(IO &Io, SymbolRenaming &Object) {
   Io.mapRequired("originalName", Object.OriginalName);
   Io.mapRequired("obfuscatedName", Object.ObfuscatedName);
   Io.mapRequired("module", Object.Module);
+  Io.mapRequired("type", Object.Type);
 }
 
 template <typename U>
@@ -154,11 +181,19 @@ namespace json {
 void ObjectTraits<SymbolsJson>::mapping(Output &Out, SymbolsJson &Object) {
   Out.mapRequired("symbols", Object.Symbols);
 }
+  
+void ScalarEnumerationTraits<SymbolType>::enumeration(Output &Out,
+                                                      SymbolType &Enum) {
+  Out.enumCase(Enum, SymbolTypeKeys::Type, SymbolType::Type);
+  Out.enumCase(Enum, SymbolTypeKeys::NamedFunction, SymbolType::NamedFunction);
+  Out.enumCase(Enum, SymbolTypeKeys::Operator, SymbolType::Operator);
+}
 
 void ObjectTraits<Symbol>::mapping(Output &Out, Symbol &Object) {
   Out.mapRequired("name", Object.Name);
   Out.mapRequired("identifier", Object.Identifier);
   Out.mapRequired("module", Object.Module);
+  Out.mapRequired("type", Object.Type);
 }
 
 void ObjectTraits<RenamesJson>::mapping(Output &Out, RenamesJson &Object) {
@@ -171,6 +206,7 @@ void ObjectTraits<SymbolRenaming>::mapping(Output &Out,
   Out.mapRequired("originalName", Object.OriginalName);
   Out.mapRequired("obfuscatedName", Object.ObfuscatedName);
   Out.mapRequired("module", Object.Module);
+  Out.mapRequired("type", Object.Type);
 }
 
 template<class T>
diff --git a/swift/lib/Obfuscation/DeclarationParser.cpp b/swift/lib/Obfuscation/DeclarationParser.cpp
index bbc7d1bf7da..3e100df208b 100644
--- a/swift/lib/Obfuscation/DeclarationParser.cpp
+++ b/swift/lib/Obfuscation/DeclarationParser.cpp
@@ -70,7 +70,10 @@ llvm::Expected<Symbol> parse(const NominalTypeDecl* Declaration) {
     return stringError("found unsupported declaration type");
   }
   
-  return Symbol(combineIdentifier(Parts), SymbolName, ModuleNameAndParts.first);
+  return Symbol(combineIdentifier(Parts),
+                SymbolName,
+                ModuleNameAndParts.first,
+                SymbolType::Type);
 }
   
 std::string functionName(const FuncDecl* Declaration) {
@@ -78,11 +81,6 @@ std::string functionName(const FuncDecl* Declaration) {
 }
   
 llvm::Error isDeclarationSupported(const FuncDecl* Declaration) {
-  if (Declaration->getOverriddenDecl() != nullptr) {
-    return stringError("don't support overriding methods right now, since it "
-                       "requires information over what module the overriding "
-                       "method is from");
-  }
   if (Declaration->isBinaryOperator() || Declaration->isUnaryOperator()) {
     return stringError("don't support operators right now, since it requires "
                        "the special obfuscated identifier");
@@ -98,14 +96,21 @@ llvm::Error isDeclarationSupported(const FuncDecl* Declaration) {
   return llvm::Error::success();
 }
   
-llvm::Expected<Symbol> parse(const FuncDecl* Declaration) {
-  if (auto Error = isDeclarationSupported(Declaration)) {
-    return std::move(Error);
+const FuncDecl*
+baseOverridenDeclarationWithModules(const FuncDecl* Declaration,
+                                    std::set<std::string> &Modules) {
+  if (auto* OverrideDeclaration = Declaration->getOverriddenDecl()) {
+    Modules.insert(moduleName(OverrideDeclaration));
+    return baseOverridenDeclarationWithModules(OverrideDeclaration, Modules);
+  } else {
+    return Declaration;
   }
+}
+  
+Symbol symbolFromFunctionDeclaration(const swift::FuncDecl *Declaration,
+                                     std::string &ModuleName,
+                                     std::vector<std::string> &Parts) {
   
-  auto ModuleNameAndParts = moduleNameAndParts(Declaration);
-  std::string ModuleName = ModuleNameAndParts.first;
-  std::vector<std::string> Parts = ModuleNameAndParts.second;
   std::string SymbolName = functionName(Declaration);
   
   auto ProtocolRequirements = Declaration->getSatisfiedProtocolRequirements();
@@ -119,9 +124,9 @@ llvm::Expected<Symbol> parse(const FuncDecl* Declaration) {
       Parts.push_back("function." + SymbolName);
     } else {
       Parts.push_back("type." + TypeNameOrError.get());
-      Parts.push_back("method." + SymbolName);  
+      Parts.push_back("method." + SymbolName);
     }
-      
+    
   } else {
     
     // TODO: right now we're renaming all the methods in the protocols with
@@ -140,7 +145,6 @@ llvm::Expected<Symbol> parse(const FuncDecl* Declaration) {
     }
     Parts.push_back("protocol");
     Parts.push_back("method." + SymbolName);
-    
   }
   
   if (Declaration->getDeclContext()->isTypeContext()) {
@@ -150,7 +154,38 @@ llvm::Expected<Symbol> parse(const FuncDecl* Declaration) {
     Parts.push_back("signature." + Declaration->getInterfaceType().getString());
   }
   
-  return Symbol(combineIdentifier(Parts), SymbolName, ModuleName);
+  return Symbol(combineIdentifier(Parts),
+                SymbolName,
+                ModuleName,
+                SymbolType::NamedFunction);
+}
+  
+llvm::Expected<Symbol> parse(const FuncDecl* Declaration) {
+
+  if (auto Error = isDeclarationSupported(Declaration)) {
+    return std::move(Error);
+  }
+  
+  auto ModuleNameAndParts = moduleNameAndParts(Declaration);
+  std::string ModuleName = ModuleNameAndParts.first;
+  std::vector<std::string> Parts = ModuleNameAndParts.second;
+  
+  if (Declaration->getOverriddenDecl() != nullptr) {
+    
+    std::set<std::string> Modules;
+    auto Base = baseOverridenDeclarationWithModules(Declaration, Modules);
+    
+    if (Modules.size() == 1 && Modules.count(ModuleName) == 1) {
+      
+      return symbolFromFunctionDeclaration(Base, ModuleName, Parts);
+      
+    } else {
+      return stringError("only method overriding methods from the same module "
+                         "might be safely obfuscated");
+    }
+    
+  }
+  return symbolFromFunctionDeclaration(Declaration, ModuleName, Parts);
 }
 
 llvm::Expected<Symbol> parse(const ValueDecl* Declaration) {
diff --git a/swift/lib/Obfuscation/NameMapping.cpp b/swift/lib/Obfuscation/NameMapping.cpp
index 9322d141dff..ec77ed1e123 100644
--- a/swift/lib/Obfuscation/NameMapping.cpp
+++ b/swift/lib/Obfuscation/NameMapping.cpp
@@ -9,7 +9,7 @@
 namespace swift {
 namespace obfuscation {
 
-class UniqueTypeNameGenerator {
+class UniqueIdentifierGenerator {
   
 private:
   std::set<std::string> GeneratedSymbols;
@@ -45,7 +45,7 @@ private:
   
 public:
   
-  UniqueTypeNameGenerator()
+  UniqueIdentifierGenerator()
   : TailSymbols(concatenateHeadAndTailSymbols()),
   HeadGenerator(HeadSymbols),
   TailGenerator(TailSymbols) {}
@@ -56,18 +56,36 @@ public:
   
 };
   
-const std::vector<std::string> UniqueTypeNameGenerator::UniquelyTailSymbols =
+const std::vector<std::string> UniqueIdentifierGenerator::UniquelyTailSymbols =
   {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
   
-const std::vector<std::string> UniqueTypeNameGenerator::HeadSymbols =
-  {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o",
-   "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D",
-   "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S",
-   "T", "U", "V", "W", "X", "Y", "Z"};
+const std::vector<std::string> UniqueIdentifierGenerator::HeadSymbols =
+  {"_", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n",
+   "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C",
+   "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R",
+   "S", "T", "U", "V", "W", "X", "Y", "Z"};
+  
+struct ObfuscatedIdentifiersGenerators {
+  UniqueIdentifierGenerator IdentifierGenerator;
+};
 
-llvm::Expected<RenamesJson> proposeRenamings(const SymbolsJson &SymbolsJson) {
+llvm::Expected<std::string>
+generateNameForType(ObfuscatedIdentifiersGenerators &Generators,
+                    SymbolType Type) {
+  switch (Type) {
+    case SymbolType::Type:
+      return Generators.IdentifierGenerator.generateName();
+    case SymbolType::NamedFunction:
+      return Generators.IdentifierGenerator.generateName();
+    case SymbolType::Operator:
+      return stringError("Operator names are not supported yet");
+  }
+}
+  
+llvm::Expected<RenamesJson>
+proposeRenamings(const SymbolsJson &SymbolsJson) {
   
-  UniqueTypeNameGenerator TypeNameGenerator;
+  ObfuscatedIdentifiersGenerators Generators;
   RenamesJson RenamesJson;
   
   for (const auto &Symbol : SymbolsJson.Symbols) {
@@ -75,7 +93,8 @@ llvm::Expected<RenamesJson> proposeRenamings(const SymbolsJson &SymbolsJson) {
     Renaming.Identifier = Symbol.Identifier;
     Renaming.OriginalName = Symbol.Name;
     Renaming.Module = Symbol.Module;
-    auto NameOrError = TypeNameGenerator.generateName();
+    Renaming.Type = Symbol.Type;
+    auto NameOrError = generateNameForType(Generators, Symbol.Type);
     if (auto Error = NameOrError.takeError()) {
       return std::move(Error);
     }
diff --git a/swift/unittests/SwiftObfuscation/DataStructuresDeserializationTests.cpp b/swift/unittests/SwiftObfuscation/DataStructuresDeserializationTests.cpp
index bb36f852ac0..63e05436de3 100644
--- a/swift/unittests/SwiftObfuscation/DataStructuresDeserializationTests.cpp
+++ b/swift/unittests/SwiftObfuscation/DataStructuresDeserializationTests.cpp
@@ -90,12 +90,20 @@ TEST(DataStructuresDeserialization, DeserializeSymbolsJson) {
   "{\n"
   "\"name\": \"sampleName0\",\n"
   "\"identifier\": \"sampleIdentifier0\",\n"
-  "\"module\": \"sampleModule0\"\n"
+  "\"module\": \"sampleModule0\",\n"
+  "\"type\": \"type\"\n"
   "},\n"
   "{\n"
   "\"name\": \"sampleName1\",\n"
   "\"identifier\": \"sampleIdentifier1\",\n"
-  "\"module\": \"sampleModule1\"\n"
+  "\"module\": \"sampleModule1\",\n"
+  "\"type\": \"namedFunction\"\n"
+  "},\n"
+  "{\n"
+  "\"name\": \"sampleName2\",\n"
+  "\"identifier\": \"sampleIdentifier2\",\n"
+  "\"module\": \"sampleModule2\",\n"
+  "\"type\": \"operator\"\n"
   "}\n"
   "]\n"
   "}";
@@ -108,25 +116,28 @@ TEST(DataStructuresDeserialization, DeserializeSymbolsJson) {
   }
   auto Deserialized = DeserializedOrError.get();
   
-  size_t ExpectedSize = 2;
+  size_t ExpectedSize = 3;
   EXPECT_EQ(Deserialized.Symbols.size(), ExpectedSize);
 
-  Symbol Expected0("sampleIdentifier0", "sampleName0", "sampleModule0");
-  Symbol Expected1("sampleIdentifier1", "sampleName1", "sampleModule1");
+  Symbol Expected0("sampleIdentifier0", "sampleName0", "sampleModule0", SymbolType::Type);
+  Symbol Expected1("sampleIdentifier1", "sampleName1", "sampleModule1", SymbolType::NamedFunction);
+  Symbol Expected2("sampleIdentifier2", "sampleName2", "sampleModule2", SymbolType::Operator);
 
   EXPECT_TRUE(vectorContains<Symbol>(Deserialized.Symbols, Expected0));
   EXPECT_TRUE(vectorContains<Symbol>(Deserialized.Symbols, Expected1));
+  EXPECT_TRUE(vectorContains<Symbol>(Deserialized.Symbols, Expected2));
 }
 
 TEST(DataStructuresDeserialization, DeserializeSymbol) {
   std::string JsonString = "{\n"
   "\"name\": \"sampleName\"\n,"
   "\"identifier\": \"sampleIdentifier\",\n"
+  "\"type\": \"type\",\n"
   "\"module\": \"sampleModule\"\n}";
 
   auto DeserializedOrError = deserialize<Symbol>(JsonString);
 
-  Symbol Expected("sampleIdentifier", "sampleName", "sampleModule");
+  Symbol Expected("sampleIdentifier", "sampleName", "sampleModule", SymbolType::Type);
 
   if (auto ErrorCode = DeserializedOrError.takeError()) {
     llvm::consumeError(std::move(ErrorCode));
@@ -145,13 +156,22 @@ TEST(DataStructuresDeserialization, DeserializeRenamesJson) {
   "\"identifier\": \"sampleIdentifier0\",\n"
   "\"originalName\": \"sampleName0\",\n"
   "\"obfuscatedName\": \"sampleObfuscatedName0\",\n"
-  "\"module\": \"sampleModule0\"\n"
+  "\"module\": \"sampleModule0\",\n"
+  "\"type\": \"type\"\n"
   "},\n"
   "{\n"
   "\"identifier\": \"sampleIdentifier1\",\n"
   "\"originalName\": \"sampleName1\",\n"
   "\"obfuscatedName\": \"sampleObfuscatedName1\",\n"
-  "\"module\": \"sampleModule1\"\n"
+  "\"module\": \"sampleModule1\",\n"
+  "\"type\": \"namedFunction\"\n"
+  "},\n"
+  "{\n"
+  "\"identifier\": \"sampleIdentifier2\",\n"
+  "\"originalName\": \"sampleName2\",\n"
+  "\"obfuscatedName\": \"sampleObfuscatedName2\",\n"
+  "\"module\": \"sampleModule2\",\n"
+  "\"type\": \"operator\"\n"
   "}\n"
   "]\n"
   "}";
@@ -164,14 +184,16 @@ TEST(DataStructuresDeserialization, DeserializeRenamesJson) {
   }
   auto Deserialized = DeserializedOrError.get();
   
-  size_t ExpectedSize = 2;
+  size_t ExpectedSize = 3;
   EXPECT_EQ(Deserialized.Symbols.size(), ExpectedSize);
 
-  SymbolRenaming Expected0("sampleIdentifier0", "sampleName0", "sampleObfuscatedName0", "sampleModule0");
-  SymbolRenaming Expected1("sampleIdentifier1", "sampleName1", "sampleObfuscatedName1", "sampleModule1");
+  SymbolRenaming Expected0("sampleIdentifier0", "sampleName0", "sampleObfuscatedName0", "sampleModule0", SymbolType::Type);
+  SymbolRenaming Expected1("sampleIdentifier1", "sampleName1", "sampleObfuscatedName1", "sampleModule1", SymbolType::NamedFunction);
+  SymbolRenaming Expected2("sampleIdentifier2", "sampleName2", "sampleObfuscatedName2", "sampleModule2", SymbolType::Operator);
 
   EXPECT_TRUE(vectorContains<SymbolRenaming>(Deserialized.Symbols, Expected0));
   EXPECT_TRUE(vectorContains<SymbolRenaming>(Deserialized.Symbols, Expected1));
+  EXPECT_TRUE(vectorContains<SymbolRenaming>(Deserialized.Symbols, Expected2));
 }
 
 TEST(DataStructuresDeserialization, DeserializeSymbolRenaming) {
@@ -179,15 +201,16 @@ TEST(DataStructuresDeserialization, DeserializeSymbolRenaming) {
   "\"originalName\": \"sampleName\"\n,"
   "\"identifier\": \"sampleIdentifier\",\n"
   "\"obfuscatedName\": \"sampleObfuscatedName\",\n"
+  "\"type\": \"type\",\n"
   "\"module\": \"sampleModule\"\n}";
 
   auto DeserializedOrError = deserialize<SymbolRenaming>(JsonString);
 
-  auto Expected = SymbolRenaming();
-  Expected.Identifier = "sampleIdentifier";
-  Expected.OriginalName = "sampleName";
-  Expected.ObfuscatedName = "sampleObfuscatedName";
-  Expected.Module = "sampleModule";
+  auto Expected = SymbolRenaming("sampleIdentifier",
+                                 "sampleName",
+                                 "sampleObfuscatedName",
+                                 "sampleModule",
+                                 SymbolType::Type);
   
   if (auto ErrorCode = DeserializedOrError.takeError()) {
     llvm::consumeError(std::move(ErrorCode));
diff --git a/swift/unittests/SwiftObfuscation/DataStructuresOperatorsTests.cpp b/swift/unittests/SwiftObfuscation/DataStructuresOperatorsTests.cpp
index 233648c600c..d9d2258c551 100644
--- a/swift/unittests/SwiftObfuscation/DataStructuresOperatorsTests.cpp
+++ b/swift/unittests/SwiftObfuscation/DataStructuresOperatorsTests.cpp
@@ -5,11 +5,12 @@ using namespace swift;
 using namespace swift::obfuscation;
 using namespace llvm;
 
-auto Symbol1 = Symbol("a_id", "a_name", "a_module");
-auto Symbol1_1 = Symbol("a_id", "a_name", "a_module");
-auto Symbol2 = Symbol("b_id", "a_name", "a_module");
-auto Symbol3 = Symbol("a_id", "b_name", "a_module");
-auto Symbol4 = Symbol("a_id", "a_name", "b_module");
+auto Symbol1 = Symbol("a_id", "a_name", "a_module", SymbolType::Operator);
+auto Symbol1_1 = Symbol("a_id", "a_name", "a_module", SymbolType::Operator);
+auto Symbol2 = Symbol("b_id", "a_name", "a_module", SymbolType::Operator);
+auto Symbol3 = Symbol("a_id", "b_name", "a_module", SymbolType::Operator);
+auto Symbol4 = Symbol("a_id", "a_name", "b_module", SymbolType::Operator);
+auto Symbol5 = Symbol("a_id", "a_name", "a_module", SymbolType::NamedFunction);
 
 TEST(SymbolLessThanOperator, ComparingIdentifierLess) {
   EXPECT_TRUE(Symbol1 < Symbol2);
@@ -39,6 +40,10 @@ TEST(SymbolEqualOperator, ComparingSymbolNotEqualModule) {
   EXPECT_FALSE(Symbol1 == Symbol4);
 }
 
+TEST(SymbolEqualOperator, ComparingSymbolNotEqualType) {
+  EXPECT_FALSE(Symbol1 == Symbol5);
+}
+
 std::string SourceContents = "sample source contents";
 
 auto SourceLoc1 = SourceLoc(SMLoc::getFromPointer(SourceContents.c_str()));
@@ -92,12 +97,13 @@ TEST(SymbolWithRangeLessThanOperator, ComparingSymbolsEqualRangesEqual) {
                < SymbolWithRange(Symbol1, SourceRange1));
 }
 
-auto SymbolRenaming1 = SymbolRenaming("a_id", "a_name", "a_obfuscated_name", "a_module");
-auto SymbolRenaming1_1 = SymbolRenaming("a_id", "a_name", "a_obfuscated_name", "a_module");
-auto SymbolRenaming2 = SymbolRenaming("b_id", "a_name", "a_obfuscated_name", "a_module");
-auto SymbolRenaming3 = SymbolRenaming("a_id", "b_name", "a_obfuscated_name", "a_module");
-auto SymbolRenaming4 = SymbolRenaming("a_id", "a_name", "b_obfuscated_name", "a_module");
-auto SymbolRenaming5 = SymbolRenaming("a_id", "a_name", "a_obfuscated_name", "b_module");
+auto SymbolRenaming1 = SymbolRenaming("a_id", "a_name", "a_obfuscated_name", "a_module", SymbolType::Type);
+auto SymbolRenaming1_1 = SymbolRenaming("a_id", "a_name", "a_obfuscated_name", "a_module", SymbolType::Type);
+auto SymbolRenaming2 = SymbolRenaming("b_id", "a_name", "a_obfuscated_name", "a_module", SymbolType::Type);
+auto SymbolRenaming3 = SymbolRenaming("a_id", "b_name", "a_obfuscated_name", "a_module", SymbolType::Type);
+auto SymbolRenaming4 = SymbolRenaming("a_id", "a_name", "b_obfuscated_name", "a_module", SymbolType::Type);
+auto SymbolRenaming5 = SymbolRenaming("a_id", "a_name", "a_obfuscated_name", "b_module", SymbolType::Type);
+auto SymbolRenaming6 = SymbolRenaming("a_id", "a_name", "a_obfuscated_name", "a_module", SymbolType::Operator);
 
 TEST(SymbolRenamingEqualOperator, ComparingSymbolRenamingsEqual) {
   EXPECT_TRUE(SymbolRenaming1 == SymbolRenaming1_1);
@@ -118,3 +124,7 @@ TEST(SymbolRenamingEqualOperator, ComparingSymbolRenamingsNotEqualObfuscatedName
 TEST(SymbolRenamingEqualOperator, ComparingSymbolRenamingsNotEqualModule) {
   EXPECT_FALSE(SymbolRenaming1 == SymbolRenaming5);
 }
+
+TEST(SymbolRenamingEqualOperator, ComparingSymbolRenamingsNotEqualType) {
+  EXPECT_FALSE(SymbolRenaming1 == SymbolRenaming6);
+}
diff --git a/swift/unittests/SwiftObfuscation/DataStructuresSerializationTests.cpp b/swift/unittests/SwiftObfuscation/DataStructuresSerializationTests.cpp
index 5256568eb38..25876a19ad9 100644
--- a/swift/unittests/SwiftObfuscation/DataStructuresSerializationTests.cpp
+++ b/swift/unittests/SwiftObfuscation/DataStructuresSerializationTests.cpp
@@ -5,7 +5,7 @@ using namespace swift::json;
 using namespace llvm;
 
 TEST(DataStructuresSerialization, SerializeSymbol) {
-  Symbol Object("sampleIdentifier", "sampleName", "sampleModule");
+  Symbol Object("sampleIdentifier", "sampleName", "sampleModule", SymbolType::Type);
   
   auto Serialized = serialize(Object);
   
@@ -13,19 +13,22 @@ TEST(DataStructuresSerialization, SerializeSymbol) {
   "{\n"
   "  \"name\": \"sampleName\",\n"
   "  \"identifier\": \"sampleIdentifier\",\n"
-  "  \"module\": \"sampleModule\"\n"
+  "  \"module\": \"sampleModule\",\n"
+  "  \"type\": \"type\"\n"
   "}";
   
   EXPECT_EQ(Serialized, Expected);
 }
 
 TEST(DataStructuresSerialization, SerializeSymbolsJson) {
-  Symbol Symbol0("sampleIdentifier0", "sampleName0", "sampleModule0");
-  Symbol Symbol1("sampleIdentifier1", "sampleName1", "sampleModule1");
+  Symbol Symbol0("sampleIdentifier0", "sampleName0", "sampleModule0", SymbolType::Type);
+  Symbol Symbol1("sampleIdentifier1", "sampleName1", "sampleModule1", SymbolType::NamedFunction);
+  Symbol Symbol2("sampleIdentifier2", "sampleName2", "sampleModule2", SymbolType::Operator);
   
   auto Object = SymbolsJson();
   Object.Symbols.push_back(Symbol0);
   Object.Symbols.push_back(Symbol1);
+  Object.Symbols.push_back(Symbol2);
   
   auto Serialized = serialize(Object);
   
@@ -35,11 +38,19 @@ TEST(DataStructuresSerialization, SerializeSymbolsJson) {
   "    {\n"
   "      \"name\": \"sampleName0\",\n"
   "      \"identifier\": \"sampleIdentifier0\",\n"
-  "      \"module\": \"sampleModule0\"\n"
+  "      \"module\": \"sampleModule0\",\n"
+  "      \"type\": \"type\"\n"
   "    },\n"
-  "    {\n      \"name\": \"sampleName1\",\n"
+  "    {\n"
+  "      \"name\": \"sampleName1\",\n"
   "      \"identifier\": \"sampleIdentifier1\",\n"
-  "      \"module\": \"sampleModule1\"\n"
+  "      \"module\": \"sampleModule1\",\n"
+  "      \"type\": \"namedFunction\"\n"
+  "    },\n"
+  "    {\n      \"name\": \"sampleName2\",\n"
+  "      \"identifier\": \"sampleIdentifier2\",\n"
+  "      \"module\": \"sampleModule2\",\n"
+  "      \"type\": \"operator\"\n"
   "    }\n"
   "  ]\n"
   "}";
@@ -48,7 +59,11 @@ TEST(DataStructuresSerialization, SerializeSymbolsJson) {
 }
 
 TEST(DataStructuresSerialization, SerializeSymbolRenaming) {
-  SymbolRenaming Object("sampleIdentifier", "sampleName", "sampleObfuscatedName", "sampleModule");
+  SymbolRenaming Object("sampleIdentifier",
+                        "sampleName",
+                        "sampleObfuscatedName",
+                        "sampleModule",
+                        SymbolType::Type);
   
   auto Serialized = serialize(Object);
   
@@ -57,7 +72,8 @@ TEST(DataStructuresSerialization, SerializeSymbolRenaming) {
   "  \"identifier\": \"sampleIdentifier\",\n"
   "  \"originalName\": \"sampleName\",\n"
   "  \"obfuscatedName\": \"sampleObfuscatedName\",\n"
-  "  \"module\": \"sampleModule\"\n"
+  "  \"module\": \"sampleModule\",\n"
+  "  \"type\": \"type\"\n"
   "}";
   
   EXPECT_EQ(Serialized, Expected);
@@ -65,12 +81,14 @@ TEST(DataStructuresSerialization, SerializeSymbolRenaming) {
 
 
 TEST(DataStructuresSerialization, SerializeRenamesJson) {
-  SymbolRenaming Symbol0("sampleIdentifier0", "sampleName0", "sampleObfuscatedName0", "sampleModule0");
-  SymbolRenaming Symbol1("sampleIdentifier1", "sampleName1", "sampleObfuscatedName1", "sampleModule1");
+  SymbolRenaming Symbol0("sampleIdentifier0", "sampleName0", "sampleObfuscatedName0", "sampleModule0", SymbolType::Type);
+  SymbolRenaming Symbol1("sampleIdentifier1", "sampleName1", "sampleObfuscatedName1", "sampleModule1", SymbolType::NamedFunction);
+  SymbolRenaming Symbol2("sampleIdentifier2", "sampleName2", "sampleObfuscatedName2", "sampleModule2", SymbolType::Operator);
   
   auto Object = RenamesJson();
   Object.Symbols.push_back(Symbol0);
   Object.Symbols.push_back(Symbol1);
+  Object.Symbols.push_back(Symbol2);
   
   auto Serialized = serialize(Object);
   
@@ -81,13 +99,22 @@ TEST(DataStructuresSerialization, SerializeRenamesJson) {
   "      \"identifier\": \"sampleIdentifier0\",\n"
   "      \"originalName\": \"sampleName0\",\n"
   "      \"obfuscatedName\": \"sampleObfuscatedName0\",\n"
-  "      \"module\": \"sampleModule0\"\n"
+  "      \"module\": \"sampleModule0\",\n"
+  "      \"type\": \"type\"\n"
   "    },\n"
   "    {\n"
   "      \"identifier\": \"sampleIdentifier1\",\n"
   "      \"originalName\": \"sampleName1\",\n"
   "      \"obfuscatedName\": \"sampleObfuscatedName1\",\n"
-  "      \"module\": \"sampleModule1\"\n"
+  "      \"module\": \"sampleModule1\",\n"
+  "      \"type\": \"namedFunction\"\n"
+  "    },\n"
+  "    {\n"
+  "      \"identifier\": \"sampleIdentifier2\",\n"
+  "      \"originalName\": \"sampleName2\",\n"
+  "      \"obfuscatedName\": \"sampleObfuscatedName2\",\n"
+  "      \"module\": \"sampleModule2\",\n"
+  "      \"type\": \"operator\"\n"
   "    }\n"
   "  ]\n"
   "}";
diff --git a/swift/unittests/SwiftObfuscation/FileIOTests.cpp b/swift/unittests/SwiftObfuscation/FileIOTests.cpp
index 7293af373d2..0f5c038acb2 100644
--- a/swift/unittests/SwiftObfuscation/FileIOTests.cpp
+++ b/swift/unittests/SwiftObfuscation/FileIOTests.cpp
@@ -128,10 +128,10 @@ TEST(ParseJson, SuccessParsingText) {
     EXPECT_EQ(FilesJson.Sdk.Path, SdkPath);
     std::vector<std::string> ExpectedFilenames = {FileName1, FileName2};
     EXPECT_EQ(FilesJson.Filenames, ExpectedFilenames);
-    EXPECT_EQ(FilesJson.ExplicitelyLinkedFrameworks.size(), 1);
+    EXPECT_EQ(FilesJson.ExplicitelyLinkedFrameworks.size(), 1U);
     EXPECT_EQ(FilesJson.ExplicitelyLinkedFrameworks[0].Name, ExplicitFrameworkName);
     EXPECT_EQ(FilesJson.ExplicitelyLinkedFrameworks[0].Path, ExplicitFrameworkPath);
-    EXPECT_EQ(FilesJson.SystemLinkedFrameworks.size(), 1);
+    EXPECT_EQ(FilesJson.SystemLinkedFrameworks.size(), 1U);
     EXPECT_EQ(FilesJson.SystemLinkedFrameworks[0], SystemFramework);
 }
 
@@ -174,7 +174,10 @@ struct FakeFileFactory: FileFactory<FakeFile> {
 
 TEST(WriteToFile, SuccessWriting) {
     std::string PathToOutput = "";
-    Symbol FakeSymbol = Symbol("testIdentifier", "testName", "testModule");
+    Symbol FakeSymbol = Symbol("testIdentifier",
+                               "testName",
+                               "testModule",
+                               SymbolType::Type);
     SymbolsJson JsonToWrite;
     JsonToWrite.Symbols.push_back(FakeSymbol);
     FakeFileFactory Factory = FakeFileFactory();
@@ -182,7 +185,9 @@ TEST(WriteToFile, SuccessWriting) {
     std::string Expected = "{\n  \"symbols\": [\n    {\n      "
         "\"name\": \"testName\",\n      "
         "\"identifier\": \"testIdentifier\",\n      "
-        "\"module\": \"testModule\"\n    }\n  ]\n}";
+        "\"module\": \"testModule\",\n      "
+        "\"type\": \"type\"\n    "
+        "}\n  ]\n}";
 
     auto Error = writeToPath(JsonToWrite,
                              PathToOutput,
-- 
2.17.1 (Apple Git-112)


From dde949b4859f8110bcefa57c595f539c7b9d55b4 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Wed, 24 Jan 2018 18:26:30 +0100
Subject: [PATCH 034/138] Run unit tests on CI

Summary:
Run lit tests on CI

Fix for failing lit test

Reviewers: jerzy.kleszcz, jakub.sowa

Reviewed By: jerzy.kleszcz, jakub.sowa

Subscribers: jerzy.kleszcz, jakub.sowa

Differential Revision: https://phabricator.polidea.com/D2778
---
 .gitlab-ci.yml                           | 3 +++
 Scripts/run_tests_locally.sh             | 8 ++++++++
 Scripts/run_tests_on_ci.sh               | 4 +++-
 swift/test/Obfuscation/Inputs/Files.json | 5 ++++-
 4 files changed, 18 insertions(+), 2 deletions(-)
 create mode 100644 Scripts/run_tests_locally.sh

diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml
index f6c70102944..f0980435476 100644
--- a/.gitlab-ci.yml
+++ b/.gitlab-ci.yml
@@ -5,6 +5,7 @@ obfuscator_debug:
         - /bin/bash Scripts/setup_from_cache.sh
     script:
         - /bin/bash Scripts/build.sh
+        - /bin/bash Scripts/run_tests_on_ci.sh
         - /bin/bash Scripts/process_build_artifacts.sh
     tags:
         - xcode-9.0
@@ -18,6 +19,7 @@ obfuscator_master:
         - /bin/bash Scripts/setup_from_cache.sh
     script:
         - /bin/bash Scripts/build.sh
+        - /bin/bash Scripts/run_tests_on_ci.sh
         - /bin/bash Scripts/process_build_artifacts.sh
     tags:
         - xcode-9.0
@@ -28,6 +30,7 @@ obfuscator_release:
     stage: test
     script:
         - /bin/bash Scripts/build.sh
+        - /bin/bash Scripts/run_tests_on_ci.sh
         - /bin/bash Scripts/process_build_artifacts.sh
     tags:
         - xcode-9.0
diff --git a/Scripts/run_tests_locally.sh b/Scripts/run_tests_locally.sh
new file mode 100644
index 00000000000..f0cfd9c33c2
--- /dev/null
+++ b/Scripts/run_tests_locally.sh
@@ -0,0 +1,8 @@
+#!/bin/bash
+
+xcodebuild -project build/Xcode-RelWithDebInfoAssert+swift-DebugAssert/swift-macosx-x86_64/Swift.xcodeproj -target SwiftObfuscationTests
+
+./build/Xcode-RelWithDebInfoAssert+swift-DebugAssert/swift-macosx-x86_64/unittests/SwiftObfuscation/Debug/SwiftObfuscationTests
+
+swift/utils/run-test swift/test/Obfuscation --build-dir build/Xcode-RelWithDebInfoAssert+swift-DebugAssert/swift-macosx-x86_64 --lit build/Xcode-RelWithDebInfoAssert+swift-DebugAssert/llvm-macosx-x86_64/Debug/bin/llvm-lit
+
diff --git a/Scripts/run_tests_on_ci.sh b/Scripts/run_tests_on_ci.sh
index e2d6e58689b..ba1082d0278 100644
--- a/Scripts/run_tests_on_ci.sh
+++ b/Scripts/run_tests_on_ci.sh
@@ -1,4 +1,6 @@
 #!/bin/bash
 
-./swift/utils/build-script -R -T
+cmake --build ./build/Ninja-ReleaseAssert/swift-macosx-x86_64/ -- -j4 SwiftUnitTests
+./build/Ninja-ReleaseAssert/swift-macosx-x86_64/unittests/SwiftObfuscation/SwiftObfuscationTests
+swift/utils/run-test swift/test/Obfuscation --build-dir build/Ninja-ReleaseAssert/swift-macosx-x86_64 --lit build/Ninja-ReleaseAssert/llvm-macosx-x86_64/bin/llvm-lit
 
diff --git a/swift/test/Obfuscation/Inputs/Files.json b/swift/test/Obfuscation/Inputs/Files.json
index 29593748136..c10931a9d04 100644
--- a/swift/test/Obfuscation/Inputs/Files.json
+++ b/swift/test/Obfuscation/Inputs/Files.json
@@ -1,4 +1,7 @@
 {  
+    "project": {
+      "rootPath": ""
+    },
     "module":{  
        "name":"ModuleName"
     },
@@ -9,4 +12,4 @@
     "filenames":[ ],
     "explicitelyLinkedFrameworks":[ ],
     "systemLinkedFrameworks":[ ]
- }
\ No newline at end of file
+ }
-- 
2.17.1 (Apple Git-112)


From 918f103f86a9f7e4f7c82f141d646e871e3cbd9e Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Tue, 23 Jan 2018 16:36:23 +0100
Subject: [PATCH 035/138] Added doxygen documentation for: renaming, name
 mapping and random

Reviewers: jakub.sowa, krzysztof.siejkowski

Reviewed By: jakub.sowa, krzysztof.siejkowski

Subscribers: jakub.sowa, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2781
---
 swift/include/swift/Obfuscation/NameMapping.h | 24 ++++++++++++-
 swift/include/swift/Obfuscation/Random.h      | 21 ++++++++++-
 swift/include/swift/Obfuscation/Renaming.h    | 36 ++++++++++++++++++-
 .../obfuscator-renamer/obfuscator-renamer.cpp |  6 ++--
 4 files changed, 82 insertions(+), 5 deletions(-)

diff --git a/swift/include/swift/Obfuscation/NameMapping.h b/swift/include/swift/Obfuscation/NameMapping.h
index 1635b168969..57680790e21 100644
--- a/swift/include/swift/Obfuscation/NameMapping.h
+++ b/swift/include/swift/Obfuscation/NameMapping.h
@@ -7,7 +7,29 @@
 
 namespace swift {
 namespace obfuscation {
-
+  
+/// Creates renamings for symbols found in SymbolsJson object.
+///
+/// Rename generation depends on the type of the symbol found in SymbolsJson.
+/// Proposed new name for specific type must conform to [Swift Grammar]
+/// (https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/AboutTheLanguageReference.html).
+/// Generated names are unique to ensure that no symbol name collisions will
+/// occur after renaming.
+///
+/// Typical usage:
+/// \code
+/// auto RenamingsOrError = proposeRenamings(SymbolsJson);
+/// if (auto Error = RenamingsOrError.takeError()) {
+///   ExitOnError(std::move(Error));
+/// }
+/// auto Renamings = RenamingsOrError.get();
+/// \endcode
+///
+/// \param SymbolsJson Symbols before renaming
+///
+/// \returns Symbols with proposed renamings or error.
+/// Each SymbolRenaming object contains data of the symbol before renaming
+/// and proposed new name.
 llvm::Expected<RenamesJson> proposeRenamings(const SymbolsJson &SymbolsJson);
 
 } //namespace obfuscation
diff --git a/swift/include/swift/Obfuscation/Random.h b/swift/include/swift/Obfuscation/Random.h
index 601ab7a52e8..3841f8cf831 100644
--- a/swift/include/swift/Obfuscation/Random.h
+++ b/swift/include/swift/Obfuscation/Random.h
@@ -9,6 +9,11 @@
 namespace swift {
 namespace obfuscation {
 
+/// Generates integer value from a specified [Min; Max] range.
+///
+/// \tparam EngineType random number engine type such as std::mt19937
+/// \tparam DistributionType type of probability distribution
+/// such as std::uniform_int_distribution<int>
 template<typename EngineType, typename DistributionType>
 class RandomIntegerGenerator {
   
@@ -24,7 +29,12 @@ public:
   int rand();
 
 };
-
+ 
+/// Chooses random element from the specified vector.
+///
+/// \tparam ElementType type of the elements in vector
+/// \tparam GeneratorType type of the generator used to generate the index
+/// of chosen element
 template<typename ElementType, typename GeneratorType>
 class RandomElementChooser {
   
@@ -41,9 +51,14 @@ public:
 
 };
 
+  
 template<typename ElementType>
 using length_type = typename std::vector<ElementType>::size_type;
 
+/// Generates the vector of elements randomly chosen from the specified vector.
+///
+/// \tparam ElementType type of the elements in vector
+/// \tparam ChooserType class that generates random elements from predefined set
 template<typename ElementType, typename ChooserType>
 class RandomVectorGenerator {
   
@@ -59,6 +74,10 @@ public:
 
 };
 
+/// Generates string of specified length containing elements randomly chosed
+/// from the specified vector.
+///
+/// \tparam ChooserType type of the chooser used by RandomVectorGenerator
 template<typename ChooserType>
 class RandomStringGenerator {
   
diff --git a/swift/include/swift/Obfuscation/Renaming.h b/swift/include/swift/Obfuscation/Renaming.h
index 162dd501ff8..c98082921fb 100644
--- a/swift/include/swift/Obfuscation/Renaming.h
+++ b/swift/include/swift/Obfuscation/Renaming.h
@@ -13,7 +13,41 @@ namespace swift {
 namespace obfuscation {
 
 using FilesList = std::vector<std::pair<std::string, std::string>>;
-
+  
+/// Creates project copy in ObfuscatedProjectPath and performs symbol renaming
+/// defined in RenamesJson in the following steps:
+///
+/// 1. Performs semantic analysis of the project files defined in FilesJson and
+/// creates AST. All input project files have to be in
+/// FilesJson.Project.RootPath or subdirectories.
+/// 2. Copies all project files to ObfuscatedProjectPath.
+/// 3. Walks the AST and collects symbols listed in RenamesJson.
+/// 4. Performs renames on collected symbols in project copy
+/// in ObfuscatedProjectPath using renames from RenamesJson.
+///
+/// Typical usage:
+/// \code
+/// auto FilesOrError = performRenaming(MainExecutablePath,
+///   FilesJson,
+///   RenamesJson,
+///   ObfuscatedProjectPath);
+/// if (auto Error = FilesOrError.takeError()) {
+///   ExitOnError(std::move(Error));
+/// }
+/// auto ObfuscatedFiles = FilesOrError.get()
+/// \endcode
+///
+/// \param MainExecutablePath Path of the executable that invokes the semantic
+/// analysis. It is passed to CompilerInvocation object during Compiler setup.
+/// \param FilesJson Object containing unobfuscated project root path,
+/// and data required by CompilerInstance to perform semantic analysis,
+/// such as module name, input filenames, framework search paths and SDK path.
+/// \param RenamesJson Symbols to be renamed. Each SymbolRenaming object
+/// contains the new name.
+/// \param ObfuscatedProjectPath Path where the project copy will be created
+/// and renaming will be performed.
+///
+/// \returns List of project files that were affected by the renaming.
 llvm::Expected<FilesList> performRenaming(std::string MainExecutablePath,
                                           const FilesJson &FilesJson,
                                           const RenamesJson &RenamesJson,
diff --git a/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp b/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
index ed9b3ae1f9f..9f6b3f41d9b 100644
--- a/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
+++ b/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
@@ -69,11 +69,13 @@ int main(int argc, char *argv[]) {
   }
 
   MemoryBufferProvider BufferProvider = MemoryBufferProvider();
-  auto FilesJsonOrError = parseJson<FilesJson>(options::FilesJsonPath, BufferProvider);
+  auto FilesJsonOrError =
+  parseJson<FilesJson>(options::FilesJsonPath, BufferProvider);
   if (auto Error = FilesJsonOrError.takeError()) {
     ExitOnError(std::move(Error));
   }
-  auto RenamesJsonOrError = parseJson<RenamesJson>(options::RenamesJsonPath, BufferProvider);
+  auto RenamesJsonOrError =
+  parseJson<RenamesJson>(options::RenamesJsonPath, BufferProvider);
   if (auto Error = RenamesJsonOrError.takeError()) {
     ExitOnError(std::move(Error));
   }
-- 
2.17.1 (Apple Git-112)


From d7c009d0d4692044562972358359e3a67310e232 Mon Sep 17 00:00:00 2001
From: Jakub Sowa <jakub.sowa@polidea.com>
Date: Thu, 25 Jan 2018 15:12:31 +0100
Subject: [PATCH 036/138] FileIO Doxygen comments.

Summary: CompilerInfrastructure Doxygen comments.

Reviewers: krzysztof.siejkowski, jerzy.kleszcz

Reviewed By: krzysztof.siejkowski, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2780
---
 .../Obfuscation/CompilerInfrastructure.h      | 21 +++++++++
 swift/include/swift/Obfuscation/FileIO.h      | 47 +++++++++++++++++++
 2 files changed, 68 insertions(+)

diff --git a/swift/include/swift/Obfuscation/CompilerInfrastructure.h b/swift/include/swift/Obfuscation/CompilerInfrastructure.h
index 1d2c1419015..902e2bbb16b 100644
--- a/swift/include/swift/Obfuscation/CompilerInfrastructure.h
+++ b/swift/include/swift/Obfuscation/CompilerInfrastructure.h
@@ -10,6 +10,27 @@
 namespace swift {
 namespace obfuscation {
 
+/// Will setup provided CompilerInstance with configuration generated using
+/// FileJson and MainExecutablePath. If setup succeeds it parses and
+/// type-checks all files provided during configuration.
+///
+/// In case of failing during instance setup returns Error.
+///
+/// Typical usage:
+/// \code
+/// auto FilesJsonOrError = parseJson<FilesJson>(PathToJson);
+/// if (auto Error = setupCompilerInstance(CI, FilesJson, MainExecutablePath)) {
+///   return std::move(Error);
+/// }
+/// \endcode
+///
+/// \param CompilerInstance - compiler instance to setup.
+///
+/// \param MainExecutablePath - string containing path to main executable used
+/// during compiler isntance 
+///
+/// \returns llvm::Error::success when setup finished correctly or
+/// error object describing cause of fail.
 llvm::Error
 setupCompilerInstance(CompilerInstance &CompilerInstance,
                       const FilesJson &FilesJson,
diff --git a/swift/include/swift/Obfuscation/FileIO.h b/swift/include/swift/Obfuscation/FileIO.h
index ffd4d89d178..33db05c19c3 100644
--- a/swift/include/swift/Obfuscation/FileIO.h
+++ b/swift/include/swift/Obfuscation/FileIO.h
@@ -9,18 +9,65 @@
 namespace swift {
 namespace obfuscation {
 
+/// Provides memory buffer for given path.
+///
+/// In case of failing during execution returns Error.
+///
+/// Typical usage:
+/// \code
+///  auto Buffer = BufferProvider.getBuffer(PathToJson);
+/// \endcode
+///
+/// \param Path - string containing path to file.
+///
+/// \returns llvm::ErrorOr object containing either the memory buffer
+/// or llvm::Error object with the information.
 struct MemoryBufferProvider {
     virtual ~MemoryBufferProvider() = default;
     virtual llvm::ErrorOr<std::unique_ptr<llvm::MemoryBuffer>>
     getBuffer(std::string Path) const;
 };
 
+/// Provides file for given path.
+///
+/// In case of failing during execution returns Error.
+///
+/// Typical usage:
+/// \code
+/// auto File = Factory.getFile(PathToOutput);
+/// \endcode
+///
+/// \param Path - string containing path to file.
+///
+/// \returns llvm::ErrorOr object containing either the file
+/// or llvm::Error object with error information.
 template <typename FileType>
 struct FileFactory {
     virtual ~FileFactory() = default;
     virtual llvm::ErrorOr<std::unique_ptr<FileType>> getFile(std::string Path);
 };
 
+    
+/// Given path to file containig json, parses file and returns object of type T.
+///
+/// In case of failing reading file or failing parsing json, returns Error.
+///
+/// Typical usage:
+/// \code
+/// auto FilesJsonOrError = parseJson<FilesJson>(PathToJson);
+/// if (auto Error = FilesJsonOrError.takeError()) {
+///    ExitOnError(std::move(Error));
+/// }
+/// \endcode
+///
+/// \param PathToJson - string containing path to file with json.
+///
+/// \param BufferProvider - optional parameter with object providing memory
+/// buffer used during parsing.
+///
+/// \returns llvm::Expected object containing either the object of type T
+/// read from file provided in \p PathToJson or llvm::Error object with
+/// the information.
 template<typename T>
 llvm::Expected<T> parseJson(std::string PathToJson,
                             const MemoryBufferProvider &BufferProvider = MemoryBufferProvider());
-- 
2.17.1 (Apple Git-112)


From 611f84d2fdac1f6694d5da637424476dc2c068c4 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Thu, 25 Jan 2018 16:21:39 +0100
Subject: [PATCH 037/138] Parameters obfuscation

Reviewers: jerzy.kleszcz, jakub.sowa

Reviewed By: jerzy.kleszcz, jakub.sowa

Subscribers: jakub.sowa, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2776
---
 .../swift/Obfuscation/DataStructures.h        |  10 +
 .../swift/Obfuscation/DeclarationParser.h     |   5 +-
 .../Obfuscation/DeclarationParsingUtils.h     |  28 +++
 .../swift/Obfuscation/ExpressionParser.h      |  20 ++
 .../swift/Obfuscation/FileIO-Template.h       |  41 ++--
 .../Obfuscation/FunctionDeclarationParser.h   |  31 +++
 .../Obfuscation/ParameterDeclarationParser.h  |  28 +++
 .../swift/Obfuscation/Random-Template.h       |   4 +-
 swift/include/swift/Obfuscation/Random.h      |   2 +
 .../swift/Obfuscation/Utils-Template.h        |  34 +++
 swift/include/swift/Obfuscation/Utils.h       |  16 ++
 swift/lib/Obfuscation/CMakeLists.txt          |   4 +
 .../Obfuscation/CompilerInfrastructure.cpp    |   2 +-
 swift/lib/Obfuscation/DataStructures.cpp      |  30 ++-
 swift/lib/Obfuscation/DeclarationParser.cpp   | 216 +++++-------------
 .../Obfuscation/DeclarationParsingUtils.cpp   |  53 +++++
 swift/lib/Obfuscation/ExpressionParser.cpp    |  89 ++++++++
 swift/lib/Obfuscation/FileIO.cpp              |  22 +-
 .../Obfuscation/FunctionDeclarationParser.cpp | 150 ++++++++++++
 swift/lib/Obfuscation/NameMapping.cpp         |  10 +-
 .../ParameterDeclarationParser.cpp            | 189 +++++++++++++++
 swift/lib/Obfuscation/Renaming.cpp            |   2 +-
 swift/lib/Obfuscation/SourceFileWalker.cpp    |  38 ++-
 swift/lib/Obfuscation/SymbolExtracting.cpp    |   5 +-
 24 files changed, 809 insertions(+), 220 deletions(-)
 create mode 100644 swift/include/swift/Obfuscation/DeclarationParsingUtils.h
 create mode 100644 swift/include/swift/Obfuscation/ExpressionParser.h
 create mode 100644 swift/include/swift/Obfuscation/FunctionDeclarationParser.h
 create mode 100644 swift/include/swift/Obfuscation/ParameterDeclarationParser.h
 create mode 100644 swift/include/swift/Obfuscation/Utils-Template.h
 create mode 100644 swift/lib/Obfuscation/DeclarationParsingUtils.cpp
 create mode 100644 swift/lib/Obfuscation/ExpressionParser.cpp
 create mode 100644 swift/lib/Obfuscation/FunctionDeclarationParser.cpp
 create mode 100644 swift/lib/Obfuscation/ParameterDeclarationParser.cpp

diff --git a/swift/include/swift/Obfuscation/DataStructures.h b/swift/include/swift/Obfuscation/DataStructures.h
index e1d65d90e62..8f232a32f17 100644
--- a/swift/include/swift/Obfuscation/DataStructures.h
+++ b/swift/include/swift/Obfuscation/DataStructures.h
@@ -45,6 +45,14 @@ enum class SymbolType: int {
   
   NamedFunction,
   
+  SingleParameter,
+  
+  ExternalParameter,
+  
+  InternalParameter,
+  
+  Variable,
+  
   Operator
   
 };
@@ -106,6 +114,8 @@ struct SymbolWithRange {
   /// sets. It's taking into consideration both symbol identifier and range.
   bool operator< (const SymbolWithRange &Right) const;
 };
+  
+using SymbolsOrError = llvm::Expected<std::vector<SymbolWithRange>>;
 
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/include/swift/Obfuscation/DeclarationParser.h b/swift/include/swift/Obfuscation/DeclarationParser.h
index bd3952fd99a..eefae87ff7b 100644
--- a/swift/include/swift/Obfuscation/DeclarationParser.h
+++ b/swift/include/swift/Obfuscation/DeclarationParser.h
@@ -3,6 +3,8 @@
 
 #include "swift/Frontend/Frontend.h"
 #include "swift/Obfuscation/DataStructures.h"
+#include "swift/Obfuscation/DeclarationParsingUtils.h"
+#include "swift/Obfuscation/SourceFileWalker.h"
 
 namespace swift {
 namespace obfuscation {
@@ -30,7 +32,8 @@ namespace obfuscation {
 /// \returns llvm::Expected object containing either the symbol extracted
 ///          from information in \p Declaration object or llvm::Error object
 ///          with the information on why no symbol could be extracted.
-llvm::Expected<Symbol> extractSymbol(Decl* Declaration);
+SymbolsOrError
+extractSymbol(Decl* Declaration, CharSourceRange Range);
     
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/include/swift/Obfuscation/DeclarationParsingUtils.h b/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
new file mode 100644
index 00000000000..d0009cc40de
--- /dev/null
+++ b/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
@@ -0,0 +1,28 @@
+#ifndef DeclarationParsingUtils_h
+#define DeclarationParsingUtils_h
+
+#include "swift/Frontend/Frontend.h"
+#include "swift/Obfuscation/DataStructures.h"
+
+#include <string>
+#include <vector>
+
+namespace swift {
+namespace obfuscation {
+  
+using ModuleNameAndParts = std::pair<std::string, std::vector<std::string>>;
+
+std::string combineIdentifier(std::vector<std::string> &Parts);
+  
+std::string moduleName(const Decl* Declaration);
+  
+ModuleNameAndParts moduleNameAndParts(const Decl *Declaration);
+  
+std::string typeName(const NominalTypeDecl* Declaration);
+  
+llvm::Expected<std::string> enclosingTypeName(const Decl* Declaration);
+
+} //namespace obfuscation
+} //namespace swift
+  
+#endif /* DeclarationParsingUtils_h */
diff --git a/swift/include/swift/Obfuscation/ExpressionParser.h b/swift/include/swift/Obfuscation/ExpressionParser.h
new file mode 100644
index 00000000000..47cfcd05dc6
--- /dev/null
+++ b/swift/include/swift/Obfuscation/ExpressionParser.h
@@ -0,0 +1,20 @@
+#ifndef ExpressionParser_h
+#define ExpressionParser_h
+
+#include "swift/Frontend/Frontend.h"
+#include "swift/Obfuscation/DataStructures.h"
+#include "swift/Obfuscation/SourceFileWalker.h"
+
+#include "llvm/Support/Error.h"
+
+#include <vector>
+
+namespace swift {
+namespace obfuscation {
+
+SymbolsOrError extractSymbol(Expr* Expression);
+  
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* ExpressionParser_h */
diff --git a/swift/include/swift/Obfuscation/FileIO-Template.h b/swift/include/swift/Obfuscation/FileIO-Template.h
index 9956bfba1da..0bc531f46f5 100644
--- a/swift/include/swift/Obfuscation/FileIO-Template.h
+++ b/swift/include/swift/Obfuscation/FileIO-Template.h
@@ -14,14 +14,14 @@ namespace obfuscation {
 
 template<class FileType>
 llvm::ErrorOr<std::unique_ptr<FileType>>
-    FileFactory<FileType>::getFile(std::string Path) {
-    std::error_code Error;
-    auto File = llvm::make_unique<FileType>(Path, Error, llvm::sys::fs::F_None);
-    if (Error) {
-        return Error;
-    }
-
-    return File;
+FileFactory<FileType>::getFile(std::string Path) {
+  std::error_code Error;
+  auto File = llvm::make_unique<FileType>(Path, Error, llvm::sys::fs::F_None);
+  if (Error) {
+      return Error;
+  }
+
+  return File;
 }
 
 template<class T, typename FileType>
@@ -30,13 +30,13 @@ llvm::Error writeToPath(T &Object,
                         FileFactory<FileType> Factory,
                         llvm::raw_ostream &LogStream) {
 
-    std::error_code Error;
-    auto File = Factory.getFile(PathToOutput);
-    if (auto FileError = File.getError()) {
-        return stringError("Failed to open file: " + PathToOutput, FileError);
-    }
+  std::error_code Error;
+  auto File = Factory.getFile(PathToOutput);
+  if (auto FileError = File.getError()) {
+      return stringError("Failed to open file: " + PathToOutput, FileError);
+  }
 
-    return writeToFile(Object, LogStream, std::move(File.get()));
+  return writeToFile(Object, LogStream, std::move(File.get()));
 }
 
 template<typename T, typename FileType>
@@ -44,15 +44,14 @@ llvm::Error writeToFile(T &Object,
                         llvm::raw_ostream &LogStream,
                         std::unique_ptr<FileType> File) {
 
+  auto SerializedObject = json::serialize(Object);
+  *File << SerializedObject;
+  File->close();
 
-    auto SerializedObject = json::serialize(Object);
-    *File << SerializedObject;
-    File->close();
+  LogStream << "Written to file: " << '\n'
+            << SerializedObject << '\n';
 
-    LogStream << "Written to file: " << '\n'
-    << &SerializedObject << '\n';
-
-    return llvm::Error::success();
+  return llvm::Error::success();
 }
 
 } //namespace obfuscation
diff --git a/swift/include/swift/Obfuscation/FunctionDeclarationParser.h b/swift/include/swift/Obfuscation/FunctionDeclarationParser.h
new file mode 100644
index 00000000000..ccc8ebf3beb
--- /dev/null
+++ b/swift/include/swift/Obfuscation/FunctionDeclarationParser.h
@@ -0,0 +1,31 @@
+#ifndef FunctionDeclarationParser_h
+#define FunctionDeclarationParser_h
+
+#include "swift/Frontend/Frontend.h"
+#include "swift/Obfuscation/DataStructures.h"
+#include "swift/Obfuscation/DeclarationParsingUtils.h"
+
+#include "llvm/Support/Error.h"
+
+#include <string>
+#include <vector>
+
+namespace swift {
+namespace obfuscation {
+    
+std::string functionName(const FuncDecl* Declaration);
+  
+const FuncDecl*
+baseOverridenDeclarationWithModules(const FuncDecl* Declaration,
+                                    std::set<std::string> &Modules);
+  
+ModuleNameAndParts functionIdentifierParts(const FuncDecl* Declaration,
+                                           const std::string &ModuleName,
+                                           const std::string &SymbolName);
+  
+SymbolsOrError parse(const FuncDecl* Declaration, CharSourceRange Range);
+    
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* FunctionDeclarationParser_h */
diff --git a/swift/include/swift/Obfuscation/ParameterDeclarationParser.h b/swift/include/swift/Obfuscation/ParameterDeclarationParser.h
new file mode 100644
index 00000000000..623a15b27c3
--- /dev/null
+++ b/swift/include/swift/Obfuscation/ParameterDeclarationParser.h
@@ -0,0 +1,28 @@
+#ifndef ParameterDeclarationParser_h
+#define ParameterDeclarationParser_h
+
+#include "swift/Frontend/Frontend.h"
+#include "swift/Obfuscation/DataStructures.h"
+#include "swift/Obfuscation/DeclarationParsingUtils.h"
+
+#include "llvm/Support/Error.h"
+
+#include <string>
+#include <vector>
+
+namespace swift {
+namespace obfuscation {
+  
+SymbolsOrError
+parseSeparateFunctionDeclarationForParameters(const FuncDecl* Declaration);
+
+SymbolsOrError
+parseFunctionFromCallExpressionForParameters(const FuncDecl* Declaration);
+  
+SymbolsOrError parseSeparateDeclarationWithRange(const ParamDecl* Declaration,
+                                                 CharSourceRange Range);
+  
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* ParameterDeclarationParser_h */
diff --git a/swift/include/swift/Obfuscation/Random-Template.h b/swift/include/swift/Obfuscation/Random-Template.h
index 8f8308150bc..ad14e4a9925 100644
--- a/swift/include/swift/Obfuscation/Random-Template.h
+++ b/swift/include/swift/Obfuscation/Random-Template.h
@@ -58,9 +58,7 @@ std::string
 RandomStringGenerator<ChooserType>::rand(length_type<std::string> Length) {
   auto Characters = Generator.rand(Length);
   std::stringstream Result;
-  std::copy(Characters.cbegin(),
-            Characters.cend(),
-            std::ostream_iterator<std::string>(Result, ""));
+  copyToStream(Characters, std::ostream_iterator<std::string>(Result, ""));
   return Result.str();
 }
   
diff --git a/swift/include/swift/Obfuscation/Random.h b/swift/include/swift/Obfuscation/Random.h
index 3841f8cf831..c8de8501e2d 100644
--- a/swift/include/swift/Obfuscation/Random.h
+++ b/swift/include/swift/Obfuscation/Random.h
@@ -1,6 +1,8 @@
 #ifndef Random_h
 #define Random_h
 
+#include "swift/Obfuscation/Utils.h"
+
 #include <cassert>
 #include <vector>
 #include <string>
diff --git a/swift/include/swift/Obfuscation/Utils-Template.h b/swift/include/swift/Obfuscation/Utils-Template.h
new file mode 100644
index 00000000000..8e74fe20665
--- /dev/null
+++ b/swift/include/swift/Obfuscation/Utils-Template.h
@@ -0,0 +1,34 @@
+#ifndef Utils_Template_h
+#define Utils_Template_h
+
+namespace swift {
+namespace obfuscation {
+
+template<typename ElementType>
+void copyToVector(const std::vector<ElementType> &FromVector,
+                  std::vector<ElementType> &ToVector) {
+  std::copy(FromVector.cbegin(),
+            FromVector.cend(),
+            std::back_inserter(ToVector));
+};
+  
+template<typename ElementType>
+void copyToVector(const std::set<ElementType> &FromSet,
+                  std::vector<ElementType> &ToVector) {
+  std::copy(FromSet.cbegin(),
+            FromSet.cend(),
+            std::back_inserter(ToVector));
+};
+  
+template<typename ElementType>
+void copyToStream(const std::vector<ElementType> &FromVector,
+          std::ostream_iterator<ElementType> Inserter) {
+  std::copy(FromVector.cbegin(),
+            FromVector.cend(),
+            Inserter);
+};
+
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* Utils_Template_h */
diff --git a/swift/include/swift/Obfuscation/Utils.h b/swift/include/swift/Obfuscation/Utils.h
index ab9eb69955a..0f7bccc4807 100644
--- a/swift/include/swift/Obfuscation/Utils.h
+++ b/swift/include/swift/Obfuscation/Utils.h
@@ -3,7 +3,9 @@
 
 #include "llvm/Support/Error.h"
 
+#include <set>
 #include <string>
+#include <vector>
 
 namespace swift {
 namespace obfuscation {
@@ -29,7 +31,21 @@ llvm::Error stringError(const std::string Message,
                         const std::error_code Error =
                           std::error_code(1, std::generic_category()));
 
+template<typename ElementType>
+void copyToVector(const std::vector<ElementType> &FromVector,
+                  std::vector<ElementType> &ToVector);
+  
+template<typename ElementType>
+void copyToVector(const std::set<ElementType> &FromSet,
+                  std::vector<ElementType> &ToVector);
+  
+template<typename ElementType>
+void copyToStream(const std::vector<ElementType> &FromVector,
+                  std::ostream_iterator<ElementType> Inserter);
+
 } //namespace obfuscation
 } //namespace swift
 
+#include "swift/Obfuscation/Utils-Template.h"
+
 #endif /* Utils_h */
diff --git a/swift/lib/Obfuscation/CMakeLists.txt b/swift/lib/Obfuscation/CMakeLists.txt
index de7063a682d..b9ae559efac 100644
--- a/swift/lib/Obfuscation/CMakeLists.txt
+++ b/swift/lib/Obfuscation/CMakeLists.txt
@@ -2,8 +2,12 @@ add_swift_library(swiftObfuscation STATIC
   CompilerInfrastructure.cpp
   DataStructures.cpp
   DeclarationParser.cpp
+  DeclarationParsingUtils.cpp
+  ExpressionParser.cpp
   FileIO.cpp
+  FunctionDeclarationParser.cpp
   NameMapping.cpp
+  ParameterDeclarationParser.cpp
   Renaming.cpp
   SourceFileWalker.cpp
   SymbolExtracting.cpp
diff --git a/swift/lib/Obfuscation/CompilerInfrastructure.cpp b/swift/lib/Obfuscation/CompilerInfrastructure.cpp
index 42fe8fb4200..088334269f6 100644
--- a/swift/lib/Obfuscation/CompilerInfrastructure.cpp
+++ b/swift/lib/Obfuscation/CompilerInfrastructure.cpp
@@ -31,7 +31,7 @@ struct CompilerInvocationConfiguration {
 };
 
 CompilerInvocation
-  createInvocation(const CompilerInvocationConfiguration &Configuration) {
+createInvocation(const CompilerInvocationConfiguration &Configuration) {
     CompilerInvocation Invocation;
     Invocation.setModuleName(Configuration.ModuleName);
     Invocation.setMainExecutablePath(Configuration.MainExecutablePath);
diff --git a/swift/lib/Obfuscation/DataStructures.cpp b/swift/lib/Obfuscation/DataStructures.cpp
index 40369533f0d..60e534385a2 100644
--- a/swift/lib/Obfuscation/DataStructures.cpp
+++ b/swift/lib/Obfuscation/DataStructures.cpp
@@ -1,14 +1,16 @@
 #include "swift/Obfuscation/DataStructures.h"
 #include "swift/Obfuscation/Utils.h"
 
-using namespace swift::obfuscation;
-
 namespace swift {
 namespace obfuscation {
   
 namespace SymbolTypeKeys {
   static const char* Type = "type";
   static const char* NamedFunction = "namedFunction";
+  static const char* ExternalParameter = "externalParameter";
+  static const char* InternalParameter = "internalParameter";
+  static const char* SingleParameter = "singleParameter";
+  static const char* Variable = "variable";
   static const char* Operator = "operator";
 }
 
@@ -53,7 +55,7 @@ const char* pointerToRangeValue(const SymbolWithRange &Symbol) {
   return static_cast<const char *>(Pointer);
 }
 
-SymbolWithRange::SymbolWithRange(const swift::obfuscation::Symbol &Symbol,
+SymbolWithRange::SymbolWithRange(const struct Symbol &Symbol,
                                  const CharSourceRange &Range)
 : Symbol(Symbol), Range(Range) {}
   
@@ -113,6 +115,16 @@ void MappingTraits<SymbolsJson>::mapping(IO &Io, SymbolsJson &Object) {
 void ScalarEnumerationTraits<SymbolType>::enumeration(IO &Io,
                                                       SymbolType &Enum) {
   Io.enumCase(Enum, SymbolTypeKeys::Type, SymbolType::Type);
+  Io.enumCase(Enum,
+              SymbolTypeKeys::ExternalParameter,
+              SymbolType::ExternalParameter);
+  Io.enumCase(Enum,
+              SymbolTypeKeys::InternalParameter,
+              SymbolType::InternalParameter);
+  Io.enumCase(Enum,
+              SymbolTypeKeys::SingleParameter,
+              SymbolType::SingleParameter);
+  Io.enumCase(Enum, SymbolTypeKeys::Variable, SymbolType::Variable);
   Io.enumCase(Enum, SymbolTypeKeys::NamedFunction, SymbolType::NamedFunction);
   Io.enumCase(Enum, SymbolTypeKeys::Operator, SymbolType::Operator);
 }
@@ -185,6 +197,16 @@ void ObjectTraits<SymbolsJson>::mapping(Output &Out, SymbolsJson &Object) {
 void ScalarEnumerationTraits<SymbolType>::enumeration(Output &Out,
                                                       SymbolType &Enum) {
   Out.enumCase(Enum, SymbolTypeKeys::Type, SymbolType::Type);
+  Out.enumCase(Enum,
+               SymbolTypeKeys::ExternalParameter,
+               SymbolType::ExternalParameter);
+  Out.enumCase(Enum,
+               SymbolTypeKeys::InternalParameter,
+               SymbolType::InternalParameter);
+  Out.enumCase(Enum,
+               SymbolTypeKeys::SingleParameter,
+               SymbolType::SingleParameter);
+  Out.enumCase(Enum, SymbolTypeKeys::Variable, SymbolType::Variable);
   Out.enumCase(Enum, SymbolTypeKeys::NamedFunction, SymbolType::NamedFunction);
   Out.enumCase(Enum, SymbolTypeKeys::Operator, SymbolType::Operator);
 }
@@ -213,7 +235,7 @@ template<class T>
 std::string serialize(T &Object) {
     std::string OutputString;
     llvm::raw_string_ostream OutputStringStream(OutputString);
-    swift::json::Output Output(OutputStringStream);
+    Output Output(OutputStringStream);
     Output << Object;
     return OutputStringStream.str();
 }
diff --git a/swift/lib/Obfuscation/DeclarationParser.cpp b/swift/lib/Obfuscation/DeclarationParser.cpp
index 3e100df208b..8c44cf51dbd 100644
--- a/swift/lib/Obfuscation/DeclarationParser.cpp
+++ b/swift/lib/Obfuscation/DeclarationParser.cpp
@@ -1,60 +1,17 @@
 #include "swift/Obfuscation/DeclarationParser.h"
+#include "swift/Obfuscation/FunctionDeclarationParser.h"
+#include "swift/Obfuscation/ParameterDeclarationParser.h"
 #include "swift/Obfuscation/Utils.h"
 
-#include <sstream>
-#include <string>
-#include <vector>
-
 namespace swift {
 namespace obfuscation {
-
-std::string combineIdentifier(std::vector<std::string> &Parts) {
-  if (Parts.empty()) {
-    return "";
-  } else if (Parts.size() == 1) {
-    return Parts[0];
-  } else {
-    //TODO: can we rewrite it to use llvm:raw_string_ostream?
-    std::stringstream ResultStream;
-    std::copy(Parts.cbegin(),
-              Parts.cend(),
-              std::ostream_iterator<std::string>(ResultStream, "."));
-    std::string Result = ResultStream.str();
-    Result.pop_back();
-    return Result;
-  }
-}
   
-std::string moduleName(const Decl* Declaration) {
-  return Declaration->getModuleContext()->getBaseName().getIdentifier().get();
-}
-
-std::pair<std::string, std::vector<std::string>>
-moduleNameAndParts(const Decl *Declaration) {
-  std::vector<std::string> Parts;
-  std::string ModuleName = moduleName(Declaration);
-  Parts.push_back("module");
-  Parts.push_back(ModuleName);
-  return std::make_pair(ModuleName, Parts);
-}
-  
-std::string typeName(const NominalTypeDecl* Declaration) {
-  return Declaration->getDeclaredInterfaceType()->getString();
-}
-  
-llvm::Expected<std::string>
-enclosingTypeName(const Decl* Declaration) {
-  auto *DeclarationContext = Declaration->getDeclContext();
-  if (auto *TypeDeclaration =
-        DeclarationContext->getAsNominalTypeOrNominalTypeExtensionContext()) {
-    return typeName(TypeDeclaration);
-  }
-  return stringError("enclosing context of this declaration is not supported");
-}
+using SingleSymbolOrError = llvm::Expected<Symbol>;
   
-llvm::Expected<Symbol> parse(const NominalTypeDecl* Declaration) {
+SingleSymbolOrError parse(const NominalTypeDecl* Declaration) {
   
   auto ModuleNameAndParts = moduleNameAndParts(Declaration);
+  std::string ModuleName = ModuleNameAndParts.first;
   std::vector<std::string> Parts = ModuleNameAndParts.second;
   std::string SymbolName = typeName(Declaration);
   
@@ -72,146 +29,75 @@ llvm::Expected<Symbol> parse(const NominalTypeDecl* Declaration) {
   
   return Symbol(combineIdentifier(Parts),
                 SymbolName,
-                ModuleNameAndParts.first,
+                ModuleName,
                 SymbolType::Type);
 }
+
+SingleSymbolOrError parse(const VarDecl* Declaration) {
   
-std::string functionName(const FuncDecl* Declaration) {
-  return Declaration->getName().str().str();
-}
-  
-llvm::Error isDeclarationSupported(const FuncDecl* Declaration) {
-  if (Declaration->isBinaryOperator() || Declaration->isUnaryOperator()) {
-    return stringError("don't support operators right now, since it requires "
-                       "the special obfuscated identifier");
-  }
-  if (Declaration->isGetterOrSetter()) {
-    return stringError("don't support getters and setters right now, since "
-                       "it's the computed property name that should be "
-                       "obfuscated");
-  }
-  if (Declaration->isAccessor() || Declaration->isObservingAccessor()) {
-    return stringError("don't support property accessors right now");
-  }
-  return llvm::Error::success();
-}
-  
-const FuncDecl*
-baseOverridenDeclarationWithModules(const FuncDecl* Declaration,
-                                    std::set<std::string> &Modules) {
-  if (auto* OverrideDeclaration = Declaration->getOverriddenDecl()) {
-    Modules.insert(moduleName(OverrideDeclaration));
-    return baseOverridenDeclarationWithModules(OverrideDeclaration, Modules);
-  } else {
-    return Declaration;
+  if (Declaration->getOverriddenDecl() != nullptr) {
+    return stringError("obfuscating overriding properties is not supported");
   }
-}
   
-Symbol symbolFromFunctionDeclaration(const swift::FuncDecl *Declaration,
-                                     std::string &ModuleName,
-                                     std::vector<std::string> &Parts) {
-  
-  std::string SymbolName = functionName(Declaration);
-  
-  auto ProtocolRequirements = Declaration->getSatisfiedProtocolRequirements();
-  auto *ProtocolDeclaration =
-    dyn_cast<ProtocolDecl>(Declaration->getDeclContext());
-  if (ProtocolRequirements.empty() && ProtocolDeclaration == nullptr) {
-    
-    auto TypeNameOrError = enclosingTypeName(Declaration);
-    if (auto Error = TypeNameOrError.takeError()) {
-      llvm::consumeError(std::move(Error));
-      Parts.push_back("function." + SymbolName);
-    } else {
-      Parts.push_back("type." + TypeNameOrError.get());
-      Parts.push_back("method." + SymbolName);
-    }
-    
-  } else {
-    
-    // TODO: right now we're renaming all the methods in the protocols with
-    //       the same name and signature to the same obfuscated name. the reason
-    //       is that it greatly simplifies the handling of situation in which
-    //       a protocol A has method a() and protocol B: A has method a().
-    //       then the class C: B with the implementation of a() satisfies
-    //       two requirements at the same time (from A and from B). however,
-    //       there is no override relationship between the A.a() and B.a() in
-    //       protocols. it's just a name that's the same.
-    //       this simplified handling should be improved in the future.
-    if (!ProtocolRequirements.empty()) {
-      ModuleName = moduleName(ProtocolRequirements.front());
-    } else {
-      ModuleName = moduleName(ProtocolDeclaration);
-    }
-    Parts.push_back("protocol");
-    Parts.push_back("method." + SymbolName);
+  auto ModuleNameAndParts = moduleNameAndParts(Declaration);
+  std::string ModuleName = ModuleNameAndParts.first;
+  std::vector<std::string> Parts = ModuleNameAndParts.second;
+  std::string SymbolName = Declaration->getName().str().str();
+  
+  if (auto *FunctionDeclaration =
+      dyn_cast<FuncDecl>(Declaration->getDeclContext())) {
+    std::string FunctionName = functionName(FunctionDeclaration);
+    auto ModuleAndParts = functionIdentifierParts(FunctionDeclaration,
+                                                  ModuleName,
+                                                  FunctionName);
+    copyToVector(ModuleAndParts.second, Parts);
   }
   
-  if (Declaration->getDeclContext()->isTypeContext()) {
-    auto Interface = Declaration->getMethodInterfaceType().getString();
-    Parts.push_back("signature." + Interface);
-  } else {
-    Parts.push_back("signature." + Declaration->getInterfaceType().getString());
-  }
+  Parts.push_back("variable." + SymbolName);
   
   return Symbol(combineIdentifier(Parts),
                 SymbolName,
                 ModuleName,
-                SymbolType::NamedFunction);
+                SymbolType::Variable);
 }
-  
-llvm::Expected<Symbol> parse(const FuncDecl* Declaration) {
 
-  if (auto Error = isDeclarationSupported(Declaration)) {
-    return std::move(Error);
-  }
+SymbolsOrError extractSymbol(Decl* Declaration, CharSourceRange Range) {
   
-  auto ModuleNameAndParts = moduleNameAndParts(Declaration);
-  std::string ModuleName = ModuleNameAndParts.first;
-  std::vector<std::string> Parts = ModuleNameAndParts.second;
+  std::unique_ptr<SingleSymbolOrError> SingleSymbolOrErrorPointer(nullptr);
+  std::unique_ptr<SymbolsOrError> SymbolsOrErrorPointer(nullptr);
   
-  if (Declaration->getOverriddenDecl() != nullptr) {
-    
-    std::set<std::string> Modules;
-    auto Base = baseOverridenDeclarationWithModules(Declaration, Modules);
-    
-    if (Modules.size() == 1 && Modules.count(ModuleName) == 1) {
-      
-      return symbolFromFunctionDeclaration(Base, ModuleName, Parts);
-      
-    } else {
-      return stringError("only method overriding methods from the same module "
-                         "might be safely obfuscated");
-    }
-    
-  }
-  return symbolFromFunctionDeclaration(Declaration, ModuleName, Parts);
-}
-
-llvm::Expected<Symbol> parse(const ValueDecl* Declaration) {
-  return stringError("found unsupported declaration type");
-}
-
-llvm::Expected<Symbol> extractSymbol(Decl* Declaration) {
-  std::unique_ptr<llvm::Expected<Symbol>> SymbolOrError(nullptr);
   if (const auto *NominalTypeDeclaration =
         dyn_cast<NominalTypeDecl>(Declaration)) {
-    SymbolOrError =
-      llvm::make_unique<llvm::Expected<Symbol>>(parse(NominalTypeDeclaration));
+    SingleSymbolOrErrorPointer =
+      llvm::make_unique<SingleSymbolOrError>(parse(NominalTypeDeclaration));
   } else if (const auto *FuncDeclaration = dyn_cast<FuncDecl>(Declaration)) {
-    SymbolOrError =
-      llvm::make_unique<llvm::Expected<Symbol>>(parse(FuncDeclaration));
-  } else if (const auto *ValueDeclaration = dyn_cast<ValueDecl>(Declaration)) {
-    SymbolOrError =
-      llvm::make_unique<llvm::Expected<Symbol>>(parse(ValueDeclaration));
+    SymbolsOrErrorPointer =
+      llvm::make_unique<SymbolsOrError>(parse(FuncDeclaration, Range));
+  } else if (const auto *ParamDeclaration = dyn_cast<ParamDecl>(Declaration)) {
+    auto Symbols = parseSeparateDeclarationWithRange(ParamDeclaration, Range);
+    SymbolsOrErrorPointer =
+      llvm::make_unique<SymbolsOrError>(std::move(Symbols));
+  } else if (const auto *VariableDeclaration = dyn_cast<VarDecl>(Declaration)) {
+    SingleSymbolOrErrorPointer =
+      llvm::make_unique<SingleSymbolOrError>(parse(VariableDeclaration));
   } else {
     return stringError("unsupported declaration type");
   }
   
-  if (auto Error = SymbolOrError->takeError()) {
-    return std::move(Error);
+  if (SingleSymbolOrErrorPointer) {
+    if (auto Error = SingleSymbolOrErrorPointer->takeError()) {
+      return std::move(Error);
+    }
+    SymbolWithRange Symbol(SingleSymbolOrErrorPointer->get(), Range);
+    return std::vector<SymbolWithRange> { Symbol };
+  } else if (SymbolsOrErrorPointer) {
+    if (auto Error = SymbolsOrErrorPointer->takeError()) {
+      return std::move(Error);
+    }
+    return SymbolsOrErrorPointer->get();
+  } else {
+    return stringError("unsupported declaration type");
   }
-  return SymbolOrError->get();
 }
   
 } //namespace obfuscation
diff --git a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
new file mode 100644
index 00000000000..3ecb60c76d3
--- /dev/null
+++ b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
@@ -0,0 +1,53 @@
+#include "swift/Obfuscation/DeclarationParsingUtils.h"
+#include "swift/Obfuscation/Utils.h"
+
+#include <sstream>
+#include <string>
+#include <vector>
+
+namespace swift {
+namespace obfuscation {
+
+std::string combineIdentifier(std::vector<std::string> &Parts) {
+  if (Parts.empty()) {
+    return "";
+  } else if (Parts.size() == 1) {
+    return Parts[0];
+  } else {
+    //TODO: can we rewrite it to use llvm:raw_string_ostream?
+    std::stringstream ResultStream;
+    copyToStream(Parts, std::ostream_iterator<std::string>(ResultStream, "."));
+    std::string Result = ResultStream.str();
+    Result.pop_back();
+    return Result;
+  }
+}
+
+std::string moduleName(const Decl* Declaration) {
+  return Declaration->getModuleContext()->getBaseName().getIdentifier().get();
+}
+
+ModuleNameAndParts moduleNameAndParts(const Decl *Declaration) {
+  std::vector<std::string> Parts;
+  std::string ModuleName = moduleName(Declaration);
+  Parts.push_back("module");
+  Parts.push_back(ModuleName);
+  return std::make_pair(ModuleName, Parts);
+}
+
+std::string typeName(const NominalTypeDecl* Declaration) {
+  return Declaration->getDeclaredInterfaceType()->getString();
+}
+
+llvm::Expected<std::string> enclosingTypeName(const Decl* Declaration) {
+  auto *DeclarationContext = Declaration->getDeclContext();
+  if (auto *TypeDeclaration =
+      DeclarationContext->getAsNominalTypeOrNominalTypeExtensionContext()) {
+    return typeName(TypeDeclaration);
+  }
+  return stringError("enclosing context of this declaration is not supported");
+}
+  
+} //namespace obfuscation
+} //namespace swift
+
diff --git a/swift/lib/Obfuscation/ExpressionParser.cpp b/swift/lib/Obfuscation/ExpressionParser.cpp
new file mode 100644
index 00000000000..455ba07b111
--- /dev/null
+++ b/swift/lib/Obfuscation/ExpressionParser.cpp
@@ -0,0 +1,89 @@
+#include "swift/Obfuscation/ExpressionParser.h"
+#include "swift/Obfuscation/ParameterDeclarationParser.h"
+#include "swift/Obfuscation/Utils.h"
+
+namespace swift {
+namespace obfuscation {
+  
+llvm::Expected<FuncDecl*>
+declarationOfFunctionCalledInExpression(CallExpr *CallExpression) {
+  if (auto *DotSyntaxCallExpression =
+        dyn_cast<DotSyntaxCallExpr>(CallExpression->getFn())) {
+    if (auto *DeclarationRefExpression =
+          dyn_cast<DeclRefExpr>(DotSyntaxCallExpression->getFn())) {
+      if (auto *FunctionDeclaration =
+            dyn_cast<FuncDecl>(DeclarationRefExpression->getDecl())) {
+        return FunctionDeclaration;
+      }
+    }
+  }
+  return stringError("Cannot found supported Call Expression subtree pattern");
+}
+  
+std::vector<std::pair<Identifier, SourceLoc>>
+validArguments(CallExpr *CallExpression) {
+
+  std::vector<std::pair<Identifier, SourceLoc>> ValidArguments;
+  
+  for (unsigned i = 0; i < CallExpression->getNumArguments(); ++i) {
+    auto Label = CallExpression->getArgumentLabels()[i];
+    auto Location = CallExpression->getArgumentLabelLoc(i);
+    if (Location.isValid()) {
+      ValidArguments.push_back(std::make_pair(Label, Location));
+    }
+  }
+  
+  return ValidArguments;
+}
+  
+SymbolsOrError parseCallExpressionWithArguments(CallExpr* CallExpression) {
+  
+  std::vector<SymbolWithRange> Symbols;
+  auto FunctionDeclarationOrError =
+    declarationOfFunctionCalledInExpression(CallExpression);
+  if (auto Error = FunctionDeclarationOrError.takeError()) {
+    return std::move(Error);
+  }
+  auto FunctionDeclaration = FunctionDeclarationOrError.get();
+  
+  auto SymbolsOrError =
+    parseFunctionFromCallExpressionForParameters(FunctionDeclaration);
+  if (auto Error = SymbolsOrError.takeError()) {
+    return std::move(Error);
+  }
+  
+  auto ValidArguments = validArguments(CallExpression);
+  
+  if (ValidArguments.size() != SymbolsOrError.get().size()) {
+    return stringError("Unsupported call expression");
+  }
+    
+  for (unsigned i = 0; i < ValidArguments.size(); ++i) {
+    auto Symbol = SymbolsOrError.get()[i];
+    auto Label = ValidArguments[i].first;
+    auto Location = ValidArguments[i].second;
+    if (Location.isValid() && Symbol.Symbol.Name == Label.str().str()) {
+      auto Range = CharSourceRange(Location, Label.getLength());
+      Symbols.push_back(SymbolWithRange(Symbol.Symbol, Range));
+    }
+  }
+
+  return Symbols;
+}
+
+SymbolsOrError parse(CallExpr* CallExpression) {
+  if (CallExpression->hasArgumentLabelLocs()) {
+    return parseCallExpressionWithArguments(CallExpression);
+  }
+  return stringError("Unsupported type of expression");
+}
+
+SymbolsOrError extractSymbol(Expr* Expression) {
+  if (auto *CallExpression = dyn_cast<CallExpr>(Expression)) {
+    return parse(CallExpression);
+  }
+  return stringError("Unsupported type of expression");
+}
+  
+} //namespace obfuscation
+} //namespace swift
diff --git a/swift/lib/Obfuscation/FileIO.cpp b/swift/lib/Obfuscation/FileIO.cpp
index e4916b201f1..8731efbe82d 100644
--- a/swift/lib/Obfuscation/FileIO.cpp
+++ b/swift/lib/Obfuscation/FileIO.cpp
@@ -25,14 +25,20 @@ llvm::Expected<T> parseJson(std::string PathToJson,
   return llvm::yaml::deserialize<T>(std::move(Buffer.get())->getBuffer());
 }
 
-template llvm::Expected<FilesJson> parseJson(std::string,
-                                             const MemoryBufferProvider &BufferProvider = MemoryBufferProvider());
-
-template llvm::Expected<SymbolsJson> parseJson(std::string,
-                                               const MemoryBufferProvider &BufferProvider = MemoryBufferProvider());
-
-template llvm::Expected<RenamesJson> parseJson(std::string,
-                                               const MemoryBufferProvider &BufferProvider = MemoryBufferProvider());
+template
+llvm::Expected<FilesJson>
+parseJson(std::string,
+          const MemoryBufferProvider &BufferProvider = MemoryBufferProvider());
+
+template
+llvm::Expected<SymbolsJson>
+parseJson(std::string,
+          const MemoryBufferProvider &BufferProvider = MemoryBufferProvider());
+
+template
+llvm::Expected<RenamesJson>
+parseJson(std::string,
+          const MemoryBufferProvider &BufferProvider = MemoryBufferProvider());
 
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
new file mode 100644
index 00000000000..d93c2a3a9d1
--- /dev/null
+++ b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
@@ -0,0 +1,150 @@
+#include "swift/Obfuscation/FunctionDeclarationParser.h"
+#include "swift/Obfuscation/ParameterDeclarationParser.h"
+#include "swift/Obfuscation/DeclarationParsingUtils.h"
+#include "swift/Obfuscation/Utils.h"
+
+#include <string>
+#include <vector>
+
+namespace swift {
+namespace obfuscation {
+
+std::string functionName(const FuncDecl* Declaration) {
+  return Declaration->getName().str().str();
+}
+
+llvm::Error isDeclarationSupported(const FuncDecl* Declaration) {
+  if (Declaration->isBinaryOperator() || Declaration->isUnaryOperator()) {
+    return stringError("don't support operators right now, since it requires "
+                       "the special obfuscated identifier");
+  }
+  if (Declaration->isGetterOrSetter()) {
+    return stringError("don't support getters and setters right now, since "
+                       "it's the computed property name that should be "
+                       "obfuscated");
+  }
+  if (Declaration->isAccessor() || Declaration->isObservingAccessor()) {
+    return stringError("don't support property accessors right now");
+  }
+  return llvm::Error::success();
+}
+
+const FuncDecl*
+baseOverridenDeclarationWithModules(const FuncDecl* Declaration,
+                                    std::set<std::string> &Modules) {
+  if (auto* OverrideDeclaration = Declaration->getOverriddenDecl()) {
+    Modules.insert(moduleName(OverrideDeclaration));
+    return baseOverridenDeclarationWithModules(OverrideDeclaration, Modules);
+  } else {
+    return Declaration;
+  }
+}
+
+std::string functionSignature(const FuncDecl *Declaration) {
+  if (Declaration->getDeclContext()->isTypeContext()) {
+    auto Interface = Declaration->getMethodInterfaceType().getString();
+    return "signature." + Interface;
+  } else {
+    return "signature." + Declaration->getInterfaceType().getString();
+  }
+}
+
+ModuleNameAndParts functionIdentifierParts(const FuncDecl *Declaration,
+                                           const std::string &ModuleName,
+                                           const std::string &SymbolName) {
+  std::vector<std::string> Parts;
+  std::string UpdatedModuleName = ModuleName;
+  auto ProtocolRequirements = Declaration->getSatisfiedProtocolRequirements();
+  auto *ProtocolDeclaration =
+  dyn_cast<ProtocolDecl>(Declaration->getDeclContext());
+  if (ProtocolRequirements.empty() && ProtocolDeclaration == nullptr) {
+    
+    auto TypeNameOrError = enclosingTypeName(Declaration);
+    if (auto Error = TypeNameOrError.takeError()) {
+      llvm::consumeError(std::move(Error));
+      Parts.push_back("function." + SymbolName);
+    } else {
+      Parts.push_back("type." + TypeNameOrError.get());
+      Parts.push_back("method." + SymbolName);
+    }
+    
+  } else {
+    
+    // TODO: right now we're renaming all the methods in the protocols with
+    //       the same name and signature to the same obfuscated name. the reason
+    //       is that it greatly simplifies the handling of situation in which
+    //       a protocol A has method a() and protocol B: A has method a().
+    //       then the class C: B with the implementation of a() satisfies
+    //       two requirements at the same time (from A and from B). however,
+    //       there is no override relationship between the A.a() and B.a() in
+    //       protocols. it's just a name that's the same.
+    //       this simplified handling should be improved in the future.
+    if (!ProtocolRequirements.empty()) {
+      UpdatedModuleName = moduleName(ProtocolRequirements.front());
+    } else {
+      UpdatedModuleName = moduleName(ProtocolDeclaration);
+    }
+    Parts.push_back("protocol");
+    Parts.push_back("method." + SymbolName);
+  }
+  
+  Parts.push_back(functionSignature(Declaration));
+  
+  return std::make_pair(UpdatedModuleName, Parts);
+}
+
+SymbolsOrError parseOverridenDeclaration(const FuncDecl *Declaration,
+                                         const std::string &ModuleName,
+                                         const CharSourceRange &Range) {
+  std::set<std::string> Modules;
+  auto Base = baseOverridenDeclarationWithModules(Declaration, Modules);
+  if (Modules.size() == 1 && Modules.count(ModuleName) == 1) {
+    return parse(Base, Range);
+  } else {
+    return stringError("only method overriding methods from the same module "
+                       "might be safely obfuscated");
+  }
+}
+  
+SymbolsOrError parse(const FuncDecl* Declaration, CharSourceRange Range) {
+  
+  if (auto Error = isDeclarationSupported(Declaration)) {
+    return std::move(Error);
+  }
+  
+  std::vector<SymbolWithRange> Symbols;
+  auto ModuleNameAndParts = moduleNameAndParts(Declaration);
+  std::string ModuleName = ModuleNameAndParts.first;
+  std::vector<std::string> Parts = ModuleNameAndParts.second;
+  
+  if (Declaration->getOverriddenDecl() != nullptr) {
+    return parseOverridenDeclaration(Declaration, ModuleName, Range);
+  }
+  
+  std::string SymbolName = functionName(Declaration);
+  
+  auto IdentifierParts = functionIdentifierParts(Declaration,
+                                                 ModuleName,
+                                                 SymbolName);
+  ModuleName = IdentifierParts.first;
+  copyToVector(IdentifierParts.second, Parts);
+  
+  Symbol Symbol(combineIdentifier(Parts),
+                SymbolName,
+                ModuleName,
+                SymbolType::NamedFunction);
+  Symbols.push_back(SymbolWithRange(Symbol, Range));
+  
+  auto ParametersSymbolsOrError =
+    parseSeparateFunctionDeclarationForParameters(Declaration);
+  if (auto Error = ParametersSymbolsOrError.takeError()) {
+    return std::move(Error);
+  }
+  
+  copyToVector(ParametersSymbolsOrError.get(), Symbols);
+  
+  return Symbols;
+}
+
+} //namespace obfuscation
+} //namespace swift
diff --git a/swift/lib/Obfuscation/NameMapping.cpp b/swift/lib/Obfuscation/NameMapping.cpp
index ec77ed1e123..e71b9e642f8 100644
--- a/swift/lib/Obfuscation/NameMapping.cpp
+++ b/swift/lib/Obfuscation/NameMapping.cpp
@@ -77,6 +77,14 @@ generateNameForType(ObfuscatedIdentifiersGenerators &Generators,
       return Generators.IdentifierGenerator.generateName();
     case SymbolType::NamedFunction:
       return Generators.IdentifierGenerator.generateName();
+    case SymbolType::ExternalParameter:
+      return Generators.IdentifierGenerator.generateName();
+    case SymbolType::InternalParameter:
+      return Generators.IdentifierGenerator.generateName();
+    case SymbolType::SingleParameter:
+      return Generators.IdentifierGenerator.generateName();
+    case SymbolType::Variable:
+      return Generators.IdentifierGenerator.generateName();
     case SymbolType::Operator:
       return stringError("Operator names are not supported yet");
   }
@@ -98,7 +106,7 @@ proposeRenamings(const SymbolsJson &SymbolsJson) {
     if (auto Error = NameOrError.takeError()) {
       return std::move(Error);
     }
-    Renaming.ObfuscatedName = NameOrError.get();
+    Renaming.ObfuscatedName = NameOrError.get(); // "obfuscated" + Symbol.Name;
     RenamesJson.Symbols.push_back(Renaming);
   }
   
diff --git a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
new file mode 100644
index 00000000000..bb52eb02945
--- /dev/null
+++ b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
@@ -0,0 +1,189 @@
+#include "swift/Obfuscation/ParameterDeclarationParser.h"
+#include "swift/Obfuscation/FunctionDeclarationParser.h"
+#include "swift/Obfuscation/DeclarationParsingUtils.h"
+#include "swift/Obfuscation/Utils.h"
+
+#include <string>
+#include <vector>
+
+namespace swift {
+namespace obfuscation {
+  
+llvm::Expected<std::string> position(const ParamDecl *Declaration,
+                                     const FuncDecl *FunctionDeclaration) {
+  
+  auto ParameterLists = FunctionDeclaration->getParameterLists();
+  for (unsigned ListIndex = 0; ListIndex < ParameterLists.size(); ++ListIndex) {
+    
+    auto *ParameterList = ParameterLists[ListIndex];
+    for (unsigned ParameterIndex = 0;
+         ParameterIndex < ParameterList->size();
+         ++ParameterIndex) {
+      
+      auto *ParamDeclaration = ParameterList->get(ParameterIndex);
+      if (ParamDeclaration == Declaration) {
+        return "list" + std::to_string(ListIndex) +
+               "_parameter" + std::to_string(ParameterIndex);
+      }
+      
+    }
+    
+  }
+  
+  return stringError("Couldn't find parameter position");
+}
+  
+SymbolsOrError parse(const ParamDecl* Declaration) {
+  if (const auto *FunctionDeclaration =
+      dyn_cast<FuncDecl>(Declaration->getDeclContext())) {
+    
+    auto ModuleNameAndParts = moduleNameAndParts(Declaration);
+    std::string ModuleName = ModuleNameAndParts.first;
+    std::vector<std::string> Parts = ModuleNameAndParts.second;
+    
+    std::set<std::string> Modules;
+    auto *BaseFunctionDeclaration =
+      baseOverridenDeclarationWithModules(FunctionDeclaration, Modules);
+    
+    bool OverridenMethodIsFromTheSameModule =
+      Modules.size() == 0
+      || (Modules.size() == 1 && Modules.count(ModuleName) == 1);
+    
+    std::string ExternalName = Declaration->getArgumentName().str().str();
+    std::string InternalName = Declaration->getName().str().str();
+    
+    std::vector<SymbolWithRange> Symbols;
+    
+    std::string FunctionName = functionName(BaseFunctionDeclaration);
+    auto ModuleAndParts = functionIdentifierParts(BaseFunctionDeclaration,
+                                                  ModuleName,
+                                                  FunctionName);
+    copyToVector(ModuleAndParts.second, Parts);
+    
+    std::string FunctionModuleName = ModuleAndParts.first;
+    auto PositionOrError = position(Declaration, BaseFunctionDeclaration);
+    if (auto Error = PositionOrError.takeError()) {
+      return std::move(Error);
+    } else {
+      Parts.push_back("parameter.position." + PositionOrError.get());
+    }
+    
+    if (Declaration->getNameLoc().isValid()) {
+      if (Declaration->getArgumentNameLoc().isInvalid()
+          && OverridenMethodIsFromTheSameModule) {
+        
+        Parts.push_back("single." + InternalName);
+        CharSourceRange Range(Declaration->getNameLoc(),
+                              InternalName.length());
+        Symbol Symbol(combineIdentifier(Parts),
+                      InternalName,
+                      FunctionModuleName,
+                      SymbolType::SingleParameter);
+        Symbols.push_back(SymbolWithRange(Symbol, Range));
+        
+      } else {
+        
+        if (!ExternalName.empty() && OverridenMethodIsFromTheSameModule) {
+          auto ExternalParts = Parts;
+          
+          ExternalParts.push_back("external." + ExternalName);
+          CharSourceRange ExternalRange(Declaration->getArgumentNameLoc(),
+                                        ExternalName.length());
+          Symbol ExternalSymbol(combineIdentifier(ExternalParts),
+                                ExternalName,
+                                FunctionModuleName,
+                                SymbolType::ExternalParameter);
+          Symbols.push_back(SymbolWithRange(ExternalSymbol, ExternalRange));
+          
+        }
+        
+        Parts.push_back("internal." + InternalName);
+        CharSourceRange InternalRange(Declaration->getNameLoc(),
+                                      InternalName.length());
+        Symbol InternalSymbol(combineIdentifier(Parts),
+                              InternalName,
+                              ModuleName,
+                              SymbolType::InternalParameter);
+        Symbols.push_back(SymbolWithRange(InternalSymbol, InternalRange));
+      }
+    }
+    
+    return Symbols;
+  }
+  
+  return stringError("Couldn't identify what function parameter belong to");
+}
+  
+SymbolsOrError parametersSymbolsFromFunction(const FuncDecl* Declaration) {
+    
+    std::vector<SymbolWithRange> Symbols;
+    
+    auto ParameterLists = Declaration->getParameterLists();
+    for (auto *ParameterList : ParameterLists) {
+      for (auto *Parameter : *ParameterList) {
+        if (!Parameter->isImplicit()) {
+          auto SymbolsOrError = parse(Parameter);
+          if (auto Error = SymbolsOrError.takeError()) {
+            return std::move(Error);
+          } else {
+            copyToVector(SymbolsOrError.get(), Symbols);
+          }
+        }
+      }
+    }
+    
+    return Symbols;
+  }
+
+  
+SymbolsOrError
+parseSeparateFunctionDeclarationForParameters(const FuncDecl* Declaration) {
+  return parametersSymbolsFromFunction(Declaration);
+}
+  
+SymbolsOrError
+parseFunctionFromCallExpressionForParameters(const FuncDecl* Declaration) {
+  
+  auto SymbolsOrError = parametersSymbolsFromFunction(Declaration);
+  
+  if (auto Error = SymbolsOrError.takeError()) {
+    return std::move(Error);
+  } else {
+    
+    auto Symbols = SymbolsOrError.get();
+    auto SymbolsEnd = std::remove_if(Symbols.begin(),
+                                     Symbols.end(),
+                                     [](const SymbolWithRange &Element) {
+       return Element.Symbol.Type == SymbolType::InternalParameter;
+    });
+    Symbols.erase(SymbolsEnd, Symbols.end());
+    return Symbols;
+    
+  }
+}
+
+SymbolsOrError parseSeparateDeclarationWithRange(const ParamDecl* Declaration,
+                                                 CharSourceRange Range) {
+  
+  auto SymbolsOrError = parse(Declaration);
+  if (auto Error = SymbolsOrError.takeError()) {
+    return std::move(Error);
+  }
+  
+  auto Symbols = SymbolsOrError.get();
+  
+  std::vector<SymbolWithRange> Result;
+  for (auto &Symbol : Symbols) {
+    if (Range.overlaps(Symbol.Range)) {
+      return stringError("Not separate declaration being passed to "
+                         "`parseSeparateDeclarationWithRange()` method");
+    }
+    if (Symbol.Symbol.Type != SymbolType::ExternalParameter) {
+      Result.push_back(SymbolWithRange(Symbol.Symbol, Range));
+    }
+  }
+  return Result;
+}
+
+} //namespace obfuscation
+} //namespace swift
diff --git a/swift/lib/Obfuscation/Renaming.cpp b/swift/lib/Obfuscation/Renaming.cpp
index d70752980c1..ba9b497ad45 100644
--- a/swift/lib/Obfuscation/Renaming.cpp
+++ b/swift/lib/Obfuscation/Renaming.cpp
@@ -80,7 +80,7 @@ static bool shouldRename(const SymbolRenaming &Symbol,
 llvm::Expected<bool> performActualRenaming(SourceFile &Current,
                                            const std::string &ModuleName,
                                            const RenamesJson &RenamesJson,
-                                           swift::SourceManager &SourceManager,
+                                           SourceManager &SourceManager,
                                            unsigned int BufferId,
                                            StringRef Path) {
   bool performedRenaming = false;
diff --git a/swift/lib/Obfuscation/SourceFileWalker.cpp b/swift/lib/Obfuscation/SourceFileWalker.cpp
index 44d654de792..da043565191 100644
--- a/swift/lib/Obfuscation/SourceFileWalker.cpp
+++ b/swift/lib/Obfuscation/SourceFileWalker.cpp
@@ -1,5 +1,7 @@
 #include "swift/Obfuscation/SourceFileWalker.h"
 #include "swift/Obfuscation/DeclarationParser.h"
+#include "swift/Obfuscation/DeclarationParsingUtils.h"
+#include "swift/Obfuscation/ExpressionParser.h"
 
 #include <string>
 
@@ -9,20 +11,32 @@ namespace obfuscation {
 struct RenamesCollector: public SourceEntityWalker {
   std::set<SymbolWithRange> Bucket;
   
-  void handleSymbol(Symbol &Symbol, const CharSourceRange &Range) {
-    Bucket.insert(SymbolWithRange(Symbol, Range));
+  void handleSymbols(std::vector<SymbolWithRange> &Symbols) {
+    for (auto &Symbol : Symbols) {
+      Bucket.insert(Symbol);
+    }
+  }
+
+  bool walkToExprPre(Expr *Expression) override {
+    auto Symbols = extractSymbol(Expression);
+    if (auto Error = Symbols.takeError()) {
+      llvm::consumeError(std::move(Error));
+      return true;
+    }
+    handleSymbols(Symbols.get());
+    return true;
   }
   
   bool walkToDeclPre(Decl *Declaration, CharSourceRange Range) override {
     if (Declaration->isImplicit()) {
       return false;
     }
-    auto SymbolOrError = extractSymbol(Declaration);
-    if (auto Error = SymbolOrError.takeError()) {
+    auto Symbols = extractSymbol(Declaration, Range);
+    if (auto Error = Symbols.takeError()) {
       llvm::consumeError(std::move(Error));
       return true;
     }
-    handleSymbol(SymbolOrError.get(), Range);
+    handleSymbols(Symbols.get());
     return true;
   }
   
@@ -30,19 +44,19 @@ struct RenamesCollector: public SourceEntityWalker {
                           TypeDecl *CtorTyRef, ExtensionDecl *ExtTyRef,
                           Type T, ReferenceMetaData Data) override {
     
-    std::unique_ptr<llvm::Expected<Symbol>> SymbolOrError(nullptr);
+    std::unique_ptr<SymbolsOrError> Symbols(nullptr);
     if (CtorTyRef) {
-      SymbolOrError =
-        llvm::make_unique<llvm::Expected<Symbol>>(extractSymbol(CtorTyRef));
+      Symbols =
+        llvm::make_unique<SymbolsOrError>(extractSymbol(CtorTyRef, Range));
     } else {
-       SymbolOrError =
-        llvm::make_unique<llvm::Expected<Symbol>>(extractSymbol(Declaration));
+      Symbols =
+        llvm::make_unique<SymbolsOrError>(extractSymbol(Declaration, Range));
     }
-    if (auto Error = SymbolOrError->takeError()) {
+    if (auto Error = Symbols->takeError()) {
       llvm::consumeError(std::move(Error));
       return true;
     }
-    handleSymbol(SymbolOrError->get(), Range);
+    handleSymbols(Symbols->get());
     return true;
   }
 };
diff --git a/swift/lib/Obfuscation/SymbolExtracting.cpp b/swift/lib/Obfuscation/SymbolExtracting.cpp
index 54376093f5f..fa1cb8b3dd2 100644
--- a/swift/lib/Obfuscation/SymbolExtracting.cpp
+++ b/swift/lib/Obfuscation/SymbolExtracting.cpp
@@ -2,6 +2,7 @@
 #include "swift/Obfuscation/DataStructures.h"
 #include "swift/Obfuscation/CompilerInfrastructure.h"
 #include "swift/Obfuscation/SourceFileWalker.h"
+#include "swift/Obfuscation/Utils.h"
 
 #include <vector>
 #include <set>
@@ -30,9 +31,7 @@ llvm::Expected<SymbolsJson> extractSymbols(const FilesJson &FilesJson,
       }
     }
   }
-  std::copy(Result.begin(),
-            Result.end(),
-            std::back_inserter(Json.Symbols));
+  copyToVector(Result, Json.Symbols);
   return Json;
 }
 
-- 
2.17.1 (Apple Git-112)


From a6c0cb15c5871766d8377bce0b79646f52d5009b Mon Sep 17 00:00:00 2001
From: Jakub Sowa <jakub.sowa@polidea.com>
Date: Thu, 25 Jan 2018 16:39:09 +0100
Subject: [PATCH 038/138] SymbolExtractor integration tests.

Reviewers: jerzy.kleszcz, krzysztof.siejkowski

Reviewed By: jerzy.kleszcz, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2784
---
 .../test/Obfuscation/Inputs/AppDelegate.swift | 60 +++++++++++++
 .../Obfuscation/Inputs/ExpectedSymbols.json   | 85 ++++++++++++++++++-
 swift/test/Obfuscation/Inputs/Files.json      | 15 ----
 .../Obfuscation/Inputs/ViewController.swift   | 66 ++++++++++++++
 swift/test/Obfuscation/SymbolExtractor.swift  |  6 +-
 5 files changed, 211 insertions(+), 21 deletions(-)
 create mode 100644 swift/test/Obfuscation/Inputs/AppDelegate.swift
 delete mode 100644 swift/test/Obfuscation/Inputs/Files.json
 create mode 100644 swift/test/Obfuscation/Inputs/ViewController.swift

diff --git a/swift/test/Obfuscation/Inputs/AppDelegate.swift b/swift/test/Obfuscation/Inputs/AppDelegate.swift
new file mode 100644
index 00000000000..9691aec1dd2
--- /dev/null
+++ b/swift/test/Obfuscation/Inputs/AppDelegate.swift
@@ -0,0 +1,60 @@
+//
+//  AppDelegate.swift
+//  Constructors
+//
+//  Created by Krzysztof Siejkowski on 19/01/2018.
+//  Copyright © 2018 Polidea. All rights reserved.
+//
+
+import Cocoa
+
+@NSApplicationMain
+class AppDelegate: NSObject, NSApplicationDelegate {
+
+
+  func applicationDidFinishLaunching(_ aNotification: Notification) {
+    
+    let ss = SampleStruct()
+    let ssei = SampleStruct.init()
+    
+    
+    
+    let swi = StructWithInit()
+    let swiei = StructWithInit.init()
+    
+    
+    
+    let swmi = StructWithMemberwiseInit(property: 5)
+    let swmiei = StructWithMemberwiseInit.init(property: 5)
+    
+    
+    
+    let sc = SampleClass()
+    let scei = SampleClass.init()
+    
+    
+    
+    let cwi = ClassWithInit()
+    let cwiei = ClassWithInit.init()
+    
+    
+    
+    let vc1 = ViewController()
+    let vc1ei = ViewController.init()
+    let vc2 = ViewController(nibName: nil, bundle: nil)
+    let vc2ei = ViewController.init(nibName: nil, bundle: nil)
+    
+    
+    
+    let cvc = CustomInitViewController(number: 5)
+    let cvcei = CustomInitViewController.init(number: 5)
+    
+  }
+
+  func applicationWillTerminate(_ aNotification: Notification) {
+    // Insert code here to tear down your application
+  }
+
+
+}
+
diff --git a/swift/test/Obfuscation/Inputs/ExpectedSymbols.json b/swift/test/Obfuscation/Inputs/ExpectedSymbols.json
index b90e035aeb3..ee773814cc3 100644
--- a/swift/test/Obfuscation/Inputs/ExpectedSymbols.json
+++ b/swift/test/Obfuscation/Inputs/ExpectedSymbols.json
@@ -1,5 +1,82 @@
-{
-    "symbols": [ 
-        
+{  
+    "symbols":[  
+       {  
+          "name":"fatalError",
+          "identifier":"module.Swift.function.fatalError.signature.(@autoclosure () -> String, StaticString, UInt) -> Never",
+          "module":"Swift",
+          "type":"namedFunction"
+       },
+       {  
+          "name":"Int",
+          "identifier":"module.Swift.struct.Int",
+          "module":"Swift",
+          "type":"type"
+       },
+       {  
+          "name":"AppDelegate",
+          "identifier":"module.TestModuleName.class.AppDelegate",
+          "module":"TestModuleName",
+          "type":"type"
+       },
+       {  
+          "name":"ClassWithInit",
+          "identifier":"module.TestModuleName.class.ClassWithInit",
+          "module":"TestModuleName",
+          "type":"type"
+       },
+       {  
+          "name":"CustomInitViewController",
+          "identifier":"module.TestModuleName.class.CustomInitViewController",
+          "module":"TestModuleName",
+          "type":"type"
+       },
+       {  
+          "name":"SampleClass",
+          "identifier":"module.TestModuleName.class.SampleClass",
+          "module":"TestModuleName",
+          "type":"type"
+       },
+       {  
+          "name":"ViewController",
+          "identifier":"module.TestModuleName.class.ViewController",
+          "module":"TestModuleName",
+          "type":"type"
+       },
+       {  
+          "name":"SampleStruct",
+          "identifier":"module.TestModuleName.struct.SampleStruct",
+          "module":"TestModuleName",
+          "type":"type"
+       },
+       {  
+          "name":"StructWithInit",
+          "identifier":"module.TestModuleName.struct.StructWithInit",
+          "module":"TestModuleName",
+          "type":"type"
+       },
+       {  
+          "name":"StructWithMemberwiseInit",
+          "identifier":"module.TestModuleName.struct.StructWithMemberwiseInit",
+          "module":"TestModuleName",
+          "type":"type"
+       },
+       {  
+          "name":"applicationDidFinishLaunching",
+          "identifier":"module.TestModuleName.type.AppDelegate.method.applicationDidFinishLaunching.signature.<<error type>>",
+          "module":"TestModuleName",
+          "type":"namedFunction"
+       },
+       {  
+          "name":"applicationWillTerminate",
+          "identifier":"module.TestModuleName.type.AppDelegate.method.applicationWillTerminate.signature.<<error type>>",
+          "module":"TestModuleName",
+          "type":"namedFunction"
+       },
+       {  
+          "name":"viewDidLoad",
+          "identifier":"module.TestModuleName.type.ViewController.method.viewDidLoad.signature.() -> ()",
+          "module":"TestModuleName",
+          "type":"namedFunction"
+       }
     ]
-}
\ No newline at end of file
+ }
\ No newline at end of file
diff --git a/swift/test/Obfuscation/Inputs/Files.json b/swift/test/Obfuscation/Inputs/Files.json
deleted file mode 100644
index c10931a9d04..00000000000
--- a/swift/test/Obfuscation/Inputs/Files.json
+++ /dev/null
@@ -1,15 +0,0 @@
-{  
-    "project": {
-      "rootPath": ""
-    },
-    "module":{  
-       "name":"ModuleName"
-    },
-    "sdk":{  
-       "name":"",
-       "path":""
-    },
-    "filenames":[ ],
-    "explicitelyLinkedFrameworks":[ ],
-    "systemLinkedFrameworks":[ ]
- }
diff --git a/swift/test/Obfuscation/Inputs/ViewController.swift b/swift/test/Obfuscation/Inputs/ViewController.swift
new file mode 100644
index 00000000000..7f3cf292ef9
--- /dev/null
+++ b/swift/test/Obfuscation/Inputs/ViewController.swift
@@ -0,0 +1,66 @@
+//
+//  ViewController.swift
+//  Constructors
+//
+//  Created by Krzysztof Siejkowski on 19/01/2018.
+//  Copyright © 2018 Polidea. All rights reserved.
+//
+
+import Cocoa
+
+class SampleClass {
+  
+}
+
+class ClassWithInit {
+  
+  init() {
+    
+  }
+}
+
+struct SampleStruct {
+  
+}
+
+struct StructWithInit {
+  
+  init() {
+    
+  }
+}
+
+struct StructWithMemberwiseInit {
+  var property: Int
+}
+
+class CustomInitViewController: NSViewController {
+  
+  init(number: Int) {
+    super.init(nibName: nil, bundle: nil)
+  }
+  
+  required init?(coder aDecoder: NSCoder) {
+    fatalError()
+  }
+}
+
+
+
+class ViewController: NSViewController {
+
+  override func viewDidLoad() {
+    super.viewDidLoad()
+
+    // Do any additional setup after loading the view.
+  }
+
+  override var representedObject: Any? {
+    didSet {
+    // Update the view, if already loaded.
+    }
+  }
+
+
+}
+
diff --git a/swift/test/Obfuscation/SymbolExtractor.swift b/swift/test/Obfuscation/SymbolExtractor.swift
index 89942506ecc..0486b9cfa96 100644
--- a/swift/test/Obfuscation/SymbolExtractor.swift
+++ b/swift/test/Obfuscation/SymbolExtractor.swift
@@ -1,2 +1,4 @@
-//RUN: obfuscator-symbol-extractor -filesjson  %S/Inputs/Files.json -symbolsjson %t
-//RUN: diff -w %S/Inputs/ExpectedSymbols.json %t
+//RUN: echo "{\"project\": {\"rootPath\": \"TetsRootPath\"}, \"module\": {\"name\": \"TestModuleName\"}, \"sdk\": {\"name\": \"TestSdkName\", \"path\": \"TestSdkPath\"}, \"filenames\": [\"%S/Inputs\/ViewController.swift\", \"%S/Inputs\/AppDelegate.swift\"], \"explicitelyLinkedFrameworks\": [], \"systemLinkedFrameworks\": []}" > %T/files.json
+//RUN: obfuscator-symbol-extractor -filesjson %T/files.json -symbolsjson %t
+//RUN: diff -w %S/Inputs/expectedSymbols.json %t
+
-- 
2.17.1 (Apple Git-112)


From e4f7633b531072b6de104867358b6b7f3797dca2 Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Tue, 30 Jan 2018 17:54:58 +0100
Subject: [PATCH 039/138] Fixed symbol extractor integration tests

Reviewers: jakub.sowa, krzysztof.siejkowski

Reviewed By: jakub.sowa, krzysztof.siejkowski

Subscribers: jakub.sowa, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2787
---
 .../Obfuscation/Inputs/ExpectedSymbols.json   | 308 +++++++++++++-----
 swift/test/Obfuscation/SymbolExtractor.swift  |   2 +-
 2 files changed, 227 insertions(+), 83 deletions(-)

diff --git a/swift/test/Obfuscation/Inputs/ExpectedSymbols.json b/swift/test/Obfuscation/Inputs/ExpectedSymbols.json
index ee773814cc3..44e83a9d5b7 100644
--- a/swift/test/Obfuscation/Inputs/ExpectedSymbols.json
+++ b/swift/test/Obfuscation/Inputs/ExpectedSymbols.json
@@ -1,82 +1,226 @@
-{  
-    "symbols":[  
-       {  
-          "name":"fatalError",
-          "identifier":"module.Swift.function.fatalError.signature.(@autoclosure () -> String, StaticString, UInt) -> Never",
-          "module":"Swift",
-          "type":"namedFunction"
-       },
-       {  
-          "name":"Int",
-          "identifier":"module.Swift.struct.Int",
-          "module":"Swift",
-          "type":"type"
-       },
-       {  
-          "name":"AppDelegate",
-          "identifier":"module.TestModuleName.class.AppDelegate",
-          "module":"TestModuleName",
-          "type":"type"
-       },
-       {  
-          "name":"ClassWithInit",
-          "identifier":"module.TestModuleName.class.ClassWithInit",
-          "module":"TestModuleName",
-          "type":"type"
-       },
-       {  
-          "name":"CustomInitViewController",
-          "identifier":"module.TestModuleName.class.CustomInitViewController",
-          "module":"TestModuleName",
-          "type":"type"
-       },
-       {  
-          "name":"SampleClass",
-          "identifier":"module.TestModuleName.class.SampleClass",
-          "module":"TestModuleName",
-          "type":"type"
-       },
-       {  
-          "name":"ViewController",
-          "identifier":"module.TestModuleName.class.ViewController",
-          "module":"TestModuleName",
-          "type":"type"
-       },
-       {  
-          "name":"SampleStruct",
-          "identifier":"module.TestModuleName.struct.SampleStruct",
-          "module":"TestModuleName",
-          "type":"type"
-       },
-       {  
-          "name":"StructWithInit",
-          "identifier":"module.TestModuleName.struct.StructWithInit",
-          "module":"TestModuleName",
-          "type":"type"
-       },
-       {  
-          "name":"StructWithMemberwiseInit",
-          "identifier":"module.TestModuleName.struct.StructWithMemberwiseInit",
-          "module":"TestModuleName",
-          "type":"type"
-       },
-       {  
-          "name":"applicationDidFinishLaunching",
-          "identifier":"module.TestModuleName.type.AppDelegate.method.applicationDidFinishLaunching.signature.<<error type>>",
-          "module":"TestModuleName",
-          "type":"namedFunction"
-       },
-       {  
-          "name":"applicationWillTerminate",
-          "identifier":"module.TestModuleName.type.AppDelegate.method.applicationWillTerminate.signature.<<error type>>",
-          "module":"TestModuleName",
-          "type":"namedFunction"
-       },
-       {  
-          "name":"viewDidLoad",
-          "identifier":"module.TestModuleName.type.ViewController.method.viewDidLoad.signature.() -> ()",
-          "module":"TestModuleName",
-          "type":"namedFunction"
-       }
-    ]
- }
\ No newline at end of file
+{
+  "symbols": [
+    {
+      "name": "NSViewController",
+      "identifier": "module.AppKit.class.NSViewController",
+      "module": "AppKit",
+      "type": "type"
+    },
+    {
+      "name": "NSApplicationDelegate",
+      "identifier": "module.AppKit.protocol.NSApplicationDelegate",
+      "module": "AppKit",
+      "type": "type"
+    },
+    {
+      "name": "viewDidLoad",
+      "identifier": "module.AppKit.type.NSViewController.method.viewDidLoad.signature.() -> Void",
+      "module": "AppKit",
+      "type": "namedFunction"
+    },
+    {
+      "name": "NSCoder",
+      "identifier": "module.Foundation.class.NSCoder",
+      "module": "Foundation",
+      "type": "type"
+    },
+    {
+      "name": "Notification",
+      "identifier": "module.Foundation.struct.Notification",
+      "module": "Foundation",
+      "type": "type"
+    },
+    {
+      "name": "NSObject",
+      "identifier": "module.ObjectiveC.class.NSObject",
+      "module": "ObjectiveC",
+      "type": "type"
+    },
+    {
+      "name": "fatalError",
+      "identifier": "module.Swift.function.fatalError.signature.(@autoclosure () -> String, StaticString, UInt) -> Never",
+      "module": "Swift",
+      "type": "namedFunction"
+    },
+    {
+      "name": "Int",
+      "identifier": "module.Swift.struct.Int",
+      "module": "Swift",
+      "type": "type"
+    },
+    {
+      "name": "AppDelegate",
+      "identifier": "module.TestModuleName.class.AppDelegate",
+      "module": "TestModuleName",
+      "type": "type"
+    },
+    {
+      "name": "ClassWithInit",
+      "identifier": "module.TestModuleName.class.ClassWithInit",
+      "module": "TestModuleName",
+      "type": "type"
+    },
+    {
+      "name": "CustomInitViewController",
+      "identifier": "module.TestModuleName.class.CustomInitViewController",
+      "module": "TestModuleName",
+      "type": "type"
+    },
+    {
+      "name": "SampleClass",
+      "identifier": "module.TestModuleName.class.SampleClass",
+      "module": "TestModuleName",
+      "type": "type"
+    },
+    {
+      "name": "ViewController",
+      "identifier": "module.TestModuleName.class.ViewController",
+      "module": "TestModuleName",
+      "type": "type"
+    },
+    {
+      "name": "applicationDidFinishLaunching",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ()",
+      "module": "AppKit",
+      "type": "namedFunction"
+    },
+    {
+      "name": "aNotification",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().parameter.position.list1_parameter0.internal.aNotification",
+      "module": "TestModuleName",
+      "type": "internalParameter"
+    },
+    {
+      "name": "cvc",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cvc",
+      "module": "TestModuleName",
+      "type": "variable"
+    },
+    {
+      "name": "cvcei",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cvcei",
+      "module": "TestModuleName",
+      "type": "variable"
+    },
+    {
+      "name": "cwi",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cwi",
+      "module": "TestModuleName",
+      "type": "variable"
+    },
+    {
+      "name": "cwiei",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cwiei",
+      "module": "TestModuleName",
+      "type": "variable"
+    },
+    {
+      "name": "sc",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.sc",
+      "module": "TestModuleName",
+      "type": "variable"
+    },
+    {
+      "name": "scei",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.scei",
+      "module": "TestModuleName",
+      "type": "variable"
+    },
+    {
+      "name": "ss",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.ss",
+      "module": "TestModuleName",
+      "type": "variable"
+    },
+    {
+      "name": "ssei",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.ssei",
+      "module": "TestModuleName",
+      "type": "variable"
+    },
+    {
+      "name": "swi",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swi",
+      "module": "TestModuleName",
+      "type": "variable"
+    },
+    {
+      "name": "swiei",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swiei",
+      "module": "TestModuleName",
+      "type": "variable"
+    },
+    {
+      "name": "swmi",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swmi",
+      "module": "TestModuleName",
+      "type": "variable"
+    },
+    {
+      "name": "swmiei",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swmiei",
+      "module": "TestModuleName",
+      "type": "variable"
+    },
+    {
+      "name": "vc1",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc1",
+      "module": "TestModuleName",
+      "type": "variable"
+    },
+    {
+      "name": "vc1ei",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc1ei",
+      "module": "TestModuleName",
+      "type": "variable"
+    },
+    {
+      "name": "vc2",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc2",
+      "module": "TestModuleName",
+      "type": "variable"
+    },
+    {
+      "name": "vc2ei",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc2ei",
+      "module": "TestModuleName",
+      "type": "variable"
+    },
+    {
+      "name": "applicationWillTerminate",
+      "identifier": "module.TestModuleName.protocol.method.applicationWillTerminate.signature.(Notification) -> ()",
+      "module": "AppKit",
+      "type": "namedFunction"
+    },
+    {
+      "name": "aNotification",
+      "identifier": "module.TestModuleName.protocol.method.applicationWillTerminate.signature.(Notification) -> ().parameter.position.list1_parameter0.internal.aNotification",
+      "module": "TestModuleName",
+      "type": "internalParameter"
+    },
+    {
+      "name": "SampleStruct",
+      "identifier": "module.TestModuleName.struct.SampleStruct",
+      "module": "TestModuleName",
+      "type": "type"
+    },
+    {
+      "name": "StructWithInit",
+      "identifier": "module.TestModuleName.struct.StructWithInit",
+      "module": "TestModuleName",
+      "type": "type"
+    },
+    {
+      "name": "StructWithMemberwiseInit",
+      "identifier": "module.TestModuleName.struct.StructWithMemberwiseInit",
+      "module": "TestModuleName",
+      "type": "type"
+    },
+    {
+      "name": "property",
+      "identifier": "module.TestModuleName.variable.property",
+      "module": "TestModuleName",
+      "type": "variable"
+    }
+  ]
+}
\ No newline at end of file
diff --git a/swift/test/Obfuscation/SymbolExtractor.swift b/swift/test/Obfuscation/SymbolExtractor.swift
index 0486b9cfa96..5e1aaacb017 100644
--- a/swift/test/Obfuscation/SymbolExtractor.swift
+++ b/swift/test/Obfuscation/SymbolExtractor.swift
@@ -1,4 +1,4 @@
-//RUN: echo "{\"project\": {\"rootPath\": \"TetsRootPath\"}, \"module\": {\"name\": \"TestModuleName\"}, \"sdk\": {\"name\": \"TestSdkName\", \"path\": \"TestSdkPath\"}, \"filenames\": [\"%S/Inputs\/ViewController.swift\", \"%S/Inputs\/AppDelegate.swift\"], \"explicitelyLinkedFrameworks\": [], \"systemLinkedFrameworks\": []}" > %T/files.json
+//RUN: echo "{\"project\": {\"rootPath\": \"TetsRootPath\"}, \"module\": {\"name\": \"TestModuleName\"}, \"sdk\": {\"name\": \"%target-sdk-name\", \"path\": \"%sdk\"}, \"filenames\": [\"%S/Inputs\/ViewController.swift\", \"%S/Inputs\/AppDelegate.swift\"], \"explicitelyLinkedFrameworks\": [], \"systemLinkedFrameworks\": []}" > %T/files.json
 //RUN: obfuscator-symbol-extractor -filesjson %T/files.json -symbolsjson %t
 //RUN: diff -w %S/Inputs/expectedSymbols.json %t
 
-- 
2.17.1 (Apple Git-112)


From 227123991c124e3201df007bcf23b4d01fcd6e0a Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Tue, 30 Jan 2018 13:32:16 +0100
Subject: [PATCH 040/138] Variables and properties obfuscation. Handling
 static, overriding and protocol properties.

Reviewers: jakub.sowa, krzysztof.siejkowski

Reviewed By: jakub.sowa, krzysztof.siejkowski

Subscribers: jakub.sowa, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2785
---
 .../swift/Obfuscation/DataStructures.h        |  2 +
 .../swift/Obfuscation/DeclarationParser.h     |  3 +-
 .../Obfuscation/DeclarationParsingUtils.h     |  7 +-
 .../Obfuscation/FunctionDeclarationParser.h   |  4 -
 .../NominalTypeDeclarationParser.h            | 21 +++++
 .../Obfuscation/VariableDeclarationParser.h   | 16 ++++
 swift/lib/Obfuscation/CMakeLists.txt          |  2 +
 swift/lib/Obfuscation/DeclarationParser.cpp   | 57 +-----------
 .../Obfuscation/DeclarationParsingUtils.cpp   | 21 ++++-
 .../Obfuscation/FunctionDeclarationParser.cpp | 12 ---
 .../NominalTypeDeclarationParser.cpp          | 49 +++++++++++
 .../Obfuscation/VariableDeclarationParser.cpp | 88 +++++++++++++++++++
 12 files changed, 207 insertions(+), 75 deletions(-)
 create mode 100644 swift/include/swift/Obfuscation/NominalTypeDeclarationParser.h
 create mode 100644 swift/include/swift/Obfuscation/VariableDeclarationParser.h
 create mode 100644 swift/lib/Obfuscation/NominalTypeDeclarationParser.cpp
 create mode 100644 swift/lib/Obfuscation/VariableDeclarationParser.cpp

diff --git a/swift/include/swift/Obfuscation/DataStructures.h b/swift/include/swift/Obfuscation/DataStructures.h
index 8f232a32f17..b03e9bb29fb 100644
--- a/swift/include/swift/Obfuscation/DataStructures.h
+++ b/swift/include/swift/Obfuscation/DataStructures.h
@@ -73,6 +73,8 @@ struct Symbol {
   bool operator< (const Symbol &Right) const;
   bool operator== (const Symbol &Right) const;
 };
+  
+using SingleSymbolOrError = llvm::Expected<Symbol>;
 
 struct SymbolsJson {
   std::vector<Symbol> Symbols;
diff --git a/swift/include/swift/Obfuscation/DeclarationParser.h b/swift/include/swift/Obfuscation/DeclarationParser.h
index eefae87ff7b..369ccc63602 100644
--- a/swift/include/swift/Obfuscation/DeclarationParser.h
+++ b/swift/include/swift/Obfuscation/DeclarationParser.h
@@ -3,12 +3,11 @@
 
 #include "swift/Frontend/Frontend.h"
 #include "swift/Obfuscation/DataStructures.h"
-#include "swift/Obfuscation/DeclarationParsingUtils.h"
 #include "swift/Obfuscation/SourceFileWalker.h"
 
 namespace swift {
 namespace obfuscation {
-
+  
 /// Given the Swift AST node of Decl type, identifies the symbol it represents.
 ///
 /// In case no symbol is found, returnes Error.
diff --git a/swift/include/swift/Obfuscation/DeclarationParsingUtils.h b/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
index d0009cc40de..ab9c3bdb81b 100644
--- a/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
+++ b/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
@@ -3,6 +3,7 @@
 
 #include "swift/Frontend/Frontend.h"
 #include "swift/Obfuscation/DataStructures.h"
+#include "swift/Obfuscation/DeclarationParsingUtils.h"
 
 #include <string>
 #include <vector>
@@ -11,7 +12,7 @@ namespace swift {
 namespace obfuscation {
   
 using ModuleNameAndParts = std::pair<std::string, std::vector<std::string>>;
-
+  
 std::string combineIdentifier(std::vector<std::string> &Parts);
   
 std::string moduleName(const Decl* Declaration);
@@ -22,6 +23,10 @@ std::string typeName(const NominalTypeDecl* Declaration);
   
 llvm::Expected<std::string> enclosingTypeName(const Decl* Declaration);
 
+template<class T>
+const T* baseOverridenDeclarationWithModules(const T *Declaration,
+                                            std::set<std::string> &Modules);
+
 } //namespace obfuscation
 } //namespace swift
   
diff --git a/swift/include/swift/Obfuscation/FunctionDeclarationParser.h b/swift/include/swift/Obfuscation/FunctionDeclarationParser.h
index ccc8ebf3beb..a0c9062b8fe 100644
--- a/swift/include/swift/Obfuscation/FunctionDeclarationParser.h
+++ b/swift/include/swift/Obfuscation/FunctionDeclarationParser.h
@@ -15,10 +15,6 @@ namespace obfuscation {
     
 std::string functionName(const FuncDecl* Declaration);
   
-const FuncDecl*
-baseOverridenDeclarationWithModules(const FuncDecl* Declaration,
-                                    std::set<std::string> &Modules);
-  
 ModuleNameAndParts functionIdentifierParts(const FuncDecl* Declaration,
                                            const std::string &ModuleName,
                                            const std::string &SymbolName);
diff --git a/swift/include/swift/Obfuscation/NominalTypeDeclarationParser.h b/swift/include/swift/Obfuscation/NominalTypeDeclarationParser.h
new file mode 100644
index 00000000000..85843738417
--- /dev/null
+++ b/swift/include/swift/Obfuscation/NominalTypeDeclarationParser.h
@@ -0,0 +1,21 @@
+#ifndef NominalTypeDeclarationParser_h
+#define NominalTypeDeclarationParser_h
+
+#include "swift/Frontend/Frontend.h"
+#include "swift/Obfuscation/DataStructures.h"
+#include "swift/Obfuscation/DeclarationParsingUtils.h"
+
+namespace swift {
+namespace obfuscation {
+
+llvm::Expected<ModuleNameAndParts>
+nominalTypeIdentifierParts(const NominalTypeDecl *Declaration,
+                           const std::string &ModuleName,
+                           const std::string &SymbolName);
+  
+SingleSymbolOrError parse(const NominalTypeDecl* Declaration);
+
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* NominalTypeDeclarationParser_h */
diff --git a/swift/include/swift/Obfuscation/VariableDeclarationParser.h b/swift/include/swift/Obfuscation/VariableDeclarationParser.h
new file mode 100644
index 00000000000..82c00071840
--- /dev/null
+++ b/swift/include/swift/Obfuscation/VariableDeclarationParser.h
@@ -0,0 +1,16 @@
+#ifndef VariableDeclarationParser_h
+#define VariableDeclarationParser_h
+
+#include "swift/Frontend/Frontend.h"
+#include "swift/Obfuscation/DataStructures.h"
+
+namespace swift {
+namespace obfuscation {
+    
+SingleSymbolOrError parse(const VarDecl* Declaration);
+    
+} //namespace obfuscation
+} //namespace swift
+
+
+#endif /* VariableDeclarationParser_h */
diff --git a/swift/lib/Obfuscation/CMakeLists.txt b/swift/lib/Obfuscation/CMakeLists.txt
index b9ae559efac..91c5e7ea068 100644
--- a/swift/lib/Obfuscation/CMakeLists.txt
+++ b/swift/lib/Obfuscation/CMakeLists.txt
@@ -7,11 +7,13 @@ add_swift_library(swiftObfuscation STATIC
   FileIO.cpp
   FunctionDeclarationParser.cpp
   NameMapping.cpp
+  NominalTypeDeclarationParser.cpp
   ParameterDeclarationParser.cpp
   Renaming.cpp
   SourceFileWalker.cpp
   SymbolExtracting.cpp
   Utils.cpp
+  VariableDeclarationParser.cpp
   LINK_LIBRARIES
   swiftParse
   swiftAST
diff --git a/swift/lib/Obfuscation/DeclarationParser.cpp b/swift/lib/Obfuscation/DeclarationParser.cpp
index 8c44cf51dbd..40b90cdf67c 100644
--- a/swift/lib/Obfuscation/DeclarationParser.cpp
+++ b/swift/lib/Obfuscation/DeclarationParser.cpp
@@ -1,4 +1,6 @@
 #include "swift/Obfuscation/DeclarationParser.h"
+#include "swift/Obfuscation/NominalTypeDeclarationParser.h"
+#include "swift/Obfuscation/VariableDeclarationParser.h"
 #include "swift/Obfuscation/FunctionDeclarationParser.h"
 #include "swift/Obfuscation/ParameterDeclarationParser.h"
 #include "swift/Obfuscation/Utils.h"
@@ -6,61 +8,6 @@
 namespace swift {
 namespace obfuscation {
   
-using SingleSymbolOrError = llvm::Expected<Symbol>;
-  
-SingleSymbolOrError parse(const NominalTypeDecl* Declaration) {
-  
-  auto ModuleNameAndParts = moduleNameAndParts(Declaration);
-  std::string ModuleName = ModuleNameAndParts.first;
-  std::vector<std::string> Parts = ModuleNameAndParts.second;
-  std::string SymbolName = typeName(Declaration);
-  
-  if (auto *EnumDeclaration = dyn_cast<EnumDecl>(Declaration)) {
-    Parts.push_back("enum." + SymbolName);
-  } else if (auto *ClassDeclaration = dyn_cast<ClassDecl>(Declaration)) {
-    Parts.push_back("class." + SymbolName);
-  } else if (auto *ProtocolDeclaration = dyn_cast<ProtocolDecl>(Declaration)) {
-    Parts.push_back("protocol." + SymbolName);
-  } else if (auto *StructDeclaration = dyn_cast<StructDecl>(Declaration)) {
-    Parts.push_back("struct." + SymbolName);
-  } else {
-    return stringError("found unsupported declaration type");
-  }
-  
-  return Symbol(combineIdentifier(Parts),
-                SymbolName,
-                ModuleName,
-                SymbolType::Type);
-}
-
-SingleSymbolOrError parse(const VarDecl* Declaration) {
-  
-  if (Declaration->getOverriddenDecl() != nullptr) {
-    return stringError("obfuscating overriding properties is not supported");
-  }
-  
-  auto ModuleNameAndParts = moduleNameAndParts(Declaration);
-  std::string ModuleName = ModuleNameAndParts.first;
-  std::vector<std::string> Parts = ModuleNameAndParts.second;
-  std::string SymbolName = Declaration->getName().str().str();
-  
-  if (auto *FunctionDeclaration =
-      dyn_cast<FuncDecl>(Declaration->getDeclContext())) {
-    std::string FunctionName = functionName(FunctionDeclaration);
-    auto ModuleAndParts = functionIdentifierParts(FunctionDeclaration,
-                                                  ModuleName,
-                                                  FunctionName);
-    copyToVector(ModuleAndParts.second, Parts);
-  }
-  
-  Parts.push_back("variable." + SymbolName);
-  
-  return Symbol(combineIdentifier(Parts),
-                SymbolName,
-                ModuleName,
-                SymbolType::Variable);
-}
-
 SymbolsOrError extractSymbol(Decl* Declaration, CharSourceRange Range) {
   
   std::unique_ptr<SingleSymbolOrError> SingleSymbolOrErrorPointer(nullptr);
diff --git a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
index 3ecb60c76d3..b7eafd81a9a 100644
--- a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
+++ b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
@@ -7,7 +7,7 @@
 
 namespace swift {
 namespace obfuscation {
-
+  
 std::string combineIdentifier(std::vector<std::string> &Parts) {
   if (Parts.empty()) {
     return "";
@@ -48,6 +48,25 @@ llvm::Expected<std::string> enclosingTypeName(const Decl* Declaration) {
   return stringError("enclosing context of this declaration is not supported");
 }
   
+template<class T>
+const T* baseOverridenDeclarationWithModules(const T *Declaration,
+                                            std::set<std::string> &Modules) {
+  static_assert(std::is_base_of<Decl, T>::value, "T is not a subclass of Decl");
+  if (auto* OverrideDeclaration = Declaration->getOverriddenDecl()) {
+    Modules.insert(moduleName(OverrideDeclaration));
+    return baseOverridenDeclarationWithModules(OverrideDeclaration, Modules);
+  } else {
+    return Declaration;
+  }
+}
+
+template const VarDecl*
+baseOverridenDeclarationWithModules(const VarDecl *Declaration,
+                                    std::set<std::string> &Modules);
+template const FuncDecl*
+baseOverridenDeclarationWithModules(const FuncDecl *Declaration,
+                                    std::set<std::string> &Modules);
+
 } //namespace obfuscation
 } //namespace swift
 
diff --git a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
index d93c2a3a9d1..8fb1068ea36 100644
--- a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
@@ -1,6 +1,5 @@
 #include "swift/Obfuscation/FunctionDeclarationParser.h"
 #include "swift/Obfuscation/ParameterDeclarationParser.h"
-#include "swift/Obfuscation/DeclarationParsingUtils.h"
 #include "swift/Obfuscation/Utils.h"
 
 #include <string>
@@ -29,17 +28,6 @@ llvm::Error isDeclarationSupported(const FuncDecl* Declaration) {
   return llvm::Error::success();
 }
 
-const FuncDecl*
-baseOverridenDeclarationWithModules(const FuncDecl* Declaration,
-                                    std::set<std::string> &Modules) {
-  if (auto* OverrideDeclaration = Declaration->getOverriddenDecl()) {
-    Modules.insert(moduleName(OverrideDeclaration));
-    return baseOverridenDeclarationWithModules(OverrideDeclaration, Modules);
-  } else {
-    return Declaration;
-  }
-}
-
 std::string functionSignature(const FuncDecl *Declaration) {
   if (Declaration->getDeclContext()->isTypeContext()) {
     auto Interface = Declaration->getMethodInterfaceType().getString();
diff --git a/swift/lib/Obfuscation/NominalTypeDeclarationParser.cpp b/swift/lib/Obfuscation/NominalTypeDeclarationParser.cpp
new file mode 100644
index 00000000000..1b870e0b39f
--- /dev/null
+++ b/swift/lib/Obfuscation/NominalTypeDeclarationParser.cpp
@@ -0,0 +1,49 @@
+#include "swift/Obfuscation/NominalTypeDeclarationParser.h"
+#include "swift/Obfuscation/Utils.h"
+
+namespace swift {
+namespace obfuscation {
+    
+llvm::Expected<ModuleNameAndParts>
+nominalTypeIdentifierParts(const NominalTypeDecl *Declaration,
+                           const std::string &ModuleName,
+                           const std::string &SymbolName) {
+  
+  std::vector<std::string> Parts;
+  
+  if (auto *EnumDeclaration = dyn_cast<EnumDecl>(Declaration)) {
+    Parts.push_back("enum." + SymbolName);
+  } else if (auto *ClassDeclaration = dyn_cast<ClassDecl>(Declaration)) {
+    Parts.push_back("class." + SymbolName);
+  } else if (auto *ProtocolDeclaration = dyn_cast<ProtocolDecl>(Declaration)) {
+    Parts.push_back("protocol." + SymbolName);
+  } else if (auto *StructDeclaration = dyn_cast<StructDecl>(Declaration)) {
+    Parts.push_back("struct." + SymbolName);
+  } else {
+    return stringError("found unsupported declaration type");
+  }
+  return std::make_pair(ModuleName, Parts);
+}
+
+SingleSymbolOrError parse(const NominalTypeDecl* Declaration) {
+  
+  auto ModuleNameAndParts = moduleNameAndParts(Declaration);
+  std::string ModuleName = ModuleNameAndParts.first;
+  std::vector<std::string> Parts = ModuleNameAndParts.second;
+  std::string SymbolName = typeName(Declaration);
+  
+  auto NominalTypeParts = nominalTypeIdentifierParts(Declaration,
+                                                     ModuleName,
+                                                     SymbolName);
+  if (auto Error = NominalTypeParts.takeError()) {
+    return std::move(Error);
+  }
+  
+  return Symbol(combineIdentifier(NominalTypeParts.get().second),
+                SymbolName,
+                NominalTypeParts.get().first,
+                SymbolType::Type);
+}
+
+} //namespace obfuscation
+} //namespace swift
diff --git a/swift/lib/Obfuscation/VariableDeclarationParser.cpp b/swift/lib/Obfuscation/VariableDeclarationParser.cpp
new file mode 100644
index 00000000000..e4674e7542c
--- /dev/null
+++ b/swift/lib/Obfuscation/VariableDeclarationParser.cpp
@@ -0,0 +1,88 @@
+#include "swift/Obfuscation/VariableDeclarationParser.h"
+#include "swift/Obfuscation/FunctionDeclarationParser.h"
+#include "swift/Obfuscation/NominalTypeDeclarationParser.h"
+#include "swift/Obfuscation/DeclarationParsingUtils.h"
+#include "swift/Obfuscation/Utils.h"
+
+namespace swift {
+namespace obfuscation {
+
+SingleSymbolOrError
+parseOverridenDeclaration(const VarDecl *Declaration,
+                          const std::string &ModuleName) {
+  std::set<std::string> Modules;
+  auto Base = baseOverridenDeclarationWithModules(Declaration, Modules);
+  if (Modules.size() == 1 && Modules.count(ModuleName) == 1) {
+    return parse(Base);
+  } else {
+    return stringError("only overriding properties from the same module "
+                       "might be safely obfuscated");
+  }
+}
+
+llvm::Error appendContextToParts(const VarDecl *Declaration,
+                                    std::string &ModuleName,
+                                    std::vector<std::string> &Parts) {
+  auto ProtocolRequirements = Declaration->getSatisfiedProtocolRequirements();
+  auto *ProtocolDeclaration =
+  dyn_cast<ProtocolDecl>(Declaration->getDeclContext());
+  // TODO: for now, we're renaming all protocol properties with the same name
+  // to the same obfuscated name. this should be improved in the future.
+  if (!ProtocolRequirements.empty() || ProtocolDeclaration != nullptr) {
+    auto UpdatedModuleName = ProtocolRequirements.empty() ?
+    moduleName(ProtocolDeclaration) : moduleName(ProtocolRequirements.front());
+    ModuleName = UpdatedModuleName;
+    Parts.push_back("protocol");
+    
+  } else if (auto *FunctionDeclaration =
+             dyn_cast<FuncDecl>(Declaration->getDeclContext())) {
+    std::string FunctionName = functionName(FunctionDeclaration);
+    auto ModuleAndParts = functionIdentifierParts(FunctionDeclaration,
+                                                  ModuleName,
+                                                  FunctionName);
+    copyToVector(ModuleAndParts.second, Parts);
+    
+  } else if (auto *NominalTypeDeclaration =
+             dyn_cast<NominalTypeDecl>(Declaration->getDeclContext())) {
+    std::string TypeName = typeName(NominalTypeDeclaration);
+    auto ModuleAndParts = nominalTypeIdentifierParts(NominalTypeDeclaration,
+                                                     ModuleName,
+                                                     TypeName);
+    if (auto Error = ModuleAndParts.takeError()) {
+      return Error;
+    }
+    copyToVector(ModuleAndParts.get().second, Parts);
+  }
+  
+  return llvm::Error::success();
+}
+
+SingleSymbolOrError parse(const VarDecl* Declaration) {
+  
+  auto ModuleNameAndParts = moduleNameAndParts(Declaration);
+  std::string ModuleName = ModuleNameAndParts.first;
+  std::vector<std::string> Parts = ModuleNameAndParts.second;
+  std::string SymbolName = Declaration->getName().str().str();
+  
+  if (Declaration->getOverriddenDecl() != nullptr) {
+    return parseOverridenDeclaration(Declaration, ModuleName);
+  }
+  
+  if (auto Error = appendContextToParts(Declaration, ModuleName, Parts)) {
+    return std::move(Error);
+  }
+  
+  if (Declaration->isStatic()) {
+    Parts.push_back("static");
+  }
+  
+  Parts.push_back("variable." + SymbolName);
+  
+  return Symbol(combineIdentifier(Parts),
+                SymbolName,
+                ModuleName,
+                SymbolType::Variable);
+}
+  
+} //namespace obfuscation
+} //namespace swift
-- 
2.17.1 (Apple Git-112)


From b2ecd52b1e3896febb236dd7e4d8e2e7d9162620 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Thu, 1 Feb 2018 18:07:30 +0100
Subject: [PATCH 041/138] Added reading target triple from Files.json and
 printdiagnostics flag

Reviewers: jakub.sowa, jerzy.kleszcz

Reviewed By: jerzy.kleszcz

Subscribers: jakub.sowa, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2791
---
 README.md                                     |  8 ++-
 Scripts/build.sh                              |  2 +-
 Scripts/build_vanilla_compiler.sh             |  2 +-
 Scripts/run_tests_locally.sh                  |  4 +-
 .../Obfuscation/CompilerInfrastructure.h      |  3 +-
 .../swift/Obfuscation/DataStructures.h        |  1 +
 swift/include/swift/Obfuscation/FileIO.h      | 67 ++++++++++---------
 swift/include/swift/Obfuscation/Renaming.h    |  4 +-
 .../swift/Obfuscation/SymbolExtracting.h      |  4 +-
 .../Obfuscation/CompilerInfrastructure.cpp    | 36 ++++++----
 swift/lib/Obfuscation/DataStructures.cpp      |  1 +
 swift/lib/Obfuscation/Renaming.cpp            |  8 ++-
 swift/lib/Obfuscation/SourceFileWalker.cpp    |  5 +-
 swift/lib/Obfuscation/SymbolExtracting.cpp    |  9 ++-
 swift/test/Obfuscation/SymbolExtractor.swift  |  4 +-
 .../obfuscator-renamer/obfuscator-renamer.cpp | 17 ++++-
 .../obfuscator-symbol-extractor.cpp           | 25 +++++--
 .../DataStructuresDeserializationTests.cpp    |  5 +-
 .../SwiftObfuscation/FileIOTests.cpp          |  5 +-
 19 files changed, 140 insertions(+), 70 deletions(-)

diff --git a/README.md b/README.md
index 06452ec95a0..a8dba381456 100644
--- a/README.md
+++ b/README.md
@@ -164,8 +164,12 @@ The input data formats are `Files.json` and `Renames.json` and are described in
 5. Build the Swift compiler in the Xcode-friendly way.  
    `swift/utils/build-script --clean --xcode --release-debuginfo --debug-swift`
 
-6. (optional) Build the Swift compiler in the version allowing for the fast incremental compilation with ninja  
-   `swift/utils/build-script -R`
+6. Build the Swift compiler using ninja with support for iOS, tvOS and watchOS
+   `swift/utils/build-script -R --ios --tvos --watchos --release-debuginfo --debug-swift`
+
+7. Copy the generated libraries from ninja build to Xcode build
+   `rm -r -f build/Xcode-RelWithDebInfoAssert+swift-DebugAssert/swift-macosx-x86_64/Debug/lib/swift`
+   `cp -r build/Ninja-RelWithDebInfoAssert+swift-DebugAssert/swift-macosx-x86_64/Debug/lib/swift build/Xcode-RelWithDebInfoAssert+swift-DebugAssert/swift-macosx-x86_64/Debug/lib/swift`
 
 ### Build documentation (optional)
 
diff --git a/Scripts/build.sh b/Scripts/build.sh
index 63e51044545..ac82091f3d6 100644
--- a/Scripts/build.sh
+++ b/Scripts/build.sh
@@ -1,4 +1,4 @@
 #!/bin/bash
 
-swift/utils/build-script -R
+swift/utils/build-script -R --ios --tvos --watchos
 
diff --git a/Scripts/build_vanilla_compiler.sh b/Scripts/build_vanilla_compiler.sh
index ba2b2d980ee..1b7759e9cb6 100755
--- a/Scripts/build_vanilla_compiler.sh
+++ b/Scripts/build_vanilla_compiler.sh
@@ -9,7 +9,7 @@ echo "Switching git from commit ${commit_sha} to commit 3cb38854e963b84873a7b776
 git checkout 3cb38854e963b84873a7b7769b6c0b3f28c86015
 
 echo "Building project at vanilla state"
-swift/utils/build-script -R
+swift/utils/build-script -R --ios --tvos --watchos
 
 echo "Making directory for sources in cache"
 mkdir build/TMP_SOURCES
diff --git a/Scripts/run_tests_locally.sh b/Scripts/run_tests_locally.sh
index f0cfd9c33c2..540b605b7cf 100644
--- a/Scripts/run_tests_locally.sh
+++ b/Scripts/run_tests_locally.sh
@@ -1,8 +1,8 @@
 #!/bin/bash
 
-xcodebuild -project build/Xcode-RelWithDebInfoAssert+swift-DebugAssert/swift-macosx-x86_64/Swift.xcodeproj -target SwiftObfuscationTests
+# xcodebuild -project build/Xcode-RelWithDebInfoAssert+swift-DebugAssert/swift-macosx-x86_64/Swift.xcodeproj -target SwiftObfuscationTests -configuration Debug
 
-./build/Xcode-RelWithDebInfoAssert+swift-DebugAssert/swift-macosx-x86_64/unittests/SwiftObfuscation/Debug/SwiftObfuscationTests
+# ./build/Xcode-RelWithDebInfoAssert+swift-DebugAssert/swift-macosx-x86_64/unittests/SwiftObfuscation/Debug/SwiftObfuscationTests
 
 swift/utils/run-test swift/test/Obfuscation --build-dir build/Xcode-RelWithDebInfoAssert+swift-DebugAssert/swift-macosx-x86_64 --lit build/Xcode-RelWithDebInfoAssert+swift-DebugAssert/llvm-macosx-x86_64/Debug/bin/llvm-lit
 
diff --git a/swift/include/swift/Obfuscation/CompilerInfrastructure.h b/swift/include/swift/Obfuscation/CompilerInfrastructure.h
index 902e2bbb16b..13e427234f1 100644
--- a/swift/include/swift/Obfuscation/CompilerInfrastructure.h
+++ b/swift/include/swift/Obfuscation/CompilerInfrastructure.h
@@ -34,7 +34,8 @@ namespace obfuscation {
 llvm::Error
 setupCompilerInstance(CompilerInstance &CompilerInstance,
                       const FilesJson &FilesJson,
-                      std::string MainExecutablePath);
+                      std::string MainExecutablePath,
+                      llvm::raw_ostream &LogStream);
   
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/include/swift/Obfuscation/DataStructures.h b/swift/include/swift/Obfuscation/DataStructures.h
index b03e9bb29fb..20134186960 100644
--- a/swift/include/swift/Obfuscation/DataStructures.h
+++ b/swift/include/swift/Obfuscation/DataStructures.h
@@ -18,6 +18,7 @@ struct Project {
 
 struct Module {
   std::string Name;
+  std::string TargetTriple;
 };
 
 struct Sdk {
diff --git a/swift/include/swift/Obfuscation/FileIO.h b/swift/include/swift/Obfuscation/FileIO.h
index 33db05c19c3..20696ee4fd1 100644
--- a/swift/include/swift/Obfuscation/FileIO.h
+++ b/swift/include/swift/Obfuscation/FileIO.h
@@ -9,42 +9,44 @@
 namespace swift {
 namespace obfuscation {
 
-/// Provides memory buffer for given path.
-///
-/// In case of failing during execution returns Error.
-///
-/// Typical usage:
-/// \code
-///  auto Buffer = BufferProvider.getBuffer(PathToJson);
-/// \endcode
-///
-/// \param Path - string containing path to file.
-///
-/// \returns llvm::ErrorOr object containing either the memory buffer
-/// or llvm::Error object with the information.
 struct MemoryBufferProvider {
-    virtual ~MemoryBufferProvider() = default;
-    virtual llvm::ErrorOr<std::unique_ptr<llvm::MemoryBuffer>>
-    getBuffer(std::string Path) const;
+  virtual ~MemoryBufferProvider() = default;
+  
+  /// Provides memory buffer for given path.
+  ///
+  /// In case of failing during execution returns Error.
+  ///
+  /// Typical usage:
+  /// \code
+  ///  auto Buffer = BufferProvider.getBuffer(PathToJson);
+  /// \endcode
+  ///
+  /// \param Path - string containing path to file.
+  ///
+  /// \returns llvm::ErrorOr object containing either the memory buffer
+  /// or llvm::Error object with the information.
+  virtual llvm::ErrorOr<std::unique_ptr<llvm::MemoryBuffer>>
+  getBuffer(std::string Path) const;
 };
 
-/// Provides file for given path.
-///
-/// In case of failing during execution returns Error.
-///
-/// Typical usage:
-/// \code
-/// auto File = Factory.getFile(PathToOutput);
-/// \endcode
-///
-/// \param Path - string containing path to file.
-///
-/// \returns llvm::ErrorOr object containing either the file
-/// or llvm::Error object with error information.
 template <typename FileType>
 struct FileFactory {
-    virtual ~FileFactory() = default;
-    virtual llvm::ErrorOr<std::unique_ptr<FileType>> getFile(std::string Path);
+  virtual ~FileFactory() = default;
+  
+  /// Provides file for given path.
+  ///
+  /// In case of failing during execution returns Error.
+  ///
+  /// Typical usage:
+  /// \code
+  /// auto File = Factory.getFile(PathToOutput);
+  /// \endcode
+  ///
+  /// \param Path - string containing path to file.
+  ///
+  /// \returns llvm::ErrorOr object containing either the file
+  /// or llvm::Error object with error information.
+  virtual llvm::ErrorOr<std::unique_ptr<FileType>> getFile(std::string Path);
 };
 
     
@@ -70,7 +72,8 @@ struct FileFactory {
 /// the information.
 template<typename T>
 llvm::Expected<T> parseJson(std::string PathToJson,
-                            const MemoryBufferProvider &BufferProvider = MemoryBufferProvider());
+                            const MemoryBufferProvider &BufferProvider =
+                              MemoryBufferProvider());
 
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/include/swift/Obfuscation/Renaming.h b/swift/include/swift/Obfuscation/Renaming.h
index c98082921fb..38ddee1b55d 100644
--- a/swift/include/swift/Obfuscation/Renaming.h
+++ b/swift/include/swift/Obfuscation/Renaming.h
@@ -46,12 +46,14 @@ using FilesList = std::vector<std::pair<std::string, std::string>>;
 /// contains the new name.
 /// \param ObfuscatedProjectPath Path where the project copy will be created
 /// and renaming will be performed.
+/// \param DiagnosticStream Stream for writing the diagnostic information into.
 ///
 /// \returns List of project files that were affected by the renaming.
 llvm::Expected<FilesList> performRenaming(std::string MainExecutablePath,
                                           const FilesJson &FilesJson,
                                           const RenamesJson &RenamesJson,
-                                          std::string ObfuscatedProjectPath);
+                                          std::string ObfuscatedProjectPath,
+                                          llvm::raw_ostream &DiagnosticStream);
 
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/include/swift/Obfuscation/SymbolExtracting.h b/swift/include/swift/Obfuscation/SymbolExtracting.h
index d1317c12b04..f26258d2105 100644
--- a/swift/include/swift/Obfuscation/SymbolExtracting.h
+++ b/swift/include/swift/Obfuscation/SymbolExtracting.h
@@ -36,12 +36,14 @@ namespace obfuscation {
 ///        this function. This is required for the compiler to use the relative
 ///        paths for it's inner workings (such as finding the necessary
 ///        libraries to dynamically link).
+/// \param DiagnosticStream Stream for writing the diagnostic information into.
 ///
 /// \returns llvm::Expected object containing either the extracted symbols
 ///          in the SymbolJson structure or the llvm::Error object with
 ///          the information on the failure cause.
 llvm::Expected<SymbolsJson> extractSymbols(const FilesJson &FilesJson,
-                                           std::string MainExecutablePath);
+                                           std::string MainExecutablePath,
+                                           llvm::raw_ostream &DiagnosticStream);
 
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/lib/Obfuscation/CompilerInfrastructure.cpp b/swift/lib/Obfuscation/CompilerInfrastructure.cpp
index 088334269f6..d0296a1a86e 100644
--- a/swift/lib/Obfuscation/CompilerInfrastructure.cpp
+++ b/swift/lib/Obfuscation/CompilerInfrastructure.cpp
@@ -12,6 +12,7 @@ namespace obfuscation {
 
 struct CompilerInvocationConfiguration {
   std::string ModuleName;
+  std::string Triple;
   std::string MainExecutablePath;
   std::string SdkPath;
   std::vector<std::string> InputFilenames;
@@ -20,6 +21,7 @@ struct CompilerInvocationConfiguration {
   CompilerInvocationConfiguration(const FilesJson &FilesJson,
                                   std::string MainExecutablePath)
   : ModuleName(FilesJson.Module.Name),
+  Triple(FilesJson.Module.TargetTriple),
   MainExecutablePath(MainExecutablePath),
   SdkPath(FilesJson.Sdk.Path),
   InputFilenames(FilesJson.Filenames) {
@@ -32,28 +34,36 @@ struct CompilerInvocationConfiguration {
 
 CompilerInvocation
 createInvocation(const CompilerInvocationConfiguration &Configuration) {
-    CompilerInvocation Invocation;
-    Invocation.setModuleName(Configuration.ModuleName);
-    Invocation.setMainExecutablePath(Configuration.MainExecutablePath);
-    for (const auto &InputFilename : Configuration.InputFilenames) {
-      Invocation.addInputFilename(InputFilename);
-    }
-    Invocation.getLangOptions().AttachCommentsToDecls = true;
-    Invocation.setFrameworkSearchPaths(Configuration.Paths);
-    Invocation.setSDKPath(Configuration.SdkPath);
-    return Invocation;
+  CompilerInvocation Invocation;
+  Invocation.setModuleName(Configuration.ModuleName);
+  Invocation.setMainExecutablePath(Configuration.MainExecutablePath);
+  for (const auto &InputFilename : Configuration.InputFilenames) {
+    Invocation.addInputFilename(InputFilename);
+  }
+  Invocation.getLangOptions().AttachCommentsToDecls = true;
+  Invocation.setFrameworkSearchPaths(Configuration.Paths);
+  Invocation.setSDKPath(Configuration.SdkPath);
+  Invocation.setTargetTriple(Configuration.Triple);
+  return Invocation;
 }
 
 llvm::Error
 setupCompilerInstance(CompilerInstance &CompilerInstance,
                       const FilesJson &FilesJson,
-                      std::string MainExecutablePath) {
+                      std::string MainExecutablePath,
+                      llvm::raw_ostream &LogStream) {
   CompilerInvocationConfiguration Configuration(FilesJson, MainExecutablePath);
   auto Invocation = createInvocation(Configuration);
-  if (CompilerInstance.setup(Invocation)) {
-    return stringError("Error during JSON file read");
+  PrintingDiagnosticConsumer Printer(LogStream);
+  CompilerInstance.addDiagnosticConsumer(&Printer);
+  if (CompilerInstance.setup(Invocation) || Printer.didErrorOccur()) {
+    return stringError("Error during compiler setup");
   }
   CompilerInstance.performSema();
+  if (Printer.didErrorOccur()) {
+    LogStream << "Error during compiler semantic analysis. Be extra careful "
+                 "while interpreting the results." << '\n';
+  }
   return llvm::Error::success();
 }
 
diff --git a/swift/lib/Obfuscation/DataStructures.cpp b/swift/lib/Obfuscation/DataStructures.cpp
index 60e534385a2..2e9fd679d1d 100644
--- a/swift/lib/Obfuscation/DataStructures.cpp
+++ b/swift/lib/Obfuscation/DataStructures.cpp
@@ -95,6 +95,7 @@ using ObfuscationModule = swift::obfuscation::Module;
 void MappingTraits<ObfuscationModule>::mapping(IO &Io,
                                                ObfuscationModule &Object) {
   Io.mapRequired("name", Object.Name);
+  Io.mapRequired("triple", Object.TargetTriple);
 }
 
 void MappingTraits<Sdk>::mapping(IO &Io, Sdk &Object) {
diff --git a/swift/lib/Obfuscation/Renaming.cpp b/swift/lib/Obfuscation/Renaming.cpp
index ba9b497ad45..1a8411d82a5 100644
--- a/swift/lib/Obfuscation/Renaming.cpp
+++ b/swift/lib/Obfuscation/Renaming.cpp
@@ -125,10 +125,14 @@ llvm::Expected<FilesList>
 performRenaming(std::string MainExecutablePath,
                 const FilesJson &FilesJson,
                 const RenamesJson &RenamesJson,
-                std::string ObfuscatedProjectPath) {
+                std::string ObfuscatedProjectPath,
+                llvm::raw_ostream &DiagnosticStream) {
   
   CompilerInstance CI;
-  if (auto Error = setupCompilerInstance(CI, FilesJson, MainExecutablePath)) {
+  if (auto Error = setupCompilerInstance(CI,
+                                         FilesJson,
+                                         MainExecutablePath,
+                                         DiagnosticStream)) {
     return std::move(Error);
   }
   
diff --git a/swift/lib/Obfuscation/SourceFileWalker.cpp b/swift/lib/Obfuscation/SourceFileWalker.cpp
index da043565191..2a0c903b173 100644
--- a/swift/lib/Obfuscation/SourceFileWalker.cpp
+++ b/swift/lib/Obfuscation/SourceFileWalker.cpp
@@ -53,7 +53,10 @@ struct RenamesCollector: public SourceEntityWalker {
         llvm::make_unique<SymbolsOrError>(extractSymbol(Declaration, Range));
     }
     if (auto Error = Symbols->takeError()) {
-      llvm::consumeError(std::move(Error));
+      llvm::handleAllErrors(std::move(Error),
+                            [](const llvm::StringError &StringError) {
+        llvm::errs() << "Error: " << StringError.message();
+      });
       return true;
     }
     handleSymbols(Symbols->get());
diff --git a/swift/lib/Obfuscation/SymbolExtracting.cpp b/swift/lib/Obfuscation/SymbolExtracting.cpp
index fa1cb8b3dd2..cdeded900e2 100644
--- a/swift/lib/Obfuscation/SymbolExtracting.cpp
+++ b/swift/lib/Obfuscation/SymbolExtracting.cpp
@@ -10,13 +10,16 @@
 namespace swift {
 namespace obfuscation {
 
-llvm::Expected<SymbolsJson> extractSymbols(const FilesJson &FilesJson,
-                                          std::string MainExecutablePath) {
+llvm::Expected<SymbolsJson>
+extractSymbols(const FilesJson &FilesJson,
+               std::string MainExecutablePath,
+               llvm::raw_ostream &DiagnosticStream) {
   
   CompilerInstance CompilerInstance;
   auto Error = setupCompilerInstance(CompilerInstance,
                                      FilesJson,
-                                     MainExecutablePath);
+                                     MainExecutablePath,
+                                     DiagnosticStream);
   if (Error) {
     return std::move(Error);
   }
diff --git a/swift/test/Obfuscation/SymbolExtractor.swift b/swift/test/Obfuscation/SymbolExtractor.swift
index 5e1aaacb017..ee5c507cff0 100644
--- a/swift/test/Obfuscation/SymbolExtractor.swift
+++ b/swift/test/Obfuscation/SymbolExtractor.swift
@@ -1,4 +1,4 @@
-//RUN: echo "{\"project\": {\"rootPath\": \"TetsRootPath\"}, \"module\": {\"name\": \"TestModuleName\"}, \"sdk\": {\"name\": \"%target-sdk-name\", \"path\": \"%sdk\"}, \"filenames\": [\"%S/Inputs\/ViewController.swift\", \"%S/Inputs\/AppDelegate.swift\"], \"explicitelyLinkedFrameworks\": [], \"systemLinkedFrameworks\": []}" > %T/files.json
-//RUN: obfuscator-symbol-extractor -filesjson %T/files.json -symbolsjson %t
+//RUN: echo "{\"project\": {\"rootPath\": \"TetsRootPath\"}, \"module\": {\"name\": \"TestModuleName\", \"triple\": \"x86_64-apple-macosx10.13\"}, \"sdk\": {\"name\": \"%target-sdk-name\", \"path\": \"%sdk\"}, \"filenames\": [\"%S/Inputs\/ViewController.swift\", \"%S/Inputs\/AppDelegate.swift\"], \"explicitelyLinkedFrameworks\": [], \"systemLinkedFrameworks\": []}" > %T/files.json
+//RUN: obfuscator-symbol-extractor -filesjson %T/files.json -symbolsjson %t -printdiagnostics
 //RUN: diff -w %S/Inputs/expectedSymbols.json %t
 
diff --git a/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp b/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
index 9f6b3f41d9b..1aa382dd781 100644
--- a/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
+++ b/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
@@ -27,6 +27,13 @@ ObfuscatedProjectPath("obfuscatedproject",
                       llvm::cl::desc("Path to the directory for obfuscated "
                                      "project"),
                       llvm::cl::cat(ObfuscatorRenamer));
+
+static llvm::cl::opt<bool>
+PrintDiagnostics("printdiagnostics",
+                 llvm::cl::init(false),
+                 llvm::cl::desc("Print diagnostic informations from "
+                                "Swift compiler"),
+                 llvm::cl::cat(ObfuscatorRenamer));
   
 }
 
@@ -85,10 +92,18 @@ int main(int argc, char *argv[]) {
   std::string MainExecutablePath =
     llvm::sys::fs::getMainExecutable(argv[0], MainExecutablePointer);
   
+  llvm::raw_ostream *DiagnosticStream;
+  if (options::PrintDiagnostics) {
+    DiagnosticStream = &llvm::outs();
+  } else {
+    DiagnosticStream = new llvm::raw_null_ostream();
+  }
+  
   auto FilesOrError = performRenaming(MainExecutablePath,
                                       FilesJsonOrError.get(),
                                       RenamesJsonOrError.get(),
-                                      options::ObfuscatedProjectPath);
+                                      options::ObfuscatedProjectPath,
+                                      *DiagnosticStream);
   if (auto Error = FilesOrError.takeError()) {
     ExitOnError(std::move(Error));
   }
diff --git a/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp b/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
index 393b5f39b73..58edf68966b 100644
--- a/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
+++ b/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
@@ -22,6 +22,13 @@ SymbolJsonPath("symbolsjson",
                llvm::cl::desc("Name of the file to write extracted Symbols"),
                llvm::cl::cat(ObfuscatorSymbolExtractor));
   
+static llvm::cl::opt<bool>
+PrintDiagnostics("printdiagnostics",
+                 llvm::cl::init(false),
+                 llvm::cl::desc("Print diagnostic informations from "
+                                "Swift compiler"),
+                 llvm::cl::cat(ObfuscatorSymbolExtractor));
+
 }
 
 void printSymbols(const std::vector<Symbol> &Symbols) {
@@ -63,14 +70,22 @@ int main(int argc, char *argv[]) {
   std::string MainExecutablePath =
     llvm::sys::fs::getMainExecutable(argv[0], MainExecutablePointer);
 
-    auto FilesJsonOrError = parseJson<FilesJson>(PathToJson);
+  auto FilesJsonOrError = parseJson<FilesJson>(PathToJson);
 
-    if (auto Error = FilesJsonOrError.takeError()) {
-        ExitOnError(std::move(Error));
-    }
+  if (auto Error = FilesJsonOrError.takeError()) {
+      ExitOnError(std::move(Error));
+  }
+  
+  llvm::raw_ostream *DiagnosticStream;
+  if (options::PrintDiagnostics) {
+    DiagnosticStream = &llvm::outs();
+  } else {
+    DiagnosticStream = new llvm::raw_null_ostream();
+  }
   
   auto SymbolsOrError = extractSymbols(FilesJsonOrError.get(),
-                                       MainExecutablePath);
+                                       MainExecutablePath,
+                                       *DiagnosticStream);
   if (auto Error = SymbolsOrError.takeError()) {
     ExitOnError(std::move(Error));
   }
diff --git a/swift/unittests/SwiftObfuscation/DataStructuresDeserializationTests.cpp b/swift/unittests/SwiftObfuscation/DataStructuresDeserializationTests.cpp
index 63e05436de3..2897644f2f0 100644
--- a/swift/unittests/SwiftObfuscation/DataStructuresDeserializationTests.cpp
+++ b/swift/unittests/SwiftObfuscation/DataStructuresDeserializationTests.cpp
@@ -27,12 +27,14 @@ TEST(DataStructuresDeserialization, DeserializeProject) {
 }
 
 TEST(DataStructuresDeserialization, DeserializeModule) {
-  std::string JsonString = "{\n\"name\": \"sampleName\"\n}";
+  std::string JsonString = "{\n\"name\": \"sampleName\","
+                           "\"triple\": \"sampleTriple\"\n}";
 
   auto DeserializedOrError = deserialize<Module>(JsonString);
 
   auto Expected = Module();
   Expected.Name = "sampleName";
+  Expected.TargetTriple = "sampleTriple";
   
   if (auto ErrorCode = DeserializedOrError.takeError()) {
     llvm::consumeError(std::move(ErrorCode));
@@ -41,6 +43,7 @@ TEST(DataStructuresDeserialization, DeserializeModule) {
   auto Deserialized = DeserializedOrError.get();
 
   EXPECT_EQ(Deserialized.Name, Expected.Name);
+  EXPECT_EQ(Deserialized.TargetTriple, Expected.TargetTriple);
 }
 
 TEST(DataStructuresDeserialization, DeserializeSdk) {
diff --git a/swift/unittests/SwiftObfuscation/FileIOTests.cpp b/swift/unittests/SwiftObfuscation/FileIOTests.cpp
index 0f5c038acb2..8180bea9623 100644
--- a/swift/unittests/SwiftObfuscation/FileIOTests.cpp
+++ b/swift/unittests/SwiftObfuscation/FileIOTests.cpp
@@ -90,6 +90,7 @@ TEST(ParseJson, SuccessParsingText) {
     FakeMemoryBufferProvider FakeProvider = FakeMemoryBufferProvider();
     std::string RootPath = "testRootPath";
     std::string ModuleName = "testModuleName";
+    std::string ModuleTriple = "testModuleTriple";
     std::string SdkName = "testName";
     std::string SdkPath = "testSDKPath";
     std::string FileName1 = "testFileName1";
@@ -100,7 +101,8 @@ TEST(ParseJson, SuccessParsingText) {
     FakeMemoryBuffer::Payload = "{\r\n  \"project\":{\r\n"
         "\"rootPath\":\"" + RootPath + "\"\r\n   },"
         "\"module\":{\r\n"
-        "\"name\":\"" + ModuleName + "\"\r\n   },\r\n"
+        "\"name\":\"" + ModuleName + "\",\r\n"
+        "\"triple\": \"" + ModuleTriple + "\"\r\n   },\r\n"
         "\"sdk\":{\r\n"
         "\"name\":\"" + SdkName + "\",\r\n"
         "\"path\":\"" + SdkPath + "\"\r\n   },\r\n"
@@ -124,6 +126,7 @@ TEST(ParseJson, SuccessParsingText) {
     auto FilesJson = Result.get();
     EXPECT_EQ(FilesJson.Project.RootPath, RootPath);
     EXPECT_EQ(FilesJson.Module.Name, ModuleName);
+    EXPECT_EQ(FilesJson.Module.TargetTriple, ModuleTriple);
     EXPECT_EQ(FilesJson.Sdk.Name, SdkName);
     EXPECT_EQ(FilesJson.Sdk.Path, SdkPath);
     std::vector<std::string> ExpectedFilenames = {FileName1, FileName2};
-- 
2.17.1 (Apple Git-112)


From 3901ecf1e9600f484012abcd88523cce34e84ace Mon Sep 17 00:00:00 2001
From: Jakub Sowa <jakub.sowa@polidea.com>
Date: Fri, 2 Feb 2018 11:48:37 +0100
Subject: [PATCH 042/138] Operators Obfuscation

Reviewers: krzysztof.siejkowski, jerzy.kleszcz

Reviewed By: krzysztof.siejkowski, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2789
---
 .../Obfuscation/DeclarationParsingUtils.h     |  4 +-
 .../swift/Obfuscation/OperatorParser.h        | 15 +++++
 swift/lib/Obfuscation/CMakeLists.txt          |  1 +
 swift/lib/Obfuscation/DeclarationParser.cpp   | 13 +++-
 .../Obfuscation/DeclarationParsingUtils.cpp   |  4 ++
 .../Obfuscation/FunctionDeclarationParser.cpp | 13 +---
 swift/lib/Obfuscation/NameMapping.cpp         | 40 ++++++++++--
 swift/lib/Obfuscation/OperatorParser.cpp      | 65 +++++++++++++++++++
 .../ParameterDeclarationParser.cpp            | 31 +++++----
 .../Obfuscation/VariableDeclarationParser.cpp |  2 +-
 10 files changed, 152 insertions(+), 36 deletions(-)
 create mode 100644 swift/include/swift/Obfuscation/OperatorParser.h
 create mode 100644 swift/lib/Obfuscation/OperatorParser.cpp

diff --git a/swift/include/swift/Obfuscation/DeclarationParsingUtils.h b/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
index ab9c3bdb81b..142639c022c 100644
--- a/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
+++ b/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
@@ -20,7 +20,9 @@ std::string moduleName(const Decl* Declaration);
 ModuleNameAndParts moduleNameAndParts(const Decl *Declaration);
   
 std::string typeName(const NominalTypeDecl* Declaration);
-  
+
+std::string declarationName(const ValueDecl* Declaration);
+
 llvm::Expected<std::string> enclosingTypeName(const Decl* Declaration);
 
 template<class T>
diff --git a/swift/include/swift/Obfuscation/OperatorParser.h b/swift/include/swift/Obfuscation/OperatorParser.h
new file mode 100644
index 00000000000..9daef5187c3
--- /dev/null
+++ b/swift/include/swift/Obfuscation/OperatorParser.h
@@ -0,0 +1,15 @@
+#ifndef OperatorParser_h
+#define OperatorParser_h
+
+#include "swift/Obfuscation/DeclarationParsingUtils.h"
+
+namespace swift {
+namespace obfuscation {
+
+llvm::Expected<Symbol> parse(const OperatorDecl* Declaration);
+SymbolsOrError parseOperator(const FuncDecl* Declaration, CharSourceRange Range);
+
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* OperatorParser_h */
diff --git a/swift/lib/Obfuscation/CMakeLists.txt b/swift/lib/Obfuscation/CMakeLists.txt
index 91c5e7ea068..9cd64df5640 100644
--- a/swift/lib/Obfuscation/CMakeLists.txt
+++ b/swift/lib/Obfuscation/CMakeLists.txt
@@ -2,6 +2,7 @@ add_swift_library(swiftObfuscation STATIC
   CompilerInfrastructure.cpp
   DataStructures.cpp
   DeclarationParser.cpp
+  OperatorParser.cpp
   DeclarationParsingUtils.cpp
   ExpressionParser.cpp
   FileIO.cpp
diff --git a/swift/lib/Obfuscation/DeclarationParser.cpp b/swift/lib/Obfuscation/DeclarationParser.cpp
index 40b90cdf67c..5506cd77f71 100644
--- a/swift/lib/Obfuscation/DeclarationParser.cpp
+++ b/swift/lib/Obfuscation/DeclarationParser.cpp
@@ -1,6 +1,7 @@
 #include "swift/Obfuscation/DeclarationParser.h"
 #include "swift/Obfuscation/NominalTypeDeclarationParser.h"
 #include "swift/Obfuscation/VariableDeclarationParser.h"
+#include "swift/Obfuscation/OperatorParser.h"
 #include "swift/Obfuscation/FunctionDeclarationParser.h"
 #include "swift/Obfuscation/ParameterDeclarationParser.h"
 #include "swift/Obfuscation/Utils.h"
@@ -18,8 +19,16 @@ SymbolsOrError extractSymbol(Decl* Declaration, CharSourceRange Range) {
     SingleSymbolOrErrorPointer =
       llvm::make_unique<SingleSymbolOrError>(parse(NominalTypeDeclaration));
   } else if (const auto *FuncDeclaration = dyn_cast<FuncDecl>(Declaration)) {
-    SymbolsOrErrorPointer =
-      llvm::make_unique<SymbolsOrError>(parse(FuncDeclaration, Range));
+      if (FuncDeclaration->isOperator()) {
+          SymbolsOrErrorPointer =
+          llvm::make_unique<SymbolsOrError>(parseOperator(FuncDeclaration, Range));
+      } else {
+          SymbolsOrErrorPointer =
+          llvm::make_unique<SymbolsOrError>(parse(FuncDeclaration, Range));
+      }
+  } else if (const auto *OperatorDeclaration = dyn_cast<OperatorDecl>(Declaration)) {
+      SingleSymbolOrErrorPointer =
+      llvm::make_unique<SingleSymbolOrError>(parse(OperatorDeclaration));
   } else if (const auto *ParamDeclaration = dyn_cast<ParamDecl>(Declaration)) {
     auto Symbols = parseSeparateDeclarationWithRange(ParamDeclaration, Range);
     SymbolsOrErrorPointer =
diff --git a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
index b7eafd81a9a..c93838443ed 100644
--- a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
+++ b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
@@ -27,6 +27,10 @@ std::string moduleName(const Decl* Declaration) {
   return Declaration->getModuleContext()->getBaseName().getIdentifier().get();
 }
 
+std::string declarationName(const ValueDecl* Declaration) {
+  return Declaration->getName().str().str();
+}
+
 ModuleNameAndParts moduleNameAndParts(const Decl *Declaration) {
   std::vector<std::string> Parts;
   std::string ModuleName = moduleName(Declaration);
diff --git a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
index 8fb1068ea36..b96664ee127 100644
--- a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
@@ -1,6 +1,7 @@
 #include "swift/Obfuscation/FunctionDeclarationParser.h"
 #include "swift/Obfuscation/ParameterDeclarationParser.h"
 #include "swift/Obfuscation/Utils.h"
+#include "swift/Obfuscation/DeclarationParsingUtils.h"
 
 #include <string>
 #include <vector>
@@ -8,15 +9,7 @@
 namespace swift {
 namespace obfuscation {
 
-std::string functionName(const FuncDecl* Declaration) {
-  return Declaration->getName().str().str();
-}
-
 llvm::Error isDeclarationSupported(const FuncDecl* Declaration) {
-  if (Declaration->isBinaryOperator() || Declaration->isUnaryOperator()) {
-    return stringError("don't support operators right now, since it requires "
-                       "the special obfuscated identifier");
-  }
   if (Declaration->isGetterOrSetter()) {
     return stringError("don't support getters and setters right now, since "
                        "it's the computed property name that should be "
@@ -93,7 +86,7 @@ SymbolsOrError parseOverridenDeclaration(const FuncDecl *Declaration,
                        "might be safely obfuscated");
   }
 }
-  
+
 SymbolsOrError parse(const FuncDecl* Declaration, CharSourceRange Range) {
   
   if (auto Error = isDeclarationSupported(Declaration)) {
@@ -109,7 +102,7 @@ SymbolsOrError parse(const FuncDecl* Declaration, CharSourceRange Range) {
     return parseOverridenDeclaration(Declaration, ModuleName, Range);
   }
   
-  std::string SymbolName = functionName(Declaration);
+  std::string SymbolName = declarationName(Declaration);
   
   auto IdentifierParts = functionIdentifierParts(Declaration,
                                                  ModuleName,
diff --git a/swift/lib/Obfuscation/NameMapping.cpp b/swift/lib/Obfuscation/NameMapping.cpp
index e71b9e642f8..a1e10846acf 100644
--- a/swift/lib/Obfuscation/NameMapping.cpp
+++ b/swift/lib/Obfuscation/NameMapping.cpp
@@ -10,8 +10,6 @@ namespace swift {
 namespace obfuscation {
 
 class UniqueIdentifierGenerator {
-  
-private:
   std::set<std::string> GeneratedSymbols;
   static const std::vector<std::string> UniquelyTailSymbols;
   static const std::vector<std::string> HeadSymbols;
@@ -44,7 +42,6 @@ private:
   }
   
 public:
-  
   UniqueIdentifierGenerator()
   : TailSymbols(concatenateHeadAndTailSymbols()),
   HeadGenerator(HeadSymbols),
@@ -55,6 +52,32 @@ public:
   }
   
 };
+
+class UniqueOperatorGenerator {
+  std::set<std::string> GeneratedSymbols;
+  static const std::vector<std::string> OperatorSymbols;
+  RandomUniformStringGenerator Generator;
+  const std::string::size_type IdentifierLength = 32;
+
+  llvm::Expected<std::string> generateName(int NumbersOfTriesLeft) {
+    if (NumbersOfTriesLeft <= 0) {
+      return stringError("couldn't generate unique type name");
+    }
+    auto Name = Generator.rand(IdentifierLength);
+
+    if (GeneratedSymbols.insert(Name).second) {
+      return Name;
+    } else {
+      return generateName(NumbersOfTriesLeft - 1);
+    }
+  }
+
+public:
+  UniqueOperatorGenerator() : Generator(OperatorSymbols) {}
+  llvm::Expected<std::string> generateName() {
+    return generateName(100);
+  }
+};
   
 const std::vector<std::string> UniqueIdentifierGenerator::UniquelyTailSymbols =
   {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
@@ -64,9 +87,14 @@ const std::vector<std::string> UniqueIdentifierGenerator::HeadSymbols =
    "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C",
    "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R",
    "S", "T", "U", "V", "W", "X", "Y", "Z"};
-  
+
+// "/" symbol is omitted to avoid generating comments in operator names
+const std::vector<std::string> UniqueOperatorGenerator::OperatorSymbols =
+    {"=", "-", "+", "!", "*", "%", "<", ">", "&", "|", "^", "~", "?"};
+
 struct ObfuscatedIdentifiersGenerators {
   UniqueIdentifierGenerator IdentifierGenerator;
+  UniqueOperatorGenerator OperatorGenerator;
 };
 
 llvm::Expected<std::string>
@@ -86,7 +114,7 @@ generateNameForType(ObfuscatedIdentifiersGenerators &Generators,
     case SymbolType::Variable:
       return Generators.IdentifierGenerator.generateName();
     case SymbolType::Operator:
-      return stringError("Operator names are not supported yet");
+      return Generators.OperatorGenerator.generateName();
   }
 }
   
@@ -106,7 +134,7 @@ proposeRenamings(const SymbolsJson &SymbolsJson) {
     if (auto Error = NameOrError.takeError()) {
       return std::move(Error);
     }
-    Renaming.ObfuscatedName = NameOrError.get(); // "obfuscated" + Symbol.Name;
+    Renaming.ObfuscatedName = NameOrError.get();
     RenamesJson.Symbols.push_back(Renaming);
   }
   
diff --git a/swift/lib/Obfuscation/OperatorParser.cpp b/swift/lib/Obfuscation/OperatorParser.cpp
new file mode 100644
index 00000000000..581b77625e6
--- /dev/null
+++ b/swift/lib/Obfuscation/OperatorParser.cpp
@@ -0,0 +1,65 @@
+#include "swift/Obfuscation/OperatorParser.h"
+#include "swift/Obfuscation/FunctionDeclarationParser.h"
+#include "swift/Obfuscation/ParameterDeclarationParser.h"
+#include "swift/Obfuscation/Utils.h"
+
+namespace swift {
+namespace obfuscation {
+
+using SingleSymbolOrError = llvm::Expected<Symbol>;
+
+SingleSymbolOrError parse(const OperatorDecl* Declaration) {
+
+  auto ModuleNameAndParts = moduleNameAndParts(Declaration);
+  std::string ModuleName = ModuleNameAndParts.first;
+  std::vector<std::string> Parts = ModuleNameAndParts.second;
+  std::string SymbolName = Declaration->getName().str().str();
+  Parts.push_back("operator." + SymbolName);
+
+  return Symbol(combineIdentifier(Parts),
+                SymbolName,
+                ModuleName,
+                SymbolType::Operator);
+}
+
+SymbolsOrError parseOperator(const FuncDecl* Declaration, CharSourceRange Range) {
+
+    std::vector<SymbolWithRange> Symbols;
+
+    auto ParametersSymbolsOrError =
+    parseSeparateFunctionDeclarationForParameters(Declaration);
+    if (auto Error = ParametersSymbolsOrError.takeError()) {
+        return std::move(Error);
+    }
+    copyToVector(ParametersSymbolsOrError.get(), Symbols);
+
+    auto ModuleNameAndParts = moduleNameAndParts(Declaration);
+    std::string ModuleName = ModuleNameAndParts.first;
+
+    if (auto OperatorDecl = Declaration->getOperatorDecl()) {
+        auto OperatorModuleName = moduleName(OperatorDecl);
+        if (ModuleName != OperatorModuleName) {
+            return Symbols;
+        }
+    }
+
+    std::vector<std::string> Parts = ModuleNameAndParts.second;
+    std::string SymbolName = declarationName(Declaration);
+
+    auto IdentifierParts = functionIdentifierParts(Declaration,
+                                                   ModuleName,
+                                                   SymbolName);
+    ModuleName = IdentifierParts.first;
+    Parts.push_back("operator." + SymbolName);
+
+    Symbol Symbol(combineIdentifier(Parts),
+                  SymbolName,
+                  ModuleName,
+                  SymbolType::Operator);
+
+    Symbols.push_back(SymbolWithRange(Symbol, Range));
+    return Symbols;
+}
+
+} //namespace obfuscation
+} //namespace swift
diff --git a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
index bb52eb02945..80fec8f83a4 100644
--- a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
@@ -54,7 +54,7 @@ SymbolsOrError parse(const ParamDecl* Declaration) {
     
     std::vector<SymbolWithRange> Symbols;
     
-    std::string FunctionName = functionName(BaseFunctionDeclaration);
+    std::string FunctionName = declarationName(BaseFunctionDeclaration);
     auto ModuleAndParts = functionIdentifierParts(BaseFunctionDeclaration,
                                                   ModuleName,
                                                   FunctionName);
@@ -116,26 +116,25 @@ SymbolsOrError parse(const ParamDecl* Declaration) {
   
 SymbolsOrError parametersSymbolsFromFunction(const FuncDecl* Declaration) {
     
-    std::vector<SymbolWithRange> Symbols;
-    
-    auto ParameterLists = Declaration->getParameterLists();
-    for (auto *ParameterList : ParameterLists) {
-      for (auto *Parameter : *ParameterList) {
-        if (!Parameter->isImplicit()) {
-          auto SymbolsOrError = parse(Parameter);
-          if (auto Error = SymbolsOrError.takeError()) {
-            return std::move(Error);
-          } else {
-            copyToVector(SymbolsOrError.get(), Symbols);
-          }
+  std::vector<SymbolWithRange> Symbols;
+
+  auto ParameterLists = Declaration->getParameterLists();
+  for (auto *ParameterList : ParameterLists) {
+    for (auto *Parameter : *ParameterList) {
+      if (!Parameter->isImplicit()) {
+        auto SymbolsOrError = parse(Parameter);
+        if (auto Error = SymbolsOrError.takeError()) {
+          return std::move(Error);
+        } else {
+          copyToVector(SymbolsOrError.get(), Symbols);
         }
       }
     }
-    
-    return Symbols;
   }
 
-  
+  return Symbols;
+}
+
 SymbolsOrError
 parseSeparateFunctionDeclarationForParameters(const FuncDecl* Declaration) {
   return parametersSymbolsFromFunction(Declaration);
diff --git a/swift/lib/Obfuscation/VariableDeclarationParser.cpp b/swift/lib/Obfuscation/VariableDeclarationParser.cpp
index e4674e7542c..3ee98cd1dab 100644
--- a/swift/lib/Obfuscation/VariableDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/VariableDeclarationParser.cpp
@@ -36,7 +36,7 @@ llvm::Error appendContextToParts(const VarDecl *Declaration,
     
   } else if (auto *FunctionDeclaration =
              dyn_cast<FuncDecl>(Declaration->getDeclContext())) {
-    std::string FunctionName = functionName(FunctionDeclaration);
+    std::string FunctionName = declarationName(FunctionDeclaration);
     auto ModuleAndParts = functionIdentifierParts(FunctionDeclaration,
                                                   ModuleName,
                                                   FunctionName);
-- 
2.17.1 (Apple Git-112)


From 3a4f63414b1077e8f4cadd3ce0a9ef3459c52a73 Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Fri, 2 Feb 2018 11:47:41 +0100
Subject: [PATCH 043/138] =?UTF-8?q?Not=20renaming=20function=E2=80=99s=20i?=
 =?UTF-8?q?mplicit=20parameters?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Reviewers: jakub.sowa, krzysztof.siejkowski

Reviewed By: jakub.sowa, krzysztof.siejkowski

Subscribers: jakub.sowa, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2792
---
 swift/lib/Obfuscation/ParameterDeclarationParser.cpp | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
index 80fec8f83a4..4eb86a959f3 100644
--- a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
@@ -34,6 +34,9 @@ llvm::Expected<std::string> position(const ParamDecl *Declaration,
 }
   
 SymbolsOrError parse(const ParamDecl* Declaration) {
+  if (Declaration->isImplicit()) {
+    return stringError("We shouldn't rename implicit parameters");
+  }
   if (const auto *FunctionDeclaration =
       dyn_cast<FuncDecl>(Declaration->getDeclContext())) {
     
-- 
2.17.1 (Apple Git-112)


From 748c75c1cc393674220ab2ed072197465aff8b77 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Sat, 3 Feb 2018 19:53:12 +0100
Subject: [PATCH 044/138] Fixed build instructions

---
 README.md | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/README.md b/README.md
index a8dba381456..78684480f53 100644
--- a/README.md
+++ b/README.md
@@ -165,11 +165,11 @@ The input data formats are `Files.json` and `Renames.json` and are described in
    `swift/utils/build-script --clean --xcode --release-debuginfo --debug-swift`
 
 6. Build the Swift compiler using ninja with support for iOS, tvOS and watchOS
-   `swift/utils/build-script -R --ios --tvos --watchos --release-debuginfo --debug-swift`
+   `swift/utils/build-script --ios --tvos --watchos --release-debuginfo --debug-swift`
 
 7. Copy the generated libraries from ninja build to Xcode build
    `rm -r -f build/Xcode-RelWithDebInfoAssert+swift-DebugAssert/swift-macosx-x86_64/Debug/lib/swift`
-   `cp -r build/Ninja-RelWithDebInfoAssert+swift-DebugAssert/swift-macosx-x86_64/Debug/lib/swift build/Xcode-RelWithDebInfoAssert+swift-DebugAssert/swift-macosx-x86_64/Debug/lib/swift`
+   `cp -r build/Ninja-RelWithDebInfoAssert+swift-DebugAssert/swift-macosx-x86_64/lib/swift build/Xcode-RelWithDebInfoAssert+swift-DebugAssert/swift-macosx-x86_64/Debug/lib/swift`
 
 ### Build documentation (optional)
 
-- 
2.17.1 (Apple Git-112)


From bf2f22fe5504eab2b84a4e68fc52f5a0fbd4d812 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Fri, 2 Feb 2018 18:04:46 +0100
Subject: [PATCH 045/138] Added support for static methods

Reviewers: jerzy.kleszcz, jakub.sowa, michal.zielinski

Reviewed By: jakub.sowa, michal.zielinski

Subscribers: jakub.sowa, jerzy.kleszcz, michal.zielinski

Differential Revision: https://phabricator.polidea.com/D2793
---
 swift/lib/Obfuscation/FunctionDeclarationParser.cpp | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
index b96664ee127..3e3cc162566 100644
--- a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
@@ -46,6 +46,9 @@ ModuleNameAndParts functionIdentifierParts(const FuncDecl *Declaration,
       Parts.push_back("function." + SymbolName);
     } else {
       Parts.push_back("type." + TypeNameOrError.get());
+      if (Declaration->isStatic()) {
+        Parts.push_back("static");
+      }
       Parts.push_back("method." + SymbolName);
     }
     
@@ -66,6 +69,9 @@ ModuleNameAndParts functionIdentifierParts(const FuncDecl *Declaration,
       UpdatedModuleName = moduleName(ProtocolDeclaration);
     }
     Parts.push_back("protocol");
+    if (Declaration->isStatic()) {
+      Parts.push_back("static");
+    }
     Parts.push_back("method." + SymbolName);
   }
   
-- 
2.17.1 (Apple Git-112)


From b3538ce2a0539660e493927922a1413ed2842c05 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Mon, 5 Feb 2018 17:16:26 +0100
Subject: [PATCH 046/138] Added the layout files to Files.json

Reviewers: michal.zielinski, jerzy.kleszcz, jakub.sowa

Reviewed By: michal.zielinski, jerzy.kleszcz, jakub.sowa

Subscribers: michal.zielinski, jakub.sowa, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2796
---
 .../swift/Obfuscation/DataStructures.h        |  12 +-
 .../Obfuscation/CompilerInfrastructure.cpp    |   4 +-
 swift/lib/Obfuscation/DataStructures.cpp      |  10 +-
 swift/lib/Obfuscation/SymbolExtracting.cpp    |   1 +
 .../Obfuscation/Inputs/ExpectedSymbols.json   | 108 +++++++++---------
 swift/test/Obfuscation/SymbolExtractor.swift  |   2 +-
 .../DataStructuresDeserializationTests.cpp    |  11 +-
 .../SwiftObfuscation/FileIOTests.cpp          |  38 ++++--
 8 files changed, 104 insertions(+), 82 deletions(-)

diff --git a/swift/include/swift/Obfuscation/DataStructures.h b/swift/include/swift/Obfuscation/DataStructures.h
index 20134186960..0579be42410 100644
--- a/swift/include/swift/Obfuscation/DataStructures.h
+++ b/swift/include/swift/Obfuscation/DataStructures.h
@@ -14,6 +14,7 @@ namespace obfuscation {
   
 struct Project {
   std::string RootPath;
+  std::string ProjectFilePath;
 };
 
 struct Module {
@@ -26,7 +27,7 @@ struct Sdk {
   std::string Path;
 };
 
-struct ExplicitelyLinkedFrameworks {
+struct ExplicitlyLinkedFrameworks {
   std::string Name;
   std::string Path;
 };
@@ -35,9 +36,10 @@ struct FilesJson {
   Project Project;
   Module Module;
   Sdk Sdk;
-  std::vector<std::string> Filenames;
+  std::vector<std::string> SourceFiles;
+  std::vector<std::string> LayoutFiles;
   std::vector<std::string> SystemLinkedFrameworks;
-  std::vector<ExplicitelyLinkedFrameworks> ExplicitelyLinkedFrameworks;
+  std::vector<ExplicitlyLinkedFrameworks> ExplicitlyLinkedFrameworks;
 };
 
 enum class SymbolType: int {
@@ -151,8 +153,8 @@ struct MappingTraits<Sdk> {
 };
 
 template <>
-struct MappingTraits<ExplicitelyLinkedFrameworks> {
-  static void mapping(IO &Io, ExplicitelyLinkedFrameworks &Object);
+struct MappingTraits<ExplicitlyLinkedFrameworks> {
+  static void mapping(IO &Io, ExplicitlyLinkedFrameworks &Object);
 };
 
 template <>
diff --git a/swift/lib/Obfuscation/CompilerInfrastructure.cpp b/swift/lib/Obfuscation/CompilerInfrastructure.cpp
index d0296a1a86e..23f3c1d88b0 100644
--- a/swift/lib/Obfuscation/CompilerInfrastructure.cpp
+++ b/swift/lib/Obfuscation/CompilerInfrastructure.cpp
@@ -24,8 +24,8 @@ struct CompilerInvocationConfiguration {
   Triple(FilesJson.Module.TargetTriple),
   MainExecutablePath(MainExecutablePath),
   SdkPath(FilesJson.Sdk.Path),
-  InputFilenames(FilesJson.Filenames) {
-    for (const auto &Framework : FilesJson.ExplicitelyLinkedFrameworks) {
+  InputFilenames(FilesJson.SourceFiles) {
+    for (const auto &Framework : FilesJson.ExplicitlyLinkedFrameworks) {
       SearchPathOptions::FrameworkSearchPath Path(Framework.Path, false);
       Paths.push_back(Path);
     }
diff --git a/swift/lib/Obfuscation/DataStructures.cpp b/swift/lib/Obfuscation/DataStructures.cpp
index 2e9fd679d1d..0fa66761349 100644
--- a/swift/lib/Obfuscation/DataStructures.cpp
+++ b/swift/lib/Obfuscation/DataStructures.cpp
@@ -81,14 +81,16 @@ void MappingTraits<FilesJson>::mapping(IO &Io, FilesJson &Object) {
   Io.mapRequired("project", Object.Project);
   Io.mapRequired("module", Object.Module);
   Io.mapRequired("sdk", Object.Sdk);
-  Io.mapRequired("filenames", Object.Filenames);
+  Io.mapRequired("sourceFiles", Object.SourceFiles);
+  Io.mapRequired("layoutFiles", Object.LayoutFiles);
   Io.mapRequired("systemLinkedFrameworks", Object.SystemLinkedFrameworks);
-  Io.mapRequired("explicitelyLinkedFrameworks",
-                 Object.ExplicitelyLinkedFrameworks);
+  Io.mapRequired("explicitlyLinkedFrameworks",
+                 Object.ExplicitlyLinkedFrameworks);
 }
   
 void MappingTraits<Project>::mapping(IO &Io, Project &Object) {
   Io.mapRequired("rootPath", Object.RootPath);
+  Io.mapRequired("projectFilePath", Object.ProjectFilePath);
 }
 
 using ObfuscationModule = swift::obfuscation::Module;
@@ -103,7 +105,7 @@ void MappingTraits<Sdk>::mapping(IO &Io, Sdk &Object) {
   Io.mapRequired("path", Object.Path);
 }
 
-using ELF = ExplicitelyLinkedFrameworks;
+using ELF = ExplicitlyLinkedFrameworks;
 void MappingTraits<ELF>::mapping(IO &Io, ELF &Object) {
   Io.mapRequired("name", Object.Name);
   Io.mapRequired("path", Object.Path);
diff --git a/swift/lib/Obfuscation/SymbolExtracting.cpp b/swift/lib/Obfuscation/SymbolExtracting.cpp
index cdeded900e2..2610af12993 100644
--- a/swift/lib/Obfuscation/SymbolExtracting.cpp
+++ b/swift/lib/Obfuscation/SymbolExtracting.cpp
@@ -35,6 +35,7 @@ extractSymbols(const FilesJson &FilesJson,
     }
   }
   copyToVector(Result, Json.Symbols);
+  std::sort(Json.Symbols.begin(), Json.Symbols.end());
   return Json;
 }
 
diff --git a/swift/test/Obfuscation/Inputs/ExpectedSymbols.json b/swift/test/Obfuscation/Inputs/ExpectedSymbols.json
index 44e83a9d5b7..5922aba69c0 100644
--- a/swift/test/Obfuscation/Inputs/ExpectedSymbols.json
+++ b/swift/test/Obfuscation/Inputs/ExpectedSymbols.json
@@ -1,82 +1,64 @@
 {
   "symbols": [
     {
-      "name": "NSViewController",
-      "identifier": "module.AppKit.class.NSViewController",
-      "module": "AppKit",
+      "name": "AppDelegate",
+      "identifier": "class.AppDelegate",
+      "module": "TestModuleName",
       "type": "type"
     },
     {
-      "name": "NSApplicationDelegate",
-      "identifier": "module.AppKit.protocol.NSApplicationDelegate",
-      "module": "AppKit",
+      "name": "ClassWithInit",
+      "identifier": "class.ClassWithInit",
+      "module": "TestModuleName",
       "type": "type"
     },
     {
-      "name": "viewDidLoad",
-      "identifier": "module.AppKit.type.NSViewController.method.viewDidLoad.signature.() -> Void",
-      "module": "AppKit",
-      "type": "namedFunction"
-    },
-    {
-      "name": "NSCoder",
-      "identifier": "module.Foundation.class.NSCoder",
-      "module": "Foundation",
+      "name": "CustomInitViewController",
+      "identifier": "class.CustomInitViewController",
+      "module": "TestModuleName",
       "type": "type"
     },
     {
-      "name": "Notification",
-      "identifier": "module.Foundation.struct.Notification",
+      "name": "NSCoder",
+      "identifier": "class.NSCoder",
       "module": "Foundation",
       "type": "type"
     },
     {
       "name": "NSObject",
-      "identifier": "module.ObjectiveC.class.NSObject",
+      "identifier": "class.NSObject",
       "module": "ObjectiveC",
       "type": "type"
     },
     {
-      "name": "fatalError",
-      "identifier": "module.Swift.function.fatalError.signature.(@autoclosure () -> String, StaticString, UInt) -> Never",
-      "module": "Swift",
-      "type": "namedFunction"
-    },
-    {
-      "name": "Int",
-      "identifier": "module.Swift.struct.Int",
-      "module": "Swift",
-      "type": "type"
-    },
-    {
-      "name": "AppDelegate",
-      "identifier": "module.TestModuleName.class.AppDelegate",
-      "module": "TestModuleName",
+      "name": "NSViewController",
+      "identifier": "class.NSViewController",
+      "module": "AppKit",
       "type": "type"
     },
     {
-      "name": "ClassWithInit",
-      "identifier": "module.TestModuleName.class.ClassWithInit",
+      "name": "SampleClass",
+      "identifier": "class.SampleClass",
       "module": "TestModuleName",
       "type": "type"
     },
     {
-      "name": "CustomInitViewController",
-      "identifier": "module.TestModuleName.class.CustomInitViewController",
+      "name": "ViewController",
+      "identifier": "class.ViewController",
       "module": "TestModuleName",
       "type": "type"
     },
     {
-      "name": "SampleClass",
-      "identifier": "module.TestModuleName.class.SampleClass",
-      "module": "TestModuleName",
-      "type": "type"
+      "name": "viewDidLoad",
+      "identifier": "module.AppKit.type.NSViewController.method.viewDidLoad.signature.() -> Void",
+      "module": "AppKit",
+      "type": "namedFunction"
     },
     {
-      "name": "ViewController",
-      "identifier": "module.TestModuleName.class.ViewController",
-      "module": "TestModuleName",
-      "type": "type"
+      "name": "fatalError",
+      "identifier": "module.Swift.function.fatalError.signature.(@autoclosure () -> String, StaticString, UInt) -> Never",
+      "module": "Swift",
+      "type": "namedFunction"
     },
     {
       "name": "applicationDidFinishLaunching",
@@ -199,28 +181,46 @@
       "type": "internalParameter"
     },
     {
-      "name": "SampleStruct",
-      "identifier": "module.TestModuleName.struct.SampleStruct",
+      "name": "property",
+      "identifier": "module.TestModuleName.struct.StructWithMemberwiseInit.variable.property",
       "module": "TestModuleName",
+      "type": "variable"
+    },
+    {
+      "name": "NSApplicationDelegate",
+      "identifier": "protocol.NSApplicationDelegate",
+      "module": "AppKit",
       "type": "type"
     },
     {
-      "name": "StructWithInit",
-      "identifier": "module.TestModuleName.struct.StructWithInit",
+      "name": "Int",
+      "identifier": "struct.Int",
+      "module": "Swift",
+      "type": "type"
+    },
+    {
+      "name": "Notification",
+      "identifier": "struct.Notification",
+      "module": "Foundation",
+      "type": "type"
+    },
+    {
+      "name": "SampleStruct",
+      "identifier": "struct.SampleStruct",
       "module": "TestModuleName",
       "type": "type"
     },
     {
-      "name": "StructWithMemberwiseInit",
-      "identifier": "module.TestModuleName.struct.StructWithMemberwiseInit",
+      "name": "StructWithInit",
+      "identifier": "struct.StructWithInit",
       "module": "TestModuleName",
       "type": "type"
     },
     {
-      "name": "property",
-      "identifier": "module.TestModuleName.variable.property",
+      "name": "StructWithMemberwiseInit",
+      "identifier": "struct.StructWithMemberwiseInit",
       "module": "TestModuleName",
-      "type": "variable"
+      "type": "type"
     }
   ]
 }
\ No newline at end of file
diff --git a/swift/test/Obfuscation/SymbolExtractor.swift b/swift/test/Obfuscation/SymbolExtractor.swift
index ee5c507cff0..8cbb23e0db0 100644
--- a/swift/test/Obfuscation/SymbolExtractor.swift
+++ b/swift/test/Obfuscation/SymbolExtractor.swift
@@ -1,4 +1,4 @@
-//RUN: echo "{\"project\": {\"rootPath\": \"TetsRootPath\"}, \"module\": {\"name\": \"TestModuleName\", \"triple\": \"x86_64-apple-macosx10.13\"}, \"sdk\": {\"name\": \"%target-sdk-name\", \"path\": \"%sdk\"}, \"filenames\": [\"%S/Inputs\/ViewController.swift\", \"%S/Inputs\/AppDelegate.swift\"], \"explicitelyLinkedFrameworks\": [], \"systemLinkedFrameworks\": []}" > %T/files.json
+//RUN: echo "{\"project\": {\"rootPath\": \"TestRootPath\", \"projectFilePath\": \"testProjectFilePath\"}, \"module\": {\"name\": \"TestModuleName\", \"triple\": \"x86_64-apple-macosx10.13\"}, \"sdk\": {\"name\": \"%target-sdk-name\", \"path\": \"%sdk\"}, \"sourceFiles\": [\"%S/Inputs\/ViewController.swift\", \"%S/Inputs\/AppDelegate.swift\"], \"layoutFiles\": [], \"explicitlyLinkedFrameworks\": [], \"systemLinkedFrameworks\": []}" > %T/files.json
 //RUN: obfuscator-symbol-extractor -filesjson %T/files.json -symbolsjson %t -printdiagnostics
 //RUN: diff -w %S/Inputs/expectedSymbols.json %t
 
diff --git a/swift/unittests/SwiftObfuscation/DataStructuresDeserializationTests.cpp b/swift/unittests/SwiftObfuscation/DataStructuresDeserializationTests.cpp
index 2897644f2f0..f83c7b8f28f 100644
--- a/swift/unittests/SwiftObfuscation/DataStructuresDeserializationTests.cpp
+++ b/swift/unittests/SwiftObfuscation/DataStructuresDeserializationTests.cpp
@@ -10,12 +10,14 @@ bool vectorContains(const std::vector<T> &Vector, const T &Element) {
 }
 
 TEST(DataStructuresDeserialization, DeserializeProject) {
-  std::string JsonString = "{\n\"rootPath\": \"samplePath\"\n}";
+  std::string JsonString = "{\n\"rootPath\": \"sampleRootPath\"\n,"
+                           " \n\"projectFilePath\": \"sampleProjectFilePath\"\n}";
   
   auto DeserializedOrError = deserialize<Project>(JsonString);
   
   auto Expected = Project();
-  Expected.RootPath = "samplePath";
+  Expected.RootPath = "sampleRootPath";
+  Expected.ProjectFilePath = "sampleProjectFilePath";
   
   if (auto ErrorCode = DeserializedOrError.takeError()) {
     llvm::consumeError(std::move(ErrorCode));
@@ -24,6 +26,7 @@ TEST(DataStructuresDeserialization, DeserializeProject) {
   auto Deserialized = DeserializedOrError.get();
   
   EXPECT_EQ(Deserialized.RootPath, Expected.RootPath);
+  EXPECT_EQ(Deserialized.ProjectFilePath, Expected.ProjectFilePath);
 }
 
 TEST(DataStructuresDeserialization, DeserializeModule) {
@@ -71,9 +74,9 @@ TEST(DataStructuresDeserialization, DeserializeExplicitlyLinkedFramework) {
   "\"name\": \"sampleName\"\n,"
   "\"path\": \"samplePath\",\n}";
 
-  auto DeserializedOrError = deserialize<ExplicitelyLinkedFrameworks>(JsonString);
+  auto DeserializedOrError = deserialize<ExplicitlyLinkedFrameworks>(JsonString);
 
-  auto Expected = ExplicitelyLinkedFrameworks();
+  auto Expected = ExplicitlyLinkedFrameworks();
   Expected.Name = "sampleName";
   Expected.Path = "samplePath";
 
diff --git a/swift/unittests/SwiftObfuscation/FileIOTests.cpp b/swift/unittests/SwiftObfuscation/FileIOTests.cpp
index 8180bea9623..e46f26fb274 100644
--- a/swift/unittests/SwiftObfuscation/FileIOTests.cpp
+++ b/swift/unittests/SwiftObfuscation/FileIOTests.cpp
@@ -89,27 +89,34 @@ TEST(ParseJson, ErrorParsingText) {
 TEST(ParseJson, SuccessParsingText) {
     FakeMemoryBufferProvider FakeProvider = FakeMemoryBufferProvider();
     std::string RootPath = "testRootPath";
+    std::string ProjectFilePath = "testProjectFilePath";
     std::string ModuleName = "testModuleName";
     std::string ModuleTriple = "testModuleTriple";
     std::string SdkName = "testName";
     std::string SdkPath = "testSDKPath";
-    std::string FileName1 = "testFileName1";
-    std::string FileName2 = "testFileName2";
+    std::string SourceFileName1 = "testSourceFileName1";
+    std::string SourceFileName2 = "testSourceFileName2";
+    std::string LayoutFileName1 = "testLayoutFileName1";
+    std::string LayoutFileName2 = "testLayoutFileName2";
     std::string ExplicitFrameworkName = "testExplicitFrameworkName";
     std::string ExplicitFrameworkPath = "testExplicitFrameworkPath";
     std::string SystemFramework = "testSystemFramework";
     FakeMemoryBuffer::Payload = "{\r\n  \"project\":{\r\n"
-        "\"rootPath\":\"" + RootPath + "\"\r\n   },"
+        "\"rootPath\":\"" + RootPath + "\",\r\n"
+        "\"projectFilePath\":\"" + ProjectFilePath + "\"\r\n   },"
         "\"module\":{\r\n"
         "\"name\":\"" + ModuleName + "\",\r\n"
         "\"triple\": \"" + ModuleTriple + "\"\r\n   },\r\n"
         "\"sdk\":{\r\n"
         "\"name\":\"" + SdkName + "\",\r\n"
         "\"path\":\"" + SdkPath + "\"\r\n   },\r\n"
-        "\"filenames\":[\r\n"
-        "\"" + FileName1 + "\",\r\n"
-        "\"" + FileName2 + "\"\r\n   ],\r\n"
-        "\"explicitelyLinkedFrameworks\":[\r\n {\r\n"
+        "\"sourceFiles\":[\r\n"
+        "\"" + SourceFileName1 + "\",\r\n"
+        "\"" + SourceFileName2 + "\"\r\n   ],\r\n"
+        "\"layoutFiles\":[\r\n"
+        "\"" + LayoutFileName1 + "\",\r\n"
+        "\"" + LayoutFileName2 + "\"\r\n   ],\r\n"
+        "\"explicitlyLinkedFrameworks\":[\r\n {\r\n"
         "\"name\":\"" + ExplicitFrameworkName + "\",\r\n"
         "\"path\":\"" + ExplicitFrameworkPath + "\"\r\n }\r\n ],\r\n"
         "\"systemLinkedFrameworks\":[\r\n \"" + SystemFramework + "\"\r\n   ]\r\n}";
@@ -125,15 +132,22 @@ TEST(ParseJson, SuccessParsingText) {
     }
     auto FilesJson = Result.get();
     EXPECT_EQ(FilesJson.Project.RootPath, RootPath);
+    EXPECT_EQ(FilesJson.Project.ProjectFilePath, ProjectFilePath);
     EXPECT_EQ(FilesJson.Module.Name, ModuleName);
     EXPECT_EQ(FilesJson.Module.TargetTriple, ModuleTriple);
     EXPECT_EQ(FilesJson.Sdk.Name, SdkName);
     EXPECT_EQ(FilesJson.Sdk.Path, SdkPath);
-    std::vector<std::string> ExpectedFilenames = {FileName1, FileName2};
-    EXPECT_EQ(FilesJson.Filenames, ExpectedFilenames);
-    EXPECT_EQ(FilesJson.ExplicitelyLinkedFrameworks.size(), 1U);
-    EXPECT_EQ(FilesJson.ExplicitelyLinkedFrameworks[0].Name, ExplicitFrameworkName);
-    EXPECT_EQ(FilesJson.ExplicitelyLinkedFrameworks[0].Path, ExplicitFrameworkPath);
+    std::vector<std::string> ExpectedSourceFilenames
+      = {SourceFileName1, SourceFileName2};
+    EXPECT_EQ(FilesJson.SourceFiles, ExpectedSourceFilenames);
+    std::vector<std::string> ExpectedLayoutFilenames
+      = {LayoutFileName1, LayoutFileName2};
+    EXPECT_EQ(FilesJson.LayoutFiles, ExpectedLayoutFilenames);
+    EXPECT_EQ(FilesJson.ExplicitlyLinkedFrameworks.size(), 1U);
+    EXPECT_EQ(FilesJson.ExplicitlyLinkedFrameworks[0].Name,
+              ExplicitFrameworkName);
+    EXPECT_EQ(FilesJson.ExplicitlyLinkedFrameworks[0].Path,
+              ExplicitFrameworkPath);
     EXPECT_EQ(FilesJson.SystemLinkedFrameworks.size(), 1U);
     EXPECT_EQ(FilesJson.SystemLinkedFrameworks[0], SystemFramework);
 }
-- 
2.17.1 (Apple Git-112)


From 71fdbe71ed957b5e715ab8095cb9959ae6f7d63f Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Mon, 5 Feb 2018 15:26:53 +0100
Subject: [PATCH 047/138] Removed recreation of stdlib for build from cache

---
 .gitlab-ci.yml              | 4 ++--
 Scripts/build_from_cache.sh | 4 ++++
 2 files changed, 6 insertions(+), 2 deletions(-)
 create mode 100644 Scripts/build_from_cache.sh

diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml
index f0980435476..094a24bf382 100644
--- a/.gitlab-ci.yml
+++ b/.gitlab-ci.yml
@@ -4,7 +4,7 @@ obfuscator_debug:
         - /bin/bash $CACHE_DIR/ninjaScript.bash "./Scripts/build_vanilla_compiler.sh"
         - /bin/bash Scripts/setup_from_cache.sh
     script:
-        - /bin/bash Scripts/build.sh
+        - /bin/bash Scripts/build_from_cache.sh
         - /bin/bash Scripts/run_tests_on_ci.sh
         - /bin/bash Scripts/process_build_artifacts.sh
     tags:
@@ -18,7 +18,7 @@ obfuscator_master:
         - /bin/bash $CACHE_DIR/ninjaScript.bash "./Scripts/build_vanilla_compiler.sh"
         - /bin/bash Scripts/setup_from_cache.sh
     script:
-        - /bin/bash Scripts/build.sh
+        - /bin/bash Scripts/build_from_cache.sh
         - /bin/bash Scripts/run_tests_on_ci.sh
         - /bin/bash Scripts/process_build_artifacts.sh
     tags:
diff --git a/Scripts/build_from_cache.sh b/Scripts/build_from_cache.sh
new file mode 100644
index 00000000000..bb0b985d074
--- /dev/null
+++ b/Scripts/build_from_cache.sh
@@ -0,0 +1,4 @@
+#!/bin/bash
+
+swift/utils/build-script -R --skip-build-linux --skip-build-freebsd --skip-build-cygwin --skip-build-osx --skip-build-ios --skip-build-ios-device --skip-build-ios-simulator --skip-build-tvos --skip-build-tvos-device --skip-build-tvos-simulator --skip-build-watchos --skip-build-watchos-device --skip-build-watchos-simulator --skip-build-android
+
-- 
2.17.1 (Apple Git-112)


From 278e10211fa3c148322d9ee80eaca09740b12194 Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Mon, 5 Feb 2018 15:35:32 +0100
Subject: [PATCH 048/138] Proper module name in Symbol.Identifier for: nominal
 type, overriding/protocol method/variable

Reviewers: jakub.sowa, michal.zielinski, krzysztof.siejkowski

Reviewed By: jakub.sowa, michal.zielinski, krzysztof.siejkowski

Subscribers: michal.zielinski, jakub.sowa, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2794
---
 .../Obfuscation/FunctionDeclarationParser.h   |   4 +-
 .../NominalTypeDeclarationParser.h            |   3 +-
 .../Obfuscation/DeclarationParsingUtils.cpp   |  10 +-
 .../Obfuscation/FunctionDeclarationParser.cpp |  41 ++---
 .../NominalTypeDeclarationParser.cpp          |  12 +-
 swift/lib/Obfuscation/OperatorParser.cpp      |  19 +-
 .../ParameterDeclarationParser.cpp            |  25 +--
 .../Obfuscation/VariableDeclarationParser.cpp |  52 +++---
 .../Obfuscation/Inputs/ExpectedSymbols.json   | 174 +++++++++---------
 9 files changed, 168 insertions(+), 172 deletions(-)

diff --git a/swift/include/swift/Obfuscation/FunctionDeclarationParser.h b/swift/include/swift/Obfuscation/FunctionDeclarationParser.h
index a0c9062b8fe..4999aff728f 100644
--- a/swift/include/swift/Obfuscation/FunctionDeclarationParser.h
+++ b/swift/include/swift/Obfuscation/FunctionDeclarationParser.h
@@ -15,9 +15,7 @@ namespace obfuscation {
     
 std::string functionName(const FuncDecl* Declaration);
   
-ModuleNameAndParts functionIdentifierParts(const FuncDecl* Declaration,
-                                           const std::string &ModuleName,
-                                           const std::string &SymbolName);
+ModuleNameAndParts functionIdentifierParts(const FuncDecl *Declaration);
   
 SymbolsOrError parse(const FuncDecl* Declaration, CharSourceRange Range);
     
diff --git a/swift/include/swift/Obfuscation/NominalTypeDeclarationParser.h b/swift/include/swift/Obfuscation/NominalTypeDeclarationParser.h
index 85843738417..dfaea6eb57f 100644
--- a/swift/include/swift/Obfuscation/NominalTypeDeclarationParser.h
+++ b/swift/include/swift/Obfuscation/NominalTypeDeclarationParser.h
@@ -8,9 +8,8 @@
 namespace swift {
 namespace obfuscation {
 
-llvm::Expected<ModuleNameAndParts>
+llvm::Expected<std::vector<std::string>>
 nominalTypeIdentifierParts(const NominalTypeDecl *Declaration,
-                           const std::string &ModuleName,
                            const std::string &SymbolName);
   
 SingleSymbolOrError parse(const NominalTypeDecl* Declaration);
diff --git a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
index c93838443ed..3dad4f8ecd7 100644
--- a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
+++ b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
@@ -23,17 +23,17 @@ std::string combineIdentifier(std::vector<std::string> &Parts) {
   }
 }
 
-std::string moduleName(const Decl* Declaration) {
-  return Declaration->getModuleContext()->getBaseName().getIdentifier().get();
-}
-
 std::string declarationName(const ValueDecl* Declaration) {
   return Declaration->getName().str().str();
 }
+  
+std::string moduleName(const Decl* Declaration) {
+  return Declaration->getModuleContext()->getBaseName().getIdentifier().get();
+}
 
 ModuleNameAndParts moduleNameAndParts(const Decl *Declaration) {
-  std::vector<std::string> Parts;
   std::string ModuleName = moduleName(Declaration);
+  std::vector<std::string> Parts;
   Parts.push_back("module");
   Parts.push_back(ModuleName);
   return std::make_pair(ModuleName, Parts);
diff --git a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
index 3e3cc162566..0dbf67ae8e8 100644
--- a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
@@ -30,15 +30,17 @@ std::string functionSignature(const FuncDecl *Declaration) {
   }
 }
 
-ModuleNameAndParts functionIdentifierParts(const FuncDecl *Declaration,
-                                           const std::string &ModuleName,
-                                           const std::string &SymbolName) {
+ModuleNameAndParts functionIdentifierParts(const FuncDecl *Declaration) {
+  std::string ModuleName;
+  std::string SymbolName = declarationName(Declaration);
   std::vector<std::string> Parts;
-  std::string UpdatedModuleName = ModuleName;
+  
   auto ProtocolRequirements = Declaration->getSatisfiedProtocolRequirements();
   auto *ProtocolDeclaration =
   dyn_cast<ProtocolDecl>(Declaration->getDeclContext());
   if (ProtocolRequirements.empty() && ProtocolDeclaration == nullptr) {
+    ModuleName = moduleName(Declaration);
+    Parts.push_back("module." + ModuleName);
     
     auto TypeNameOrError = enclosingTypeName(Declaration);
     if (auto Error = TypeNameOrError.takeError()) {
@@ -64,10 +66,12 @@ ModuleNameAndParts functionIdentifierParts(const FuncDecl *Declaration,
     //       protocols. it's just a name that's the same.
     //       this simplified handling should be improved in the future.
     if (!ProtocolRequirements.empty()) {
-      UpdatedModuleName = moduleName(ProtocolRequirements.front());
+      ModuleName = moduleName(ProtocolRequirements.front());
     } else {
-      UpdatedModuleName = moduleName(ProtocolDeclaration);
+      ModuleName = moduleName(ProtocolDeclaration);
     }
+    Parts.push_back("module." + ModuleName);
+    
     Parts.push_back("protocol");
     if (Declaration->isStatic()) {
       Parts.push_back("static");
@@ -77,7 +81,7 @@ ModuleNameAndParts functionIdentifierParts(const FuncDecl *Declaration,
   
   Parts.push_back(functionSignature(Declaration));
   
-  return std::make_pair(UpdatedModuleName, Parts);
+  return std::make_pair(ModuleName, Parts);
 }
 
 SymbolsOrError parseOverridenDeclaration(const FuncDecl *Declaration,
@@ -99,27 +103,22 @@ SymbolsOrError parse(const FuncDecl* Declaration, CharSourceRange Range) {
     return std::move(Error);
   }
   
-  std::vector<SymbolWithRange> Symbols;
-  auto ModuleNameAndParts = moduleNameAndParts(Declaration);
-  std::string ModuleName = ModuleNameAndParts.first;
-  std::vector<std::string> Parts = ModuleNameAndParts.second;
-  
   if (Declaration->getOverriddenDecl() != nullptr) {
-    return parseOverridenDeclaration(Declaration, ModuleName, Range);
+    return parseOverridenDeclaration(Declaration,
+                                     moduleName(Declaration),
+                                     Range);
   }
   
-  std::string SymbolName = declarationName(Declaration);
-  
-  auto IdentifierParts = functionIdentifierParts(Declaration,
-                                                 ModuleName,
-                                                 SymbolName);
-  ModuleName = IdentifierParts.first;
-  copyToVector(IdentifierParts.second, Parts);
+  auto ModuleAndParts = functionIdentifierParts(Declaration);
+  std::string ModuleName = ModuleAndParts.first;
+  std::vector<std::string> Parts = ModuleAndParts.second;
   
   Symbol Symbol(combineIdentifier(Parts),
-                SymbolName,
+                declarationName(Declaration),
                 ModuleName,
                 SymbolType::NamedFunction);
+  
+  std::vector<SymbolWithRange> Symbols;
   Symbols.push_back(SymbolWithRange(Symbol, Range));
   
   auto ParametersSymbolsOrError =
diff --git a/swift/lib/Obfuscation/NominalTypeDeclarationParser.cpp b/swift/lib/Obfuscation/NominalTypeDeclarationParser.cpp
index 1b870e0b39f..f43db86c9e8 100644
--- a/swift/lib/Obfuscation/NominalTypeDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/NominalTypeDeclarationParser.cpp
@@ -4,9 +4,8 @@
 namespace swift {
 namespace obfuscation {
     
-llvm::Expected<ModuleNameAndParts>
+llvm::Expected<std::vector<std::string>>
 nominalTypeIdentifierParts(const NominalTypeDecl *Declaration,
-                           const std::string &ModuleName,
                            const std::string &SymbolName) {
   
   std::vector<std::string> Parts;
@@ -22,7 +21,7 @@ nominalTypeIdentifierParts(const NominalTypeDecl *Declaration,
   } else {
     return stringError("found unsupported declaration type");
   }
-  return std::make_pair(ModuleName, Parts);
+  return Parts;
 }
 
 SingleSymbolOrError parse(const NominalTypeDecl* Declaration) {
@@ -33,15 +32,16 @@ SingleSymbolOrError parse(const NominalTypeDecl* Declaration) {
   std::string SymbolName = typeName(Declaration);
   
   auto NominalTypeParts = nominalTypeIdentifierParts(Declaration,
-                                                     ModuleName,
                                                      SymbolName);
   if (auto Error = NominalTypeParts.takeError()) {
     return std::move(Error);
   }
   
-  return Symbol(combineIdentifier(NominalTypeParts.get().second),
+  copyToVector(NominalTypeParts.get(), Parts);
+  
+  return Symbol(combineIdentifier(Parts),
                 SymbolName,
-                NominalTypeParts.get().first,
+                ModuleName,
                 SymbolType::Type);
 }
 
diff --git a/swift/lib/Obfuscation/OperatorParser.cpp b/swift/lib/Obfuscation/OperatorParser.cpp
index 581b77625e6..5289baef9a6 100644
--- a/swift/lib/Obfuscation/OperatorParser.cpp
+++ b/swift/lib/Obfuscation/OperatorParser.cpp
@@ -33,23 +33,18 @@ SymbolsOrError parseOperator(const FuncDecl* Declaration, CharSourceRange Range)
     }
     copyToVector(ParametersSymbolsOrError.get(), Symbols);
 
-    auto ModuleNameAndParts = moduleNameAndParts(Declaration);
-    std::string ModuleName = ModuleNameAndParts.first;
-
     if (auto OperatorDecl = Declaration->getOperatorDecl()) {
         auto OperatorModuleName = moduleName(OperatorDecl);
-        if (ModuleName != OperatorModuleName) {
+        if (moduleName(Declaration) != OperatorModuleName) {
             return Symbols;
         }
     }
-
-    std::vector<std::string> Parts = ModuleNameAndParts.second;
-    std::string SymbolName = declarationName(Declaration);
-
-    auto IdentifierParts = functionIdentifierParts(Declaration,
-                                                   ModuleName,
-                                                   SymbolName);
-    ModuleName = IdentifierParts.first;
+  
+    auto ModuleAndParts = functionIdentifierParts(Declaration);
+    auto ModuleName = ModuleAndParts.first;
+    auto Parts = ModuleAndParts.second;
+  
+    auto SymbolName = declarationName(Declaration);
     Parts.push_back("operator." + SymbolName);
 
     Symbol Symbol(combineIdentifier(Parts),
diff --git a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
index 4eb86a959f3..24ce189b3a1 100644
--- a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
@@ -40,17 +40,13 @@ SymbolsOrError parse(const ParamDecl* Declaration) {
   if (const auto *FunctionDeclaration =
       dyn_cast<FuncDecl>(Declaration->getDeclContext())) {
     
-    auto ModuleNameAndParts = moduleNameAndParts(Declaration);
-    std::string ModuleName = ModuleNameAndParts.first;
-    std::vector<std::string> Parts = ModuleNameAndParts.second;
-    
     std::set<std::string> Modules;
     auto *BaseFunctionDeclaration =
       baseOverridenDeclarationWithModules(FunctionDeclaration, Modules);
     
     bool OverridenMethodIsFromTheSameModule =
       Modules.size() == 0
-      || (Modules.size() == 1 && Modules.count(ModuleName) == 1);
+      || (Modules.size() == 1 && Modules.count(moduleName(Declaration)) == 1);
     
     std::string ExternalName = Declaration->getArgumentName().str().str();
     std::string InternalName = Declaration->getName().str().str();
@@ -58,12 +54,10 @@ SymbolsOrError parse(const ParamDecl* Declaration) {
     std::vector<SymbolWithRange> Symbols;
     
     std::string FunctionName = declarationName(BaseFunctionDeclaration);
-    auto ModuleAndParts = functionIdentifierParts(BaseFunctionDeclaration,
-                                                  ModuleName,
-                                                  FunctionName);
-    copyToVector(ModuleAndParts.second, Parts);
-    
+    auto ModuleAndParts = functionIdentifierParts(BaseFunctionDeclaration);
     std::string FunctionModuleName = ModuleAndParts.first;
+    std::vector<std::string> Parts = ModuleAndParts.second;
+    
     auto PositionOrError = position(Declaration, BaseFunctionDeclaration);
     if (auto Error = PositionOrError.takeError()) {
       return std::move(Error);
@@ -100,12 +94,21 @@ SymbolsOrError parse(const ParamDecl* Declaration) {
           
         }
         
+        //  TODO: improve handling internal parameters cases:
+        //  Case1: if we have two implementations of the same protocol
+        //  method in the same module and those implementations have the same
+        //  internal parameter name - this internal parameter will be renamed
+        //  to the same obfuscated name in both implementations.
+        //  Case2: internal parameter in protocol method implementation,
+        //  where declaration and implementation are in different modules -
+        //  Symbol object will have different module name in Identifier
+        //  and in Module field.
         Parts.push_back("internal." + InternalName);
         CharSourceRange InternalRange(Declaration->getNameLoc(),
                                       InternalName.length());
         Symbol InternalSymbol(combineIdentifier(Parts),
                               InternalName,
-                              ModuleName,
+                              moduleName(Declaration),
                               SymbolType::InternalParameter);
         Symbols.push_back(SymbolWithRange(InternalSymbol, InternalRange));
       }
diff --git a/swift/lib/Obfuscation/VariableDeclarationParser.cpp b/swift/lib/Obfuscation/VariableDeclarationParser.cpp
index 3ee98cd1dab..fae92ed2282 100644
--- a/swift/lib/Obfuscation/VariableDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/VariableDeclarationParser.cpp
@@ -20,67 +20,69 @@ parseOverridenDeclaration(const VarDecl *Declaration,
   }
 }
 
-llvm::Error appendContextToParts(const VarDecl *Declaration,
-                                    std::string &ModuleName,
-                                    std::vector<std::string> &Parts) {
+llvm::Expected<ModuleNameAndParts>
+variableContextParts(const VarDecl *Declaration) {
+  std::string ModuleName;
+  std::vector<std::string> Parts;
+  
   auto ProtocolRequirements = Declaration->getSatisfiedProtocolRequirements();
   auto *ProtocolDeclaration =
   dyn_cast<ProtocolDecl>(Declaration->getDeclContext());
   // TODO: for now, we're renaming all protocol properties with the same name
   // to the same obfuscated name. this should be improved in the future.
   if (!ProtocolRequirements.empty() || ProtocolDeclaration != nullptr) {
-    auto UpdatedModuleName = ProtocolRequirements.empty() ?
+    ModuleName = ProtocolRequirements.empty() ?
     moduleName(ProtocolDeclaration) : moduleName(ProtocolRequirements.front());
-    ModuleName = UpdatedModuleName;
+    Parts.push_back("module." + ModuleName);
     Parts.push_back("protocol");
     
   } else if (auto *FunctionDeclaration =
              dyn_cast<FuncDecl>(Declaration->getDeclContext())) {
-    std::string FunctionName = declarationName(FunctionDeclaration);
-    auto ModuleAndParts = functionIdentifierParts(FunctionDeclaration,
-                                                  ModuleName,
-                                                  FunctionName);
-    copyToVector(ModuleAndParts.second, Parts);
+    auto ModuleAndParts = functionIdentifierParts(FunctionDeclaration);
+    ModuleName = moduleName(Declaration);
+    Parts = ModuleAndParts.second;
     
   } else if (auto *NominalTypeDeclaration =
              dyn_cast<NominalTypeDecl>(Declaration->getDeclContext())) {
+    ModuleName = moduleName(Declaration);
+    Parts.push_back("module." + ModuleName);
     std::string TypeName = typeName(NominalTypeDeclaration);
     auto ModuleAndParts = nominalTypeIdentifierParts(NominalTypeDeclaration,
-                                                     ModuleName,
                                                      TypeName);
     if (auto Error = ModuleAndParts.takeError()) {
-      return Error;
+      return std::move(Error);
     }
-    copyToVector(ModuleAndParts.get().second, Parts);
+    copyToVector(ModuleAndParts.get(), Parts);
+  } else if (Declaration->getDeclContext()->isModuleScopeContext()) {
+    ModuleName = moduleName(Declaration);
+    Parts.push_back("module." + ModuleName);
   }
   
-  return llvm::Error::success();
+  return std::make_pair(ModuleName, Parts);
 }
 
 SingleSymbolOrError parse(const VarDecl* Declaration) {
   
-  auto ModuleNameAndParts = moduleNameAndParts(Declaration);
-  std::string ModuleName = ModuleNameAndParts.first;
-  std::vector<std::string> Parts = ModuleNameAndParts.second;
-  std::string SymbolName = Declaration->getName().str().str();
-  
   if (Declaration->getOverriddenDecl() != nullptr) {
-    return parseOverridenDeclaration(Declaration, ModuleName);
+    return parseOverridenDeclaration(Declaration, moduleName(Declaration));
   }
   
-  if (auto Error = appendContextToParts(Declaration, ModuleName, Parts)) {
+  auto ModuleAndPartsOrError = variableContextParts(Declaration);
+  if (auto Error = ModuleAndPartsOrError.takeError()) {
     return std::move(Error);
   }
+  auto ModuleAndParts = ModuleAndPartsOrError.get();
   
   if (Declaration->isStatic()) {
-    Parts.push_back("static");
+    ModuleAndParts.second.push_back("static");
   }
   
-  Parts.push_back("variable." + SymbolName);
+  std::string SymbolName = declarationName(Declaration);
+  ModuleAndParts.second.push_back("variable." + SymbolName);
   
-  return Symbol(combineIdentifier(Parts),
+  return Symbol(combineIdentifier(ModuleAndParts.second),
                 SymbolName,
-                ModuleName,
+                ModuleAndParts.first,
                 SymbolType::Variable);
 }
   
diff --git a/swift/test/Obfuscation/Inputs/ExpectedSymbols.json b/swift/test/Obfuscation/Inputs/ExpectedSymbols.json
index 5922aba69c0..47018d14f8f 100644
--- a/swift/test/Obfuscation/Inputs/ExpectedSymbols.json
+++ b/swift/test/Obfuscation/Inputs/ExpectedSymbols.json
@@ -1,226 +1,226 @@
 {
   "symbols": [
-    {
-      "name": "AppDelegate",
-      "identifier": "class.AppDelegate",
-      "module": "TestModuleName",
-      "type": "type"
-    },
-    {
-      "name": "ClassWithInit",
-      "identifier": "class.ClassWithInit",
-      "module": "TestModuleName",
-      "type": "type"
-    },
-    {
-      "name": "CustomInitViewController",
-      "identifier": "class.CustomInitViewController",
-      "module": "TestModuleName",
-      "type": "type"
-    },
-    {
-      "name": "NSCoder",
-      "identifier": "class.NSCoder",
-      "module": "Foundation",
-      "type": "type"
-    },
-    {
-      "name": "NSObject",
-      "identifier": "class.NSObject",
-      "module": "ObjectiveC",
-      "type": "type"
-    },
     {
       "name": "NSViewController",
-      "identifier": "class.NSViewController",
+      "identifier": "module.AppKit.class.NSViewController",
       "module": "AppKit",
       "type": "type"
     },
     {
-      "name": "SampleClass",
-      "identifier": "class.SampleClass",
-      "module": "TestModuleName",
-      "type": "type"
-    },
-    {
-      "name": "ViewController",
-      "identifier": "class.ViewController",
-      "module": "TestModuleName",
-      "type": "type"
-    },
-    {
-      "name": "viewDidLoad",
-      "identifier": "module.AppKit.type.NSViewController.method.viewDidLoad.signature.() -> Void",
+      "name": "NSApplicationDelegate",
+      "identifier": "module.AppKit.protocol.NSApplicationDelegate",
       "module": "AppKit",
-      "type": "namedFunction"
-    },
-    {
-      "name": "fatalError",
-      "identifier": "module.Swift.function.fatalError.signature.(@autoclosure () -> String, StaticString, UInt) -> Never",
-      "module": "Swift",
-      "type": "namedFunction"
+      "type": "type"
     },
     {
       "name": "applicationDidFinishLaunching",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ()",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ()",
       "module": "AppKit",
       "type": "namedFunction"
     },
     {
       "name": "aNotification",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().parameter.position.list1_parameter0.internal.aNotification",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().parameter.position.list1_parameter0.internal.aNotification",
       "module": "TestModuleName",
       "type": "internalParameter"
     },
     {
       "name": "cvc",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cvc",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cvc",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "cvcei",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cvcei",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cvcei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "cwi",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cwi",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cwi",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "cwiei",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cwiei",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cwiei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "sc",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.sc",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.sc",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "scei",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.scei",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.scei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "ss",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.ss",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.ss",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "ssei",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.ssei",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.ssei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "swi",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swi",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swi",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "swiei",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swiei",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swiei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "swmi",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swmi",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swmi",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "swmiei",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swmiei",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swmiei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "vc1",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc1",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc1",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "vc1ei",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc1ei",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc1ei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "vc2",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc2",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc2",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "vc2ei",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc2ei",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc2ei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "applicationWillTerminate",
-      "identifier": "module.TestModuleName.protocol.method.applicationWillTerminate.signature.(Notification) -> ()",
+      "identifier": "module.AppKit.protocol.method.applicationWillTerminate.signature.(Notification) -> ()",
       "module": "AppKit",
       "type": "namedFunction"
     },
     {
       "name": "aNotification",
-      "identifier": "module.TestModuleName.protocol.method.applicationWillTerminate.signature.(Notification) -> ().parameter.position.list1_parameter0.internal.aNotification",
+      "identifier": "module.AppKit.protocol.method.applicationWillTerminate.signature.(Notification) -> ().parameter.position.list1_parameter0.internal.aNotification",
       "module": "TestModuleName",
       "type": "internalParameter"
     },
     {
-      "name": "property",
-      "identifier": "module.TestModuleName.struct.StructWithMemberwiseInit.variable.property",
-      "module": "TestModuleName",
-      "type": "variable"
+      "name": "viewDidLoad",
+      "identifier": "module.AppKit.type.NSViewController.method.viewDidLoad.signature.() -> Void",
+      "module": "AppKit",
+      "type": "namedFunction"
     },
     {
-      "name": "NSApplicationDelegate",
-      "identifier": "protocol.NSApplicationDelegate",
-      "module": "AppKit",
+      "name": "NSCoder",
+      "identifier": "module.Foundation.class.NSCoder",
+      "module": "Foundation",
+      "type": "type"
+    },
+    {
+      "name": "Notification",
+      "identifier": "module.Foundation.struct.Notification",
+      "module": "Foundation",
+      "type": "type"
+    },
+    {
+      "name": "NSObject",
+      "identifier": "module.ObjectiveC.class.NSObject",
+      "module": "ObjectiveC",
       "type": "type"
     },
+    {
+      "name": "fatalError",
+      "identifier": "module.Swift.function.fatalError.signature.(@autoclosure () -> String, StaticString, UInt) -> Never",
+      "module": "Swift",
+      "type": "namedFunction"
+    },
     {
       "name": "Int",
-      "identifier": "struct.Int",
+      "identifier": "module.Swift.struct.Int",
       "module": "Swift",
       "type": "type"
     },
     {
-      "name": "Notification",
-      "identifier": "struct.Notification",
-      "module": "Foundation",
+      "name": "AppDelegate",
+      "identifier": "module.TestModuleName.class.AppDelegate",
+      "module": "TestModuleName",
+      "type": "type"
+    },
+    {
+      "name": "ClassWithInit",
+      "identifier": "module.TestModuleName.class.ClassWithInit",
+      "module": "TestModuleName",
+      "type": "type"
+    },
+    {
+      "name": "CustomInitViewController",
+      "identifier": "module.TestModuleName.class.CustomInitViewController",
+      "module": "TestModuleName",
+      "type": "type"
+    },
+    {
+      "name": "SampleClass",
+      "identifier": "module.TestModuleName.class.SampleClass",
+      "module": "TestModuleName",
+      "type": "type"
+    },
+    {
+      "name": "ViewController",
+      "identifier": "module.TestModuleName.class.ViewController",
+      "module": "TestModuleName",
       "type": "type"
     },
     {
       "name": "SampleStruct",
-      "identifier": "struct.SampleStruct",
+      "identifier": "module.TestModuleName.struct.SampleStruct",
       "module": "TestModuleName",
       "type": "type"
     },
     {
       "name": "StructWithInit",
-      "identifier": "struct.StructWithInit",
+      "identifier": "module.TestModuleName.struct.StructWithInit",
       "module": "TestModuleName",
       "type": "type"
     },
     {
       "name": "StructWithMemberwiseInit",
-      "identifier": "struct.StructWithMemberwiseInit",
+      "identifier": "module.TestModuleName.struct.StructWithMemberwiseInit",
       "module": "TestModuleName",
       "type": "type"
+    },
+    {
+      "name": "property",
+      "identifier": "module.TestModuleName.struct.StructWithMemberwiseInit.variable.property",
+      "module": "TestModuleName",
+      "type": "variable"
     }
   ]
-}
\ No newline at end of file
+}
-- 
2.17.1 (Apple Git-112)


From 1e5c146d940f802b7608c37cf6cd3e2afe09e746 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Tue, 6 Feb 2018 11:58:41 +0100
Subject: [PATCH 049/138] Fix failing integration tests

---
 .../Obfuscation/Inputs/ExpectedSymbols.json   | 172 +++++++++---------
 1 file changed, 86 insertions(+), 86 deletions(-)

diff --git a/swift/test/Obfuscation/Inputs/ExpectedSymbols.json b/swift/test/Obfuscation/Inputs/ExpectedSymbols.json
index 47018d14f8f..5ec568713b1 100644
--- a/swift/test/Obfuscation/Inputs/ExpectedSymbols.json
+++ b/swift/test/Obfuscation/Inputs/ExpectedSymbols.json
@@ -1,226 +1,226 @@
 {
   "symbols": [
+    {
+      "name": "AppDelegate",
+      "identifier": "class.AppDelegate",
+      "module": "TestModuleName",
+      "type": "type"
+    },
+    {
+      "name": "ClassWithInit",
+      "identifier": "class.ClassWithInit",
+      "module": "TestModuleName",
+      "type": "type"
+    },
+    {
+      "name": "CustomInitViewController",
+      "identifier": "class.CustomInitViewController",
+      "module": "TestModuleName",
+      "type": "type"
+    },
+    {
+      "name": "NSCoder",
+      "identifier": "class.NSCoder",
+      "module": "Foundation",
+      "type": "type"
+    },
+    {
+      "name": "NSObject",
+      "identifier": "class.NSObject",
+      "module": "ObjectiveC",
+      "type": "type"
+    },
     {
       "name": "NSViewController",
-      "identifier": "module.AppKit.class.NSViewController",
+      "identifier": "class.NSViewController",
       "module": "AppKit",
       "type": "type"
     },
     {
-      "name": "NSApplicationDelegate",
-      "identifier": "module.AppKit.protocol.NSApplicationDelegate",
-      "module": "AppKit",
+      "name": "SampleClass",
+      "identifier": "class.SampleClass",
+      "module": "TestModuleName",
       "type": "type"
     },
+    {
+      "name": "ViewController",
+      "identifier": "class.ViewController",
+      "module": "TestModuleName",
+      "type": "type"
+    },
+    {
+      "name": "viewDidLoad",
+      "identifier": "module.AppKit.type.NSViewController.method.viewDidLoad.signature.() -> Void",
+      "module": "AppKit",
+      "type": "namedFunction"
+    },
+    {
+      "name": "fatalError",
+      "identifier": "module.Swift.function.fatalError.signature.(@autoclosure () -> String, StaticString, UInt) -> Never",
+      "module": "Swift",
+      "type": "namedFunction"
+    },
     {
       "name": "applicationDidFinishLaunching",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ()",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ()",
       "module": "AppKit",
       "type": "namedFunction"
     },
     {
       "name": "aNotification",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().parameter.position.list1_parameter0.internal.aNotification",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().parameter.position.list1_parameter0.internal.aNotification",
       "module": "TestModuleName",
       "type": "internalParameter"
     },
     {
       "name": "cvc",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cvc",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cvc",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "cvcei",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cvcei",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cvcei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "cwi",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cwi",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cwi",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "cwiei",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cwiei",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cwiei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "sc",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.sc",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.sc",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "scei",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.scei",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.scei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "ss",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.ss",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.ss",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "ssei",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.ssei",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.ssei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "swi",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swi",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swi",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "swiei",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swiei",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swiei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "swmi",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swmi",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swmi",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "swmiei",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swmiei",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swmiei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "vc1",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc1",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc1",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "vc1ei",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc1ei",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc1ei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "vc2",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc2",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc2",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "vc2ei",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc2ei",
+      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc2ei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "applicationWillTerminate",
-      "identifier": "module.AppKit.protocol.method.applicationWillTerminate.signature.(Notification) -> ()",
+      "identifier": "module.TestModuleName.protocol.method.applicationWillTerminate.signature.(Notification) -> ()",
       "module": "AppKit",
       "type": "namedFunction"
     },
     {
       "name": "aNotification",
-      "identifier": "module.AppKit.protocol.method.applicationWillTerminate.signature.(Notification) -> ().parameter.position.list1_parameter0.internal.aNotification",
+      "identifier": "module.TestModuleName.protocol.method.applicationWillTerminate.signature.(Notification) -> ().parameter.position.list1_parameter0.internal.aNotification",
       "module": "TestModuleName",
       "type": "internalParameter"
     },
     {
-      "name": "viewDidLoad",
-      "identifier": "module.AppKit.type.NSViewController.method.viewDidLoad.signature.() -> Void",
-      "module": "AppKit",
-      "type": "namedFunction"
-    },
-    {
-      "name": "NSCoder",
-      "identifier": "module.Foundation.class.NSCoder",
-      "module": "Foundation",
-      "type": "type"
-    },
-    {
-      "name": "Notification",
-      "identifier": "module.Foundation.struct.Notification",
-      "module": "Foundation",
-      "type": "type"
+      "name": "property",
+      "identifier": "module.TestModuleName.struct.StructWithMemberwiseInit.variable.property",
+      "module": "TestModuleName",
+      "type": "variable"
     },
     {
-      "name": "NSObject",
-      "identifier": "module.ObjectiveC.class.NSObject",
-      "module": "ObjectiveC",
+      "name": "NSApplicationDelegate",
+      "identifier": "protocol.NSApplicationDelegate",
+      "module": "AppKit",
       "type": "type"
     },
-    {
-      "name": "fatalError",
-      "identifier": "module.Swift.function.fatalError.signature.(@autoclosure () -> String, StaticString, UInt) -> Never",
-      "module": "Swift",
-      "type": "namedFunction"
-    },
     {
       "name": "Int",
-      "identifier": "module.Swift.struct.Int",
+      "identifier": "struct.Int",
       "module": "Swift",
       "type": "type"
     },
     {
-      "name": "AppDelegate",
-      "identifier": "module.TestModuleName.class.AppDelegate",
-      "module": "TestModuleName",
-      "type": "type"
-    },
-    {
-      "name": "ClassWithInit",
-      "identifier": "module.TestModuleName.class.ClassWithInit",
-      "module": "TestModuleName",
-      "type": "type"
-    },
-    {
-      "name": "CustomInitViewController",
-      "identifier": "module.TestModuleName.class.CustomInitViewController",
-      "module": "TestModuleName",
-      "type": "type"
-    },
-    {
-      "name": "SampleClass",
-      "identifier": "module.TestModuleName.class.SampleClass",
-      "module": "TestModuleName",
-      "type": "type"
-    },
-    {
-      "name": "ViewController",
-      "identifier": "module.TestModuleName.class.ViewController",
-      "module": "TestModuleName",
+      "name": "Notification",
+      "identifier": "struct.Notification",
+      "module": "Foundation",
       "type": "type"
     },
     {
       "name": "SampleStruct",
-      "identifier": "module.TestModuleName.struct.SampleStruct",
+      "identifier": "struct.SampleStruct",
       "module": "TestModuleName",
       "type": "type"
     },
     {
       "name": "StructWithInit",
-      "identifier": "module.TestModuleName.struct.StructWithInit",
+      "identifier": "struct.StructWithInit",
       "module": "TestModuleName",
       "type": "type"
     },
     {
       "name": "StructWithMemberwiseInit",
-      "identifier": "module.TestModuleName.struct.StructWithMemberwiseInit",
+      "identifier": "struct.StructWithMemberwiseInit",
       "module": "TestModuleName",
       "type": "type"
-    },
-    {
-      "name": "property",
-      "identifier": "module.TestModuleName.struct.StructWithMemberwiseInit.variable.property",
-      "module": "TestModuleName",
-      "type": "variable"
     }
   ]
 }
-- 
2.17.1 (Apple Git-112)


From 31e232426b296d7cbcb09ffb01b9a6fc99186af6 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Tue, 6 Feb 2018 16:46:22 +0100
Subject: [PATCH 050/138] Revert "Fix failing integration tests"

This reverts commit 1e5c146d940f802b7608c37cf6cd3e2afe09e746.
---
 .../Obfuscation/Inputs/ExpectedSymbols.json   | 172 +++++++++---------
 1 file changed, 86 insertions(+), 86 deletions(-)

diff --git a/swift/test/Obfuscation/Inputs/ExpectedSymbols.json b/swift/test/Obfuscation/Inputs/ExpectedSymbols.json
index 5ec568713b1..47018d14f8f 100644
--- a/swift/test/Obfuscation/Inputs/ExpectedSymbols.json
+++ b/swift/test/Obfuscation/Inputs/ExpectedSymbols.json
@@ -1,226 +1,226 @@
 {
   "symbols": [
-    {
-      "name": "AppDelegate",
-      "identifier": "class.AppDelegate",
-      "module": "TestModuleName",
-      "type": "type"
-    },
-    {
-      "name": "ClassWithInit",
-      "identifier": "class.ClassWithInit",
-      "module": "TestModuleName",
-      "type": "type"
-    },
-    {
-      "name": "CustomInitViewController",
-      "identifier": "class.CustomInitViewController",
-      "module": "TestModuleName",
-      "type": "type"
-    },
-    {
-      "name": "NSCoder",
-      "identifier": "class.NSCoder",
-      "module": "Foundation",
-      "type": "type"
-    },
-    {
-      "name": "NSObject",
-      "identifier": "class.NSObject",
-      "module": "ObjectiveC",
-      "type": "type"
-    },
     {
       "name": "NSViewController",
-      "identifier": "class.NSViewController",
+      "identifier": "module.AppKit.class.NSViewController",
       "module": "AppKit",
       "type": "type"
     },
     {
-      "name": "SampleClass",
-      "identifier": "class.SampleClass",
-      "module": "TestModuleName",
-      "type": "type"
-    },
-    {
-      "name": "ViewController",
-      "identifier": "class.ViewController",
-      "module": "TestModuleName",
-      "type": "type"
-    },
-    {
-      "name": "viewDidLoad",
-      "identifier": "module.AppKit.type.NSViewController.method.viewDidLoad.signature.() -> Void",
+      "name": "NSApplicationDelegate",
+      "identifier": "module.AppKit.protocol.NSApplicationDelegate",
       "module": "AppKit",
-      "type": "namedFunction"
-    },
-    {
-      "name": "fatalError",
-      "identifier": "module.Swift.function.fatalError.signature.(@autoclosure () -> String, StaticString, UInt) -> Never",
-      "module": "Swift",
-      "type": "namedFunction"
+      "type": "type"
     },
     {
       "name": "applicationDidFinishLaunching",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ()",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ()",
       "module": "AppKit",
       "type": "namedFunction"
     },
     {
       "name": "aNotification",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().parameter.position.list1_parameter0.internal.aNotification",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().parameter.position.list1_parameter0.internal.aNotification",
       "module": "TestModuleName",
       "type": "internalParameter"
     },
     {
       "name": "cvc",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cvc",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cvc",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "cvcei",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cvcei",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cvcei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "cwi",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cwi",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cwi",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "cwiei",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cwiei",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cwiei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "sc",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.sc",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.sc",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "scei",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.scei",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.scei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "ss",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.ss",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.ss",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "ssei",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.ssei",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.ssei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "swi",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swi",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swi",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "swiei",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swiei",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swiei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "swmi",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swmi",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swmi",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "swmiei",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swmiei",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swmiei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "vc1",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc1",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc1",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "vc1ei",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc1ei",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc1ei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "vc2",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc2",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc2",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "vc2ei",
-      "identifier": "module.TestModuleName.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc2ei",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc2ei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
       "name": "applicationWillTerminate",
-      "identifier": "module.TestModuleName.protocol.method.applicationWillTerminate.signature.(Notification) -> ()",
+      "identifier": "module.AppKit.protocol.method.applicationWillTerminate.signature.(Notification) -> ()",
       "module": "AppKit",
       "type": "namedFunction"
     },
     {
       "name": "aNotification",
-      "identifier": "module.TestModuleName.protocol.method.applicationWillTerminate.signature.(Notification) -> ().parameter.position.list1_parameter0.internal.aNotification",
+      "identifier": "module.AppKit.protocol.method.applicationWillTerminate.signature.(Notification) -> ().parameter.position.list1_parameter0.internal.aNotification",
       "module": "TestModuleName",
       "type": "internalParameter"
     },
     {
-      "name": "property",
-      "identifier": "module.TestModuleName.struct.StructWithMemberwiseInit.variable.property",
-      "module": "TestModuleName",
-      "type": "variable"
+      "name": "viewDidLoad",
+      "identifier": "module.AppKit.type.NSViewController.method.viewDidLoad.signature.() -> Void",
+      "module": "AppKit",
+      "type": "namedFunction"
     },
     {
-      "name": "NSApplicationDelegate",
-      "identifier": "protocol.NSApplicationDelegate",
-      "module": "AppKit",
+      "name": "NSCoder",
+      "identifier": "module.Foundation.class.NSCoder",
+      "module": "Foundation",
+      "type": "type"
+    },
+    {
+      "name": "Notification",
+      "identifier": "module.Foundation.struct.Notification",
+      "module": "Foundation",
+      "type": "type"
+    },
+    {
+      "name": "NSObject",
+      "identifier": "module.ObjectiveC.class.NSObject",
+      "module": "ObjectiveC",
       "type": "type"
     },
+    {
+      "name": "fatalError",
+      "identifier": "module.Swift.function.fatalError.signature.(@autoclosure () -> String, StaticString, UInt) -> Never",
+      "module": "Swift",
+      "type": "namedFunction"
+    },
     {
       "name": "Int",
-      "identifier": "struct.Int",
+      "identifier": "module.Swift.struct.Int",
       "module": "Swift",
       "type": "type"
     },
     {
-      "name": "Notification",
-      "identifier": "struct.Notification",
-      "module": "Foundation",
+      "name": "AppDelegate",
+      "identifier": "module.TestModuleName.class.AppDelegate",
+      "module": "TestModuleName",
+      "type": "type"
+    },
+    {
+      "name": "ClassWithInit",
+      "identifier": "module.TestModuleName.class.ClassWithInit",
+      "module": "TestModuleName",
+      "type": "type"
+    },
+    {
+      "name": "CustomInitViewController",
+      "identifier": "module.TestModuleName.class.CustomInitViewController",
+      "module": "TestModuleName",
+      "type": "type"
+    },
+    {
+      "name": "SampleClass",
+      "identifier": "module.TestModuleName.class.SampleClass",
+      "module": "TestModuleName",
+      "type": "type"
+    },
+    {
+      "name": "ViewController",
+      "identifier": "module.TestModuleName.class.ViewController",
+      "module": "TestModuleName",
       "type": "type"
     },
     {
       "name": "SampleStruct",
-      "identifier": "struct.SampleStruct",
+      "identifier": "module.TestModuleName.struct.SampleStruct",
       "module": "TestModuleName",
       "type": "type"
     },
     {
       "name": "StructWithInit",
-      "identifier": "struct.StructWithInit",
+      "identifier": "module.TestModuleName.struct.StructWithInit",
       "module": "TestModuleName",
       "type": "type"
     },
     {
       "name": "StructWithMemberwiseInit",
-      "identifier": "struct.StructWithMemberwiseInit",
+      "identifier": "module.TestModuleName.struct.StructWithMemberwiseInit",
       "module": "TestModuleName",
       "type": "type"
+    },
+    {
+      "name": "property",
+      "identifier": "module.TestModuleName.struct.StructWithMemberwiseInit.variable.property",
+      "module": "TestModuleName",
+      "type": "variable"
     }
   ]
 }
-- 
2.17.1 (Apple Git-112)


From 66459dd51b61133ddba00b198634c047b882501f Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Wed, 7 Feb 2018 15:19:15 +0100
Subject: [PATCH 051/138] Obfuscating .xib and .storyboard layout files

Reviewers: jakub.sowa, krzysztof.siejkowski, jerzy.kleszcz

Reviewed By: jakub.sowa, krzysztof.siejkowski, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2797
---
 .../include/swift/Obfuscation/LayoutRenamer.h | 73 +++++++++++++++
 swift/include/swift/Obfuscation/Renaming.h    |  3 +
 swift/lib/Obfuscation/CMakeLists.txt          |  7 +-
 swift/lib/Obfuscation/LayoutRenamer.cpp       | 88 +++++++++++++++++++
 swift/lib/Obfuscation/Renaming.cpp            | 38 +++++++-
 5 files changed, 206 insertions(+), 3 deletions(-)
 create mode 100644 swift/include/swift/Obfuscation/LayoutRenamer.h
 create mode 100644 swift/lib/Obfuscation/LayoutRenamer.cpp

diff --git a/swift/include/swift/Obfuscation/LayoutRenamer.h b/swift/include/swift/Obfuscation/LayoutRenamer.h
new file mode 100644
index 00000000000..6b1b4a664b1
--- /dev/null
+++ b/swift/include/swift/Obfuscation/LayoutRenamer.h
@@ -0,0 +1,73 @@
+#ifndef LayoutRenamer_h
+#define LayoutRenamer_h
+
+#include "swift/Obfuscation/DataStructures.h"
+#include "swift/Obfuscation/Utils.h"
+#include <vector>
+#include <unordered_map>
+#include <libxml2/libxml/parser.h>
+
+namespace swift {
+namespace obfuscation {
+        
+class LayoutRenamer {
+
+private:
+  
+  std::string FileName;
+  
+  xmlDoc *XmlDocument;
+  
+  bool shouldRename(const SymbolRenaming &Symbol, const std::string &CustomClass, const std::string &CustomModule);
+  
+  void performActualRenaming(xmlNode *Node, const std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols, bool &performedRenaming);
+
+public:
+
+  LayoutRenamer(std::string FileName);
+
+  
+  /// Performs renaming of layout (.xib and .storyboard) files from FilesJson in the following steps:
+  ///
+  /// 1. Gathers all renamed symbols (see Renaming.h) and stores them in RenamedSymbols map.
+  /// 2. Iterates through FilesJson.LayoutFiles list and performs renames if needed based
+  /// on RenamedSymbols map. Layout files are xmls, it looks for a specific attributes
+  /// such as "customClass" and retrieves their values. These values are then used to
+  /// look up RenamedSymbols map. If a "customClass" value is present inside RenamedSymbols, then
+  /// it means that this symbol was renamed in the source code in previous step and it should be
+  /// renamed in layout file as well. "customModule" attribute is also taken into account - if it's
+  /// present then it's value is compared with symbol's module value (the one found in RenamedSymbols) and
+  /// if it's not present then we assume that it's inherited from target project.
+  /// 3. Performs actual renaming if all conditions are met.
+  /// 4. Saves renamed layout files in OutputPath.
+  ///
+  /// Typical usage:
+  /// \code
+  /// LayoutRenamer LayoutRenamer(LayoutFile); // param is a path to layout file
+  ///
+  /// auto PerformedRenamingOrError = LayoutRenamer.performRenaming(RenamedSymbols, Path);
+  ///
+  /// if (auto Error = PerformedRenamingOrError.takeError()) {
+  ///   return std::move(Error);
+  /// }
+  ///
+  /// auto PerformedRenaming = PerformedRenamingOrError.get();
+  ///
+  /// if (PerformedRenaming) {
+  ///   ...
+  /// }
+  /// \endcode
+  ///
+  /// \param RenamedSymbols a map containing all renamed symbols in the source code.
+  /// \param OutputPath Path where layout files will be saved after renaming.
+  ///
+  /// \returns true if file was renamed and false if it wasn't.
+  llvm::Expected<bool> performRenaming(std::unordered_map<std::string, SymbolRenaming> RenamedSymbols, std::string OutputPath);
+
+  ~LayoutRenamer();
+};
+        
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* LayoutRenamer_h */
diff --git a/swift/include/swift/Obfuscation/Renaming.h b/swift/include/swift/Obfuscation/Renaming.h
index 38ddee1b55d..7711cc742d7 100644
--- a/swift/include/swift/Obfuscation/Renaming.h
+++ b/swift/include/swift/Obfuscation/Renaming.h
@@ -24,6 +24,9 @@ using FilesList = std::vector<std::pair<std::string, std::string>>;
 /// 3. Walks the AST and collects symbols listed in RenamesJson.
 /// 4. Performs renames on collected symbols in project copy
 /// in ObfuscatedProjectPath using renames from RenamesJson.
+/// 5. Performs renames on layout files (.storyboard and .xib)
+/// using paths from FilesJson. More information about layouts
+/// renaming in LayoutRenamer.h.
 ///
 /// Typical usage:
 /// \code
diff --git a/swift/lib/Obfuscation/CMakeLists.txt b/swift/lib/Obfuscation/CMakeLists.txt
index 9cd64df5640..13e5729dfdf 100644
--- a/swift/lib/Obfuscation/CMakeLists.txt
+++ b/swift/lib/Obfuscation/CMakeLists.txt
@@ -1,3 +1,7 @@
+# Make libxml2 available for swiftObfuscation.
+# We assume that it's present because it's bundled with Xcode.
+include_directories(SYSTEM ${LIBXML2_INCLUDE_DIR})
+
 add_swift_library(swiftObfuscation STATIC
   CompilerInfrastructure.cpp
   DataStructures.cpp
@@ -15,11 +19,12 @@ add_swift_library(swiftObfuscation STATIC
   SymbolExtracting.cpp
   Utils.cpp
   VariableDeclarationParser.cpp
+  LayoutRenamer.cpp
   LINK_LIBRARIES
   swiftParse
   swiftAST
   swiftSema
   swiftDriver
   swiftFrontend
+  ${LIBXML2_LIBRARIES}
 )
-
diff --git a/swift/lib/Obfuscation/LayoutRenamer.cpp b/swift/lib/Obfuscation/LayoutRenamer.cpp
new file mode 100644
index 00000000000..9b98faf9543
--- /dev/null
+++ b/swift/lib/Obfuscation/LayoutRenamer.cpp
@@ -0,0 +1,88 @@
+#include "swift/Obfuscation/LayoutRenamer.h"
+
+namespace swift {
+namespace obfuscation {
+
+LayoutRenamer::LayoutRenamer(std::string FileName) {
+  this->FileName = FileName;
+  XmlDocument = xmlReadFile(FileName.c_str(), /* encoding */ "UTF-8", /* options */ 0);
+}
+
+LayoutRenamer::~LayoutRenamer() {
+  if(XmlDocument != nullptr) {
+    xmlFreeDoc(XmlDocument);
+  }
+  xmlCleanupParser();
+}
+
+bool LayoutRenamer::shouldRename(const SymbolRenaming &Symbol, const std::string &CustomClass, const std::string &CustomModule) {
+  return CustomModule.empty() || CustomModule == Symbol.Module;
+}
+  
+void LayoutRenamer::performActualRenaming(xmlNode *Node, const std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols, bool &performedRenaming) {
+  const auto *CustomClassAttributeName = reinterpret_cast<const xmlChar *>("customClass");
+  const auto *CustomModuleAttributeName = reinterpret_cast<const xmlChar *>("customModule");
+
+  for (xmlNode *CurrentNode = Node; CurrentNode != nullptr; CurrentNode = CurrentNode->next) {
+
+    if (CurrentNode->type == XML_ELEMENT_NODE) {
+      
+      std::string CustomClass;
+      std::string CustomModule;
+      
+      for (xmlAttr *CurrentAttribute = CurrentNode->properties; CurrentAttribute != nullptr; CurrentAttribute = CurrentAttribute->next) {
+       
+        if(CurrentAttribute->type == XML_ATTRIBUTE_NODE) {
+          
+          if ((!xmlStrcmp(CurrentAttribute->name, CustomClassAttributeName))) {
+            CustomClass = std::string(reinterpret_cast<const char *>(xmlGetProp(CurrentNode, CurrentAttribute->name)));
+          }
+          
+          if ((!xmlStrcmp(CurrentAttribute->name, CustomModuleAttributeName))) {
+            CustomModule = std::string(reinterpret_cast<const char *>(xmlGetProp(CurrentNode, CurrentAttribute->name)));
+          }
+        }
+        
+        if(!CustomClass.empty()) {
+          
+          auto SymbolIterator = RenamedSymbols.find(CustomClass);
+          
+          if ( SymbolIterator != RenamedSymbols.end() ) {
+            
+            auto Symbol = SymbolIterator->second;
+            
+            if(shouldRename(Symbol, CustomClass, CustomModule)) {
+              xmlSetProp(CurrentNode, CustomClassAttributeName, reinterpret_cast<const xmlChar *>(Symbol.ObfuscatedName.c_str()));
+              performedRenaming = true;
+            }
+          }
+          
+          CustomClass.clear();
+          CustomModule.clear();
+        }
+      }
+    }
+
+    performActualRenaming(CurrentNode->children, RenamedSymbols, performedRenaming);
+  }
+}
+
+llvm::Expected<bool> LayoutRenamer::performRenaming(std::unordered_map<std::string, SymbolRenaming> RenamedSymbols, std::string OutputPath) {
+  //TODO check xib/storyboard version and pick renaming strategy based on that.
+
+  if (XmlDocument == nullptr) {
+    return stringError("Could not parse file: " + FileName);
+  }
+  
+  xmlNode *RootNode = xmlDocGetRootElement(XmlDocument);
+  
+  bool performedRenaming = false;
+  performActualRenaming(RootNode, RenamedSymbols, performedRenaming);
+  
+  xmlSaveFileEnc(static_cast<const char *>(OutputPath.c_str()), XmlDocument, reinterpret_cast<const char *>(XmlDocument->encoding));
+  
+  return performedRenaming;
+}
+        
+} //namespace obfuscation
+} //namespace swift
diff --git a/swift/lib/Obfuscation/Renaming.cpp b/swift/lib/Obfuscation/Renaming.cpp
index 1a8411d82a5..94fae4673be 100644
--- a/swift/lib/Obfuscation/Renaming.cpp
+++ b/swift/lib/Obfuscation/Renaming.cpp
@@ -2,6 +2,7 @@
 #include "swift/Obfuscation/CompilerInfrastructure.h"
 #include "swift/Obfuscation/SourceFileWalker.h"
 #include "swift/Obfuscation/Utils.h"
+#include "swift/Obfuscation/LayoutRenamer.h"
 
 #include "llvm/ADT/STLExtras.h"
 #include "llvm/Support/FileSystem.h"
@@ -9,6 +10,7 @@
 #include "swift/IDE/Utils.h"
 
 #include <memory>
+#include <unordered_map>
 
 namespace swift {
 namespace obfuscation {
@@ -82,7 +84,8 @@ llvm::Expected<bool> performActualRenaming(SourceFile &Current,
                                            const RenamesJson &RenamesJson,
                                            SourceManager &SourceManager,
                                            unsigned int BufferId,
-                                           StringRef Path) {
+                                           StringRef Path,
+                                           std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols) {
   bool performedRenaming = false;
   auto SymbolsWithRanges = walkAndCollectSymbols(Current);
   
@@ -113,6 +116,7 @@ llvm::Expected<bool> performActualRenaming(SourceFile &Current,
         Editor->ide::SourceEditConsumer::accept(SourceManager,
                                                 SymbolWithRange.Range,
                                                 ObfuscatedName);
+        RenamedSymbols.insert({Symbol.OriginalName, Symbol});
         performedRenaming = true;
         break;
       }
@@ -142,6 +146,8 @@ performRenaming(std::string MainExecutablePath,
   }
   
   FilesList Files;
+  std::unordered_map<std::string, SymbolRenaming> RenamedSymbols;
+  
   for (auto* Unit : CI.getMainModule()->getFiles()) {
     if (auto* Current = dyn_cast<SourceFile>(Unit)) {
 
@@ -161,13 +167,41 @@ performRenaming(std::string MainExecutablePath,
                                 RenamesJson,
                                 SourceManager,
                                 BufferId,
-                                Path)) {
+                                Path,
+                                RenamedSymbols)) {
         auto Filename = llvm::sys::path::filename(Path).str();
         Files.push_back(std::pair<std::string, std::string>(Filename, Path));
       }
     }
   }
   
+  for (const auto &LayoutFile: FilesJson.LayoutFiles) {
+    
+    auto PathOrError = computeObfuscatedPath(LayoutFile,
+                                             FilesJson.Project.RootPath,
+                                             ObfuscatedProjectPath);
+    
+    if (auto Error = PathOrError.takeError()) {
+      return std::move(Error);
+    }
+    
+    auto Path = PathOrError.get().str().str();
+    
+    LayoutRenamer LayoutRenamer(LayoutFile);
+
+    auto PerformedRenamingOrError = LayoutRenamer.performRenaming(RenamedSymbols, Path);
+    
+    if (auto Error = PerformedRenamingOrError.takeError()) {
+      return std::move(Error);
+    }
+    
+    auto PerformedRenaming = PerformedRenamingOrError.get();
+    
+    if (PerformedRenaming) {
+      Files.push_back(std::pair<std::string, std::string>(LayoutFile, Path));
+    }
+  }
+    
   return Files;
 }
 
-- 
2.17.1 (Apple Git-112)


From d50b673317ed6628cb5c92b73bc49d7997d3cd7a Mon Sep 17 00:00:00 2001
From: Jakub Sowa <jakub.sowa@polidea.com>
Date: Thu, 8 Feb 2018 10:00:09 +0100
Subject: [PATCH 052/138] Constructor parameters obfuscation.

Reviewers: michal.zielinski, jerzy.kleszcz, krzysztof.siejkowski

Reviewed By: michal.zielinski, jerzy.kleszcz, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2800
---
 .../Obfuscation/DeclarationParsingUtils.h     | 13 +++-
 .../Obfuscation/FunctionDeclarationParser.h   |  8 +-
 .../Obfuscation/ParameterDeclarationParser.h  |  5 +-
 swift/lib/Obfuscation/DeclarationParser.cpp   |  3 +
 .../Obfuscation/DeclarationParsingUtils.cpp   | 20 +++++
 .../Obfuscation/FunctionDeclarationParser.cpp | 17 ++++-
 swift/lib/Obfuscation/OperatorParser.cpp      |  3 +-
 .../ParameterDeclarationParser.cpp            | 15 ++--
 swift/lib/Obfuscation/SourceFileWalker.cpp    | 74 +++++++++++++++----
 9 files changed, 125 insertions(+), 33 deletions(-)

diff --git a/swift/include/swift/Obfuscation/DeclarationParsingUtils.h b/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
index 142639c022c..3fa3762aeae 100644
--- a/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
+++ b/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
@@ -14,14 +14,23 @@ namespace obfuscation {
 using ModuleNameAndParts = std::pair<std::string, std::vector<std::string>>;
   
 std::string combineIdentifier(std::vector<std::string> &Parts);
-  
+
+std::string declarationName(const ValueDecl* Declaration);
+
 std::string moduleName(const Decl* Declaration);
+
+std::string externalParameterName(const ParamDecl *Declaration);
+
+std::string internalParameterName(const ParamDecl *Declaration);
+
+std::string symbolName(const OperatorDecl *Declaration);
+
+std::string functionName(const AbstractFunctionDecl* Declaration);
   
 ModuleNameAndParts moduleNameAndParts(const Decl *Declaration);
   
 std::string typeName(const NominalTypeDecl* Declaration);
 
-std::string declarationName(const ValueDecl* Declaration);
 
 llvm::Expected<std::string> enclosingTypeName(const Decl* Declaration);
 
diff --git a/swift/include/swift/Obfuscation/FunctionDeclarationParser.h b/swift/include/swift/Obfuscation/FunctionDeclarationParser.h
index 4999aff728f..e27bb124729 100644
--- a/swift/include/swift/Obfuscation/FunctionDeclarationParser.h
+++ b/swift/include/swift/Obfuscation/FunctionDeclarationParser.h
@@ -13,12 +13,14 @@
 namespace swift {
 namespace obfuscation {
     
-std::string functionName(const FuncDecl* Declaration);
+std::string functionName(const AbstractFunctionDecl* Declaration);
   
-ModuleNameAndParts functionIdentifierParts(const FuncDecl *Declaration);
+ModuleNameAndParts functionIdentifierParts(const AbstractFunctionDecl* Declaration);
+
   
 SymbolsOrError parse(const FuncDecl* Declaration, CharSourceRange Range);
-    
+SymbolsOrError parse(const ConstructorDecl* Declaration, CharSourceRange Range);
+
 } //namespace obfuscation
 } //namespace swift
 
diff --git a/swift/include/swift/Obfuscation/ParameterDeclarationParser.h b/swift/include/swift/Obfuscation/ParameterDeclarationParser.h
index 623a15b27c3..0c71eb1153b 100644
--- a/swift/include/swift/Obfuscation/ParameterDeclarationParser.h
+++ b/swift/include/swift/Obfuscation/ParameterDeclarationParser.h
@@ -14,13 +14,16 @@ namespace swift {
 namespace obfuscation {
   
 SymbolsOrError
-parseSeparateFunctionDeclarationForParameters(const FuncDecl* Declaration);
+parseSeparateFunctionDeclarationForParameters(const AbstractFunctionDecl* Declaration);
 
 SymbolsOrError
 parseFunctionFromCallExpressionForParameters(const FuncDecl* Declaration);
   
 SymbolsOrError parseSeparateDeclarationWithRange(const ParamDecl* Declaration,
                                                  CharSourceRange Range);
+
+SymbolsOrError parse(const ParamDecl* Declaration);
+
   
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/lib/Obfuscation/DeclarationParser.cpp b/swift/lib/Obfuscation/DeclarationParser.cpp
index 5506cd77f71..df157b281b0 100644
--- a/swift/lib/Obfuscation/DeclarationParser.cpp
+++ b/swift/lib/Obfuscation/DeclarationParser.cpp
@@ -29,6 +29,9 @@ SymbolsOrError extractSymbol(Decl* Declaration, CharSourceRange Range) {
   } else if (const auto *OperatorDeclaration = dyn_cast<OperatorDecl>(Declaration)) {
       SingleSymbolOrErrorPointer =
       llvm::make_unique<SingleSymbolOrError>(parse(OperatorDeclaration));
+  } else if (const auto *ConstructDeclaration = dyn_cast<ConstructorDecl>(Declaration)) {
+      SymbolsOrErrorPointer =
+      llvm::make_unique<SymbolsOrError>(parse(ConstructDeclaration, Range));
   } else if (const auto *ParamDeclaration = dyn_cast<ParamDecl>(Declaration)) {
     auto Symbols = parseSeparateDeclarationWithRange(ParamDeclaration, Range);
     SymbolsOrErrorPointer =
diff --git a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
index 3dad4f8ecd7..50ea6d32737 100644
--- a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
+++ b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
@@ -31,6 +31,22 @@ std::string moduleName(const Decl* Declaration) {
   return Declaration->getModuleContext()->getBaseName().getIdentifier().get();
 }
 
+std::string externalParameterName(const ParamDecl *Declaration) {
+  return Declaration->getArgumentName().str().str();
+}
+
+std::string internalParameterName(const ParamDecl *Declaration) {
+  return Declaration->getName().str().str();
+}
+
+std::string symbolName(const OperatorDecl *Declaration) {
+  return Declaration->getName().str().str();
+}
+
+std::string functionName(const AbstractFunctionDecl* Declaration) {
+    return Declaration->getName().str().str();
+}
+
 ModuleNameAndParts moduleNameAndParts(const Decl *Declaration) {
   std::string ModuleName = moduleName(Declaration);
   std::vector<std::string> Parts;
@@ -71,6 +87,10 @@ template const FuncDecl*
 baseOverridenDeclarationWithModules(const FuncDecl *Declaration,
                                     std::set<std::string> &Modules);
 
+template const AbstractFunctionDecl*
+baseOverridenDeclarationWithModules(const AbstractFunctionDecl *Declaration,
+                                    std::set<std::string> &Modules);
+
 } //namespace obfuscation
 } //namespace swift
 
diff --git a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
index 0dbf67ae8e8..bf91865c792 100644
--- a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
@@ -21,7 +21,7 @@ llvm::Error isDeclarationSupported(const FuncDecl* Declaration) {
   return llvm::Error::success();
 }
 
-std::string functionSignature(const FuncDecl *Declaration) {
+std::string functionSignature(const AbstractFunctionDecl *Declaration) {
   if (Declaration->getDeclContext()->isTypeContext()) {
     auto Interface = Declaration->getMethodInterfaceType().getString();
     return "signature." + Interface;
@@ -30,7 +30,7 @@ std::string functionSignature(const FuncDecl *Declaration) {
   }
 }
 
-ModuleNameAndParts functionIdentifierParts(const FuncDecl *Declaration) {
+ModuleNameAndParts functionIdentifierParts(const AbstractFunctionDecl *Declaration) {
   std::string ModuleName;
   std::string SymbolName = declarationName(Declaration);
   std::vector<std::string> Parts;
@@ -84,6 +84,15 @@ ModuleNameAndParts functionIdentifierParts(const FuncDecl *Declaration) {
   return std::make_pair(ModuleName, Parts);
 }
 
+SymbolsOrError parse(const AbstractFunctionDecl* Declaration, CharSourceRange Range) {
+    if (auto FunctionDecl = dyn_cast<FuncDecl>(Declaration)) {
+        return parse(FunctionDecl, Range);
+    } else if (auto ConstructDecl = dyn_cast<ConstructorDecl>(Declaration)) {
+        return parse(ConstructDecl, Range);
+    }
+    return stringError("trying to parse unsupported declaration type");
+}
+
 SymbolsOrError parseOverridenDeclaration(const FuncDecl *Declaration,
                                          const std::string &ModuleName,
                                          const CharSourceRange &Range) {
@@ -97,6 +106,10 @@ SymbolsOrError parseOverridenDeclaration(const FuncDecl *Declaration,
   }
 }
 
+SymbolsOrError parse(const ConstructorDecl* Declaration, CharSourceRange Range) {
+    return parseSeparateFunctionDeclarationForParameters(Declaration);
+}
+  
 SymbolsOrError parse(const FuncDecl* Declaration, CharSourceRange Range) {
   
   if (auto Error = isDeclarationSupported(Declaration)) {
diff --git a/swift/lib/Obfuscation/OperatorParser.cpp b/swift/lib/Obfuscation/OperatorParser.cpp
index 5289baef9a6..258aea49523 100644
--- a/swift/lib/Obfuscation/OperatorParser.cpp
+++ b/swift/lib/Obfuscation/OperatorParser.cpp
@@ -2,6 +2,7 @@
 #include "swift/Obfuscation/FunctionDeclarationParser.h"
 #include "swift/Obfuscation/ParameterDeclarationParser.h"
 #include "swift/Obfuscation/Utils.h"
+#include "swift/Obfuscation/DeclarationParsingUtils.h"
 
 namespace swift {
 namespace obfuscation {
@@ -13,7 +14,7 @@ SingleSymbolOrError parse(const OperatorDecl* Declaration) {
   auto ModuleNameAndParts = moduleNameAndParts(Declaration);
   std::string ModuleName = ModuleNameAndParts.first;
   std::vector<std::string> Parts = ModuleNameAndParts.second;
-  std::string SymbolName = Declaration->getName().str().str();
+  std::string SymbolName = symbolName(Declaration);
   Parts.push_back("operator." + SymbolName);
 
   return Symbol(combineIdentifier(Parts),
diff --git a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
index 24ce189b3a1..270d5873723 100644
--- a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
@@ -10,7 +10,7 @@ namespace swift {
 namespace obfuscation {
   
 llvm::Expected<std::string> position(const ParamDecl *Declaration,
-                                     const FuncDecl *FunctionDeclaration) {
+                                     const AbstractFunctionDecl *FunctionDeclaration) {
   
   auto ParameterLists = FunctionDeclaration->getParameterLists();
   for (unsigned ListIndex = 0; ListIndex < ParameterLists.size(); ++ListIndex) {
@@ -38,18 +38,17 @@ SymbolsOrError parse(const ParamDecl* Declaration) {
     return stringError("We shouldn't rename implicit parameters");
   }
   if (const auto *FunctionDeclaration =
-      dyn_cast<FuncDecl>(Declaration->getDeclContext())) {
+      dyn_cast<AbstractFunctionDecl>(Declaration->getDeclContext())) {
     
     std::set<std::string> Modules;
-    auto *BaseFunctionDeclaration =
-      baseOverridenDeclarationWithModules(FunctionDeclaration, Modules);
+    auto *BaseFunctionDeclaration = baseOverridenDeclarationWithModules(FunctionDeclaration, Modules);
     
     bool OverridenMethodIsFromTheSameModule =
       Modules.size() == 0
       || (Modules.size() == 1 && Modules.count(moduleName(Declaration)) == 1);
     
-    std::string ExternalName = Declaration->getArgumentName().str().str();
-    std::string InternalName = Declaration->getName().str().str();
+    auto ExternalName = externalParameterName(Declaration);
+    auto InternalName = internalParameterName(Declaration);
     
     std::vector<SymbolWithRange> Symbols;
     
@@ -120,7 +119,7 @@ SymbolsOrError parse(const ParamDecl* Declaration) {
   return stringError("Couldn't identify what function parameter belong to");
 }
   
-SymbolsOrError parametersSymbolsFromFunction(const FuncDecl* Declaration) {
+SymbolsOrError parametersSymbolsFromFunction(const AbstractFunctionDecl* Declaration) {
     
   std::vector<SymbolWithRange> Symbols;
 
@@ -142,7 +141,7 @@ SymbolsOrError parametersSymbolsFromFunction(const FuncDecl* Declaration) {
 }
 
 SymbolsOrError
-parseSeparateFunctionDeclarationForParameters(const FuncDecl* Declaration) {
+parseSeparateFunctionDeclarationForParameters(const AbstractFunctionDecl* Declaration) {
   return parametersSymbolsFromFunction(Declaration);
 }
   
diff --git a/swift/lib/Obfuscation/SourceFileWalker.cpp b/swift/lib/Obfuscation/SourceFileWalker.cpp
index 2a0c903b173..1504f1f9396 100644
--- a/swift/lib/Obfuscation/SourceFileWalker.cpp
+++ b/swift/lib/Obfuscation/SourceFileWalker.cpp
@@ -2,6 +2,10 @@
 #include "swift/Obfuscation/DeclarationParser.h"
 #include "swift/Obfuscation/DeclarationParsingUtils.h"
 #include "swift/Obfuscation/ExpressionParser.h"
+#include "swift/Obfuscation/ParameterDeclarationParser.h"
+#include "swift/Obfuscation/Utils-Template.h"
+#include "swift/Obfuscation/Utils.h"
+#include "swift/Obfuscation/DeclarationParsingUtils.h"
 
 #include <string>
 
@@ -39,28 +43,66 @@ struct RenamesCollector: public SourceEntityWalker {
     handleSymbols(Symbols.get());
     return true;
   }
-  
+
+  llvm::Expected<SymbolWithRange> buildSymbol(Identifier Name, ValueDecl *Decl,
+                                              CharSourceRange Range) {
+  if (const auto *FunctionDecl = dyn_cast<AbstractFunctionDecl>(Decl)) {
+    auto ParameterLists = FunctionDecl->getParameterLists();
+    auto ParameterName = Name.str();
+
+    for (auto *ParameterList: ParameterLists) {
+      for (auto *Parameter : *ParameterList) {
+        if (ParameterName == internalParameterName(Parameter)
+            || ParameterName == externalParameterName(Parameter)) {
+          SymbolsOrError Symbols = parse(Parameter);
+          if (auto Error = Symbols.takeError()) {
+            return std::move(Error);
+          } else {
+            auto Symbol = Symbols.get()[0];
+            Symbol.Range = Range;
+            return Symbol;
+          }
+        }
+      }
+    }
+    return stringError("Cannot find parameter identifier in function declaration");
+  } else {
+    return stringError("Cannot build symbol for argument without "
+                         "function declaration");
+    }
+  }
+
+  bool visitCallArgName(Identifier Name, CharSourceRange Range,
+                                  ValueDecl *D) override {
+
+    auto Symbol = buildSymbol(Name, D, Range);
+      if (auto Error = Symbol.takeError()) {
+        llvm::consumeError(std::move(Error));
+      } else {
+        Bucket.insert(Symbol.get());
+      }
+      return true;
+  }
+
   bool visitDeclReference(ValueDecl *Declaration, CharSourceRange Range,
                           TypeDecl *CtorTyRef, ExtensionDecl *ExtTyRef,
                           Type T, ReferenceMetaData Data) override {
-    
-    std::unique_ptr<SymbolsOrError> Symbols(nullptr);
-    if (CtorTyRef) {
-      Symbols =
-        llvm::make_unique<SymbolsOrError>(extractSymbol(CtorTyRef, Range));
-    } else {
-      Symbols =
-        llvm::make_unique<SymbolsOrError>(extractSymbol(Declaration, Range));
-    }
-    if (auto Error = Symbols->takeError()) {
+
+    auto Symbols = extractSymbol(CtorTyRef ? CtorTyRef : Declaration, Range);
+    handleExtractionResult(Symbols);
+
+    return true;
+  }
+
+  void handleExtractionResult(SymbolsOrError &Symbols) {
+    if (auto Error = Symbols.takeError()) {
       llvm::handleAllErrors(std::move(Error),
                             [](const llvm::StringError &StringError) {
-        llvm::errs() << "Error: " << StringError.message();
-      });
-      return true;
+                                llvm::errs() << "Error: " << StringError.message();
+                            });
+    } else {
+      handleSymbols(Symbols.get());
     }
-    handleSymbols(Symbols->get());
-    return true;
   }
 };
 
-- 
2.17.1 (Apple Git-112)


From e1f4abccc9baa973521f497977439b7212da2534 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Thu, 8 Feb 2018 17:25:04 +0100
Subject: [PATCH 053/138] Added framework search paths to files.json and pass
 them to compiler

Reviewers: jakub.sowa, michal.zielinski, jerzy.kleszcz

Reviewed By: jerzy.kleszcz

Subscribers: jakub.sowa, jerzy.kleszcz, michal.zielinski

Differential Revision: https://phabricator.polidea.com/D2804
---
 swift/include/swift/Obfuscation/DataStructures.h   |  3 ++-
 swift/lib/Obfuscation/CompilerInfrastructure.cpp   |  4 ++++
 swift/lib/Obfuscation/DataStructures.cpp           |  5 ++++-
 swift/lib/Obfuscation/SourceFileWalker.cpp         |  7 +------
 swift/test/Obfuscation/Inputs/ExpectedSymbols.json |  6 ++++++
 swift/test/Obfuscation/SymbolExtractor.swift       |  2 +-
 swift/unittests/SwiftObfuscation/FileIOTests.cpp   | 12 ++++++++----
 7 files changed, 26 insertions(+), 13 deletions(-)

diff --git a/swift/include/swift/Obfuscation/DataStructures.h b/swift/include/swift/Obfuscation/DataStructures.h
index 0579be42410..364a697f8c5 100644
--- a/swift/include/swift/Obfuscation/DataStructures.h
+++ b/swift/include/swift/Obfuscation/DataStructures.h
@@ -38,8 +38,9 @@ struct FilesJson {
   Sdk Sdk;
   std::vector<std::string> SourceFiles;
   std::vector<std::string> LayoutFiles;
-  std::vector<std::string> SystemLinkedFrameworks;
+  std::vector<std::string> ImplicitlyLinkedFrameworks;
   std::vector<ExplicitlyLinkedFrameworks> ExplicitlyLinkedFrameworks;
+  std::vector<std::string> FrameworkSearchPaths;
 };
 
 enum class SymbolType: int {
diff --git a/swift/lib/Obfuscation/CompilerInfrastructure.cpp b/swift/lib/Obfuscation/CompilerInfrastructure.cpp
index 23f3c1d88b0..5e6522f1a1a 100644
--- a/swift/lib/Obfuscation/CompilerInfrastructure.cpp
+++ b/swift/lib/Obfuscation/CompilerInfrastructure.cpp
@@ -29,6 +29,10 @@ struct CompilerInvocationConfiguration {
       SearchPathOptions::FrameworkSearchPath Path(Framework.Path, false);
       Paths.push_back(Path);
     }
+    for (const auto &FrameworkPath : FilesJson.FrameworkSearchPaths) {
+      SearchPathOptions::FrameworkSearchPath Path(FrameworkPath, false);
+      Paths.push_back(Path);
+    }
   }
 };
 
diff --git a/swift/lib/Obfuscation/DataStructures.cpp b/swift/lib/Obfuscation/DataStructures.cpp
index 0fa66761349..934b03f3118 100644
--- a/swift/lib/Obfuscation/DataStructures.cpp
+++ b/swift/lib/Obfuscation/DataStructures.cpp
@@ -83,9 +83,12 @@ void MappingTraits<FilesJson>::mapping(IO &Io, FilesJson &Object) {
   Io.mapRequired("sdk", Object.Sdk);
   Io.mapRequired("sourceFiles", Object.SourceFiles);
   Io.mapRequired("layoutFiles", Object.LayoutFiles);
-  Io.mapRequired("systemLinkedFrameworks", Object.SystemLinkedFrameworks);
+  Io.mapRequired("implicitlyLinkedFrameworks",
+                 Object.ImplicitlyLinkedFrameworks);
   Io.mapRequired("explicitlyLinkedFrameworks",
                  Object.ExplicitlyLinkedFrameworks);
+  Io.mapRequired("frameworkSearchPaths",
+                 Object.FrameworkSearchPaths);
 }
   
 void MappingTraits<Project>::mapping(IO &Io, Project &Object) {
diff --git a/swift/lib/Obfuscation/SourceFileWalker.cpp b/swift/lib/Obfuscation/SourceFileWalker.cpp
index 1504f1f9396..5e305f198f9 100644
--- a/swift/lib/Obfuscation/SourceFileWalker.cpp
+++ b/swift/lib/Obfuscation/SourceFileWalker.cpp
@@ -87,19 +87,14 @@ struct RenamesCollector: public SourceEntityWalker {
   bool visitDeclReference(ValueDecl *Declaration, CharSourceRange Range,
                           TypeDecl *CtorTyRef, ExtensionDecl *ExtTyRef,
                           Type T, ReferenceMetaData Data) override {
-
     auto Symbols = extractSymbol(CtorTyRef ? CtorTyRef : Declaration, Range);
     handleExtractionResult(Symbols);
-
     return true;
   }
 
   void handleExtractionResult(SymbolsOrError &Symbols) {
     if (auto Error = Symbols.takeError()) {
-      llvm::handleAllErrors(std::move(Error),
-                            [](const llvm::StringError &StringError) {
-                                llvm::errs() << "Error: " << StringError.message();
-                            });
+      llvm::consumeError(std::move(Error));
     } else {
       handleSymbols(Symbols.get());
     }
diff --git a/swift/test/Obfuscation/Inputs/ExpectedSymbols.json b/swift/test/Obfuscation/Inputs/ExpectedSymbols.json
index 47018d14f8f..a40b9aebad3 100644
--- a/swift/test/Obfuscation/Inputs/ExpectedSymbols.json
+++ b/swift/test/Obfuscation/Inputs/ExpectedSymbols.json
@@ -221,6 +221,12 @@
       "identifier": "module.TestModuleName.struct.StructWithMemberwiseInit.variable.property",
       "module": "TestModuleName",
       "type": "variable"
+    },
+    {
+      "name": "number",
+      "identifier": "module.TestModuleName.type.CustomInitViewController.method.init.signature.(Int) -> CustomInitViewController.parameter.position.list1_parameter0.single.number",
+      "module": "TestModuleName",
+      "type": "singleParameter"
     }
   ]
 }
diff --git a/swift/test/Obfuscation/SymbolExtractor.swift b/swift/test/Obfuscation/SymbolExtractor.swift
index 8cbb23e0db0..75d908ecef0 100644
--- a/swift/test/Obfuscation/SymbolExtractor.swift
+++ b/swift/test/Obfuscation/SymbolExtractor.swift
@@ -1,4 +1,4 @@
-//RUN: echo "{\"project\": {\"rootPath\": \"TestRootPath\", \"projectFilePath\": \"testProjectFilePath\"}, \"module\": {\"name\": \"TestModuleName\", \"triple\": \"x86_64-apple-macosx10.13\"}, \"sdk\": {\"name\": \"%target-sdk-name\", \"path\": \"%sdk\"}, \"sourceFiles\": [\"%S/Inputs\/ViewController.swift\", \"%S/Inputs\/AppDelegate.swift\"], \"layoutFiles\": [], \"explicitlyLinkedFrameworks\": [], \"systemLinkedFrameworks\": []}" > %T/files.json
+//RUN: echo "{\"project\": {\"rootPath\": \"TestRootPath\", \"projectFilePath\": \"testProjectFilePath\"}, \"module\": {\"name\": \"TestModuleName\", \"triple\": \"x86_64-apple-macosx10.13\"}, \"sdk\": {\"name\": \"%target-sdk-name\", \"path\": \"%sdk\"}, \"sourceFiles\": [\"%S/Inputs\/ViewController.swift\", \"%S/Inputs\/AppDelegate.swift\"], \"layoutFiles\": [], \"explicitlyLinkedFrameworks\": [], \"implicitlyLinkedFrameworks\": [], \"frameworkSearchPaths\": []}" > %T/files.json
 //RUN: obfuscator-symbol-extractor -filesjson %T/files.json -symbolsjson %t -printdiagnostics
 //RUN: diff -w %S/Inputs/expectedSymbols.json %t
 
diff --git a/swift/unittests/SwiftObfuscation/FileIOTests.cpp b/swift/unittests/SwiftObfuscation/FileIOTests.cpp
index e46f26fb274..1d10522a92b 100644
--- a/swift/unittests/SwiftObfuscation/FileIOTests.cpp
+++ b/swift/unittests/SwiftObfuscation/FileIOTests.cpp
@@ -100,7 +100,8 @@ TEST(ParseJson, SuccessParsingText) {
     std::string LayoutFileName2 = "testLayoutFileName2";
     std::string ExplicitFrameworkName = "testExplicitFrameworkName";
     std::string ExplicitFrameworkPath = "testExplicitFrameworkPath";
-    std::string SystemFramework = "testSystemFramework";
+    std::string ImplicitFramework = "testImplicitFramework";
+    std::string FrameworkSearchPath = "testFrameworkSearchPath";
     FakeMemoryBuffer::Payload = "{\r\n  \"project\":{\r\n"
         "\"rootPath\":\"" + RootPath + "\",\r\n"
         "\"projectFilePath\":\"" + ProjectFilePath + "\"\r\n   },"
@@ -119,7 +120,8 @@ TEST(ParseJson, SuccessParsingText) {
         "\"explicitlyLinkedFrameworks\":[\r\n {\r\n"
         "\"name\":\"" + ExplicitFrameworkName + "\",\r\n"
         "\"path\":\"" + ExplicitFrameworkPath + "\"\r\n }\r\n ],\r\n"
-        "\"systemLinkedFrameworks\":[\r\n \"" + SystemFramework + "\"\r\n   ]\r\n}";
+        "\"implicitlyLinkedFrameworks\":[\r\n \"" + ImplicitFramework + "\"\r\n   ],\r\n"
+        "\"frameworkSearchPaths\":[\r\n \"" + FrameworkSearchPath + "\"\r\n]\r\n}";
     std::string Path = "";
     std::string Expected = "Error during JSON parse";
 
@@ -148,8 +150,10 @@ TEST(ParseJson, SuccessParsingText) {
               ExplicitFrameworkName);
     EXPECT_EQ(FilesJson.ExplicitlyLinkedFrameworks[0].Path,
               ExplicitFrameworkPath);
-    EXPECT_EQ(FilesJson.SystemLinkedFrameworks.size(), 1U);
-    EXPECT_EQ(FilesJson.SystemLinkedFrameworks[0], SystemFramework);
+    EXPECT_EQ(FilesJson.ImplicitlyLinkedFrameworks.size(), 1U);
+    EXPECT_EQ(FilesJson.ImplicitlyLinkedFrameworks[0], ImplicitFramework);
+    EXPECT_EQ(FilesJson.FrameworkSearchPaths.size(), 1U);
+    EXPECT_EQ(FilesJson.FrameworkSearchPaths[0], FrameworkSearchPath);
 }
 
 struct FakeFile {
-- 
2.17.1 (Apple Git-112)


From 1989d2b3f78248a188f5d5b88a3e5ac4cd7910d4 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Thu, 8 Feb 2018 18:19:21 +0100
Subject: [PATCH 054/138] Fix crash on lack of symbols

---
 swift/lib/Obfuscation/SourceFileWalker.cpp | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/swift/lib/Obfuscation/SourceFileWalker.cpp b/swift/lib/Obfuscation/SourceFileWalker.cpp
index 5e305f198f9..4989b52bce1 100644
--- a/swift/lib/Obfuscation/SourceFileWalker.cpp
+++ b/swift/lib/Obfuscation/SourceFileWalker.cpp
@@ -58,9 +58,11 @@ struct RenamesCollector: public SourceEntityWalker {
           if (auto Error = Symbols.takeError()) {
             return std::move(Error);
           } else {
-            auto Symbol = Symbols.get()[0];
-            Symbol.Range = Range;
-            return Symbol;
+            if (Symbols.get().size() > 0) {
+              auto Symbol = Symbols.get()[0];
+              Symbol.Range = Range;
+              return Symbol;
+            }
           }
         }
       }
-- 
2.17.1 (Apple Git-112)


From 2db7226f273b003f9ecb4c357ba5e66b2696e75d Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Thu, 8 Feb 2018 14:09:20 +0100
Subject: [PATCH 055/138] Basic support for layout files versioning

Reviewers: jerzy.kleszcz, krzysztof.siejkowski, jakub.sowa

Reviewed By: krzysztof.siejkowski, jakub.sowa

Differential Revision: https://phabricator.polidea.com/D2806
---
 .../include/swift/Obfuscation/LayoutRenamer.h |  30 ++--
 swift/lib/Obfuscation/LayoutRenamer.cpp       | 150 ++++++++++++------
 2 files changed, 118 insertions(+), 62 deletions(-)

diff --git a/swift/include/swift/Obfuscation/LayoutRenamer.h b/swift/include/swift/Obfuscation/LayoutRenamer.h
index 6b1b4a664b1..ccf3e28b366 100644
--- a/swift/include/swift/Obfuscation/LayoutRenamer.h
+++ b/swift/include/swift/Obfuscation/LayoutRenamer.h
@@ -9,7 +9,17 @@
 
 namespace swift {
 namespace obfuscation {
-        
+
+/// Base class for renaming strategies. If a new layout file appears then
+/// a new strategy should be created and applied to that new type of file.
+/// Old files should use old strategies to ensure compatibility.
+class BaseLayoutRenamingStrategy {
+  
+public:
+  virtual  void performActualRenaming(xmlNode *Node, const std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols, bool &performedRenaming) = 0;
+  virtual ~BaseLayoutRenamingStrategy() = default;
+};
+  
 class LayoutRenamer {
 
 private:
@@ -17,27 +27,17 @@ private:
   std::string FileName;
   
   xmlDoc *XmlDocument;
-  
-  bool shouldRename(const SymbolRenaming &Symbol, const std::string &CustomClass, const std::string &CustomModule);
-  
-  void performActualRenaming(xmlNode *Node, const std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols, bool &performedRenaming);
+    
+  llvm::Expected<std::unique_ptr<BaseLayoutRenamingStrategy>> createRenamingStrategy(xmlNode *RootNode);
 
 public:
 
   LayoutRenamer(std::string FileName);
 
-  
   /// Performs renaming of layout (.xib and .storyboard) files from FilesJson in the following steps:
   ///
   /// 1. Gathers all renamed symbols (see Renaming.h) and stores them in RenamedSymbols map.
-  /// 2. Iterates through FilesJson.LayoutFiles list and performs renames if needed based
-  /// on RenamedSymbols map. Layout files are xmls, it looks for a specific attributes
-  /// such as "customClass" and retrieves their values. These values are then used to
-  /// look up RenamedSymbols map. If a "customClass" value is present inside RenamedSymbols, then
-  /// it means that this symbol was renamed in the source code in previous step and it should be
-  /// renamed in layout file as well. "customModule" attribute is also taken into account - if it's
-  /// present then it's value is compared with symbol's module value (the one found in RenamedSymbols) and
-  /// if it's not present then we assume that it's inherited from target project.
+  /// 2. Iterates through FilesJson.LayoutFiles list and picks renaming strategy based on file type and version.
   /// 3. Performs actual renaming if all conditions are met.
   /// 4. Saves renamed layout files in OutputPath.
   ///
@@ -66,7 +66,7 @@ public:
 
   ~LayoutRenamer();
 };
-        
+
 } //namespace obfuscation
 } //namespace swift
 
diff --git a/swift/lib/Obfuscation/LayoutRenamer.cpp b/swift/lib/Obfuscation/LayoutRenamer.cpp
index 9b98faf9543..a82117972ac 100644
--- a/swift/lib/Obfuscation/LayoutRenamer.cpp
+++ b/swift/lib/Obfuscation/LayoutRenamer.cpp
@@ -3,6 +3,72 @@
 namespace swift {
 namespace obfuscation {
 
+class XCode9RenamingStrategy: public BaseLayoutRenamingStrategy {
+
+private:
+  
+  bool shouldRename(const SymbolRenaming &Symbol, const std::string &CustomClass, const std::string &CustomModule) {
+    return CustomModule.empty() || CustomModule == Symbol.Module;
+  }
+  
+public:
+  
+  /// Performs renames if needed based on RenamedSymbols map. Layout files are xmls, it looks for a specific attributes
+  /// such as "customClass" and retrieves their values. These values are then used to
+  /// look up RenamedSymbols map. If a "customClass" value is present inside RenamedSymbols, then
+  /// it means that this symbol was renamed in the source code in previous step and it should be
+  /// renamed in layout file as well. "customModule" attribute is also taken into account - if it's
+  /// present then it's value is compared with symbol's module value (the one found in RenamedSymbols) and
+  /// if it's not present then we assume that it's inherited from target project.
+  void performActualRenaming(xmlNode *Node, const std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols, bool &performedRenaming) {
+    const auto *CustomClassAttributeName = reinterpret_cast<const xmlChar *>("customClass");
+    const auto *CustomModuleAttributeName = reinterpret_cast<const xmlChar *>("customModule");
+    
+    for (xmlNode *CurrentNode = Node; CurrentNode != nullptr; CurrentNode = CurrentNode->next) {
+      
+      if (CurrentNode->type == XML_ELEMENT_NODE) {
+        
+        std::string CustomClass;
+        std::string CustomModule;
+        
+        for (xmlAttr *CurrentAttribute = CurrentNode->properties; CurrentAttribute != nullptr; CurrentAttribute = CurrentAttribute->next) {
+          
+          if(CurrentAttribute->type == XML_ATTRIBUTE_NODE) {
+            
+            if ((!xmlStrcmp(CurrentAttribute->name, CustomClassAttributeName))) {
+              CustomClass = std::string(reinterpret_cast<const char *>(xmlGetProp(CurrentNode, CurrentAttribute->name)));
+            }
+            
+            if ((!xmlStrcmp(CurrentAttribute->name, CustomModuleAttributeName))) {
+              CustomModule = std::string(reinterpret_cast<const char *>(xmlGetProp(CurrentNode, CurrentAttribute->name)));
+            }
+          }
+          
+          if(!CustomClass.empty()) {
+            
+            auto SymbolIterator = RenamedSymbols.find(CustomClass);
+            
+            if ( SymbolIterator != RenamedSymbols.end() ) {
+              
+              auto Symbol = SymbolIterator->second;
+              
+              if(shouldRename(Symbol, CustomClass, CustomModule)) {
+                xmlSetProp(CurrentNode, CustomClassAttributeName, reinterpret_cast<const xmlChar *>(Symbol.ObfuscatedName.c_str()));
+                performedRenaming = true;
+              }
+            }
+            
+            CustomClass.clear();
+            CustomModule.clear();
+          }
+        }
+      }
+      
+      performActualRenaming(CurrentNode->children, RenamedSymbols, performedRenaming);
+    }
+  }
+};
+  
 LayoutRenamer::LayoutRenamer(std::string FileName) {
   this->FileName = FileName;
   XmlDocument = xmlReadFile(FileName.c_str(), /* encoding */ "UTF-8", /* options */ 0);
@@ -15,60 +81,42 @@ LayoutRenamer::~LayoutRenamer() {
   xmlCleanupParser();
 }
 
-bool LayoutRenamer::shouldRename(const SymbolRenaming &Symbol, const std::string &CustomClass, const std::string &CustomModule) {
-  return CustomModule.empty() || CustomModule == Symbol.Module;
-}
+// For now we support layout files with root node that looks like this:
+// <document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" ... >
+// where type can be Cocoa or CocoaTouch .XIB or .Storyboard.XIB
+llvm::Expected<std::unique_ptr<BaseLayoutRenamingStrategy>> LayoutRenamer::createRenamingStrategy(xmlNode *RootNode) {
+  const auto *RootNodeName = reinterpret_cast<const xmlChar *>("document");
   
-void LayoutRenamer::performActualRenaming(xmlNode *Node, const std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols, bool &performedRenaming) {
-  const auto *CustomClassAttributeName = reinterpret_cast<const xmlChar *>("customClass");
-  const auto *CustomModuleAttributeName = reinterpret_cast<const xmlChar *>("customModule");
+  if ((!xmlStrcmp(RootNode->name, RootNodeName))) {
+    
+    const auto *RootNodeTypeAttributeName = reinterpret_cast<const xmlChar *>("type");
+    const auto *RootNodeVersionAttributeName = reinterpret_cast<const xmlChar *>("version");
+    
+    auto TypeAttributeValue = std::string(reinterpret_cast<const char *>(xmlGetProp(RootNode, RootNodeTypeAttributeName)));
+    auto VersionAttributeValue = std::string(reinterpret_cast<const char *>(xmlGetProp(RootNode, RootNodeVersionAttributeName)));
 
-  for (xmlNode *CurrentNode = Node; CurrentNode != nullptr; CurrentNode = CurrentNode->next) {
+    std::set<std::string> SupportedDocumentTypes = {
+      "com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB",
+      "com.apple.InterfaceBuilder3.Cocoa.Storyboard.XIB",
+      "com.apple.InterfaceBuilder3.CocoaTouch.XIB",
+      "com.apple.InterfaceBuilder3.Cocoa.XIB"
+    };
+    
+    if(SupportedDocumentTypes.find(TypeAttributeValue) != SupportedDocumentTypes.end() && VersionAttributeValue == "3.0") {
+      return llvm::make_unique<XCode9RenamingStrategy>();
+    } else {
 
-    if (CurrentNode->type == XML_ELEMENT_NODE) {
-      
-      std::string CustomClass;
-      std::string CustomModule;
-      
-      for (xmlAttr *CurrentAttribute = CurrentNode->properties; CurrentAttribute != nullptr; CurrentAttribute = CurrentAttribute->next) {
-       
-        if(CurrentAttribute->type == XML_ATTRIBUTE_NODE) {
-          
-          if ((!xmlStrcmp(CurrentAttribute->name, CustomClassAttributeName))) {
-            CustomClass = std::string(reinterpret_cast<const char *>(xmlGetProp(CurrentNode, CurrentAttribute->name)));
-          }
-          
-          if ((!xmlStrcmp(CurrentAttribute->name, CustomModuleAttributeName))) {
-            CustomModule = std::string(reinterpret_cast<const char *>(xmlGetProp(CurrentNode, CurrentAttribute->name)));
-          }
-        }
-        
-        if(!CustomClass.empty()) {
-          
-          auto SymbolIterator = RenamedSymbols.find(CustomClass);
-          
-          if ( SymbolIterator != RenamedSymbols.end() ) {
-            
-            auto Symbol = SymbolIterator->second;
-            
-            if(shouldRename(Symbol, CustomClass, CustomModule)) {
-              xmlSetProp(CurrentNode, CustomClassAttributeName, reinterpret_cast<const xmlChar *>(Symbol.ObfuscatedName.c_str()));
-              performedRenaming = true;
-            }
-          }
-          
-          CustomClass.clear();
-          CustomModule.clear();
-        }
-      }
+      // Probably a new version of layout file came out and it should be handled separately.
+      // Create a new BaseLayoutRenamingStrategy implementation and update this method so
+      // it returns correct Strategy for specific version of the layout file.
+      return stringError("Unknown layout file version for layout: " + FileName);
     }
-
-    performActualRenaming(CurrentNode->children, RenamedSymbols, performedRenaming);
+  } else {
+     return stringError("Unknown root node type in layout file: " + FileName);
   }
 }
 
 llvm::Expected<bool> LayoutRenamer::performRenaming(std::unordered_map<std::string, SymbolRenaming> RenamedSymbols, std::string OutputPath) {
-  //TODO check xib/storyboard version and pick renaming strategy based on that.
 
   if (XmlDocument == nullptr) {
     return stringError("Could not parse file: " + FileName);
@@ -76,8 +124,16 @@ llvm::Expected<bool> LayoutRenamer::performRenaming(std::unordered_map<std::stri
   
   xmlNode *RootNode = xmlDocGetRootElement(XmlDocument);
   
+  auto RenamingStrategyOrError = createRenamingStrategy(RootNode);
+  
+  if (auto Error = RenamingStrategyOrError.takeError()) {
+    return std::move(Error);
+  }
+  
+  auto RenamingStrategy = std::move(RenamingStrategyOrError.get());
+  
   bool performedRenaming = false;
-  performActualRenaming(RootNode, RenamedSymbols, performedRenaming);
+  RenamingStrategy->performActualRenaming(RootNode, RenamedSymbols, performedRenaming);
   
   xmlSaveFileEnc(static_cast<const char *>(OutputPath.c_str()), XmlDocument, reinterpret_cast<const char *>(XmlDocument->encoding));
   
-- 
2.17.1 (Apple Git-112)


From 73271d4af225c9bd50d2a8c47db76562466788e1 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Mon, 12 Feb 2018 15:32:25 +0100
Subject: [PATCH 056/138] Integration tests infrastructure

Reviewers: michal.zielinski, jerzy.kleszcz

Reviewed By: michal.zielinski, jerzy.kleszcz

Subscribers: jerzy.kleszcz, michal.zielinski

Differential Revision: https://phabricator.polidea.com/D2812
---
 Documentation/IntegrationTesting.md           | 101 ++++++++++++++++++
 README.md                                     |   1 +
 .../Expected/OtherProperties.swift            |   3 +
 .../OtherProperties/OtherProperties.swift     |   7 ++
 .../Expected/SomeProperties.swift             |   3 +
 .../SomeProperties/SomeProperties.swift       |   9 ++
 .../Inputs/AppDelegate.swift                  |   0
 .../Inputs/ExpectedSymbols.json               |   0
 .../Inputs/ViewController.swift               |   0
 .../SymbolExtractor.swift                     |   0
 swift/test/lit.cfg                            |  49 +++++++++
 11 files changed, 173 insertions(+)
 create mode 100644 Documentation/IntegrationTesting.md
 create mode 100644 swift/test/Obfuscation/FullProcess/OtherProperties/Expected/OtherProperties.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/OtherProperties/OtherProperties.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/SomeProperties/Expected/SomeProperties.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/SomeProperties/SomeProperties.swift
 rename swift/test/Obfuscation/{ => SymbolExtractor}/Inputs/AppDelegate.swift (100%)
 rename swift/test/Obfuscation/{ => SymbolExtractor}/Inputs/ExpectedSymbols.json (100%)
 rename swift/test/Obfuscation/{ => SymbolExtractor}/Inputs/ViewController.swift (100%)
 rename swift/test/Obfuscation/{ => SymbolExtractor}/SymbolExtractor.swift (100%)

diff --git a/Documentation/IntegrationTesting.md b/Documentation/IntegrationTesting.md
new file mode 100644
index 00000000000..40bb2e4ba80
--- /dev/null
+++ b/Documentation/IntegrationTesting.md
@@ -0,0 +1,101 @@
+# Integration testing
+
+This document describes the infrastructure for writing and running integration tests. It aims at answering following questions:
+
+1. [How can I run integration tests on my machine?](#run)
+2. [Where can I find already existing integration tests?](#find)
+3. [How can I write new integration test?](#write)
+4. [Where is the integration testing infrastructure defined?](#conf)
+
+We'll tackle these questions one by one.
+
+# <a name="run"></a> Running integration tests
+
+The test runner is called `lit` and it's part of the LLVM testing infrastructure. You can find more information at [lit documentation](https://llvm.org/docs/CommandGuide/lit.html) and [LLVM testing infrastructure guide](https://llvm.org/docs/TestingGuide.html).
+
+Since LLVM is a dependency of Swift compiler, `lit` is already build and available after the compiler is built. However, we're not using it directly. Swift compiler is providing an additional utility called `run-test` that runs `lit` underneath. The utility is available as part of Swift `utils` directory. It creates a better output for `lit` execution and passes the sane default parameters. However, it requires the path to the `lit` executable and to the build folder.
+
+Therefore the actual command to run integration tests is:
+
+```
+swift/utils/run-test swift/test/Obfuscation \
+    --build-dir build/Xcode-RelWithDebInfoAssert+swift-DebugAssert/swift-macosx-x86_64 \
+    --lit build/Xcode-RelWithDebInfoAssert+swift-DebugAssert/llvm-macosx-x86_64/Debug/bin/llvm-lit
+```
+
+# <a name="find"></a> Where are the obfuscator integration tests?
+
+The obfuscator tests are part of the larger Swift compiler test suite and therefore stored at the same root path as the other ones: `swift/test`. There's separate directory for the obfuscator-related tests under `swift/test/Obfuscation`.
+
+For the tests that are working with the whole obfuscation process there's a directory called `FullProcess`. Inside it there're directories for each test suite that will be interpreted as a separate test case by `lit`.
+
+Each directory has the same basic scheme, for example:
+
+```
+Properties/  <---------------- name of the test directory
+|
+|-> Properties.swift  <------- test file with original Swift source
+|
+|-> Expected/  <-------------- expected fixtures directory
+    |
+    |-> Properties.swift  <--- expected obfuscated Swift source
+```
+
+Name of the directory describes what it contains. There are no limitations on the name. It doesn't have to be the same as the Swift source file name, but it might help with future maintainance.
+
+Test file contains the run command for `lit` and the original Swift source code to be obfuscated. It's name must be the same as the name of the expected fixture file. There might be only one test file per test directory.
+
+`Expected` directory contains the expected fixture file. It must always be of the name `Expected`.
+
+Expected fixture file contains the source code that we expect to be the same as the original source code after obfuscation. Its name must always be the same as the name of the test file.
+
+# <a name="write"></a> Writing integration tests
+
+To write new test in the existing test case (in other words, to expand the existing test case), just add the source code to the test file and the fixture file.
+
+To write the new test case, create a new directory of structure described [above](#find). You might do it by copying already existing test case. Choose the proper names for the directory and for test and fixture files.
+
+Then write the original Swift source code in the test file and the obfuscated source code in the expected fixture file.
+
+Also add the run command for `lit` at the top of the original source file:
+
+```
+//RUN: %target-prepare-obfuscation-for-file "<test-file-name>" %target-run-full-obfuscation
+```
+
+Remember to provide the correct test file name in the place of `<test-file-name>`. It must be provided without extension, so for `Properties.swift` write:
+
+```
+//RUN: %target-prepare-obfuscation-for-file "Properties" %target-run-full-obfuscation
+```
+
+If you are deliberately writing test that should fail, please use
+```
+//XFAIL: *
+```
+above `//RUN` to indicate that.
+
+Then [run the tests](#run) to ensure the new test is loaded and executed properly.
+
+# <a name="conf"></a> Integration tests configuration
+
+The configuration for running integration tests is added to `swift/test/lit.cfg` file. There's a section between:
+
+```
+# Swift Obfuscator Test infrastructure BEGIN
+```
+
+and
+
+```
+# Swift Obfuscator Test infrastructure END
+```
+
+that contain all the commands that are being used for running the integration tests. What happens in the short summary is:
+
+1. `%target-prepare-obfuscation-for-file` defines the bash script that will be generated. The script contains all the commands that should be run for the test. It defines the `FILE` variable that contains the name of the test file and the expected fixture file.
+
+2. `%target-run-full-obfuscation` writes the bash script to filesystem and then runs it.
+
+
+
diff --git a/README.md b/README.md
index 78684480f53..a71576e3e7b 100644
--- a/README.md
+++ b/README.md
@@ -200,4 +200,5 @@ In the alphabetical order:
 * [Jerzy Kleszcz](mailto:jerzy.kleszcz@polidea.com)
 * [Krzysztof Siejkowski](krzysztof.siejkowski@polidea.com)
 * [Jakub Sowa](jakub.sowa@polidea.com)
+* [Michał Zieliński](michal.zielinski@polidea.com)
 
diff --git a/swift/test/Obfuscation/FullProcess/OtherProperties/Expected/OtherProperties.swift b/swift/test/Obfuscation/FullProcess/OtherProperties/Expected/OtherProperties.swift
new file mode 100644
index 00000000000..212e724b46b
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/OtherProperties/Expected/OtherProperties.swift
@@ -0,0 +1,3 @@
+struct ObfuscatedSampleStruct {
+  let obfuscatedSampleInt: Int
+}
diff --git a/swift/test/Obfuscation/FullProcess/OtherProperties/OtherProperties.swift b/swift/test/Obfuscation/FullProcess/OtherProperties/OtherProperties.swift
new file mode 100644
index 00000000000..46158b5fc28
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/OtherProperties/OtherProperties.swift
@@ -0,0 +1,7 @@
+//XFAIL: *
+
+//RUN: %target-prepare-obfuscation-for-file "OtherProperties" %target-run-full-obfuscation
+
+struct SampleStruct {
+  let sampleInt: Int
+}
diff --git a/swift/test/Obfuscation/FullProcess/SomeProperties/Expected/SomeProperties.swift b/swift/test/Obfuscation/FullProcess/SomeProperties/Expected/SomeProperties.swift
new file mode 100644
index 00000000000..7e1481b2997
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/SomeProperties/Expected/SomeProperties.swift
@@ -0,0 +1,3 @@
+class ObfuscatedSampleClass {
+  let obfuscatedSampleInt: Int
+}
diff --git a/swift/test/Obfuscation/FullProcess/SomeProperties/SomeProperties.swift b/swift/test/Obfuscation/FullProcess/SomeProperties/SomeProperties.swift
new file mode 100644
index 00000000000..8763ad6656e
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/SomeProperties/SomeProperties.swift
@@ -0,0 +1,9 @@
+//XFAIL: *
+
+//RUN: %target-prepare-obfuscation-for-file "SomeProperties" %target-run-full-obfuscation
+
+class SampleClass {
+  let sampleInt: Int
+}
+
+
diff --git a/swift/test/Obfuscation/Inputs/AppDelegate.swift b/swift/test/Obfuscation/SymbolExtractor/Inputs/AppDelegate.swift
similarity index 100%
rename from swift/test/Obfuscation/Inputs/AppDelegate.swift
rename to swift/test/Obfuscation/SymbolExtractor/Inputs/AppDelegate.swift
diff --git a/swift/test/Obfuscation/Inputs/ExpectedSymbols.json b/swift/test/Obfuscation/SymbolExtractor/Inputs/ExpectedSymbols.json
similarity index 100%
rename from swift/test/Obfuscation/Inputs/ExpectedSymbols.json
rename to swift/test/Obfuscation/SymbolExtractor/Inputs/ExpectedSymbols.json
diff --git a/swift/test/Obfuscation/Inputs/ViewController.swift b/swift/test/Obfuscation/SymbolExtractor/Inputs/ViewController.swift
similarity index 100%
rename from swift/test/Obfuscation/Inputs/ViewController.swift
rename to swift/test/Obfuscation/SymbolExtractor/Inputs/ViewController.swift
diff --git a/swift/test/Obfuscation/SymbolExtractor.swift b/swift/test/Obfuscation/SymbolExtractor/SymbolExtractor.swift
similarity index 100%
rename from swift/test/Obfuscation/SymbolExtractor.swift
rename to swift/test/Obfuscation/SymbolExtractor/SymbolExtractor.swift
diff --git a/swift/test/lit.cfg b/swift/test/lit.cfg
index 1fe45befe1a..1d4c4fd27dd 100644
--- a/swift/test/lit.cfg
+++ b/swift/test/lit.cfg
@@ -381,6 +381,55 @@ config.substitutions.append( ('%swift-llvm-opt', config.swift_llvm_opt) )
 config.substitutions.append( ('%llvm-dwarfdump', config.llvm_dwarfdump) )
 config.substitutions.append( ('%llvm-dis', config.llvm_dis) )
 
+# Swift Obfuscator Test infrastructure BEGIN
+
+config.obfuscator_symbol_extractor = inferSwiftBinary('obfuscator-symbol-extractor')
+config.obfuscator_name_mapper = inferSwiftBinary('obfuscator-name-mapper')
+config.obfuscator_renamer = inferSwiftBinary('obfuscator-renamer')
+
+config.excludes.append('Expected')
+
+config.substitutions.append((
+    '%target-run-full-obfuscation',
+    '> %t.sh && bash %t.sh'
+))
+
+config.substitutions.append((
+    '%target-prepare-obfuscation-for-file', 
+    'printf "FILE=%*s\n\n%target-run-files-json-generation\n\n%target-run-symbol-extractor\n\n%target-run-name-mapper\n\n%target-run-renamer\n\n%target-run-obfuscation-verification" 1'
+))
+
+config.substitutions.append((
+    '%target-run-files-json-generation', 
+    'echo \\"{\\"project\\": {\\"rootPath\\": \\"%S\\", \\"projectFilePath\\": \\"testProjectFilePath\\"}, \\"module\\": {\\"name\\": \\"TestModuleName\\", \\"triple\\": \\"x86_64-apple-macosx10.13\\"}, \\"sdk\\": {\\"name\\": \\"%target-sdk-name\\", \\"path\\": \\"%sdk\\"}, \\"sourceFiles\\": [\\"%S/\$FILE.swift\\"], \\"layoutFiles\\": [], \\"explicitlyLinkedFrameworks\\": [], \\"implicitlyLinkedFrameworks\\": [], \\"frameworkSearchPaths\\": []}\\" > %t-files.json'
+))
+
+config.substitutions.append((
+    '%target-run-symbol-extractor', 
+    '%obfuscator-symbol-extractor -filesjson %t-files.json -symbolsjson %t-symbols.json -printdiagnostics'
+))
+
+config.substitutions.append((
+    '%target-run-name-mapper', 
+    '%obfuscator-name-mapper -symbolsjson %t-symbols.json -renamesjson %t-renames.json'
+))
+
+config.substitutions.append((
+    '%target-run-renamer', 
+    '%obfuscator-renamer -filesjson %t-files.json -renamesjson %t-renames.json -obfuscatedproject %T'
+))
+
+config.substitutions.append((
+    '%target-run-obfuscation-verification', 
+    'diff -w -B %T/Expected/\$FILE.swift %T/\$FILE.swift'
+))
+
+config.substitutions.append(('%obfuscator-symbol-extractor', config.obfuscator_symbol_extractor))
+config.substitutions.append(('%obfuscator-name-mapper', config.obfuscator_name_mapper))
+config.substitutions.append(('%obfuscator-renamer', config.obfuscator_renamer))
+
+# Swift Obfuscator Test infrastructure END
+
 # This must come after all substitutions containing "%swift".
 config.substitutions.append(
     ('%swift',
-- 
2.17.1 (Apple Git-112)


From b056dbbbc963ea5cd6291bb7e848c6440a75bb8b Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Tue, 13 Feb 2018 10:26:51 +0100
Subject: [PATCH 057/138] Deterministic name mapping infrastructure

Reviewers: jerzy.kleszcz, krzysztof.siejkowski

Reviewed By: jerzy.kleszcz, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2809
---
 swift/include/swift/Obfuscation/NameMapping.h |  92 +++++++++++-----
 swift/lib/Obfuscation/NameMapping.cpp         | 101 ++++++++++++------
 .../obfuscator-name-mapper.cpp                |  14 ++-
 3 files changed, 145 insertions(+), 62 deletions(-)

diff --git a/swift/include/swift/Obfuscation/NameMapping.h b/swift/include/swift/Obfuscation/NameMapping.h
index 57680790e21..9aa757c6e8e 100644
--- a/swift/include/swift/Obfuscation/NameMapping.h
+++ b/swift/include/swift/Obfuscation/NameMapping.h
@@ -2,38 +2,80 @@
 #define NameMapping_h
 
 #include "swift/Obfuscation/DataStructures.h"
-
 #include "llvm/Support/Error.h"
+#include "swift/Obfuscation/Random.h"
+#include "swift/Obfuscation/Utils.h"
+
+#include <string>
+#include <vector>
+#include <set>
 
 namespace swift {
 namespace obfuscation {
+
+/// Name mapping strategies:
+/// - random generates unique random identifiers
+/// - deterministic generates predictible identifiers, we use it in tests
+enum NameMappingStrategy {
+  random, deterministic
+};
   
-/// Creates renamings for symbols found in SymbolsJson object.
-///
-/// Rename generation depends on the type of the symbol found in SymbolsJson.
-/// Proposed new name for specific type must conform to [Swift Grammar]
-/// (https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/AboutTheLanguageReference.html).
-/// Generated names are unique to ensure that no symbol name collisions will
-/// occur after renaming.
-///
-/// Typical usage:
-/// \code
-/// auto RenamingsOrError = proposeRenamings(SymbolsJson);
-/// if (auto Error = RenamingsOrError.takeError()) {
-///   ExitOnError(std::move(Error));
-/// }
-/// auto Renamings = RenamingsOrError.get();
-/// \endcode
-///
-/// \param SymbolsJson Symbols before renaming
-///
-/// \returns Symbols with proposed renamings or error.
-/// Each SymbolRenaming object contains data of the symbol before renaming
-/// and proposed new name.
-llvm::Expected<RenamesJson> proposeRenamings(const SymbolsJson &SymbolsJson);
+/// Base class for names generators.
+class BaseIdentifierGenerator {
+protected:
+  static const std::vector<std::string> UniquelyTailSymbols;
+  static const std::vector<std::string> HeadSymbols;
+  static const std::vector<std::string> OperatorSymbols;
 
-} //namespace obfuscation
+public:
+  virtual  llvm::Expected<std::string> generateName(const Symbol &Symbol) = 0;
+  virtual ~BaseIdentifierGenerator() = default;
+};
+  
+  
+class NameMapping {
 
+private:
+  NameMappingStrategy NameMappingStrategy;
+  std::unique_ptr<BaseIdentifierGenerator> IdentifierGenerator;
+  std::unique_ptr<BaseIdentifierGenerator> OperatorGenerator;
+  
+  llvm::Expected<std::string> generateNameForSymbol(const Symbol &Symbol);
+  
+public:
+  
+  NameMapping(enum NameMappingStrategy NameMappingStrategy);
+  
+  /// Creates renamings for symbols found in SymbolsJson object.
+  ///
+  /// Rename generation depends on the type of the symbol found in SymbolsJson.
+  /// Proposed new name for specific type must conform to [Swift Grammar]
+  /// (https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/AboutTheLanguageReference.html).
+  /// Generated names are unique to ensure that no symbol name collisions will
+  /// occur after renaming.
+  ///
+  /// Typical usage:
+  /// \code
+  /// // NameMappingStrategy is passed as an option when running the mapper
+  /// // currently it can be "deterministic" or "random" (empty defaults to "random").
+  /// NameMapping NameMapping(NameMappingStrategy);
+  /// auto RenamingsOrError = NameMapping.proposeRenamings(SymbolsJson);
+  /// if (auto Error = RenamingsOrError.takeError()) {
+  ///   ExitOnError(std::move(Error));
+  /// }
+  /// auto Renamings = RenamingsOrError.get();
+  /// \endcode
+  ///
+  /// \param SymbolsJson Symbols before renaming
+  ///
+  /// \returns Symbols with proposed renamings or error.
+  /// Each SymbolRenaming object contains data of the symbol before renaming
+  /// and proposed new name.
+  llvm::Expected<RenamesJson> proposeRenamings(const SymbolsJson &SymbolsJson);
+  
+};
+
+} //namespace obfuscation
 } //namespace swift
 
 #endif /* NameMapping_h */
diff --git a/swift/lib/Obfuscation/NameMapping.cpp b/swift/lib/Obfuscation/NameMapping.cpp
index a1e10846acf..04aef4f215c 100644
--- a/swift/lib/Obfuscation/NameMapping.cpp
+++ b/swift/lib/Obfuscation/NameMapping.cpp
@@ -9,10 +9,22 @@
 namespace swift {
 namespace obfuscation {
 
-class UniqueIdentifierGenerator {
+const std::vector<std::string> BaseIdentifierGenerator::UniquelyTailSymbols =
+  {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
+
+const std::vector<std::string> BaseIdentifierGenerator::HeadSymbols =
+  {"_", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n",
+    "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C",
+    "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R",
+    "S", "T", "U", "V", "W", "X", "Y", "Z"};
+
+// "/" symbol is omitted to avoid generating comments in operator names
+const std::vector<std::string> BaseIdentifierGenerator::OperatorSymbols =
+  {"=", "-", "+", "!", "*", "%", "<", ">", "&", "|", "^", "~", "?"};
+  
+/// Generates random unique identifiers for symbols.
+class RandomUniqueIdentifierGenerator: public BaseIdentifierGenerator {
   std::set<std::string> GeneratedSymbols;
-  static const std::vector<std::string> UniquelyTailSymbols;
-  static const std::vector<std::string> HeadSymbols;
   std::vector<std::string> TailSymbols;
   RandomUniformCharacterChooser HeadGenerator;
   RandomUniformStringGenerator TailGenerator;
@@ -42,20 +54,20 @@ class UniqueIdentifierGenerator {
   }
   
 public:
-  UniqueIdentifierGenerator()
+  RandomUniqueIdentifierGenerator()
   : TailSymbols(concatenateHeadAndTailSymbols()),
   HeadGenerator(HeadSymbols),
   TailGenerator(TailSymbols) {}
   
-  llvm::Expected<std::string> generateName() {
+  llvm::Expected<std::string> generateName(const Symbol &Symbol) {
     return generateName(100);
   }
   
 };
 
-class UniqueOperatorGenerator {
+/// Generates random unique identifiers for operators.
+class RandomUniqueOperatorGenerator: public BaseIdentifierGenerator {
   std::set<std::string> GeneratedSymbols;
-  static const std::vector<std::string> OperatorSymbols;
   RandomUniformStringGenerator Generator;
   const std::string::size_type IdentifierLength = 32;
 
@@ -73,55 +85,74 @@ class UniqueOperatorGenerator {
   }
 
 public:
-  UniqueOperatorGenerator() : Generator(OperatorSymbols) {}
-  llvm::Expected<std::string> generateName() {
+  RandomUniqueOperatorGenerator() : Generator(OperatorSymbols) {}
+  llvm::Expected<std::string> generateName(const Symbol &Symbol) {
     return generateName(100);
   }
 };
   
-const std::vector<std::string> UniqueIdentifierGenerator::UniquelyTailSymbols =
-  {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
+/// Generates deterministic identifiers for symbols.
+/// Used in tests.
+class DeterministicIdentifierGenerator: public BaseIdentifierGenerator {
   
-const std::vector<std::string> UniqueIdentifierGenerator::HeadSymbols =
-  {"_", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n",
-   "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C",
-   "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R",
-   "S", "T", "U", "V", "W", "X", "Y", "Z"};
+public:
+  
+  llvm::Expected<std::string> generateName(const Symbol &Symbol) {
+    // TODO: implement deterministic mapping for given symbol
+    return "TestObfuscation"+Symbol.Name;
+  }
+  
+};
 
-// "/" symbol is omitted to avoid generating comments in operator names
-const std::vector<std::string> UniqueOperatorGenerator::OperatorSymbols =
-    {"=", "-", "+", "!", "*", "%", "<", ">", "&", "|", "^", "~", "?"};
+/// Generates deterministic identifiers for operators.
+/// Used in tests.
+class DeterministicOperatorGenerator: public BaseIdentifierGenerator {
+  
+public:
 
-struct ObfuscatedIdentifiersGenerators {
-  UniqueIdentifierGenerator IdentifierGenerator;
-  UniqueOperatorGenerator OperatorGenerator;
+  llvm::Expected<std::string> generateName(const Symbol &Symbol) {
+    // TODO: implement deterministic mapping for given symbol
+    return "TestObfuscation"+Symbol.Name;
+  }
 };
 
+// NameMapping implementation
+  
+  NameMapping::NameMapping(enum NameMappingStrategy NameMappingStrategy):
+    NameMappingStrategy(NameMappingStrategy) {};
+  
 llvm::Expected<std::string>
-generateNameForType(ObfuscatedIdentifiersGenerators &Generators,
-                    SymbolType Type) {
-  switch (Type) {
+  NameMapping::generateNameForSymbol(const Symbol &Symbol) {
+    
+  switch (Symbol.Type) {
     case SymbolType::Type:
-      return Generators.IdentifierGenerator.generateName();
+      return IdentifierGenerator->generateName(Symbol);
     case SymbolType::NamedFunction:
-      return Generators.IdentifierGenerator.generateName();
+      return IdentifierGenerator->generateName(Symbol);
     case SymbolType::ExternalParameter:
-      return Generators.IdentifierGenerator.generateName();
+      return IdentifierGenerator->generateName(Symbol);
     case SymbolType::InternalParameter:
-      return Generators.IdentifierGenerator.generateName();
+      return IdentifierGenerator->generateName(Symbol);
     case SymbolType::SingleParameter:
-      return Generators.IdentifierGenerator.generateName();
+      return IdentifierGenerator->generateName(Symbol);
     case SymbolType::Variable:
-      return Generators.IdentifierGenerator.generateName();
+      return IdentifierGenerator->generateName(Symbol);
     case SymbolType::Operator:
-      return Generators.OperatorGenerator.generateName();
+      return OperatorGenerator->generateName(Symbol);
   }
 }
   
 llvm::Expected<RenamesJson>
-proposeRenamings(const SymbolsJson &SymbolsJson) {
+  NameMapping::proposeRenamings(const SymbolsJson &SymbolsJson) {
   
-  ObfuscatedIdentifiersGenerators Generators;
+  if(NameMappingStrategy == NameMappingStrategy::random) {
+    this->IdentifierGenerator = llvm::make_unique<RandomUniqueIdentifierGenerator>();
+    this->OperatorGenerator = llvm::make_unique<RandomUniqueOperatorGenerator>();
+  } else if(NameMappingStrategy == NameMappingStrategy::deterministic) {
+    this->IdentifierGenerator = llvm::make_unique<DeterministicIdentifierGenerator>();
+    this->OperatorGenerator = llvm::make_unique<DeterministicOperatorGenerator>();
+  }
+    
   RenamesJson RenamesJson;
   
   for (const auto &Symbol : SymbolsJson.Symbols) {
@@ -130,7 +161,7 @@ proposeRenamings(const SymbolsJson &SymbolsJson) {
     Renaming.OriginalName = Symbol.Name;
     Renaming.Module = Symbol.Module;
     Renaming.Type = Symbol.Type;
-    auto NameOrError = generateNameForType(Generators, Symbol.Type);
+    auto NameOrError = generateNameForSymbol(Symbol);
     if (auto Error = NameOrError.takeError()) {
       return std::move(Error);
     }
diff --git a/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp b/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
index dcf131a80cb..e280839ebdb 100644
--- a/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
+++ b/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
@@ -21,7 +21,16 @@ RenamesJsonPath("renamesjson",
                 llvm::cl::desc("Name of the output file to write extracted "
                                "symbols with proposed renamings"),
                 llvm::cl::cat(ObfuscatorNameMapper));
-
+  
+static llvm::cl::opt<NameMappingStrategy>
+NameMappingStrategy("namemappingstrategy",
+                    llvm::cl::init(NameMappingStrategy::random),
+                    llvm::cl::desc("Choose name mapping strategy:"),
+                    llvm::cl::values(
+                      clEnumValN(NameMappingStrategy::random, "random", "Generate random unique identifiers (default)"),
+                      clEnumValN(NameMappingStrategy::deterministic, "deterministic", "Generate deterministic identifiers (useful for testing)")
+                    ),
+                llvm::cl::cat(ObfuscatorNameMapper));
 }
 
 void printRenamings(const std::vector<SymbolRenaming> &Renamings) {
@@ -58,7 +67,8 @@ int main(int argc, char *argv[]) {
     ExitOnError(std::move(Error));
   }
   
-  auto RenamingsOrError = proposeRenamings(SymbolsJsonOrError.get());
+  NameMapping NameMapping(options::NameMappingStrategy);
+  auto RenamingsOrError = NameMapping.proposeRenamings(SymbolsJsonOrError.get());
   if (auto Error = RenamingsOrError.takeError()) {
     ExitOnError(std::move(Error));
   }
-- 
2.17.1 (Apple Git-112)


From aaddee77596eba38ca1b76e69bee04010e49961e Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Tue, 13 Feb 2018 13:42:10 +0100
Subject: [PATCH 058/138] deterministic name mapping in tests

Reviewers: krzysztof.siejkowski, jerzy.kleszcz

Reviewed By: krzysztof.siejkowski, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2817
---
 swift/include/swift/Obfuscation/NameMapping.h | 20 ++++++++++++++
 swift/lib/Obfuscation/NameMapping.cpp         | 26 +++++++------------
 .../Expected/OtherProperties.swift            |  4 +--
 .../OtherProperties/OtherProperties.swift     |  2 --
 swift/test/lit.cfg                            |  2 +-
 5 files changed, 32 insertions(+), 22 deletions(-)

diff --git a/swift/include/swift/Obfuscation/NameMapping.h b/swift/include/swift/Obfuscation/NameMapping.h
index 9aa757c6e8e..124168e6991 100644
--- a/swift/include/swift/Obfuscation/NameMapping.h
+++ b/swift/include/swift/Obfuscation/NameMapping.h
@@ -26,6 +26,26 @@ protected:
   static const std::vector<std::string> UniquelyTailSymbols;
   static const std::vector<std::string> HeadSymbols;
   static const std::vector<std::string> OperatorSymbols;
+  
+  std::map<SymbolType, std::string> SymbolShortNameMap = {
+    { SymbolType::Type, "T" },
+    { SymbolType::NamedFunction, "NF" },
+    { SymbolType::SingleParameter, "SP" },
+    { SymbolType::ExternalParameter, "EP" },
+    { SymbolType::InternalParameter, "IP" },
+    { SymbolType::Variable, "V" },
+    { SymbolType::Operator, "O" }
+  };
+  
+  std::map<SymbolType, std::map<std::string, int>> SymbolTypeMap = {
+    { SymbolType::Type, {} },
+    { SymbolType::NamedFunction, {} },
+    { SymbolType::SingleParameter, {} },
+    { SymbolType::ExternalParameter, {} },
+    { SymbolType::InternalParameter, {} },
+    { SymbolType::Variable, {} },
+    { SymbolType::Operator, {} }
+  };
 
 public:
   virtual  llvm::Expected<std::string> generateName(const Symbol &Symbol) = 0;
diff --git a/swift/lib/Obfuscation/NameMapping.cpp b/swift/lib/Obfuscation/NameMapping.cpp
index 04aef4f215c..d5afadfd7fc 100644
--- a/swift/lib/Obfuscation/NameMapping.cpp
+++ b/swift/lib/Obfuscation/NameMapping.cpp
@@ -98,28 +98,20 @@ class DeterministicIdentifierGenerator: public BaseIdentifierGenerator {
 public:
   
   llvm::Expected<std::string> generateName(const Symbol &Symbol) {
-    // TODO: implement deterministic mapping for given symbol
-    return "TestObfuscation"+Symbol.Name;
+    
+    auto &MapForType = SymbolTypeMap[Symbol.Type];
+    int SymbolNameCount = MapForType[Symbol.Name];
+    MapForType[Symbol.Name] =  ++SymbolNameCount;
+    
+    return SymbolShortNameMap[Symbol.Type] + std::to_string(SymbolNameCount) + "_" + Symbol.Name;
   }
   
 };
 
-/// Generates deterministic identifiers for operators.
-/// Used in tests.
-class DeterministicOperatorGenerator: public BaseIdentifierGenerator {
-  
-public:
-
-  llvm::Expected<std::string> generateName(const Symbol &Symbol) {
-    // TODO: implement deterministic mapping for given symbol
-    return "TestObfuscation"+Symbol.Name;
-  }
-};
-
 // NameMapping implementation
   
-  NameMapping::NameMapping(enum NameMappingStrategy NameMappingStrategy):
-    NameMappingStrategy(NameMappingStrategy) {};
+NameMapping::NameMapping(enum NameMappingStrategy NameMappingStrategy):
+  NameMappingStrategy(NameMappingStrategy) {};
   
 llvm::Expected<std::string>
   NameMapping::generateNameForSymbol(const Symbol &Symbol) {
@@ -150,7 +142,7 @@ llvm::Expected<RenamesJson>
     this->OperatorGenerator = llvm::make_unique<RandomUniqueOperatorGenerator>();
   } else if(NameMappingStrategy == NameMappingStrategy::deterministic) {
     this->IdentifierGenerator = llvm::make_unique<DeterministicIdentifierGenerator>();
-    this->OperatorGenerator = llvm::make_unique<DeterministicOperatorGenerator>();
+    this->OperatorGenerator = llvm::make_unique<DeterministicIdentifierGenerator>();
   }
     
   RenamesJson RenamesJson;
diff --git a/swift/test/Obfuscation/FullProcess/OtherProperties/Expected/OtherProperties.swift b/swift/test/Obfuscation/FullProcess/OtherProperties/Expected/OtherProperties.swift
index 212e724b46b..93267d1aa9f 100644
--- a/swift/test/Obfuscation/FullProcess/OtherProperties/Expected/OtherProperties.swift
+++ b/swift/test/Obfuscation/FullProcess/OtherProperties/Expected/OtherProperties.swift
@@ -1,3 +1,3 @@
-struct ObfuscatedSampleStruct {
-  let obfuscatedSampleInt: Int
+struct T1_SampleStruct {
+  let V1_sampleInt: Int
 }
diff --git a/swift/test/Obfuscation/FullProcess/OtherProperties/OtherProperties.swift b/swift/test/Obfuscation/FullProcess/OtherProperties/OtherProperties.swift
index 46158b5fc28..d6321e11d17 100644
--- a/swift/test/Obfuscation/FullProcess/OtherProperties/OtherProperties.swift
+++ b/swift/test/Obfuscation/FullProcess/OtherProperties/OtherProperties.swift
@@ -1,5 +1,3 @@
-//XFAIL: *
-
 //RUN: %target-prepare-obfuscation-for-file "OtherProperties" %target-run-full-obfuscation
 
 struct SampleStruct {
diff --git a/swift/test/lit.cfg b/swift/test/lit.cfg
index 1d4c4fd27dd..434b98c3edc 100644
--- a/swift/test/lit.cfg
+++ b/swift/test/lit.cfg
@@ -411,7 +411,7 @@ config.substitutions.append((
 
 config.substitutions.append((
     '%target-run-name-mapper', 
-    '%obfuscator-name-mapper -symbolsjson %t-symbols.json -renamesjson %t-renames.json'
+    '%obfuscator-name-mapper -symbolsjson %t-symbols.json -renamesjson %t-renames.json -namemappingstrategy deterministic'
 ))
 
 config.substitutions.append((
-- 
2.17.1 (Apple Git-112)


From 10f5baebfc656e5c6d4c1124226ddaa2dcf54185 Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Tue, 13 Feb 2018 15:01:43 +0100
Subject: [PATCH 059/138] local variables doc

Reviewers: krzysztof.siejkowski, jerzy.kleszcz

Reviewed By: krzysztof.siejkowski, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2819
---
 Documentation/LocalVariables.md | 10 ++++++++++
 1 file changed, 10 insertions(+)
 create mode 100644 Documentation/LocalVariables.md

diff --git a/Documentation/LocalVariables.md b/Documentation/LocalVariables.md
new file mode 100644
index 00000000000..8423656909c
--- /dev/null
+++ b/Documentation/LocalVariables.md
@@ -0,0 +1,10 @@
+# Why Local Variables are not obfuscated?
+
+
+Local variables are not obfuscated because they won't be visible in the compiled binary. Unlike other constructs, local variables are not included in the [symbol table](https://en.wikipedia.org/wiki/Symbol_table). They are kept on [stack](https://en.wikipedia.org/wiki/Call_stack) or in [registers](https://en.wikipedia.org/wiki/Processor_register) depending on how compiler optimized the code. You may be now wondering - how the debugger know the names of local variables? It uses special debug informations that are included in the compiled binary when it's compiled in "debug mode". In release builds these special debug informations are stripped off.
+
+
+References:
+  - ["Advanced Apple Debugging & Reverse Engineering" by Derek Selander (pages 124, 159)](https://store.raywenderlich.com/products/advanced-apple-debugging-and-reverse-engineering)
+  - [Compiler, Assembler, Linker and Loader:
+ a brief story](http://www.tenouk.com/ModuleW.html)
-- 
2.17.1 (Apple Git-112)


From 907539365001b59ec051d3c9d3d0ff0fc4e7750b Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Wed, 14 Feb 2018 14:46:59 +0100
Subject: [PATCH 060/138] First properties tests and updated symbol indexing

Reviewers: jerzy.kleszcz, michal.zielinski

Reviewed By: jerzy.kleszcz, michal.zielinski

Subscribers: michal.zielinski, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2823
---
 .../swift/Obfuscation/DataStructures.h        |  13 ++
 .../swift/Obfuscation/SourceFileWalker.h      |   8 +-
 .../swift/Obfuscation/Utils-Template.h        |  18 +-
 swift/include/swift/Obfuscation/Utils.h       |  10 +-
 swift/lib/Obfuscation/DataStructures.cpp      |  11 +
 swift/lib/Obfuscation/NameMapping.cpp         |   2 +-
 swift/lib/Obfuscation/Renaming.cpp            |  19 +-
 swift/lib/Obfuscation/SourceFileWalker.cpp    |  19 +-
 swift/lib/Obfuscation/SymbolExtracting.cpp    |  38 +++-
 .../Expected/OtherProperties.swift            |   3 -
 .../OtherProperties/OtherProperties.swift     |   5 -
 .../Properties/Expected/Properties.swift      |  53 +++++
 .../FullProcess/Properties/Properties.swift   |  55 +++++
 .../Expected/SomeProperties.swift             |   3 -
 .../SomeProperties/SomeProperties.swift       |   9 -
 .../Expected/UnsupportedProperties.swift      |   8 +
 .../UnsupportedProperties.swift               |  11 +
 .../Inputs/ExpectedSymbols.json               | 210 +++++++++---------
 18 files changed, 344 insertions(+), 151 deletions(-)
 delete mode 100644 swift/test/Obfuscation/FullProcess/OtherProperties/Expected/OtherProperties.swift
 delete mode 100644 swift/test/Obfuscation/FullProcess/OtherProperties/OtherProperties.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/Properties/Properties.swift
 delete mode 100644 swift/test/Obfuscation/FullProcess/SomeProperties/Expected/SomeProperties.swift
 delete mode 100644 swift/test/Obfuscation/FullProcess/SomeProperties/SomeProperties.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/UnsupportedProperties/Expected/UnsupportedProperties.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/UnsupportedProperties/UnsupportedProperties.swift

diff --git a/swift/include/swift/Obfuscation/DataStructures.h b/swift/include/swift/Obfuscation/DataStructures.h
index 364a697f8c5..c9dafa6ba08 100644
--- a/swift/include/swift/Obfuscation/DataStructures.h
+++ b/swift/include/swift/Obfuscation/DataStructures.h
@@ -120,6 +120,19 @@ struct SymbolWithRange {
   /// sets. It's taking into consideration both symbol identifier and range.
   bool operator< (const SymbolWithRange &Right) const;
 };
+
+struct IndexedSymbolWithRange {
+  int Index;
+  SymbolWithRange SymbolWithRange;
+
+  /// @brief Trivial memberwise-like constructor
+  IndexedSymbolWithRange(const int Index,
+                         const struct SymbolWithRange &SymbolWithRange);
+
+  /// @brief Comparison operator required for containing IndexedSymbolWithRange
+  /// in sets. It's taking only symbol into consideration, not range nor index.
+  bool operator< (const IndexedSymbolWithRange &Right) const;
+};
   
 using SymbolsOrError = llvm::Expected<std::vector<SymbolWithRange>>;
 
diff --git a/swift/include/swift/Obfuscation/SourceFileWalker.h b/swift/include/swift/Obfuscation/SourceFileWalker.h
index 0369058a03a..c04b1c48686 100644
--- a/swift/include/swift/Obfuscation/SourceFileWalker.h
+++ b/swift/include/swift/Obfuscation/SourceFileWalker.h
@@ -9,7 +9,8 @@
 namespace swift {
 namespace obfuscation {
 
-/// Identifies the symbols in the given Swift AST SourceFile object.
+/// Identifies the symbols in the given Swift AST SourceFile object with
+/// the index of their occurence among all files.
 ///
 /// The SourceFile might be extracted from the compiler after it consumes and
 /// performs the semantic analysis of the Swift cource code file. It's an AST
@@ -28,8 +29,9 @@ namespace obfuscation {
 ///
 /// \param SourceFile AST tree representing the Swift source file.
 ///
-/// \returns the occurences of symbols with their metadata and place.
-std::set<SymbolWithRange> walkAndCollectSymbols(SourceFile &SourceFile);
+/// \returns the occurrences of symbols with their metadata, place
+///          and occurrence index.
+std::set<IndexedSymbolWithRange> walkAndCollectSymbols(SourceFile &SourceFile);
 
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/include/swift/Obfuscation/Utils-Template.h b/swift/include/swift/Obfuscation/Utils-Template.h
index 8e74fe20665..cb31e70124f 100644
--- a/swift/include/swift/Obfuscation/Utils-Template.h
+++ b/swift/include/swift/Obfuscation/Utils-Template.h
@@ -19,7 +19,23 @@ void copyToVector(const std::set<ElementType> &FromSet,
             FromSet.cend(),
             std::back_inserter(ToVector));
 };
-  
+
+template<typename ElementType>
+void copyToSet(const std::set<ElementType> &FromSet,
+               std::set<ElementType> &ToSet) {
+  std::copy(FromSet.cbegin(),
+            FromSet.cend(),
+            std::inserter(ToSet, ToSet.begin()));
+};
+
+template<typename ElementType>
+void copyToSet(const std::vector<ElementType> &FromVector,
+               std::set<ElementType> &ToSet) {
+  std::copy(FromVector.cbegin(),
+            FromVector.cend(),
+            std::inserter(ToSet, ToSet.begin()));
+}
+
 template<typename ElementType>
 void copyToStream(const std::vector<ElementType> &FromVector,
           std::ostream_iterator<ElementType> Inserter) {
diff --git a/swift/include/swift/Obfuscation/Utils.h b/swift/include/swift/Obfuscation/Utils.h
index 0f7bccc4807..9817b6e6957 100644
--- a/swift/include/swift/Obfuscation/Utils.h
+++ b/swift/include/swift/Obfuscation/Utils.h
@@ -38,7 +38,15 @@ void copyToVector(const std::vector<ElementType> &FromVector,
 template<typename ElementType>
 void copyToVector(const std::set<ElementType> &FromSet,
                   std::vector<ElementType> &ToVector);
-  
+
+template<typename ElementType>
+void copyToSet(const std::set<ElementType> &FromSet,
+               std::set<ElementType> &ToSet);
+
+template<typename ElementType>
+void copyToSet(const std::vector<ElementType> &FromVector,
+               std::set<ElementType> &ToSet);
+
 template<typename ElementType>
 void copyToStream(const std::vector<ElementType> &FromVector,
                   std::ostream_iterator<ElementType> Inserter);
diff --git a/swift/lib/Obfuscation/DataStructures.cpp b/swift/lib/Obfuscation/DataStructures.cpp
index 934b03f3118..2e5e39e2ee2 100644
--- a/swift/lib/Obfuscation/DataStructures.cpp
+++ b/swift/lib/Obfuscation/DataStructures.cpp
@@ -70,6 +70,17 @@ bool SymbolWithRange::operator< (const SymbolWithRange &Right) const {
   assert(false && "Comparing Symbols with Ranges requires Ranges Start "
          "Location Values Pointers to be of const char type");
 }
+
+IndexedSymbolWithRange::
+  IndexedSymbolWithRange(const int Index,
+                         const struct SymbolWithRange &SymbolWithRange)
+: Index(Index), SymbolWithRange(SymbolWithRange) {}
+
+bool IndexedSymbolWithRange::
+  operator< (const IndexedSymbolWithRange &Right) const {
+    return SymbolWithRange.Symbol < Right.SymbolWithRange.Symbol;
+}
+
   
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/lib/Obfuscation/NameMapping.cpp b/swift/lib/Obfuscation/NameMapping.cpp
index d5afadfd7fc..8568031bcb6 100644
--- a/swift/lib/Obfuscation/NameMapping.cpp
+++ b/swift/lib/Obfuscation/NameMapping.cpp
@@ -101,7 +101,7 @@ public:
     
     auto &MapForType = SymbolTypeMap[Symbol.Type];
     int SymbolNameCount = MapForType[Symbol.Name];
-    MapForType[Symbol.Name] =  ++SymbolNameCount;
+    MapForType[Symbol.Name] = ++SymbolNameCount;
     
     return SymbolShortNameMap[Symbol.Type] + std::to_string(SymbolNameCount) + "_" + Symbol.Name;
   }
diff --git a/swift/lib/Obfuscation/Renaming.cpp b/swift/lib/Obfuscation/Renaming.cpp
index 94fae4673be..2906172f81d 100644
--- a/swift/lib/Obfuscation/Renaming.cpp
+++ b/swift/lib/Obfuscation/Renaming.cpp
@@ -71,12 +71,12 @@ llvm::Error copyProject(const StringRef OriginalPath,
   return llvm::Error::success();
 }
 
-static bool shouldRename(const SymbolRenaming &Symbol,
-                         const SymbolWithRange &SymbolWithRange,
+static bool shouldRename(const struct SymbolRenaming &SymbolRenaming,
+                         const struct Symbol &Symbol,
                          const std::string &ModuleName) {
-  return SymbolWithRange.Symbol.Identifier == Symbol.Identifier
-      && SymbolWithRange.Symbol.Name == Symbol.OriginalName
-      && SymbolWithRange.Symbol.Module == ModuleName;
+  return Symbol.Identifier == SymbolRenaming.Identifier
+      && Symbol.Name == SymbolRenaming.OriginalName
+      && Symbol.Module == ModuleName;
 }
   
 llvm::Expected<bool> performActualRenaming(SourceFile &Current,
@@ -87,7 +87,7 @@ llvm::Expected<bool> performActualRenaming(SourceFile &Current,
                                            StringRef Path,
                                            std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols) {
   bool performedRenaming = false;
-  auto SymbolsWithRanges = walkAndCollectSymbols(Current);
+  auto IndexedSymbolsWithRanges = walkAndCollectSymbols(Current);
   
   using EditConsumer = swift::ide::SourceEditOutputConsumer;
   
@@ -95,10 +95,11 @@ llvm::Expected<bool> performActualRenaming(SourceFile &Current,
   std::unique_ptr<EditConsumer> Editor(nullptr);
   
   //TODO: would be way better to have a map instead of iterating through symbols
-  for (const auto &SymbolWithRange : SymbolsWithRanges) {
+  for (const auto &IndexedSymbolWithRange : IndexedSymbolsWithRanges) {
     for (const auto &Symbol : RenamesJson.Symbols) {
-      
-      if (shouldRename(Symbol, SymbolWithRange, ModuleName)) {
+      auto SymbolWithRange = IndexedSymbolWithRange.SymbolWithRange;
+
+      if (shouldRename(Symbol, SymbolWithRange.Symbol, ModuleName)) {
         if (Editor == nullptr) {
           std::error_code Error;
           DescriptorStream =
diff --git a/swift/lib/Obfuscation/SourceFileWalker.cpp b/swift/lib/Obfuscation/SourceFileWalker.cpp
index 4989b52bce1..eaf2aa6206a 100644
--- a/swift/lib/Obfuscation/SourceFileWalker.cpp
+++ b/swift/lib/Obfuscation/SourceFileWalker.cpp
@@ -13,11 +13,20 @@ namespace swift {
 namespace obfuscation {
 
 struct RenamesCollector: public SourceEntityWalker {
-  std::set<SymbolWithRange> Bucket;
+  static int SymbolIndex;
+  std::set<IndexedSymbolWithRange> Bucket;
   
   void handleSymbols(std::vector<SymbolWithRange> &Symbols) {
     for (auto &Symbol : Symbols) {
-      Bucket.insert(Symbol);
+      handleSymbol(Symbol);
+    }
+  }
+
+  void handleSymbol(SymbolWithRange & Symbol) {
+    auto InsertionResult =
+      Bucket.insert(IndexedSymbolWithRange(SymbolIndex, Symbol));
+    if (InsertionResult.second == true) {
+      ++RenamesCollector::SymbolIndex;
     }
   }
 
@@ -81,7 +90,7 @@ struct RenamesCollector: public SourceEntityWalker {
       if (auto Error = Symbol.takeError()) {
         llvm::consumeError(std::move(Error));
       } else {
-        Bucket.insert(Symbol.get());
+        handleSymbol(Symbol.get());
       }
       return true;
   }
@@ -103,7 +112,9 @@ struct RenamesCollector: public SourceEntityWalker {
   }
 };
 
-std::set<SymbolWithRange> walkAndCollectSymbols(SourceFile &SourceFile) {
+int RenamesCollector::SymbolIndex;
+
+std::set<IndexedSymbolWithRange> walkAndCollectSymbols(SourceFile &SourceFile) {
   RenamesCollector Collector;
   Collector.walk(SourceFile);
   return Collector.Bucket;
diff --git a/swift/lib/Obfuscation/SymbolExtracting.cpp b/swift/lib/Obfuscation/SymbolExtracting.cpp
index 2610af12993..c3e99426be4 100644
--- a/swift/lib/Obfuscation/SymbolExtracting.cpp
+++ b/swift/lib/Obfuscation/SymbolExtracting.cpp
@@ -25,17 +25,41 @@ extractSymbols(const FilesJson &FilesJson,
   }
   
   SymbolsJson Json;
-  std::set<Symbol> Result;
+
+  using FileWithName = std::pair<std::string, SourceFile *>;
+  std::vector<FileWithName> Files;
   for (auto* Unit : CompilerInstance.getMainModule()->getFiles()) {
     if (auto* Current = dyn_cast<SourceFile>(Unit)) {
-      auto CurrentSymbols = walkAndCollectSymbols(*Current);
-      for (const auto &Symbol : CurrentSymbols) {
-        Result.insert(Symbol.Symbol);
-      }
+      Files.push_back(std::make_pair(Current->getFilename().str(), Current));
     }
   }
-  copyToVector(Result, Json.Symbols);
-  std::sort(Json.Symbols.begin(), Json.Symbols.end());
+  std::sort(Files.begin(),
+            Files.end(),
+            [](const FileWithName &Left, const FileWithName &Right) {
+              return Left.first < Right.first;
+            });
+
+  std::set<IndexedSymbolWithRange> Symbols;
+  for (auto &Unit : Files) {
+    auto CurrentSymbols = walkAndCollectSymbols(*Unit.second);
+    copyToSet(CurrentSymbols, Symbols);
+  }
+
+  std::vector<IndexedSymbolWithRange> Result;
+  copyToVector(Symbols, Result);
+
+  std::sort(Result.begin(),
+            Result.end(),
+            [](const IndexedSymbolWithRange &Left,
+               const IndexedSymbolWithRange &Right) {
+              return Left.Index < Right.Index;
+            });
+  std::transform(Result.cbegin(),
+                 Result.cend(),
+                 std::back_inserter(Json.Symbols),
+                 [](const IndexedSymbolWithRange &Symbol) -> struct Symbol {
+                   return Symbol.SymbolWithRange.Symbol;
+                 });
   return Json;
 }
 
diff --git a/swift/test/Obfuscation/FullProcess/OtherProperties/Expected/OtherProperties.swift b/swift/test/Obfuscation/FullProcess/OtherProperties/Expected/OtherProperties.swift
deleted file mode 100644
index 93267d1aa9f..00000000000
--- a/swift/test/Obfuscation/FullProcess/OtherProperties/Expected/OtherProperties.swift
+++ /dev/null
@@ -1,3 +0,0 @@
-struct T1_SampleStruct {
-  let V1_sampleInt: Int
-}
diff --git a/swift/test/Obfuscation/FullProcess/OtherProperties/OtherProperties.swift b/swift/test/Obfuscation/FullProcess/OtherProperties/OtherProperties.swift
deleted file mode 100644
index d6321e11d17..00000000000
--- a/swift/test/Obfuscation/FullProcess/OtherProperties/OtherProperties.swift
+++ /dev/null
@@ -1,5 +0,0 @@
-//RUN: %target-prepare-obfuscation-for-file "OtherProperties" %target-run-full-obfuscation
-
-struct SampleStruct {
-  let sampleInt: Int
-}
diff --git a/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift b/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift
new file mode 100644
index 00000000000..c76205f6515
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift
@@ -0,0 +1,53 @@
+import AppKit
+
+struct T1_DummyStruct {}
+
+// stored let and var properties of different types
+class T1_StoredClass {
+  let V1_letInt: Int = 0
+  var V1_varInt: Int
+  let V1_letString: String = "0"
+  var V1_varString: String
+  let V1_letStruct: T1_DummyStruct = T1_DummyStruct()
+  var V1_varStruct: T1_DummyStruct
+}
+
+struct T1_StoredStruct {
+  let V2_letInt: Int = 0
+  var V2_varInt: Int
+  let V2_letString: String = "0"
+  var V2_varString: String
+  let V2_letStruct: T1_DummyStruct = T1_DummyStruct()
+  var V2_varStruct: T1_DummyStruct
+}
+
+// computed properties of different types
+protocol T1_ComputedProtocol {
+  var V3_varInt: Int { get }
+  var V3_varString: String { get set }
+  var V3_varStruct: T1_DummyStruct { get set }
+}
+
+class T1_ComputedClass: T1_ComputedProtocol {
+  var V3_varInt: Int { return 42 }
+  var V3_varString: String { get { return "42" } set {  } }
+  var V3_varStruct = T1_DummyStruct()
+}
+
+struct T1_ComputedStruct {
+  var V4_varInt: Int { return 42 }
+  var V4_varString: String { get { return "42" } set {  } }
+  var V4_varStruct: T1_DummyStruct = T1_DummyStruct()
+}
+
+//computed properties required by other modules
+class T1_OtherStruct: NSValidatedUserInterfaceItem {
+  var action: Selector? { return nil }
+  var tag: Int
+}
+
+// stored properties required by other modules
+class T1_ViewClass: NSView {
+  override var subviews: [NSView] { get { return [] } set { } }
+  override var window: NSWindow? { return nil }
+}
\ No newline at end of file
diff --git a/swift/test/Obfuscation/FullProcess/Properties/Properties.swift b/swift/test/Obfuscation/FullProcess/Properties/Properties.swift
new file mode 100644
index 00000000000..cdfa6c4aa21
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/Properties/Properties.swift
@@ -0,0 +1,55 @@
+//RUN: %target-prepare-obfuscation-for-file "Properties" %target-run-full-obfuscation
+
+import AppKit
+
+struct DummyStruct {}
+
+// stored let and var properties of different types
+class StoredClass {
+  let letInt: Int = 0
+  var varInt: Int
+  let letString: String = "0"
+  var varString: String
+  let letStruct: DummyStruct = DummyStruct()
+  var varStruct: DummyStruct
+}
+
+struct StoredStruct {
+  let letInt: Int = 0
+  var varInt: Int
+  let letString: String = "0"
+  var varString: String
+  let letStruct: DummyStruct = DummyStruct()
+  var varStruct: DummyStruct
+}
+
+// computed properties of different types
+protocol ComputedProtocol {
+  var varInt: Int { get }
+  var varString: String { get set }
+  var varStruct: DummyStruct { get set }
+}
+
+class ComputedClass: ComputedProtocol {
+  var varInt: Int { return 42 }
+  var varString: String { get { return "42" } set {  } }
+  var varStruct = DummyStruct()
+}
+
+struct ComputedStruct {
+  var varInt: Int { return 42 }
+  var varString: String { get { return "42" } set {  } }
+  var varStruct: DummyStruct = DummyStruct()
+}
+
+//computed properties required by other modules
+class OtherStruct: NSValidatedUserInterfaceItem {
+  var action: Selector? { return nil }
+  var tag: Int
+}
+
+// stored properties required by other modules
+class ViewClass: NSView {
+  override var subviews: [NSView] { get { return [] } set { } }
+  override var window: NSWindow? { return nil }
+}
\ No newline at end of file
diff --git a/swift/test/Obfuscation/FullProcess/SomeProperties/Expected/SomeProperties.swift b/swift/test/Obfuscation/FullProcess/SomeProperties/Expected/SomeProperties.swift
deleted file mode 100644
index 7e1481b2997..00000000000
--- a/swift/test/Obfuscation/FullProcess/SomeProperties/Expected/SomeProperties.swift
+++ /dev/null
@@ -1,3 +0,0 @@
-class ObfuscatedSampleClass {
-  let obfuscatedSampleInt: Int
-}
diff --git a/swift/test/Obfuscation/FullProcess/SomeProperties/SomeProperties.swift b/swift/test/Obfuscation/FullProcess/SomeProperties/SomeProperties.swift
deleted file mode 100644
index 8763ad6656e..00000000000
--- a/swift/test/Obfuscation/FullProcess/SomeProperties/SomeProperties.swift
+++ /dev/null
@@ -1,9 +0,0 @@
-//XFAIL: *
-
-//RUN: %target-prepare-obfuscation-for-file "SomeProperties" %target-run-full-obfuscation
-
-class SampleClass {
-  let sampleInt: Int
-}
-
-
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedProperties/Expected/UnsupportedProperties.swift b/swift/test/Obfuscation/FullProcess/UnsupportedProperties/Expected/UnsupportedProperties.swift
new file mode 100644
index 00000000000..2b805258f5c
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedProperties/Expected/UnsupportedProperties.swift
@@ -0,0 +1,8 @@
+// stored let and var properties with special names
+struct T1_SpecialStruct {
+  let V1_`let`: Int
+  var V1_`get`: Int
+  let V1_`var`: String
+  var V1_`set`: String
+  let V1_`return`: Double
+}
\ No newline at end of file
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedProperties/UnsupportedProperties.swift b/swift/test/Obfuscation/FullProcess/UnsupportedProperties/UnsupportedProperties.swift
new file mode 100644
index 00000000000..f61bc66c6b0
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedProperties/UnsupportedProperties.swift
@@ -0,0 +1,11 @@
+// XFAIL: *
+//RUN: %target-prepare-obfuscation-for-file "UnsupportedProperties" %target-run-full-obfuscation
+
+// stored let and var properties with special names
+struct SpecialStruct {
+  let `let`: Int
+  var `get`: Int
+  let `var`: String
+  var `set`: String
+  let `return`: Double
+}
\ No newline at end of file
diff --git a/swift/test/Obfuscation/SymbolExtractor/Inputs/ExpectedSymbols.json b/swift/test/Obfuscation/SymbolExtractor/Inputs/ExpectedSymbols.json
index a40b9aebad3..797efebbfed 100644
--- a/swift/test/Obfuscation/SymbolExtractor/Inputs/ExpectedSymbols.json
+++ b/swift/test/Obfuscation/SymbolExtractor/Inputs/ExpectedSymbols.json
@@ -1,9 +1,15 @@
 {
   "symbols": [
     {
-      "name": "NSViewController",
-      "identifier": "module.AppKit.class.NSViewController",
-      "module": "AppKit",
+      "name": "AppDelegate",
+      "identifier": "module.TestModuleName.class.AppDelegate",
+      "module": "TestModuleName",
+      "type": "type"
+    },
+    {
+      "name": "NSObject",
+      "identifier": "module.ObjectiveC.class.NSObject",
+      "module": "ObjectiveC",
       "type": "type"
     },
     {
@@ -25,74 +31,98 @@
       "type": "internalParameter"
     },
     {
-      "name": "cvc",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cvc",
+      "name": "Notification",
+      "identifier": "module.Foundation.struct.Notification",
+      "module": "Foundation",
+      "type": "type"
+    },
+    {
+      "name": "ss",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.ss",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
-      "name": "cvcei",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cvcei",
+      "name": "SampleStruct",
+      "identifier": "module.TestModuleName.struct.SampleStruct",
       "module": "TestModuleName",
-      "type": "variable"
+      "type": "type"
     },
     {
-      "name": "cwi",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cwi",
+      "name": "ssei",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.ssei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
-      "name": "cwiei",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cwiei",
+      "name": "swi",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swi",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
-      "name": "sc",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.sc",
+      "name": "StructWithInit",
+      "identifier": "module.TestModuleName.struct.StructWithInit",
       "module": "TestModuleName",
-      "type": "variable"
+      "type": "type"
     },
     {
-      "name": "scei",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.scei",
+      "name": "swiei",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swiei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
-      "name": "ss",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.ss",
+      "name": "swmi",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swmi",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
-      "name": "ssei",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.ssei",
+      "name": "StructWithMemberwiseInit",
+      "identifier": "module.TestModuleName.struct.StructWithMemberwiseInit",
+      "module": "TestModuleName",
+      "type": "type"
+    },
+    {
+      "name": "swmiei",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swmiei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
-      "name": "swi",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swi",
+      "name": "sc",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.sc",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
-      "name": "swiei",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swiei",
+      "name": "SampleClass",
+      "identifier": "module.TestModuleName.class.SampleClass",
+      "module": "TestModuleName",
+      "type": "type"
+    },
+    {
+      "name": "scei",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.scei",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
-      "name": "swmi",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swmi",
+      "name": "cwi",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cwi",
       "module": "TestModuleName",
       "type": "variable"
     },
     {
-      "name": "swmiei",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swmiei",
+      "name": "ClassWithInit",
+      "identifier": "module.TestModuleName.class.ClassWithInit",
+      "module": "TestModuleName",
+      "type": "type"
+    },
+    {
+      "name": "cwiei",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cwiei",
       "module": "TestModuleName",
       "type": "variable"
     },
@@ -102,6 +132,12 @@
       "module": "TestModuleName",
       "type": "variable"
     },
+    {
+      "name": "ViewController",
+      "identifier": "module.TestModuleName.class.ViewController",
+      "module": "TestModuleName",
+      "type": "type"
+    },
     {
       "name": "vc1ei",
       "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc1ei",
@@ -121,112 +157,76 @@
       "type": "variable"
     },
     {
-      "name": "applicationWillTerminate",
-      "identifier": "module.AppKit.protocol.method.applicationWillTerminate.signature.(Notification) -> ()",
-      "module": "AppKit",
-      "type": "namedFunction"
-    },
-    {
-      "name": "aNotification",
-      "identifier": "module.AppKit.protocol.method.applicationWillTerminate.signature.(Notification) -> ().parameter.position.list1_parameter0.internal.aNotification",
+      "name": "cvc",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cvc",
       "module": "TestModuleName",
-      "type": "internalParameter"
-    },
-    {
-      "name": "viewDidLoad",
-      "identifier": "module.AppKit.type.NSViewController.method.viewDidLoad.signature.() -> Void",
-      "module": "AppKit",
-      "type": "namedFunction"
-    },
-    {
-      "name": "NSCoder",
-      "identifier": "module.Foundation.class.NSCoder",
-      "module": "Foundation",
-      "type": "type"
-    },
-    {
-      "name": "Notification",
-      "identifier": "module.Foundation.struct.Notification",
-      "module": "Foundation",
-      "type": "type"
-    },
-    {
-      "name": "NSObject",
-      "identifier": "module.ObjectiveC.class.NSObject",
-      "module": "ObjectiveC",
-      "type": "type"
-    },
-    {
-      "name": "fatalError",
-      "identifier": "module.Swift.function.fatalError.signature.(@autoclosure () -> String, StaticString, UInt) -> Never",
-      "module": "Swift",
-      "type": "namedFunction"
+      "type": "variable"
     },
     {
-      "name": "Int",
-      "identifier": "module.Swift.struct.Int",
-      "module": "Swift",
+      "name": "CustomInitViewController",
+      "identifier": "module.TestModuleName.class.CustomInitViewController",
+      "module": "TestModuleName",
       "type": "type"
     },
     {
-      "name": "AppDelegate",
-      "identifier": "module.TestModuleName.class.AppDelegate",
+      "name": "number",
+      "identifier": "module.TestModuleName.type.CustomInitViewController.method.init.signature.(Int) -> CustomInitViewController.parameter.position.list1_parameter0.single.number",
       "module": "TestModuleName",
-      "type": "type"
+      "type": "singleParameter"
     },
     {
-      "name": "ClassWithInit",
-      "identifier": "module.TestModuleName.class.ClassWithInit",
+      "name": "cvcei",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cvcei",
       "module": "TestModuleName",
-      "type": "type"
+      "type": "variable"
     },
     {
-      "name": "CustomInitViewController",
-      "identifier": "module.TestModuleName.class.CustomInitViewController",
-      "module": "TestModuleName",
-      "type": "type"
+      "name": "applicationWillTerminate",
+      "identifier": "module.AppKit.protocol.method.applicationWillTerminate.signature.(Notification) -> ()",
+      "module": "AppKit",
+      "type": "namedFunction"
     },
     {
-      "name": "SampleClass",
-      "identifier": "module.TestModuleName.class.SampleClass",
+      "name": "aNotification",
+      "identifier": "module.AppKit.protocol.method.applicationWillTerminate.signature.(Notification) -> ().parameter.position.list1_parameter0.internal.aNotification",
       "module": "TestModuleName",
-      "type": "type"
+      "type": "internalParameter"
     },
     {
-      "name": "ViewController",
-      "identifier": "module.TestModuleName.class.ViewController",
+      "name": "property",
+      "identifier": "module.TestModuleName.struct.StructWithMemberwiseInit.variable.property",
       "module": "TestModuleName",
-      "type": "type"
+      "type": "variable"
     },
     {
-      "name": "SampleStruct",
-      "identifier": "module.TestModuleName.struct.SampleStruct",
-      "module": "TestModuleName",
+      "name": "Int",
+      "identifier": "module.Swift.struct.Int",
+      "module": "Swift",
       "type": "type"
     },
     {
-      "name": "StructWithInit",
-      "identifier": "module.TestModuleName.struct.StructWithInit",
-      "module": "TestModuleName",
+      "name": "NSViewController",
+      "identifier": "module.AppKit.class.NSViewController",
+      "module": "AppKit",
       "type": "type"
     },
     {
-      "name": "StructWithMemberwiseInit",
-      "identifier": "module.TestModuleName.struct.StructWithMemberwiseInit",
-      "module": "TestModuleName",
+      "name": "NSCoder",
+      "identifier": "module.Foundation.class.NSCoder",
+      "module": "Foundation",
       "type": "type"
     },
     {
-      "name": "property",
-      "identifier": "module.TestModuleName.struct.StructWithMemberwiseInit.variable.property",
-      "module": "TestModuleName",
-      "type": "variable"
+      "name": "fatalError",
+      "identifier": "module.Swift.function.fatalError.signature.(@autoclosure () -> String, StaticString, UInt) -> Never",
+      "module": "Swift",
+      "type": "namedFunction"
     },
     {
-      "name": "number",
-      "identifier": "module.TestModuleName.type.CustomInitViewController.method.init.signature.(Int) -> CustomInitViewController.parameter.position.list1_parameter0.single.number",
-      "module": "TestModuleName",
-      "type": "singleParameter"
+      "name": "viewDidLoad",
+      "identifier": "module.AppKit.type.NSViewController.method.viewDidLoad.signature.() -> Void",
+      "module": "AppKit",
+      "type": "namedFunction"
     }
   ]
-}
+}
\ No newline at end of file
-- 
2.17.1 (Apple Git-112)


From edf1bf3fb804cd2a69121069cc6f9920028a6f43 Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Wed, 14 Feb 2018 14:40:55 +0100
Subject: [PATCH 061/138] Added tests for types obfuscation

Summary: updated doc and more tests

Reviewers: jerzy.kleszcz, krzysztof.siejkowski

Reviewed By: jerzy.kleszcz, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2822
---
 Documentation/LocalVariables.md               | 10 -----
 Documentation/ThingsThatAreNotObfuscated.md   | 19 ++++++++++
 .../FullProcess/Types/Expected/Types.swift    | 36 ++++++++++++++++++
 .../Obfuscation/FullProcess/Types/Types.swift | 38 +++++++++++++++++++
 .../TypesFailing/Expected/TypesFailing.swift  | 18 +++++++++
 .../TypesFailing/TypesFailing.swift           | 21 ++++++++++
 6 files changed, 132 insertions(+), 10 deletions(-)
 delete mode 100644 Documentation/LocalVariables.md
 create mode 100644 Documentation/ThingsThatAreNotObfuscated.md
 create mode 100644 swift/test/Obfuscation/FullProcess/Types/Expected/Types.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/Types/Types.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/TypesFailing/Expected/TypesFailing.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/TypesFailing/TypesFailing.swift

diff --git a/Documentation/LocalVariables.md b/Documentation/LocalVariables.md
deleted file mode 100644
index 8423656909c..00000000000
--- a/Documentation/LocalVariables.md
+++ /dev/null
@@ -1,10 +0,0 @@
-# Why Local Variables are not obfuscated?
-
-
-Local variables are not obfuscated because they won't be visible in the compiled binary. Unlike other constructs, local variables are not included in the [symbol table](https://en.wikipedia.org/wiki/Symbol_table). They are kept on [stack](https://en.wikipedia.org/wiki/Call_stack) or in [registers](https://en.wikipedia.org/wiki/Processor_register) depending on how compiler optimized the code. You may be now wondering - how the debugger know the names of local variables? It uses special debug informations that are included in the compiled binary when it's compiled in "debug mode". In release builds these special debug informations are stripped off.
-
-
-References:
-  - ["Advanced Apple Debugging & Reverse Engineering" by Derek Selander (pages 124, 159)](https://store.raywenderlich.com/products/advanced-apple-debugging-and-reverse-engineering)
-  - [Compiler, Assembler, Linker and Loader:
- a brief story](http://www.tenouk.com/ModuleW.html)
diff --git a/Documentation/ThingsThatAreNotObfuscated.md b/Documentation/ThingsThatAreNotObfuscated.md
new file mode 100644
index 00000000000..ee84f68da1b
--- /dev/null
+++ b/Documentation/ThingsThatAreNotObfuscated.md
@@ -0,0 +1,19 @@
+# Things that are not obfuscated
+
+There are a couple of language features that are not subject to obfuscation.
+These features are:
+  - local variables
+  - associated types
+  - type aliases
+  - enum constants
+  - generic parameters
+
+None of them is visible in the compiled binary. For example local variables are not included in the [symbol table](https://en.wikipedia.org/wiki/Symbol_table). They are kept on [stack](https://en.wikipedia.org/wiki/Call_stack) or in [registers](https://en.wikipedia.org/wiki/Processor_register) depending on how compiler optimized the code. You may be now wondering - how the debugger know the names of local variables? It uses special debug informations that are included in the compiled binary when it's compiled in "debug mode". In release builds these special debug informations are stripped off.
+
+Similarly associated types, type aliases, enum constants and generic parameters are also not visible in the compiled code.
+
+
+References:
+  - ["Advanced Apple Debugging & Reverse Engineering" by Derek Selander (pages 124, 159)](https://store.raywenderlich.com/products/advanced-apple-debugging-and-reverse-engineering)
+  - [Compiler, Assembler, Linker and Loader:
+ a brief story](http://www.tenouk.com/ModuleW.html)
diff --git a/swift/test/Obfuscation/FullProcess/Types/Expected/Types.swift b/swift/test/Obfuscation/FullProcess/Types/Expected/Types.swift
new file mode 100644
index 00000000000..3b004f7c98c
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/Types/Expected/Types.swift
@@ -0,0 +1,36 @@
+
+import Foundation
+
+class T1_SampleClass {}
+
+extension T1_SampleClass {}
+
+fileprivate class T1_FilePrivateSampleClass {}
+
+protocol T1_SampleProtocol {}
+
+struct T1_SampleStruct {}
+
+class T1_Outer {
+  class T1_Outer.Inner {
+    struct T1_Outer.Inner.InnerStruct: T1_SampleProtocol{
+      func NF1_foo() {
+        class T1_InsideFunc: Array<T1_SampleClass?> {}
+        
+        extension T1_InsideFunc {}
+      }
+    }
+  }
+}
+
+class T1_DerivedClass: T1_SampleClass, T1_SampleProtocol {}
+
+extension T1_SampleClass: T1_SampleProtocol {}
+
+class T1_CustomNSString : NSString {}
+
+extension NSBoolean {}
+
+struct T1_CustomCFLocaleKey: CFLocaleKey {
+  class T1_CustomCFLocaleKey.CustomGenericNSString: Array<NSString> {}
+}
diff --git a/swift/test/Obfuscation/FullProcess/Types/Types.swift b/swift/test/Obfuscation/FullProcess/Types/Types.swift
new file mode 100644
index 00000000000..a32d6ea8dbc
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/Types/Types.swift
@@ -0,0 +1,38 @@
+//RUN: %target-prepare-obfuscation-for-file "Types" %target-run-full-obfuscation
+
+import Foundation
+
+class SampleClass {}
+
+extension SampleClass {}
+
+fileprivate class FilePrivateSampleClass {}
+
+protocol SampleProtocol {}
+
+struct SampleStruct {}
+
+class Outer {
+  class Inner {
+    struct InnerStruct: SampleProtocol{
+      func foo() {
+        class InsideFunc: Array<SampleClass?> {}
+        
+        extension InsideFunc {}
+      }
+    }
+  }
+}
+
+class DerivedClass: SampleClass, SampleProtocol {}
+
+extension SampleClass: SampleProtocol {}
+
+class CustomNSString : NSString {}
+
+extension NSBoolean {}
+
+struct CustomCFLocaleKey: CFLocaleKey {
+  class CustomGenericNSString: Array<NSString> {}
+}
+
diff --git a/swift/test/Obfuscation/FullProcess/TypesFailing/Expected/TypesFailing.swift b/swift/test/Obfuscation/FullProcess/TypesFailing/Expected/TypesFailing.swift
new file mode 100644
index 00000000000..2d79e2c9f5d
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/TypesFailing/Expected/TypesFailing.swift
@@ -0,0 +1,18 @@
+
+protocol T1_SampleProtocol { }
+
+struct T1_Generic<GenericParam> {
+  class T1_InsideGeneric: Generic<T1_SampleProtocol> { }
+}
+
+class T1_`BackticksName` {}
+
+class T1_`BackticksNameGeneric`<`BackticksGenericParam`> {
+  class T1_`BackticksInsideBackticksGeneric`: T1_`BackticksNameGeneric`<T1_`BackticksNameGeneric`<T1_`BackticksName`>> {}
+}
+
+class T1_SampleClass {}
+
+extension T1_SampleProtocol where Self: T1_SampleClass {}
+
+extension T1_SampleProtocol where Self == T1_SampleClass {}
diff --git a/swift/test/Obfuscation/FullProcess/TypesFailing/TypesFailing.swift b/swift/test/Obfuscation/FullProcess/TypesFailing/TypesFailing.swift
new file mode 100644
index 00000000000..85fa9778d04
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/TypesFailing/TypesFailing.swift
@@ -0,0 +1,21 @@
+//XFAIL: *
+
+//RUN: %target-prepare-obfuscation-for-file "TypesFailing" %target-run-full-obfuscation
+
+protocol SampleProtocol { }
+
+struct Generic<GenericParam> {
+  class InsideGeneric: Generic<SampleProtocol> {}
+}
+
+class `BackticksName` {}
+
+class `BackticksNameGeneric`<`BackticksGenericParam`> {
+  class `BackticksInsideBackticksGeneric`: `BackticksNameGeneric`<`BackticksNameGeneric`<`BackticksName`>> {}
+}
+
+class SampleClass {}
+
+extension SampleProtocol where Self: SampleClass {}
+
+extension SampleProtocol where Self == SampleClass {}
-- 
2.17.1 (Apple Git-112)


From c82a45866f8204cb7fb8216d2865701c3180293f Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Wed, 14 Feb 2018 15:35:42 +0100
Subject: [PATCH 062/138] Properties tests

Reviewers: michal.zielinski, jerzy.kleszcz

Reviewed By: michal.zielinski, jerzy.kleszcz

Subscribers: michal.zielinski, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2824
---
 .../Properties/Expected/Properties.swift      | 19 +++++++++++++-
 .../FullProcess/Properties/Properties.swift   | 20 ++++++++++++++-
 .../Expected/UnsupportedProperties.swift      | 25 ++++++++++++++++++-
 .../UnsupportedProperties.swift               | 24 +++++++++++++++++-
 4 files changed, 84 insertions(+), 4 deletions(-)

diff --git a/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift b/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift
index c76205f6515..db6f807cf3e 100644
--- a/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift
+++ b/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift
@@ -50,4 +50,21 @@ class T1_OtherStruct: NSValidatedUserInterfaceItem {
 class T1_ViewClass: NSView {
   override var subviews: [NSView] { get { return [] } set { } }
   override var window: NSWindow? { return nil }
-}
\ No newline at end of file
+}
+
+// properties with generic parameters
+class T1_GenericUsingClass {
+  let V1_array: Array<Int> = []
+  let V1_map: [String : Int] = {:}
+}
+
+// properties usage
+class T1_PropertiesUsingClass {
+  var V2_array: Array<Int> = []
+  var V2_map: [String : Int] = {:}
+
+  func NF1_foo() {
+    V2_array = [42]
+    V2_map["42"] = V2_array[0]
+  }
+}
diff --git a/swift/test/Obfuscation/FullProcess/Properties/Properties.swift b/swift/test/Obfuscation/FullProcess/Properties/Properties.swift
index cdfa6c4aa21..c00d39a7579 100644
--- a/swift/test/Obfuscation/FullProcess/Properties/Properties.swift
+++ b/swift/test/Obfuscation/FullProcess/Properties/Properties.swift
@@ -52,4 +52,22 @@ class OtherStruct: NSValidatedUserInterfaceItem {
 class ViewClass: NSView {
   override var subviews: [NSView] { get { return [] } set { } }
   override var window: NSWindow? { return nil }
-}
\ No newline at end of file
+}
+
+// properties with generic parameters
+class GenericUsingClass {
+  let array: Array<Int> = []
+  let map: [String : Int] = {:}
+}
+
+// properties usage
+class PropertiesUsingClass {
+  var array: Array<Int> = []
+  var map: [String : Int] = {:}
+
+  func foo() {
+    array = [42]
+    map["42"] = array[0]
+  }
+}
+
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedProperties/Expected/UnsupportedProperties.swift b/swift/test/Obfuscation/FullProcess/UnsupportedProperties/Expected/UnsupportedProperties.swift
index 2b805258f5c..cedb19ac7da 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedProperties/Expected/UnsupportedProperties.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedProperties/Expected/UnsupportedProperties.swift
@@ -5,4 +5,27 @@ struct T1_SpecialStruct {
   let V1_`var`: String
   var V1_`set`: String
   let V1_`return`: Double
-}
\ No newline at end of file
+}
+
+// properties with generic parameters
+class T1_SomeClass<GenericParam> {
+  var V1_param: String = ""
+}
+
+class T1_GenericUsingClass {
+  let V1_array: Array<Int> = []
+  let V1_map: [String : Int] = {:}
+}
+
+class T1_PropertiesUsingClass {
+  var V1_array: Array<Int> = []
+  var V1_map: [String : Int] = {:}
+  var V1_generic = T1_SomeClass<GenericParam>()
+
+  func foo() -> T1_SomeClass {
+    V1_array = [42]
+    V1_map["42"] = V1_array[0]
+    V1_generic.V1_param = V1_map["42"]!.toString()
+    return V1_generic
+  }
+}
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedProperties/UnsupportedProperties.swift b/swift/test/Obfuscation/FullProcess/UnsupportedProperties/UnsupportedProperties.swift
index f61bc66c6b0..b283973d5e2 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedProperties/UnsupportedProperties.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedProperties/UnsupportedProperties.swift
@@ -8,4 +8,26 @@ struct SpecialStruct {
   let `var`: String
   var `set`: String
   let `return`: Double
-}
\ No newline at end of file
+}
+
+// properties with generic parameters
+class SomeClass<GenericParam> {
+  var param: String = ""
+}
+
+class GenericUsingClass {
+  let array: Array<Int> = []
+  let map: [String : Int] = {:}
+}
+
+class PropertiesUsingClass {
+  var array: Array<Int> = []
+  var map: [String : Int] = {:}
+  var generic = SomeClass<GenericParam>()
+
+  func foo() -> SomeClass {
+    array = [42]
+    map["42"] = array[0]
+    generic.param = map["42"]!.toString()
+  }
+}
-- 
2.17.1 (Apple Git-112)


From 0f3267519f2f3de67ae1f1bc7ca9be3e120708e0 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Thu, 15 Feb 2018 11:33:08 +0100
Subject: [PATCH 063/138] Ugly fix for lack of proper symbol extraction

Reviewers: michal.zielinski, jerzy.kleszcz

Reviewed By: michal.zielinski, jerzy.kleszcz

Subscribers: michal.zielinski, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2826
---
 swift/include/swift/Obfuscation/DataStructures.h | 16 +++++++++++++---
 .../include/swift/Obfuscation/SourceFileWalker.h |  3 ++-
 swift/include/swift/Obfuscation/Utils-Template.h | 14 +++++++-------
 swift/include/swift/Obfuscation/Utils.h          | 14 +++++++-------
 swift/lib/Obfuscation/DataStructures.cpp         | 14 ++++++++++----
 swift/lib/Obfuscation/SourceFileWalker.cpp       |  6 ++++--
 swift/lib/Obfuscation/SymbolExtracting.cpp       | 14 ++++++++++++--
 .../Properties/Expected/Properties.swift         |  6 +++---
 .../FullProcess/Properties/Properties.swift      |  6 +++---
 9 files changed, 61 insertions(+), 32 deletions(-)

diff --git a/swift/include/swift/Obfuscation/DataStructures.h b/swift/include/swift/Obfuscation/DataStructures.h
index c9dafa6ba08..6f3240538a3 100644
--- a/swift/include/swift/Obfuscation/DataStructures.h
+++ b/swift/include/swift/Obfuscation/DataStructures.h
@@ -129,9 +129,19 @@ struct IndexedSymbolWithRange {
   IndexedSymbolWithRange(const int Index,
                          const struct SymbolWithRange &SymbolWithRange);
 
-  /// @brief Comparison operator required for containing IndexedSymbolWithRange
-  /// in sets. It's taking only symbol into consideration, not range nor index.
-  bool operator< (const IndexedSymbolWithRange &Right) const;
+  /// @brief Comparison required for containing IndexedSymbolWithRange in sets.
+  /// It's taking only symbol into consideration, not range nor index.
+  struct SymbolCompare {
+    bool operator() (const IndexedSymbolWithRange& Left,
+                     const IndexedSymbolWithRange& Right) const;
+  };
+
+  /// @brief Comparison required for containing IndexedSymbolWithRange in sets.
+  /// It's taking only symbol with range into consideration, not index.
+  struct SymbolWithRangeCompare {
+    bool operator() (const IndexedSymbolWithRange& Left,
+                     const IndexedSymbolWithRange& Right) const;
+  };
 };
   
 using SymbolsOrError = llvm::Expected<std::vector<SymbolWithRange>>;
diff --git a/swift/include/swift/Obfuscation/SourceFileWalker.h b/swift/include/swift/Obfuscation/SourceFileWalker.h
index c04b1c48686..e09d0d96aa2 100644
--- a/swift/include/swift/Obfuscation/SourceFileWalker.h
+++ b/swift/include/swift/Obfuscation/SourceFileWalker.h
@@ -31,7 +31,8 @@ namespace obfuscation {
 ///
 /// \returns the occurrences of symbols with their metadata, place
 ///          and occurrence index.
-std::set<IndexedSymbolWithRange> walkAndCollectSymbols(SourceFile &SourceFile);
+std::set<IndexedSymbolWithRange, IndexedSymbolWithRange::SymbolWithRangeCompare>
+  walkAndCollectSymbols(SourceFile &SourceFile);
 
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/include/swift/Obfuscation/Utils-Template.h b/swift/include/swift/Obfuscation/Utils-Template.h
index cb31e70124f..7e56fba2221 100644
--- a/swift/include/swift/Obfuscation/Utils-Template.h
+++ b/swift/include/swift/Obfuscation/Utils-Template.h
@@ -12,25 +12,25 @@ void copyToVector(const std::vector<ElementType> &FromVector,
             std::back_inserter(ToVector));
 };
   
-template<typename ElementType>
-void copyToVector(const std::set<ElementType> &FromSet,
+template<typename ElementType, typename CompareFrom>
+void copyToVector(const std::set<ElementType, CompareFrom> &FromSet,
                   std::vector<ElementType> &ToVector) {
   std::copy(FromSet.cbegin(),
             FromSet.cend(),
             std::back_inserter(ToVector));
 };
 
-template<typename ElementType>
-void copyToSet(const std::set<ElementType> &FromSet,
-               std::set<ElementType> &ToSet) {
+template<typename ElementType, typename CompareFrom, typename CompareTo>
+void copyToSet(const std::set<ElementType, CompareFrom> &FromSet,
+               std::set<ElementType, CompareTo> &ToSet) {
   std::copy(FromSet.cbegin(),
             FromSet.cend(),
             std::inserter(ToSet, ToSet.begin()));
 };
 
-template<typename ElementType>
+template<typename ElementType, typename CompareTo>
 void copyToSet(const std::vector<ElementType> &FromVector,
-               std::set<ElementType> &ToSet) {
+               std::set<ElementType, CompareTo> &ToSet) {
   std::copy(FromVector.cbegin(),
             FromVector.cend(),
             std::inserter(ToSet, ToSet.begin()));
diff --git a/swift/include/swift/Obfuscation/Utils.h b/swift/include/swift/Obfuscation/Utils.h
index 9817b6e6957..16adbf6042e 100644
--- a/swift/include/swift/Obfuscation/Utils.h
+++ b/swift/include/swift/Obfuscation/Utils.h
@@ -35,17 +35,17 @@ template<typename ElementType>
 void copyToVector(const std::vector<ElementType> &FromVector,
                   std::vector<ElementType> &ToVector);
   
-template<typename ElementType>
-void copyToVector(const std::set<ElementType> &FromSet,
+template<typename ElementType, typename CompareFrom>
+void copyToVector(const std::set<ElementType, CompareFrom> &FromSet,
                   std::vector<ElementType> &ToVector);
 
-template<typename ElementType>
-void copyToSet(const std::set<ElementType> &FromSet,
-               std::set<ElementType> &ToSet);
+template<typename ElementType, typename CompareFrom, typename CompareTo>
+void copyToSet(const std::set<ElementType, CompareFrom> &FromSet,
+               std::set<ElementType, CompareTo> &ToSet);
 
-template<typename ElementType>
+template<typename ElementType, typename CompareTo>
 void copyToSet(const std::vector<ElementType> &FromVector,
-               std::set<ElementType> &ToSet);
+               std::set<ElementType, CompareTo> &ToSet);
 
 template<typename ElementType>
 void copyToStream(const std::vector<ElementType> &FromVector,
diff --git a/swift/lib/Obfuscation/DataStructures.cpp b/swift/lib/Obfuscation/DataStructures.cpp
index 2e5e39e2ee2..52b5914978f 100644
--- a/swift/lib/Obfuscation/DataStructures.cpp
+++ b/swift/lib/Obfuscation/DataStructures.cpp
@@ -76,12 +76,18 @@ IndexedSymbolWithRange::
                          const struct SymbolWithRange &SymbolWithRange)
 : Index(Index), SymbolWithRange(SymbolWithRange) {}
 
-bool IndexedSymbolWithRange::
-  operator< (const IndexedSymbolWithRange &Right) const {
-    return SymbolWithRange.Symbol < Right.SymbolWithRange.Symbol;
+bool IndexedSymbolWithRange::SymbolCompare::
+  operator() (const IndexedSymbolWithRange& Left,
+              const IndexedSymbolWithRange& Right) const {
+  return Left.SymbolWithRange.Symbol < Right.SymbolWithRange.Symbol;
+}
+
+bool IndexedSymbolWithRange::SymbolWithRangeCompare::
+  operator() (const IndexedSymbolWithRange& Left,
+              const IndexedSymbolWithRange& Right) const {
+  return Left.SymbolWithRange < Right.SymbolWithRange;
 }
 
-  
 } //namespace obfuscation
 } //namespace swift
 
diff --git a/swift/lib/Obfuscation/SourceFileWalker.cpp b/swift/lib/Obfuscation/SourceFileWalker.cpp
index eaf2aa6206a..bf4b77aee86 100644
--- a/swift/lib/Obfuscation/SourceFileWalker.cpp
+++ b/swift/lib/Obfuscation/SourceFileWalker.cpp
@@ -14,7 +14,8 @@ namespace obfuscation {
 
 struct RenamesCollector: public SourceEntityWalker {
   static int SymbolIndex;
-  std::set<IndexedSymbolWithRange> Bucket;
+  std::set<IndexedSymbolWithRange,
+           IndexedSymbolWithRange::SymbolWithRangeCompare> Bucket;
   
   void handleSymbols(std::vector<SymbolWithRange> &Symbols) {
     for (auto &Symbol : Symbols) {
@@ -114,7 +115,8 @@ struct RenamesCollector: public SourceEntityWalker {
 
 int RenamesCollector::SymbolIndex;
 
-std::set<IndexedSymbolWithRange> walkAndCollectSymbols(SourceFile &SourceFile) {
+std::set<IndexedSymbolWithRange, IndexedSymbolWithRange::SymbolWithRangeCompare>
+  walkAndCollectSymbols(SourceFile &SourceFile) {
   RenamesCollector Collector;
   Collector.walk(SourceFile);
   return Collector.Bucket;
diff --git a/swift/lib/Obfuscation/SymbolExtracting.cpp b/swift/lib/Obfuscation/SymbolExtracting.cpp
index c3e99426be4..66421918a78 100644
--- a/swift/lib/Obfuscation/SymbolExtracting.cpp
+++ b/swift/lib/Obfuscation/SymbolExtracting.cpp
@@ -39,10 +39,20 @@ extractSymbols(const FilesJson &FilesJson,
               return Left.first < Right.first;
             });
 
-  std::set<IndexedSymbolWithRange> Symbols;
+  std::set<IndexedSymbolWithRange,
+           IndexedSymbolWithRange::SymbolCompare> Symbols;
+
   for (auto &Unit : Files) {
     auto CurrentSymbols = walkAndCollectSymbols(*Unit.second);
-    copyToSet(CurrentSymbols, Symbols);
+    std::vector<IndexedSymbolWithRange> SortedSymbols;
+    copyToVector(CurrentSymbols, SortedSymbols);
+    std::sort(SortedSymbols.begin(),
+              SortedSymbols.end(),
+              [](const IndexedSymbolWithRange &Left,
+                 const IndexedSymbolWithRange &Right) {
+                return Left.Index < Right.Index;
+              });
+    copyToSet(SortedSymbols, Symbols);
   }
 
   std::vector<IndexedSymbolWithRange> Result;
diff --git a/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift b/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift
index db6f807cf3e..8605784fc3a 100644
--- a/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift
+++ b/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift
@@ -43,7 +43,7 @@ struct T1_ComputedStruct {
 //computed properties required by other modules
 class T1_OtherStruct: NSValidatedUserInterfaceItem {
   var action: Selector? { return nil }
-  var tag: Int
+  var tag: Int = 0
 }
 
 // stored properties required by other modules
@@ -55,13 +55,13 @@ class T1_ViewClass: NSView {
 // properties with generic parameters
 class T1_GenericUsingClass {
   let V1_array: Array<Int> = []
-  let V1_map: [String : Int] = {:}
+  let V1_map: [String : Int] = [:]
 }
 
 // properties usage
 class T1_PropertiesUsingClass {
   var V2_array: Array<Int> = []
-  var V2_map: [String : Int] = {:}
+  var V2_map: [String : Int] = [:]
 
   func NF1_foo() {
     V2_array = [42]
diff --git a/swift/test/Obfuscation/FullProcess/Properties/Properties.swift b/swift/test/Obfuscation/FullProcess/Properties/Properties.swift
index c00d39a7579..d989133dfd4 100644
--- a/swift/test/Obfuscation/FullProcess/Properties/Properties.swift
+++ b/swift/test/Obfuscation/FullProcess/Properties/Properties.swift
@@ -45,7 +45,7 @@ struct ComputedStruct {
 //computed properties required by other modules
 class OtherStruct: NSValidatedUserInterfaceItem {
   var action: Selector? { return nil }
-  var tag: Int
+  var tag: Int = 0
 }
 
 // stored properties required by other modules
@@ -57,13 +57,13 @@ class ViewClass: NSView {
 // properties with generic parameters
 class GenericUsingClass {
   let array: Array<Int> = []
-  let map: [String : Int] = {:}
+  let map: [String : Int] = [:]
 }
 
 // properties usage
 class PropertiesUsingClass {
   var array: Array<Int> = []
-  var map: [String : Int] = {:}
+  var map: [String : Int] = [:]
 
   func foo() {
     array = [42]
-- 
2.17.1 (Apple Git-112)


From 889cd8be24b6e6135720b2b0f29d1a2e2def5ced Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Thu, 15 Feb 2018 14:35:53 +0100
Subject: [PATCH 064/138] Added integration test for functions

Reviewers: michal.zielinski, krzysztof.siejkowski

Reviewed By: michal.zielinski, krzysztof.siejkowski

Subscribers: michal.zielinski, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2829
---
 .../Functions/Expected/Functions.swift        | 114 +++++++++++++++++
 .../FullProcess/Functions/Functions.swift     | 115 ++++++++++++++++++
 .../Expected/UnsupportedFunctions.swift       |  15 +++
 .../UnsupportedFunctions.swift                |  18 +++
 4 files changed, 262 insertions(+)
 create mode 100644 swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/Functions/Functions.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/UnsupportedFunctions/Expected/UnsupportedFunctions.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/UnsupportedFunctions/UnsupportedFunctions.swift

diff --git a/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift b/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift
new file mode 100644
index 00000000000..293bac590f6
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift
@@ -0,0 +1,114 @@
+import AppKit
+
+// Top-level functions
+func NF1_firstFunction() { }
+func NF1_secondFunction() -> Int { return 0 }
+
+NF1_firstFunction()
+_ = NF1_secondFunction()
+
+// Struct methods
+struct T1_FirstStruct {
+  func NF1_method() { }
+  static func NF1_staticMethod() { }
+}
+
+let V1_fsi = T1_FirstStruct()
+V1_fsi.NF1_method()
+T1_FirstStruct.NF1_staticMethod()
+
+struct T1_SecondStruct {
+  func NF2_method() { }
+  static func NF2_staticMethod() { }
+}
+
+let V1_ssi = T1_SecondStruct()
+V1_ssi.NF2_method()
+T1_SecondStruct.NF2_staticMethod()
+
+// Class methods
+class T1_BaseClass {
+  func NF3_method() { }
+  static func NF3_staticMethod() -> Int { return 0 }
+}
+
+let V1_bci = T1_BaseClass()
+V1_bci.NF3_method()
+_ = T1_BaseClass.NF3_staticMethod()
+
+class T1_DerivedClass: T1_BaseClass {
+  override func NF3_method() { }
+}
+
+let V1_dci = T1_DerivedClass()
+V1_dci.NF3_method()
+_ = T1_DerivedClass.NF3_staticMethod()
+
+class T1_SampleClass {
+  func NF4_method() -> T1_FirstStruct { return T1_FirstStruct() }
+  static func NF4_staticMethod() { }
+}
+
+let V1_sci = T1_SampleClass()
+_ = V1_sci.NF4_method()
+T1_SampleClass.NF4_staticMethod()
+
+// Enum methods
+enum T1_FirstEnum {
+  case value
+  func NF5_method() { }
+}
+
+T1_FirstEnum.value.NF5_method()
+
+enum T1_SecondEnum {
+  case value
+  func NF6_method() { }
+}
+
+T1_SecondEnum.value.NF6_method()
+
+// Protocol methods
+
+protocol T1_SampleProtocol {
+  func NF7_method()
+}
+
+class T1_ConformingClass: T1_SampleProtocol {
+  func NF7_method() { }
+}
+
+struct T1_ConformingStruct: T1_SampleProtocol {
+  func NF7_method() { }
+}
+
+// SDK subclass methods
+class T1_CustomView: NSView {
+  override func prepareForReuse() { }
+}
+
+let V1_cvi = T1_CustomView()
+V1_cvi.prepareForReuse()
+
+// SDK protocol methods
+class T1_CustomFMDelegate: FileManagerDelegate {
+  func fileManager(_ IP1_fileManager: FileManager, shouldRemoveItemAtPath IP1_path: String) -> Bool {
+    return false
+  }
+}
+
+let V1_cfmdi = T1_CustomFMDelegate()
+_ = V1_cfmdi.fileManager(FileManager.default, shouldRemoveItemAtPath: "")
+
+// Generic top-level functions
+func NF1_function<T>() -> T { return T() }
+let V1_fvi: Int = NF1_function()
+let V1_fvsc: T1_SampleClass = NF1_function()
+
+// Nested functions
+func NF1_outerFunction() -> String {
+  func NF1_innerFunction() -> Int { return 1 }
+  return "\(NF1_innerFunction())"
+}
+
+_ = NF1_outerFunction()
diff --git a/swift/test/Obfuscation/FullProcess/Functions/Functions.swift b/swift/test/Obfuscation/FullProcess/Functions/Functions.swift
new file mode 100644
index 00000000000..703dc41f2c3
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/Functions/Functions.swift
@@ -0,0 +1,115 @@
+//RUN: %target-prepare-obfuscation-for-file "Functions" %target-run-full-obfuscation
+import AppKit
+
+// Top-level functions
+func firstFunction() { }
+func secondFunction() -> Int { return 0 }
+
+firstFunction()
+_ = secondFunction()
+
+// Struct methods
+struct FirstStruct {
+  func method() { }
+  static func staticMethod() { }
+}
+
+let fsi = FirstStruct()
+fsi.method()
+FirstStruct.staticMethod()
+
+struct SecondStruct {
+  func method() { }
+  static func staticMethod() { }
+}
+
+let ssi = SecondStruct()
+ssi.method()
+SecondStruct.staticMethod()
+
+// Class methods
+class BaseClass {
+  func method() { }
+  static func staticMethod() -> Int { return 0 }
+}
+
+let bci = BaseClass()
+bci.method()
+_ = BaseClass.staticMethod()
+
+class DerivedClass: BaseClass {
+  override func method() { }
+}
+
+let dci = DerivedClass()
+dci.method()
+_ = DerivedClass.staticMethod()
+
+class SampleClass {
+  func method() -> FirstStruct { return FirstStruct() }
+  static func staticMethod() { }
+}
+
+let sci = SampleClass()
+_ = sci.method()
+SampleClass.staticMethod()
+
+// Enum methods
+enum FirstEnum {
+  case value
+  func method() { }
+}
+
+FirstEnum.value.method()
+
+enum SecondEnum {
+  case value
+  func method() { }
+}
+
+SecondEnum.value.method()
+
+// Protocol methods
+
+protocol SampleProtocol {
+  func method()
+}
+
+class ConformingClass: SampleProtocol {
+  func method() { }
+}
+
+struct ConformingStruct: SampleProtocol {
+  func method() { }
+}
+
+// SDK subclass methods
+class CustomView: NSView {
+  override func prepareForReuse() { }
+}
+
+let cvi = CustomView()
+cvi.prepareForReuse()
+
+// SDK protocol methods
+class CustomFMDelegate: FileManagerDelegate {
+  func fileManager(_ fileManager: FileManager, shouldRemoveItemAtPath path: String) -> Bool {
+    return false
+  }
+}
+
+let cfmdi = CustomFMDelegate()
+_ = cfmdi.fileManager(FileManager.default, shouldRemoveItemAtPath: "")
+
+// Generic top-level functions
+func function<T>() -> T { return T() }
+let fvi: Int = function()
+let fvsc: SampleClass = function()
+
+// Nested functions
+func outerFunction() -> String {
+  func innerFunction() -> Int { return 1 }
+  return "\(innerFunction())"
+}
+
+_ = outerFunction()
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/Expected/UnsupportedFunctions.swift b/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/Expected/UnsupportedFunctions.swift
new file mode 100644
index 00000000000..2cd6c2f00b4
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/Expected/UnsupportedFunctions.swift
@@ -0,0 +1,15 @@
+import AppKit
+
+// Backtick named function
+func NF1_`function`() -> Int { return 1 }
+
+// Generic class methods
+class T1_GenericClass<T> {
+  func NF1_method() -> T { return T() }
+}
+
+let V1_gcii = T1_GenericClass<Int>()
+_ = V1_gcii.NF1_method()
+
+let V1_gcsi = T1_GenericClass<T1_SampleClass>()
+_ = V1_gcsi.NF1_method()
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/UnsupportedFunctions.swift b/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/UnsupportedFunctions.swift
new file mode 100644
index 00000000000..20a4a9d7fb7
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/UnsupportedFunctions.swift
@@ -0,0 +1,18 @@
+//XFAIL: *
+//RUN: %target-prepare-obfuscation-for-file "UnsupportedFunctions" %target-run-full-obfuscation
+
+import AppKit
+
+// Backtick named functions
+func `function`() -> Int { return 1 }
+
+// Generic class methods
+class GenericClass<T> {
+  func method() -> T { return T() }
+}
+
+let gcii = GenericClass<Int>()
+_ = gcii.method()
+
+let gcsi = GenericClass<SampleClass>()
+_ = gcsi.method()
-- 
2.17.1 (Apple Git-112)


From 2c86cf13267f8fed1a1c0794bd3969029fb6412e Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Thu, 15 Feb 2018 14:01:20 +0100
Subject: [PATCH 065/138] function params tests

Summary: Added function params and selectors tests

Reviewers: jerzy.kleszcz, krzysztof.siejkowski

Reviewed By: jerzy.kleszcz, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2827
---
 .../Expected/FunctionParameterNames.swift     | 57 +++++++++++++++++
 .../FunctionParameterNames.swift              | 61 +++++++++++++++++++
 .../Selectors/Expected/Selectors.swift        |  9 +++
 .../FullProcess/Selectors/Selectors.swift     | 11 ++++
 .../UnsupportedFunctionParameterNames.swift   | 49 +++++++++++++++
 .../UnsupportedFunctionParameterNames.swift   | 52 ++++++++++++++++
 .../Expected/UnsupportedSelectors.swift       |  9 +++
 .../UnsupportedSelectors.swift                | 13 ++++
 .../Expected/UnsupportedFailing.swift}        |  0
 .../UnsupportedFailing.swift}                 |  2 +-
 10 files changed, 262 insertions(+), 1 deletion(-)
 create mode 100644 swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/Selectors/Expected/Selectors.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/Selectors/Selectors.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/Expected/UnsupportedFunctionParameterNames.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/UnsupportedFunctionParameterNames.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/UnsupportedSelectors/Expected/UnsupportedSelectors.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/UnsupportedSelectors/UnsupportedSelectors.swift
 rename swift/test/Obfuscation/FullProcess/{TypesFailing/Expected/TypesFailing.swift => UnsupportedTypes/Expected/UnsupportedFailing.swift} (100%)
 rename swift/test/Obfuscation/FullProcess/{TypesFailing/TypesFailing.swift => UnsupportedTypes/UnsupportedFailing.swift} (83%)

diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
new file mode 100644
index 00000000000..43609302658
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
@@ -0,0 +1,57 @@
+
+class T1_SampleClass {}
+
+func NF1_noParams() {}
+
+func NF1_singleParam(SP1_param: T1_SampleClass) {}
+
+func NF1_singleParam2(EP1_extParam IP1_intParam: T1_SampleClass) {}
+
+func NF1_returnValue() -> T1_SampleClass {
+  return T1_SampleClass()
+}
+
+func NF1_returnValue2() -> String {
+  return "String";
+}
+
+func NF1_paramAndReturnValue(SP2_param: T1_SampleClass, EP2_extParam IP2_intParam: Int) -> String {
+  return "String";
+}
+
+func NF1_intExtParams(EP1_foo IP1_foo:Int, EP2_foo IP1_bar: T1_SampleClass) -> Any? {
+  return nil
+}
+
+func NF1_genericFun<T, R>(_ IP1_a: inout T, _ IP1_b: inout R) {}
+
+func NF1_genericFunc2<T: String & T1_SampleClass>(EP1_e IP1_i: T) {}
+
+func NF1_someFunc3<T>(SP1_arg: T) where T:T1_SampleClass, T:Int {}
+
+// overriding functions
+class T1_Base {
+  func NF1_baseFunc(SP3_param: String) {}
+  func NF1_baseFunc2(_ IP3_intParam: Int) {}
+  func NF1_baseFunc3(EP3_extParam IP4_intParam: T1_SampleClass) {}
+}
+
+class T1_Derived: T1_Base {
+  override func NF1_baseFunc(param: String) {}
+}
+
+// explicit constructor params
+class T1_ConstructorParam {
+  init(SP1_str: String) {}
+  init(_ IP1_int: Int) {}
+  init(EP1_extP IP1_intP: T1_SampleClass) {}
+}
+
+//protocol functions
+protocol T1_ProtocolFunc {
+  func NF1_pFunc(SP1_pFunc: Int)
+}
+
+class T1_ProtocolFunClass: T1_ProtocolFunc {
+  func NF1_pFunc(SP1_pFunc: Int) {}
+}
diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
new file mode 100644
index 00000000000..bb2ef57e995
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
@@ -0,0 +1,61 @@
+//RUN: %target-prepare-obfuscation-for-file "FunctionParameterNames" %target-run-full-obfuscation
+
+class SampleClass {}
+
+func noParams() {}
+
+func singleParam(param: SampleClass) {}
+
+func singleParam2(extParam intParam: SampleClass) {}
+
+func returnValue() -> SampleClass {
+  return SampleClass()
+}
+
+func returnValue2() -> String {
+  return "String";
+}
+
+func paramAndReturnValue(param: SampleClass, extParam intParam: Int) -> String {
+  return "String";
+}
+
+func intExtParams(foo foo:Int, foo bar: SampleClass) -> Any? {
+  return nil
+}
+
+func genericFun<T, R>(_ a: inout T, _ b: inout R) {}
+
+func genericFunc2<T: String & SampleClass>(e i: T) {}
+
+func someFunc3<T>(arg: T) where T:SampleClass, T:Int {}
+
+// overriding functions
+class Base {
+  func baseFunc(param: String) {}
+  func baseFunc2(_ intParam: Int) {}
+  func baseFunc3(extParam intParam: SampleClass) {}
+}
+
+class Derived: Base {
+  override func baseFunc(param: String) {}
+}
+
+// explicit constructor params
+class ConstructorParam {
+  init(str: String) {}
+  init(_ int: Int) {}
+  init(extP intP: SampleClass) {}
+}
+
+//protocol functions
+protocol ProtocolFunc {
+  func pFunc(pFunc: Int)
+}
+
+class ProtocolFunClass: ProtocolFunc {
+  func pFunc(pFunc: Int) {}
+}
+
+
+
diff --git a/swift/test/Obfuscation/FullProcess/Selectors/Expected/Selectors.swift b/swift/test/Obfuscation/FullProcess/Selectors/Expected/Selectors.swift
new file mode 100644
index 00000000000..a44397b9804
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/Selectors/Expected/Selectors.swift
@@ -0,0 +1,9 @@
+
+import Foundation
+
+class T1_SelectorTest: NSObject {
+  
+  @objc func NF1_foo() {}
+  
+  let V1_s = #selector(T1_SelectorTest.NF1_foo)
+}
diff --git a/swift/test/Obfuscation/FullProcess/Selectors/Selectors.swift b/swift/test/Obfuscation/FullProcess/Selectors/Selectors.swift
new file mode 100644
index 00000000000..5a9334a1e37
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/Selectors/Selectors.swift
@@ -0,0 +1,11 @@
+//RUN: %target-prepare-obfuscation-for-file "FailingSelectors" %target-run-full-obfuscation
+
+import Foundation
+
+class SelectorTest: NSObject {
+  
+  @objc func foo() {}
+  
+  let s = #selector(SelectorTest.foo)
+}
+
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/Expected/UnsupportedFunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/Expected/UnsupportedFunctionParameterNames.swift
new file mode 100644
index 00000000000..d6c58f6b297
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/Expected/UnsupportedFunctionParameterNames.swift
@@ -0,0 +1,49 @@
+
+class T1_SampleClass {}
+
+func NF1_`backticksName`(EP1_`backticksExtName` IP1_`backTicksIntName`: T1_SampleClass) {}
+
+// overriding functions
+class T1_Base {
+  func NF1_baseFunc2(_ IP3_intParam: Int) {}
+  func NF1_baseFunc3(EP3_extParam IP4_intParam: T1_SampleClass) {}
+  
+  subscript(SP1_index: Int) -> String { return "" }
+  subscript(_ IP1_indexInt: Int) -> String { return "" }
+  subscript(EP1_indexExt IP2_indexInt: Int) -> String { return "" }
+  
+  var V1_testVar: String {
+    get{ return "" }
+    set(SP1_newTestVar) {}
+  }
+}
+
+class T1_Derived: T1_Base {
+  override func NF1_baseFunc2(_ IP5_intParam: Int) {}
+  override func NF1_baseFunc3(extParam IP6_intParam: T1_SampleClass) {}
+  
+  override subscript(index: Int) -> String { return "" }
+  override subscript(_ IP3_indexInt: Int) -> String { return "" }
+  override subscript(indexExt IP4_indexInt: Int) -> String { return "" }
+}
+
+// implicit constructor params
+struct T1_SampleStruct {
+  let V1_fieldA: Int
+  let V1_fieldB: String
+}
+
+let V1_test = T1_SampleStruct(V1_fieldA: 1, V1_fieldB:"")
+
+//protocol functions
+protocol T1_ProtocolFunc {
+  func NF1_pFunc2(_ IP1_pFunc: Int)
+  func NF1_pFunc3(EP1_extpFunc IP1_intpFunc: Int)
+  func NF1_pFunc4(SP1_singleFunc: Int)
+}
+
+class T1_ProtocolFunClass: T1_ProtocolFunc {
+  func NF1_pFunc2(_ IP2_pFunc: Int) {}
+  func NF1_pFunc3(EP1_extpFunc IP2_intpFunc: Int) {}
+  func NF1_pFunc4(EP1_singleFunc IP1_singleIntFunc: Int)
+}
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/UnsupportedFunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/UnsupportedFunctionParameterNames.swift
new file mode 100644
index 00000000000..2d5f96af856
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/UnsupportedFunctionParameterNames.swift
@@ -0,0 +1,52 @@
+//XFAIL: *
+
+//RUN: %target-prepare-obfuscation-for-file "UnsupportedFunctionParameterNames" %target-run-full-obfuscation
+
+class SampleClass {}
+
+func `backticksName`(`backticksExtName` `backTicksIntName`: SampleClass) {}
+
+// overriding functions
+class Base {
+  func baseFunc2(_ intParam: Int) {}
+  func baseFunc3(extParam intParam: SampleClass) {}
+  
+  subscript(index: Int) -> String { return "" }
+  subscript(_ indexInt: Int) -> String { return "" }
+  subscript(indexExt indexInt: Int) -> String { return "" }
+  
+  var testVar: String {
+    get{ return "" }
+    set(newTestVar) {}
+  }
+}
+
+class Derived: Base {
+  override func baseFunc2(_ intParam: Int) {}
+  override func baseFunc3(extParam intParam: SampleClass) {}
+  
+  override subscript(index: Int) -> String { return "" }
+  override subscript(_ indexInt: Int) -> String { return "" }
+  override subscript(indexExt indexInt: Int) -> String { return "" }
+}
+
+// implicit constructor params
+struct SampleStruct {
+  let fieldA: Int
+  let fieldB: String
+}
+
+let test = SampleStruct(fieldA: 1, fieldB:"")
+
+//protocol functions
+protocol ProtocolFunc {
+  func pFunc2(_ pFunc: Int)
+  func pFunc3(extpFunc intpFunc: Int)
+  func pFunc4(singleFunc: Int)
+}
+
+class ProtocolFunClass: ProtocolFunc {
+  func pFunc2(_ pFunc: Int) {}
+  func pFunc3(extpFunc intpFunc: Int) {}
+  func pFunc4(singleFunc singleIntFunc: Int) {}
+}
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedSelectors/Expected/UnsupportedSelectors.swift b/swift/test/Obfuscation/FullProcess/UnsupportedSelectors/Expected/UnsupportedSelectors.swift
new file mode 100644
index 00000000000..bf1a78d7925
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedSelectors/Expected/UnsupportedSelectors.swift
@@ -0,0 +1,9 @@
+
+import Foundation
+
+class T1_SelectorTest: NSObject {
+  
+  @objc func NF1_bar(_ IP1_baz: String) {}
+  
+  let V1_s = Selector(("NF1_bar:"))
+}
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedSelectors/UnsupportedSelectors.swift b/swift/test/Obfuscation/FullProcess/UnsupportedSelectors/UnsupportedSelectors.swift
new file mode 100644
index 00000000000..5427860ed5f
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedSelectors/UnsupportedSelectors.swift
@@ -0,0 +1,13 @@
+//XFAIL: *
+
+//RUN: %target-prepare-obfuscation-for-file "UnsupportedSelectors" %target-run-full-obfuscation
+
+import Foundation
+
+class SelectorTest: NSObject {
+  
+  @objc func bar(_ baz: String) {}
+  
+  let s = Selector(("bar:"))
+}
+
diff --git a/swift/test/Obfuscation/FullProcess/TypesFailing/Expected/TypesFailing.swift b/swift/test/Obfuscation/FullProcess/UnsupportedTypes/Expected/UnsupportedFailing.swift
similarity index 100%
rename from swift/test/Obfuscation/FullProcess/TypesFailing/Expected/TypesFailing.swift
rename to swift/test/Obfuscation/FullProcess/UnsupportedTypes/Expected/UnsupportedFailing.swift
diff --git a/swift/test/Obfuscation/FullProcess/TypesFailing/TypesFailing.swift b/swift/test/Obfuscation/FullProcess/UnsupportedTypes/UnsupportedFailing.swift
similarity index 83%
rename from swift/test/Obfuscation/FullProcess/TypesFailing/TypesFailing.swift
rename to swift/test/Obfuscation/FullProcess/UnsupportedTypes/UnsupportedFailing.swift
index 85fa9778d04..53ae374b532 100644
--- a/swift/test/Obfuscation/FullProcess/TypesFailing/TypesFailing.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedTypes/UnsupportedFailing.swift
@@ -1,6 +1,6 @@
 //XFAIL: *
 
-//RUN: %target-prepare-obfuscation-for-file "TypesFailing" %target-run-full-obfuscation
+//RUN: %target-prepare-obfuscation-for-file "UnsupportedTypes" %target-run-full-obfuscation
 
 protocol SampleProtocol { }
 
-- 
2.17.1 (Apple Git-112)


From 794e488f568eb515242d130a88336e3f39eee0c0 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Thu, 15 Feb 2018 19:38:26 +0100
Subject: [PATCH 066/138] Important topics for Name Mapper

Reviewers: michal.zielinski, jerzy.kleszcz

Reviewed By: michal.zielinski, jerzy.kleszcz

Subscribers: michal.zielinski, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2833
---
 Documentation/NameMapper-ImportantTopics.md | 32 +++++++++++++++++++++
 1 file changed, 32 insertions(+)
 create mode 100644 Documentation/NameMapper-ImportantTopics.md

diff --git a/Documentation/NameMapper-ImportantTopics.md b/Documentation/NameMapper-ImportantTopics.md
new file mode 100644
index 00000000000..5801ed96311
--- /dev/null
+++ b/Documentation/NameMapper-ImportantTopics.md
@@ -0,0 +1,32 @@
+# Important topics for Name Mapper
+
+The goal of this document is to be a bag of important ideas, decisions, concepts and discoveries in the `NameMapper` project. Currently these include:
+
+1. [Why is NameMapper a separate command line tool?](#separate)
+2. [Why does NameMapper need to know about the symbol type to generate the obfuscated name proposal?](#type)
+3. [Where are the characters to build the obfuscated name taken from?](#symbols)
+4. [How can we snsure that the generated name will be unique and there will be no name collision?](#unique)
+
+# <a name="separate"></a> `NameMapper` as the separate tool
+
+Among the tools that are part of the obfuscator the `NameMapper` is the smallest and has the least responsibilities. It's a simple input-output command line tool that takes one json and returnes almost identical json, with just one field added to it's schema.
+
+It's build as the separate command line tool, with all the infrastructure that comes with it, so that the logic determining what is the renaming mode and what symbols are being renamed and how is kept in one place. It makes it way easier to ensure that the particular symbol will not be renamed (it's enough to remove it from the the `Renames.json`). It also makes the de-obfuscation a trivial task (it's enough to provide the `Renames.json` with values from `originalName` and `obfuscatedName` reversed). The renaming modes can be defined and added to the command-line interface in a dedicated place, which avoids clutter in the command-line iterfaces of the other tools.
+
+# <a name="type"></a> Why are symbols types necessary for the NameMapper to generate name?
+
+Different symbols have different sets of characters that are permitted to be used in them. So to generate the obfuscated name for operator one has to use characters that are not allowed in the function name. That's why `NameMapper` requires separate symbol type.
+
+# <a name="symbols"></a> Characters for obfuscated names
+
+The symbols used to generate obfuscated names are taken from the [Swift language grammar reference](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/zzSummaryOfTheGrammar.html#//apple_ref/doc/uid/TP40014097-CH38-ID458). For example, the [structure of the identifier](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/identifier) explicitely lists what characters might be used. In the other place, the [structure of the type](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/zzSummaryOfTheGrammar.html#//apple_ref/doc/uid/TP40014097-CH38-ID482) shows that the type name is an identifier, and therefore all the characters used for identifier can be used for type name.
+
+Similar analysis is used for all supported constructs, like function names or operators.
+
+# <a name="unique"></a> How `NameMapper` prevents name collisions?
+
+`NameMapper` caches what names were already generated and used for renaming. It tries to generate new name in case of name collision. The process is repeated up to 100 times. If after 100 tries this there's still name collision, the `NameMapper` logs error to the output and exits.
+
+There's no name collision preventing at the time, however, that ensures that the generated name is different than some already existing original symbol name. The feature is in the future plans.
+
+
-- 
2.17.1 (Apple Git-112)


From 4873e1e9ca544052399b21cd5efdd2713e1110ec Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Fri, 16 Feb 2018 11:17:54 +0100
Subject: [PATCH 067/138] important topics for renamer

Reviewers: jerzy.kleszcz, krzysztof.siejkowski

Reviewed By: krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2835
---
 Documentation/Renamer-ImportantTopics.md | 34 ++++++++++++++++++++++++
 1 file changed, 34 insertions(+)
 create mode 100644 Documentation/Renamer-ImportantTopics.md

diff --git a/Documentation/Renamer-ImportantTopics.md b/Documentation/Renamer-ImportantTopics.md
new file mode 100644
index 00000000000..8a6ce0f1723
--- /dev/null
+++ b/Documentation/Renamer-ImportantTopics.md
@@ -0,0 +1,34 @@
+# Important topics for Renamer
+
+The goal of this document is to be a bag of important ideas, decisions, concepts and discoveries in the `Renamer` project. Currently these include:
+
+1. [How does renaming process work?](#renaming)
+2. [Where does `Renamer` take new (obfuscated) names from?](#names)
+3. [Do you support layout files like `.xib` and `.storyboard`?](#layouts)
+4. [Is it possible to exclude parts of the code from being obfuscated?](#exclude)
+5. [How can I verify if the code was renamed correctly?](#verification)
+
+# <a name="renaming"></a> How does it work?
+
+???
+
+# <a name="names"></a> Where are new names coming from?
+
+The obfuscated names for symbols come from [`NameMapper` tool](./NameMapper-ImportantTopics.md) which output is `Renames.json`. This file contains all information needed to perform renaming such as `originalName` and `obfuscatedName` for each symbol and is later consumed by `Renamer` tool which performs actual renaming.
+
+# <a name="layouts"></a> Are layout files renamed?
+
+Yes, layout files are being renamed.
+
+First [`FileExtractor` tool](./ImportantTopics.md) extracts information about all layout (`.xib` and `.storyboard`) files that are present in the project.
+Then when `Renamer` is renaming symbols, it also stores each successfully renamed symbol in a set. After that it iterates over gathered layout files and renames them one by one. Both `.xib` and `.storyboard` are `.xml` files. `Renamer` parses them using `libxml` and then traverses the tree looking for types and functions that can be renamed. It decides if a found name should be renamed by checking if such symbol was renamed during symbol renaming. Such check is possible because it has access to the set containing all renamed symbols. After the file is finally processed `Renamer` saves the result in obfuscated project directory.
+
+Currently only class names are being obfuscated. Support for outlets and actions is in the future plans.
+
+# <a name="exclude"></a> Excluding parts of code from obfuscation
+
+It's not possible currently. The feature is in the future plans.
+
+# <a name="verification"></a> Verify if the code was correctly renamed
+
+???
-- 
2.17.1 (Apple Git-112)


From 1b142cc882142a600d13e425bafcd53820746b35 Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Fri, 16 Feb 2018 12:50:07 +0100
Subject: [PATCH 068/138] Added getting started docs

Reviewers: michal.zielinski, krzysztof.siejkowski

Reviewed By: michal.zielinski, krzysztof.siejkowski

Subscribers: michal.zielinski, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2834
---
 Documentation/GettingStarted.md | 143 ++++++++++++++++++++++++++++++++
 README.md                       |   6 +-
 2 files changed, 146 insertions(+), 3 deletions(-)
 create mode 100644 Documentation/GettingStarted.md

diff --git a/Documentation/GettingStarted.md b/Documentation/GettingStarted.md
new file mode 100644
index 00000000000..f511e7cd2e0
--- /dev/null
+++ b/Documentation/GettingStarted.md
@@ -0,0 +1,143 @@
+# Getting Started Guide
+
+Use this guide to get started with SymbolExtractorAndRenamer development. You can find answers to following questions:
+
+1. [What the purpose of SymbolExtractorAndRenamer?](#purpose)
+2. [What are the main components of SymbolExtractorAndRenamer](#components)
+3. [How to build and run SymbolExtractorAndRenamer tools using Xcode](#buid_and_run)
+4. [Where to find particular functionalities?](#functionalities)
+5. [How to add new files and components?](#adding)
+
+# <a name="purpose"></a> Purpose
+
+SymbolExtractorAndRenamer is the main component of the Obfuscator infrastructure. It performs the symbols renaming of files provided in Xcode project using the `files.json` produced by FileExtractor. It copies the original project and performs the renaming on its symbols. The basic steps of the process are:
+
+1. Performing semantic analysis of files listed in `files.json` and collecting the symbols for renaming. Those symbols are saved to `symbols.json`.
+2. Generating the proposed renames for symbols and saving them to `renames.json`
+3. Creating the copy of the project that is being obfuscated and performing the symbol renaming on the project copy.
+
+# <a name="components"></a> Components
+
+The repo is the fork of Swift Compiler's branch: [`swift-4.0-branch`](https://github.com/apple/swift/tree/swift-4.0-branch). To allow supporting other Swift versions in future, the SymbolExtractorAndRenamer repository consists of additive-only changes to Swift Compiler.
+
+The main components of SymbolExtractorAndRenamer are tools and library organized in similar manner as existing Swift Compiler tools and libraries:
+
+SymbolExtractorAndRenamer tools:
+
+* `obfuscator-symbol-extractor` collects the symbols that needs to be renamed.
+* `obfuscator-name-mapper` generates the proposed renames for symbols.
+* `obfuscator-renamer` performs the renaming.
+
+These tools are being build to executables that are being executed by ObfuscatorTool. The executions perform the three basic steps of SymbolExtractorAndRenamer.
+
+Under the hood, the tool components serve mainly as command line arguments parsers. All main logic of SymbolExtractorAndRenamer is placed in the library shared by above tools. The library is named `swiftObfuscation` and it serves tasks such as:
+
+  * performing semantic analysis using `swiftFrontend` tools and creating AST tree.
+  * extracting the symbols from the AST tree.
+  * generating renames.
+  * performing the renaming.
+
+# <a name="buid_and_run"></a> Building and Running Using Xcode
+
+To build each SymbolExtractorAndRenamer tool:
+
+1. Perform the steps in _Build notes for developers_ in [README](../README.md)
+2. Open the generated Xcode project:
+`open build/Xcode-RelWithDebInfoAssert+swift-DebugAssert/swift-macosx-x86_64/Swift.xcodeproj`
+3. Add scheme for each SymbolExtractorAndRenamer target (`obfuscator-symbol-extractor`, `obfuscator-name-mapper`,  `obfuscator-renamer`,  `swiftObfuscation`) by selecting `Product > Scheme > New Scheme...` and choosing one of the above targets from the long dropdown list.
+4. Build each Obfuscator tool and library by choosing its scheme from list in `Product > Scheme` and selecting `Product > Build`.
+
+To run each SymbolExtractorAndRenamer tool, you can either:
+
+a) call its executable from command line:
+```bash
+$ obfuscator-symbol-extractor -filesjson <path-to-input-files-json> -symbolsjson <path-to-output-symbols-json>
+```
+```bash
+$ obfuscator-name-mapper -symbolsjson <path-to-input-symbols-file> -renamesjson <path-to-output-renames-file>
+```
+```bash
+$ obfuscator-renamer -filesjson <path-to-input-files-json-file> -renamesjson <path-to-input-renames-json-file> -obfuscatedproject <path-to-directory-for-obfuscated-project>
+```
+
+b) or execute it using Xcode scheme. You need to provide scheme executable arguments by selecting `Product > Scheme > Edit Scheme... > Run > Arguments` and tapping `+` under `Arguments Passed On Launch`.
+
+Executable arguments and data formats are described in [README](../README.md).
+
+# <a name="functionalities"></a> Source files overview
+When modifying or adding functionalities refer to this overview of source files in each SymbolExtractorAndRenamer tool/library component.
+
+## `obfuscator-symbol-extractor`
+`obfuscator-symbol-extractor` sources can be found in `swift/tools/obfuscator-symbol-extractor/`:
+
+* `obfuscator-symbol-extractor.cpp` parses the command line arguments and use `swiftObfuscation` library to parse `files.json` and extract symbols meant to be renamed from the files listed in `files.json`. The symbols are saved to `symbols.json`
+* `CMakeLists.txt` cmake build file
+
+## `obfuscator-name-mapper`
+`obfuscator-name-mapper` sources can be found in `swift/tools/obfuscator-name-mapper/`:
+
+* `obfuscator-name-mapper.cpp` parses the command line arguments and use `swiftObfuscation` library to parse `symbols.json` and generate mapping of original symbol names to proposed renames and save it to `renames.json`.
+* `CMakeLists.txt` cmake build file
+
+## `obfuscator-renamer`
+`obfuscator-renamer` sources can be found in `swift/tools/obfuscator-renamer/`:
+
+* `obfuscator-renamer.cpp` parses the command line arguments and use `swiftObfuscation` library to parse `renames.json` and perform actual renaming.
+* `CMakeLists.txt` cmake build file
+
+## `swiftObfuscation`
+`swiftObfuscation` header files can be found in `swift/include/swift/Obfuscation/`, its implementations are in:  `swift/lib/Obfuscation/`:
+
+* `CompilerInfrastructure.cpp` handles setting up the compiler with `CompilerInvocationConfiguration` and invoking the semantic analysis of .swift files
+* `DataStructures.cpp` defines the data structures used in `swiftObfuscation` together with its operator functions and json serialization and deserialization.
+* `DeclarationParser.cpp` takes the `Decl` and routes it to be parsed by one of the "specific" declaration parsers (`NominalTypeDeclarationParser`, `VariableDeclarationParser`, `OperatorParser`, `FunctionDeclarationParser`, `ParameterDeclarationParser`)
+* `DeclarationParsingUtils.cpp` defines utility functions used by declaration parsers.
+* `ExpressionParser.cpp` parses the `Expr` (`swiftAST` object representing expression) to `Symbol` object.
+* `FileIO.cpp` defines the functions for json files serialization / deserialization.
+* `FunctionDeclarationParser.cpp` parses the `FuncDecl` (`swiftAST` object representing function declaration) to `Symbol` object.
+* `LayoutRenamer.cpp` performs renaming of .xib and .storyboard files.
+* `NameMapping.cpp` uses symbols name generators to generate the mapping: original symbol name to proposed rename.
+* `NominalTypeDeclarationParser.cpp` parses `NominalTypeDecl` (`swiftAST` object representing class, struct, protocol or enum declaration) to `Symbol` object.
+* `OperatorParser.cpp` parses `OperatorDecl` (`swiftAST` object representing operator declaration) to `Symbol` object
+* `ParameterDeclarationParser.cpp` parses `ParamDecl` (`swiftAST` object representing function parameter declaration) to `Symbol` object
+* `Renaming.cpp` creates the copy of the project being obfuscated and performs the renaming defined in `RenamesJson` object.
+* `SourceFileWalker.cpp` identifies the symbols in the `SourceFile` (`swiftAST` object representing the .swift source file) using `SourceEntityWalker` callbacks and collects them to the set of `SymbolWithRange` objects.
+* `SymbolExtracting.cpp` extracts symbols from .swift files included in `FilesJson` object collects them to `SymbolsJson` object.
+* `Utils.cpp` defines utility functions.
+* `VariableDeclarationParser.cpp` parses the `VarDecl` (`swiftAST` object representing `var` or `let` declaration) to `Symbol` object.
+
+`swiftObfuscation` cmake build file can be found in `swift/lib/Obfuscation/CMakeLists.txt`.
+
+## Unit tests
+Unit test files can be found in `swift/unittests/SwiftObfuscation/` together with its `CMakeLists.txt` build file.
+
+SymbolExtractorAndRenamer unit test are organized in similar manner to other SymbolExtractorAndRenamer tools. To run the tests just build and run `SwiftObfuscationTests` target, as described in [Building and Running Using Xcode](#buid_and_run) section.
+
+## Integration tests
+Ingration tests can be found in `swift/test/Obfuscation`.
+
+Use the following command to run the tests:
+```
+swift/utils/run-test swift/test/Obfuscation \
+--build-dir build/Xcode-RelWithDebInfoAssert+swift-DebugAssert/swift-macosx-x86_64 \
+--lit build/Xcode-RelWithDebInfoAssert+swift-DebugAssert/llvm-macosx-x86_64/Debug/bin/llvm-lit
+```
+
+For details refer to [IntegrationTesting](IntegrationTesting.md).
+
+# <a name="adding"></a> Adding new files and components
+
+## Adding new files to existing SymbolExtractorAndRenamer library
+
+Place `.h` files in `swift/include/swift/<library_folder>`.
+
+Place `.cpp` files in `swift/lib/<library_folder>`.
+When adding `.cpp` file you need to include it in cmake build file (`CMakeLists.txt`) of this library: `swift/lib/<library_folder>/CMakeLists.txt`
+
+## Including libraries from Swift Compiler
+
+To make use of some Swift Compiler library (e.g. `swiftObfuscation` library) you need to include its header file in your source file using `#include` and add the library name in your `CMakeLists.txt` file under `LINK_LIBRARIES`. Please refer to existing `CMakeLists.txt` and follow the Swift Compiler guidelines.
+
+## Creating new SymbolExtractorAndRenamer tools
+
+To create new Swift Compiler tool create the directory in `swift/tools/` and follow the structure of existing tools, e.g. `obfuscator-symbol-extactor`. You need to create proper `CMakeLists.txt` build file starting with `add_swift_host_tool(<tool-name>` and include all the tool's dependecies and  `.cpp` files of the tool.
diff --git a/README.md b/README.md
index a71576e3e7b..456fc46f1cd 100644
--- a/README.md
+++ b/README.md
@@ -161,10 +161,10 @@ The input data formats are `Files.json` and `Renames.json` and are described in
    `/bin/bash Scripts/git_remotes.sh`  
    Script takes the parameter defining which version of Swift will be used as the basis of the changes to the compiler.
 
-5. Build the Swift compiler in the Xcode-friendly way.  
+5. Build the Swift compiler in the Xcode-friendly way. A build can take multiple hours. Build artifacts require ~20GB of free disk space.
    `swift/utils/build-script --clean --xcode --release-debuginfo --debug-swift`
 
-6. Build the Swift compiler using ninja with support for iOS, tvOS and watchOS
+6. Build the Swift compiler using ninja with support for iOS, tvOS and watchOS. A build can take multiple hours. Build artifacts require ~20GB of free disk space.
    `swift/utils/build-script --ios --tvos --watchos --release-debuginfo --debug-swift`
 
 7. Copy the generated libraries from ninja build to Xcode build
@@ -197,7 +197,7 @@ TBA
 
 In the alphabetical order:
 
-* [Jerzy Kleszcz](mailto:jerzy.kleszcz@polidea.com)
+* [Jerzy Kleszcz](jerzy.kleszcz@polidea.com)
 * [Krzysztof Siejkowski](krzysztof.siejkowski@polidea.com)
 * [Jakub Sowa](jakub.sowa@polidea.com)
 * [Michał Zieliński](michal.zielinski@polidea.com)
-- 
2.17.1 (Apple Git-112)


From 62584d8a9784d07839cb62e07cc1c1390ea9c3e6 Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Fri, 16 Feb 2018 13:23:19 +0100
Subject: [PATCH 069/138] layout files tests

Summary: unsupported layout features

Reviewers: krzysztof.siejkowski, jerzy.kleszcz

Reviewed By: krzysztof.siejkowski, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2837
---
 .../Expected/LayoutStoryboard.storyboard      | 34 ++++++++++++++++++
 .../Expected/LayoutStoryboard.swift           |  3 ++
 .../LayoutStoryboard.storyboard               | 34 ++++++++++++++++++
 .../LayoutStoryboard/LayoutStoryboard.swift   |  4 +++
 .../LayoutXib/Expected/LayoutXib.swift        |  2 ++
 .../LayoutXib/Expected/LayoutXib.xib          | 19 ++++++++++
 .../FullProcess/LayoutXib/LayoutXib.swift     |  3 ++
 .../FullProcess/LayoutXib/LayoutXib.xib       | 19 ++++++++++
 .../FullProcess/Selectors/Selectors.swift     |  2 +-
 .../Expected/UnsupportedLayout.storyboard     | 35 +++++++++++++++++++
 .../Expected/UnsupportedLayout.swift          | 12 +++++++
 .../UnsupportedLayout.storyboard              | 35 +++++++++++++++++++
 .../UnsupportedLayout/UnsupportedLayout.swift | 12 +++++++
 swift/test/lit.cfg                            | 30 ++++++++++++++++
 14 files changed, 243 insertions(+), 1 deletion(-)
 create mode 100644 swift/test/Obfuscation/FullProcess/LayoutStoryboard/Expected/LayoutStoryboard.storyboard
 create mode 100644 swift/test/Obfuscation/FullProcess/LayoutStoryboard/Expected/LayoutStoryboard.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/LayoutStoryboard/LayoutStoryboard.storyboard
 create mode 100644 swift/test/Obfuscation/FullProcess/LayoutStoryboard/LayoutStoryboard.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/LayoutXib/Expected/LayoutXib.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/LayoutXib/Expected/LayoutXib.xib
 create mode 100644 swift/test/Obfuscation/FullProcess/LayoutXib/LayoutXib.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/LayoutXib/LayoutXib.xib
 create mode 100644 swift/test/Obfuscation/FullProcess/UnsupportedLayout/Expected/UnsupportedLayout.storyboard
 create mode 100644 swift/test/Obfuscation/FullProcess/UnsupportedLayout/Expected/UnsupportedLayout.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/UnsupportedLayout/UnsupportedLayout.storyboard
 create mode 100644 swift/test/Obfuscation/FullProcess/UnsupportedLayout/UnsupportedLayout.swift

diff --git a/swift/test/Obfuscation/FullProcess/LayoutStoryboard/Expected/LayoutStoryboard.storyboard b/swift/test/Obfuscation/FullProcess/LayoutStoryboard/Expected/LayoutStoryboard.storyboard
new file mode 100644
index 00000000000..1a680913d27
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/LayoutStoryboard/Expected/LayoutStoryboard.storyboard
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<document type="com.apple.InterfaceBuilder3.Cocoa.Storyboard.XIB" version="3.0" toolsVersion="11134" systemVersion="15F34" targetRuntime="MacOSX.Cocoa" propertyAccessControl="none" useAutolayout="YES" initialViewController="B8D-0N-5wS">
+    <dependencies>
+        <plugIn identifier="com.apple.InterfaceBuilder.CocoaPlugin" version="11134"/>
+    </dependencies>
+    <scenes>
+        <!--Application-->
+        <scene sceneID="JPo-4y-FX3">
+            <objects>
+                <customObject id="Voe-Tx-rLC" customClass="T1_AppDelegate" customModuleProvider="target"/>
+                <customObject id="YLy-65-1bz" customClass="NSFontManager"/>
+                <customObject id="Ady-hI-5gd" userLabel="First Responder" customClass="NSResponder" sceneMemberID="firstResponder"/>
+            </objects>
+            <point key="canvasLocation" x="75" y="0.0"/>
+        </scene>
+        
+        <!--View Controller-->
+        <scene sceneID="hIz-AP-VOD">
+            <objects>
+                <viewController id="XfG-lQ-9wD" customClass="T1_ViewController" customModuleProvider="target" sceneMemberID="viewController">
+                    <view key="view" wantsLayer="YES" id="m2S-Jp-Qdl">
+                        <rect key="frame" x="0.0" y="0.0" width="480" height="270"/>
+                        <autoresizingMask key="autoresizingMask"/>
+                    </view>
+                </viewController>
+                <customObject id="rPt-NT-nkU" userLabel="First Responder" customClass="NSResponder" sceneMemberID="firstResponder"/>
+            </objects>
+            <point key="canvasLocation" x="75" y="655"/>
+        </scene>
+    </scenes>
+</document>
+
+
+
diff --git a/swift/test/Obfuscation/FullProcess/LayoutStoryboard/Expected/LayoutStoryboard.swift b/swift/test/Obfuscation/FullProcess/LayoutStoryboard/Expected/LayoutStoryboard.swift
new file mode 100644
index 00000000000..8f4baeb60fd
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/LayoutStoryboard/Expected/LayoutStoryboard.swift
@@ -0,0 +1,3 @@
+
+class T1_AppDelegate {}
+class T1_ViewController {}
diff --git a/swift/test/Obfuscation/FullProcess/LayoutStoryboard/LayoutStoryboard.storyboard b/swift/test/Obfuscation/FullProcess/LayoutStoryboard/LayoutStoryboard.storyboard
new file mode 100644
index 00000000000..7251ccf651c
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/LayoutStoryboard/LayoutStoryboard.storyboard
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<document type="com.apple.InterfaceBuilder3.Cocoa.Storyboard.XIB" version="3.0" toolsVersion="11134" systemVersion="15F34" targetRuntime="MacOSX.Cocoa" propertyAccessControl="none" useAutolayout="YES" initialViewController="B8D-0N-5wS">
+    <dependencies>
+        <plugIn identifier="com.apple.InterfaceBuilder.CocoaPlugin" version="11134"/>
+    </dependencies>
+    <scenes>
+        <!--Application-->
+        <scene sceneID="JPo-4y-FX3">
+            <objects>
+                <customObject id="Voe-Tx-rLC" customClass="AppDelegate" customModuleProvider="target"/>
+                <customObject id="YLy-65-1bz" customClass="NSFontManager"/>
+                <customObject id="Ady-hI-5gd" userLabel="First Responder" customClass="NSResponder" sceneMemberID="firstResponder"/>
+            </objects>
+            <point key="canvasLocation" x="75" y="0.0"/>
+        </scene>
+        
+        <!--View Controller-->
+        <scene sceneID="hIz-AP-VOD">
+            <objects>
+                <viewController id="XfG-lQ-9wD" customClass="ViewController" customModuleProvider="target" sceneMemberID="viewController">
+                    <view key="view" wantsLayer="YES" id="m2S-Jp-Qdl">
+                        <rect key="frame" x="0.0" y="0.0" width="480" height="270"/>
+                        <autoresizingMask key="autoresizingMask"/>
+                    </view>
+                </viewController>
+                <customObject id="rPt-NT-nkU" userLabel="First Responder" customClass="NSResponder" sceneMemberID="firstResponder"/>
+            </objects>
+            <point key="canvasLocation" x="75" y="655"/>
+        </scene>
+    </scenes>
+</document>
+
+
+
diff --git a/swift/test/Obfuscation/FullProcess/LayoutStoryboard/LayoutStoryboard.swift b/swift/test/Obfuscation/FullProcess/LayoutStoryboard/LayoutStoryboard.swift
new file mode 100644
index 00000000000..4c8dc214022
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/LayoutStoryboard/LayoutStoryboard.swift
@@ -0,0 +1,4 @@
+//RUN: %target-prepare-obfuscation-with-storyboard "LayoutStoryboard" %target-run-full-obfuscation
+
+class AppDelegate {}
+class ViewController {}
diff --git a/swift/test/Obfuscation/FullProcess/LayoutXib/Expected/LayoutXib.swift b/swift/test/Obfuscation/FullProcess/LayoutXib/Expected/LayoutXib.swift
new file mode 100644
index 00000000000..6244f42d23a
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/LayoutXib/Expected/LayoutXib.swift
@@ -0,0 +1,2 @@
+
+class T1_CustomViewController {}
diff --git a/swift/test/Obfuscation/FullProcess/LayoutXib/Expected/LayoutXib.xib b/swift/test/Obfuscation/FullProcess/LayoutXib/Expected/LayoutXib.xib
new file mode 100644
index 00000000000..077d7a00a25
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/LayoutXib/Expected/LayoutXib.xib
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<document type="com.apple.InterfaceBuilder3.Cocoa.XIB" version="3.0" toolsVersion="11134" systemVersion="15F34" targetRuntime="MacOSX.Cocoa" propertyAccessControl="none" useAutolayout="YES" customObjectInstantitationMethod="direct">
+    <dependencies>
+        <plugIn identifier="com.apple.InterfaceBuilder.CocoaPlugin" version="11134"/>
+    </dependencies>
+    <objects>
+        <customObject id="-2" userLabel="File's Owner" customClass="T1_CustomViewController" customModuleProvider="target">
+            <connections>
+                <outlet property="view" destination="Hz6-mo-xeY" id="0bl-1N-x8E"/>
+            </connections>
+        </customObject>
+        <customObject id="-1" userLabel="First Responder" customClass="FirstResponder"/>
+        <customObject id="-3" userLabel="Application" customClass="NSObject"/>
+        <customView id="Hz6-mo-xeY">
+            <rect key="frame" x="0.0" y="0.0" width="480" height="272"/>
+            <autoresizingMask key="autoresizingMask" flexibleMaxX="YES" flexibleMinY="YES"/>
+        </customView>
+    </objects>
+</document>
diff --git a/swift/test/Obfuscation/FullProcess/LayoutXib/LayoutXib.swift b/swift/test/Obfuscation/FullProcess/LayoutXib/LayoutXib.swift
new file mode 100644
index 00000000000..e7759c70039
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/LayoutXib/LayoutXib.swift
@@ -0,0 +1,3 @@
+//RUN: %target-prepare-obfuscation-with-xib "LayoutXib" %target-run-full-obfuscation
+
+class CustomViewController {}
diff --git a/swift/test/Obfuscation/FullProcess/LayoutXib/LayoutXib.xib b/swift/test/Obfuscation/FullProcess/LayoutXib/LayoutXib.xib
new file mode 100644
index 00000000000..c2db67a1ff9
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/LayoutXib/LayoutXib.xib
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<document type="com.apple.InterfaceBuilder3.Cocoa.XIB" version="3.0" toolsVersion="11134" systemVersion="15F34" targetRuntime="MacOSX.Cocoa" propertyAccessControl="none" useAutolayout="YES" customObjectInstantitationMethod="direct">
+    <dependencies>
+        <plugIn identifier="com.apple.InterfaceBuilder.CocoaPlugin" version="11134"/>
+    </dependencies>
+    <objects>
+        <customObject id="-2" userLabel="File's Owner" customClass="CustomViewController" customModuleProvider="target">
+            <connections>
+                <outlet property="view" destination="Hz6-mo-xeY" id="0bl-1N-x8E"/>
+            </connections>
+        </customObject>
+        <customObject id="-1" userLabel="First Responder" customClass="FirstResponder"/>
+        <customObject id="-3" userLabel="Application" customClass="NSObject"/>
+        <customView id="Hz6-mo-xeY">
+            <rect key="frame" x="0.0" y="0.0" width="480" height="272"/>
+            <autoresizingMask key="autoresizingMask" flexibleMaxX="YES" flexibleMinY="YES"/>
+        </customView>
+    </objects>
+</document>
diff --git a/swift/test/Obfuscation/FullProcess/Selectors/Selectors.swift b/swift/test/Obfuscation/FullProcess/Selectors/Selectors.swift
index 5a9334a1e37..1ce948080ae 100644
--- a/swift/test/Obfuscation/FullProcess/Selectors/Selectors.swift
+++ b/swift/test/Obfuscation/FullProcess/Selectors/Selectors.swift
@@ -1,4 +1,4 @@
-//RUN: %target-prepare-obfuscation-for-file "FailingSelectors" %target-run-full-obfuscation
+//RUN: %target-prepare-obfuscation-for-file "Selectors" %target-run-full-obfuscation
 
 import Foundation
 
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedLayout/Expected/UnsupportedLayout.storyboard b/swift/test/Obfuscation/FullProcess/UnsupportedLayout/Expected/UnsupportedLayout.storyboard
new file mode 100644
index 00000000000..b8154349597
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedLayout/Expected/UnsupportedLayout.storyboard
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="10117" systemVersion="15G31" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" initialViewController="0Ct-JR-NLr">
+    <dependencies>
+        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="10085"/>
+        <capability name="Constraints to layout margins" minToolsVersion="6.0"/>
+    </dependencies>
+    <scenes>
+        <!--Grind Size View Controller-->
+        <scene sceneID="PFL-L9-gju">
+            <objects>
+                <viewController storyboardIdentifier="GrindSize" id="0Ct-JR-NLr" customClass="T1_ViewController" customModule="Dropnote" customModuleProvider="target" sceneMemberID="viewController">
+                    <view key="view" contentMode="scaleToFill" id="Rup-1M-OlM">
+                        <rect key="frame" x="0.0" y="0.0" width="600" height="600"/>
+                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
+                        <subviews>
+                            
+                            <button opaque="NO" contentMode="scaleToFill" contentHorizontalAlignment="center" contentVerticalAlignment="center" buttonType="roundedRect" lineBreakMode="middleTruncation" translatesAutoresizingMaskIntoConstraints="NO" id="meq-CM-Km8">
+                                <rect key="frame" x="175" y="218" width="250" height="30"/>
+                                <state key="normal" title="Tap here to provider numerical value"/>
+                                <connections>
+                                    <action selector="NF1_switchInputRepresentation:" destination="0Ct-JR-NLr" eventType="touchUpInside" id="s2s-A5-aG6"/>
+                                </connections>
+                            </button>
+                            
+                        </subviews>
+                        
+                    </view>
+                    <connections>
+                        <outlet property="V1_informativeLabel" destination="qaH-It-zsV" id="ZSk-it-QCA"/>
+                    </connections>
+                </viewController>
+            </objects>
+        </scene>
+    </scenes>
+</document>
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedLayout/Expected/UnsupportedLayout.swift b/swift/test/Obfuscation/FullProcess/UnsupportedLayout/Expected/UnsupportedLayout.swift
new file mode 100644
index 00000000000..078f57e571e
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedLayout/Expected/UnsupportedLayout.swift
@@ -0,0 +1,12 @@
+
+import AppKit
+
+class T1_ViewController {
+  
+  @IBOutlet weak var V1_informativeLabel: UIButton!
+
+  @IBAction func NF1_switchInputRepresentation(_ sender: UIButton) {
+  }
+  
+}
+
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedLayout/UnsupportedLayout.storyboard b/swift/test/Obfuscation/FullProcess/UnsupportedLayout/UnsupportedLayout.storyboard
new file mode 100644
index 00000000000..f21d3a7d8e2
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedLayout/UnsupportedLayout.storyboard
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="10117" systemVersion="15G31" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" initialViewController="0Ct-JR-NLr">
+    <dependencies>
+        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="10085"/>
+        <capability name="Constraints to layout margins" minToolsVersion="6.0"/>
+    </dependencies>
+    <scenes>
+        <!--Grind Size View Controller-->
+        <scene sceneID="PFL-L9-gju">
+            <objects>
+                <viewController storyboardIdentifier="GrindSize" id="0Ct-JR-NLr" customClass="ViewController" customModule="Dropnote" customModuleProvider="target" sceneMemberID="viewController">
+                    <view key="view" contentMode="scaleToFill" id="Rup-1M-OlM">
+                        <rect key="frame" x="0.0" y="0.0" width="600" height="600"/>
+                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
+                        <subviews>
+                            
+                            <button opaque="NO" contentMode="scaleToFill" contentHorizontalAlignment="center" contentVerticalAlignment="center" buttonType="roundedRect" lineBreakMode="middleTruncation" translatesAutoresizingMaskIntoConstraints="NO" id="meq-CM-Km8">
+                                <rect key="frame" x="175" y="218" width="250" height="30"/>
+                                <state key="normal" title="Tap here to provider numerical value"/>
+                                <connections>
+                                    <action selector="switchInputRepresentation:" destination="0Ct-JR-NLr" eventType="touchUpInside" id="s2s-A5-aG6"/>
+                                </connections>
+                            </button>
+                            
+                        </subviews>
+                        
+                    </view>
+                    <connections>
+                        <outlet property="informativeLabel" destination="qaH-It-zsV" id="ZSk-it-QCA"/>
+                    </connections>
+                </viewController>
+            </objects>
+        </scene>
+    </scenes>
+</document>
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedLayout/UnsupportedLayout.swift b/swift/test/Obfuscation/FullProcess/UnsupportedLayout/UnsupportedLayout.swift
new file mode 100644
index 00000000000..5fd4fe82e6d
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedLayout/UnsupportedLayout.swift
@@ -0,0 +1,12 @@
+//RUN: %target-prepare-obfuscation-with-storyboard "UnsupportedLayout" %target-run-full-obfuscation
+
+import AppKit
+
+class ViewController {
+  
+  @IBOutlet weak var informativeLabel: UIButton!
+
+  @IBAction func switchInputRepresentation(_ sender: UIButton) {
+  }
+
+}
diff --git a/swift/test/lit.cfg b/swift/test/lit.cfg
index 434b98c3edc..c9e9eee3557 100644
--- a/swift/test/lit.cfg
+++ b/swift/test/lit.cfg
@@ -399,11 +399,31 @@ config.substitutions.append((
     'printf "FILE=%*s\n\n%target-run-files-json-generation\n\n%target-run-symbol-extractor\n\n%target-run-name-mapper\n\n%target-run-renamer\n\n%target-run-obfuscation-verification" 1'
 ))
 
+config.substitutions.append((
+    '%target-prepare-obfuscation-with-storyboard', 
+    'printf "FILE=%*s\n\n%target-run-files-and-storyboard-json-generation\n\n%target-run-symbol-extractor\n\n%target-run-name-mapper\n\n%target-run-renamer\n\n%target-run-obfuscation-verification\n\n%target-run-storyboard-obfuscation-verification" 1'
+))
+
+config.substitutions.append((
+    '%target-prepare-obfuscation-with-xib', 
+    'printf "FILE=%*s\n\n%target-run-files-and-xib-json-generation\n\n%target-run-symbol-extractor\n\n%target-run-name-mapper\n\n%target-run-renamer\n\n%target-run-obfuscation-verification\n\n%target-run-xib-obfuscation-verification" 1'
+))
+
 config.substitutions.append((
     '%target-run-files-json-generation', 
     'echo \\"{\\"project\\": {\\"rootPath\\": \\"%S\\", \\"projectFilePath\\": \\"testProjectFilePath\\"}, \\"module\\": {\\"name\\": \\"TestModuleName\\", \\"triple\\": \\"x86_64-apple-macosx10.13\\"}, \\"sdk\\": {\\"name\\": \\"%target-sdk-name\\", \\"path\\": \\"%sdk\\"}, \\"sourceFiles\\": [\\"%S/\$FILE.swift\\"], \\"layoutFiles\\": [], \\"explicitlyLinkedFrameworks\\": [], \\"implicitlyLinkedFrameworks\\": [], \\"frameworkSearchPaths\\": []}\\" > %t-files.json'
 ))
 
+config.substitutions.append((
+    '%target-run-files-and-storyboard-json-generation', 
+    'echo \\"{\\"project\\": {\\"rootPath\\": \\"%S\\", \\"projectFilePath\\": \\"testProjectFilePath\\"}, \\"module\\": {\\"name\\": \\"TestModuleName\\", \\"triple\\": \\"x86_64-apple-macosx10.13\\"}, \\"sdk\\": {\\"name\\": \\"%target-sdk-name\\", \\"path\\": \\"%sdk\\"}, \\"sourceFiles\\": [\\"%S/\$FILE.swift\\"], \\"layoutFiles\\": [\\"%S/\$FILE.storyboard\\"], \\"explicitlyLinkedFrameworks\\": [], \\"implicitlyLinkedFrameworks\\": [], \\"frameworkSearchPaths\\": []}\\" > %t-files.json'
+))
+
+config.substitutions.append((
+    '%target-run-files-and-xib-json-generation', 
+    'echo \\"{\\"project\\": {\\"rootPath\\": \\"%S\\", \\"projectFilePath\\": \\"testProjectFilePath\\"}, \\"module\\": {\\"name\\": \\"TestModuleName\\", \\"triple\\": \\"x86_64-apple-macosx10.13\\"}, \\"sdk\\": {\\"name\\": \\"%target-sdk-name\\", \\"path\\": \\"%sdk\\"}, \\"sourceFiles\\": [\\"%S/\$FILE.swift\\"], \\"layoutFiles\\": [\\"%S/\$FILE.xib\\"], \\"explicitlyLinkedFrameworks\\": [], \\"implicitlyLinkedFrameworks\\": [], \\"frameworkSearchPaths\\": []}\\" > %t-files.json'
+))
+
 config.substitutions.append((
     '%target-run-symbol-extractor', 
     '%obfuscator-symbol-extractor -filesjson %t-files.json -symbolsjson %t-symbols.json -printdiagnostics'
@@ -424,6 +444,16 @@ config.substitutions.append((
     'diff -w -B %T/Expected/\$FILE.swift %T/\$FILE.swift'
 ))
 
+config.substitutions.append((
+    '%target-run-storyboard-obfuscation-verification', 
+    'diff -w -B %T/Expected/\$FILE.storyboard %T/\$FILE.storyboard'
+))
+
+config.substitutions.append((
+    '%target-run-xib-obfuscation-verification', 
+    'diff -w -B %T/Expected/\$FILE.xib %T/\$FILE.xib'
+))
+
 config.substitutions.append(('%obfuscator-symbol-extractor', config.obfuscator_symbol_extractor))
 config.substitutions.append(('%obfuscator-name-mapper', config.obfuscator_name_mapper))
 config.substitutions.append(('%obfuscator-renamer', config.obfuscator_renamer))
-- 
2.17.1 (Apple Git-112)


From 0387a43f426f5fc1e3124f563ba68ced5f765628 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Fri, 16 Feb 2018 13:55:39 +0100
Subject: [PATCH 070/138] Fix for failing tests

---
 .../FullProcess/UnsupportedLayout/UnsupportedLayout.swift       | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedLayout/UnsupportedLayout.swift b/swift/test/Obfuscation/FullProcess/UnsupportedLayout/UnsupportedLayout.swift
index 5fd4fe82e6d..a554347afd7 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedLayout/UnsupportedLayout.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedLayout/UnsupportedLayout.swift
@@ -1,3 +1,5 @@
+//XFAIL: *
+
 //RUN: %target-prepare-obfuscation-with-storyboard "UnsupportedLayout" %target-run-full-obfuscation
 
 import AppKit
-- 
2.17.1 (Apple Git-112)


From c2bc4f772474bc79a4341f3c70035feec48d54bc Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Mon, 19 Feb 2018 17:23:10 +0100
Subject: [PATCH 071/138] Important topics for SymbolExtractor

Reviewers: jerzy.kleszcz, michal.zielinski

Reviewed By: jerzy.kleszcz, michal.zielinski

Subscribers: michal.zielinski, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2838
---
 .../SymbolExtractor-ImportantTopics.md        | 112 ++++++++++++++++++
 1 file changed, 112 insertions(+)
 create mode 100644 Documentation/SymbolExtractor-ImportantTopics.md

diff --git a/Documentation/SymbolExtractor-ImportantTopics.md b/Documentation/SymbolExtractor-ImportantTopics.md
new file mode 100644
index 00000000000..81e39b2d80a
--- /dev/null
+++ b/Documentation/SymbolExtractor-ImportantTopics.md
@@ -0,0 +1,112 @@
+# Important topics for SymbolExtractor
+
+The goal of this document is to be a bag of important ideas, decisions, concepts and discoveries in the `SymbolExtractor` project. Currently these include:
+
+1. [Why do we use Swift compiler for identifying symbols in Swift source code?](#compiler)
+2. [Why do we use the LLVM mechanism for error handling?](#errors)
+3. [What is the `CompilerInstance` and `CompilerInvocation` and how are they used?](#instance)
+4. [How the semantic analysis is performed?](#sema)
+5. [How do we work with AST that is the result of semantic analysis?](#ast)
+6. [What are symbols and what is their relation to AST?](#symbols)
+7. [Why are there multiple structures for symbols?](#multiple)
+8. [What information should identifier carry?](#identifier)
+9. [How can I add support for the new Swift construct?](#add)
+10. [What are usual problems to take into consideration when supporting a new Swift construct?](#problems)
+
+# <a name="compiler"></a> Why we forked Swift compiler?
+
+We're using Swift compiler so that we can obtain the semantic analysis of the Swift source code. The information that we look for are:
+
+* What part of language does this identifier represent?  
+  For example: Is it a type name, a function name, an operator?
+* In what context is particular identifier used?  
+  For example: Is it a function definition or function call?
+* What module does this identifier belong to?  
+  For example: Is it part of out code and we should rename it or is it part of UIKit and we should not rename it?
+* What are additional characteristics of the ideintifier?  
+  For example: If it's a function, then does it override other function? Does it fulfill a protocol requirement?
+
+All the information are required to decide whether the indentifier should be renamed and what should it be renamed to. At the same time, these are hard to obtain from a naive parsing.
+
+# <a name="errors"></a> Why do we use LLVM error handling?
+
+Swift compiler is written in a close relation to LLVM. It's using a lot of LLVM infrastructure, from the types such as `llvm::StringRef` or `llvm::ArrayRef` through the actual LLVM IR generation to the coding convenctions and test tools. In the compiler-based projects we're trying to follow the conventions and therefore adapt the LLVM way of writing C++.
+
+One of the LLVM standards it to avoid using C++ exceptions for error handling. Also, it's recommended to avoid `std::error_code`. There's a dedicated LLVM API providing the alternative, namely `llvm::Expected<>` and `llvm::ErrorOr<>` types. They're very similar to the `Result` type from many other languages.
+
+See [LLVM Programmer's Manual](https://llvm.org/docs/ProgrammersManual.html) and [LLVM Coding Standards](https://llvm.org/docs/CodingStandards.html) for more information.
+
+# <a name="instance"></a> How do we launch the compiler?
+
+We're using the Swift compiler class called `CompilerInstance` from `swiftFrontend` library to perform the part of compilation related to semantic analysis. This class keeps references to multiple singletons that are storing the compilation state and results (such as `ASTContext`). It also provides the essencial `performSema` method.
+
+The `CompilerInstance` must be set up before starting to work. The class for gathering and storing all the information required for compilation is `CompilerInvocation`. It defines what's needed for compilation and therefore was the must important element of determining which information should be extracted in `FileExtractor` and stored in `Files.json`. The most important one include:
+
+* module name, which defines which module would the compiled code be represented as belonging to,
+
+* input filenames, which are paths to the actual Swift source code files that are compiled and analysed,
+
+* framework search paths, which must include paths to look for the frameworks defining moduls that compiled files link to,
+
+* sdk path, which should contain the actual system libraries to link the app against,
+
+* target triple, which defines the architecture that we should compile against. It's used to determine which standard library and which shims for system libraries to use.
+
+
+# <a name="sema"></a> How the semantic analysis is performed?
+
+Semantic analysis is done by the `CompilerInstance` in the `performSema` method. It takes all the input source files and parses them to build the AST for the whole module. The process of AST generation ends even if there're some problems making it impossible to generate the proper AST for some parts of code; for example, if the code doesn't compile, it might cause the lack of recognision for some symbols.
+
+# <a name="ast"></a> How do we work with AST that is the result of semantic analysis?
+
+`CompilerInstace`, after the semantic analysis, gives the resulting AST in the form of `SourceFile` objects. These objects define the declaration context that represent the code in a particular Swift source file. We're parsing them one by one using the `SourceEntityWalker` class from `swiftAST` library. This class, being asked to parse `SourceFile` using `walk(SourceFile &SrcFile)` method, calls back its virtual `walkTo*` and `visit*` methods each time a symbol is encountered. By providing our own implementations of these methods we can control what to do when a symbol is encountered.
+
+The basic objects to look for are `Decl` subclasses obtained in `walkToDeclPre` and `visitDeclReference` methods. Sample declarations include: `FuncDecl` (function declaration), `NominalTypeDecl` (declaration of type), `OperatorDecl` (operator declaration). Each one of these is then parsed by the proper declaration parsers.
+
+# <a name="symbols"></a> What are symbols and what is their relation to AST?
+
+Symbols are structures internal to `swiftObfuscation` library designed to store all the data required to uniquely identify the particular symbol, its metadata, the place that it was encountered and the index of its occurence among all the symbols in the files. In other words, AST is the representation of the syntactic structure of source code that carries all the information. Symbol is a greatly simplified representation of a particular substring in the source code that carries just enough information to let uniquely identify it among other substrings. Therefore AST is the source of information and symbols are the derived view designed for obfuscation needs.
+
+Most AST nodes are being represented by one symbol, for example the type or function name. Some, however, might be represented by multiple symbols, such as `ParamDecl` (parameter declaration, used in the functions signatures and bodies), which results two symbols: external parameter name and internal parameter name.
+
+# <a name="multiple"></a> Why are there multiple structures for symbols?
+
+There are three structures for symbols: `IndexedSymbolWithRange`, `SymbolWithRange`, `Symbol` and `SymbolRenaming`. 
+
+The last two are the simple data structures that are serializable and deserializable and designed to just store the information that symbol carries. `Symbol` is defining the format of `Symbols.json` and `SymbolRenaming` is defining `Renames.json`.
+
+The other two are just adding additional information to the `Symbol`. 
+
+`SymbolWithRange` is adding the information about where the particular symbol was encountered in the file. It stores the location of the substring in the Swift source code. It's the basic structure that the declaration parsers are working with, because it enables them to store all the occurences of symbols.
+
+`IndexedSymbolWithRange` is adding the information about the order in which the symbols were encountered among all the source files. It enables us to write them down in the `Symbols.json` file in the same order and therefore get the same order of obfuscated name generations. It's crucial for the integration tests.
+
+# <a name="identifier"></a> What information should identifier carry?
+
+The identifier should carry just enough information to be uniquely represented among all the other symbols with the same name. The amount of information depends on the particular symbol. 
+
+For types, the name and module is enough to distinguish them among other types, because it's forbidden in Swift to have two classes with the same name on one module (nested classes are represented with their full path).
+
+For methods, however, the name and module is not enough. We also need to write the scope in which they were defined (because two methods with the same name can exist in different classes), whether they're static or instance (because two methods with the same name might exist in the same class if one is static and the other is not), their signatures (because two methods with the same name can exist in the same class if their signatures are different) and so on.
+
+Defining the proper scope of information for each symbol identifier is crucial task in the obfuscator development.
+
+# <a name="add"></a> How can I add support for the new Swift construct?
+
+If the construct is already parsed in the `SourceEntityWalker`, please visit corresponding parser, for example `DeclarationParser` or `ExpressionParser`.
+
+If the constuct is not yet parsed in `SourceEntityWalker`, please override the proper `SourceEntityWalker` virtual method and provide the new parser.
+
+# <a name="problems"></a> What are usual problems to take into consideration when supporting a new Swift construct?
+
+The non-exhaustive list of things to consider when implementing support for new constuct include:
+
+* can it be in relation to some other construct, such as the function can override other function of fulfill the protocol requirements?
+
+* can it reference or be in relation with the symbol from other module, such as property might override the SDK-derived property?
+
+* does it exist in multiple forms, such as function can be either static or instance?
+
+* can it exist in multiple places, such as type that might be used to specify the variable type, but also to parametrize the generic type?
+
+* is there a corresponding construct that must also be supported, such as the constructor that should be renamed when the type is renamed?
-- 
2.17.1 (Apple Git-112)


From af0dbe4c313d8a7d6b1b209c54b01dc30fd11023 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Tue, 20 Feb 2018 12:52:38 +0100
Subject: [PATCH 072/138] Comments from the first documentation meeting

Reviewers: jerzy.kleszcz, michal.zielinski

Reviewed By: michal.zielinski

Subscribers: jerzy.kleszcz, michal.zielinski

Differential Revision: https://phabricator.polidea.com/D2840
---
 Documentation/GettingStarted.md               |  8 ++++
 ...SwiftObfuscationLibrary-ImportantTopics.md | 30 ++++++++++++++
 Documentation/ToDescribe.md                   |  2 +
 .../swift/Obfuscation/FileIO-Template.h       |  1 -
 swift/include/swift/Obfuscation/FileIO.h      | 15 +++++--
 swift/lib/Obfuscation/FileIO.cpp              | 11 ++---
 .../obfuscator-name-mapper.cpp                | 40 +++++++++++++------
 .../obfuscator-renamer/obfuscator-renamer.cpp | 30 +++++++++-----
 .../obfuscator-symbol-extractor.cpp           | 30 ++++++++++----
 9 files changed, 129 insertions(+), 38 deletions(-)
 create mode 100644 Documentation/SwiftObfuscationLibrary-ImportantTopics.md
 create mode 100644 Documentation/ToDescribe.md

diff --git a/Documentation/GettingStarted.md b/Documentation/GettingStarted.md
index f511e7cd2e0..6ea8390958e 100644
--- a/Documentation/GettingStarted.md
+++ b/Documentation/GettingStarted.md
@@ -141,3 +141,11 @@ To make use of some Swift Compiler library (e.g. `swiftObfuscation` library) you
 ## Creating new SymbolExtractorAndRenamer tools
 
 To create new Swift Compiler tool create the directory in `swift/tools/` and follow the structure of existing tools, e.g. `obfuscator-symbol-extactor`. You need to create proper `CMakeLists.txt` build file starting with `add_swift_host_tool(<tool-name>` and include all the tool's dependecies and  `.cpp` files of the tool.
+
+## Adding new parameters to command line tool
+
+In the directory `swift/tools/<tool-name>` please find the `.cpp` file that defines the tool in question. There'll a namespace definition called `options` at the top of the file. This is the place that all the parameters are defined in. 
+
+We're using the `llvm::cl` for the parameters definition and parsing. The definition is done by creating static global variables of the type from `llvm::cl`. They do not have to be enclosed in the `options` namespace, but we're doing it by convention to increase readability. The possible types of parameters as well as the possible options for each of them are documented in the [LLVM CommandLine Library Manual](https://llvm.org/docs/CommandLine.html).
+
+The actual parsing is done in the `llvm::cl::ParseCommandLineOptions` function.
diff --git a/Documentation/SwiftObfuscationLibrary-ImportantTopics.md b/Documentation/SwiftObfuscationLibrary-ImportantTopics.md
new file mode 100644
index 00000000000..e8ae4c54db3
--- /dev/null
+++ b/Documentation/SwiftObfuscationLibrary-ImportantTopics.md
@@ -0,0 +1,30 @@
+# Important topics for Swift Obfuscation
+
+The goal of this document is to be a bag of important ideas, decisions, concepts and discoveries in the `swiftObfuscation` library. Currently these include:
+
+* [What is `swiftObfuscation` library?](#what)
+* [Why do we write the templates implementations in *-template.h files?](#templates)
+* [Why do we use llvm::yaml for json deserialization and swift::json for json serialization?](#json)
+
+# <a name="what"></a> What is `swiftObfuscation` library?
+
+The `swiftObfuscation` library is the underlying common codebase for all the compiler-based obfuscation subtools: `SymbolExtractor`, `NameMapper` and `Renamer`. It's purpose is to maximally reduce the amount of code duplicated in the command line tools and to strip them out of all the  job-performing logic, leaving them with the sole responsibility of defining and maintaining the actual command-line interface. It let's us easily share the model (including the data structures and their serialization and deserialization) and the AST parsing logic.
+
+# <a name="templates"></a> Why do we write the templates implementations in `*-template.h` files?
+
+To enable the compiler to generate the required implementations of the template methods one may use either the implicit or explicit instantiation. The implicit one means that there's no requirement on the programmer's side to specify that are the template parameters used in the program; compiler will deduce them looking and the usages. The explicit one means that the programmer writes all the possible use cases.
+
+We want to use the implicit instantiation because we want to be able to test the code in the unit test module. Testing requires instantiation of our template code with the mock types, so it's impossible to explicitly state what are the possible types for template without including the mock types in the production code. We want our production code to not know nor see them, so the only option is the implicit instantiation.
+
+To leverage the implicit instantiation the compiler must have the template methods implementation available in the header. To somehow indicate that some part of the header contains declaration and the other part contains implementation we artifically split the header into two, one with traditional `.h` extension (declaration) and the second one with `-template.h` suffix (implementation).
+
+For more context please see [this StackOverflow answer](https://stackoverflow.com/a/495056) and [further explanation](https://isocpp.org/wiki/faq/templates#templates-defn-vs-decl).
+
+# <a name="json"></a> Why do we use `llvm::yaml` for JSON deserialization and `swift::json` for JSON serialization?
+
+LLVM contains the YAML parser with the serialization and deserialization support. At the same time:
+
+> "YAML can therefore be viewed as a natural superset of JSON, offering improved human readability and a more complete information model. This is also the case in practice; every JSON file is also a valid YAML file."
+- http://yaml.org/spec/1.2/spec.html#id2759572
+
+Therefore to deserialize JSON (read JSON from file) the already existing `llvm::yaml` parser is perfectly fine. However, the serialization (write JSON to file) cannot be done with `llvm::yaml` because it prints YAML, not JSON. Thankfully, the Swift compiler community has provided the tool for JSON serialization (not deserialization) in the `swift::json` namespace. It keeps almost the same API as the LLVM YAML parser and therefore is easy to use. That's why we're using it.
diff --git a/Documentation/ToDescribe.md b/Documentation/ToDescribe.md
new file mode 100644
index 00000000000..3db0385d316
--- /dev/null
+++ b/Documentation/ToDescribe.md
@@ -0,0 +1,2 @@
+# Things to add
+
diff --git a/swift/include/swift/Obfuscation/FileIO-Template.h b/swift/include/swift/Obfuscation/FileIO-Template.h
index 0bc531f46f5..0c866079918 100644
--- a/swift/include/swift/Obfuscation/FileIO-Template.h
+++ b/swift/include/swift/Obfuscation/FileIO-Template.h
@@ -20,7 +20,6 @@ FileFactory<FileType>::getFile(std::string Path) {
   if (Error) {
       return Error;
   }
-
   return File;
 }
 
diff --git a/swift/include/swift/Obfuscation/FileIO.h b/swift/include/swift/Obfuscation/FileIO.h
index 20696ee4fd1..0f3202dace3 100644
--- a/swift/include/swift/Obfuscation/FileIO.h
+++ b/swift/include/swift/Obfuscation/FileIO.h
@@ -24,11 +24,17 @@ struct MemoryBufferProvider {
   /// \param Path - string containing path to file.
   ///
   /// \returns llvm::ErrorOr object containing either the memory buffer
-  /// or llvm::Error object with the information.
+  /// or llvm::Error object with the information. It's llvm::ErrorOr,
+  /// not llvm::Expected, because this is the error format that
+  /// the underlying API returns.
   virtual llvm::ErrorOr<std::unique_ptr<llvm::MemoryBuffer>>
   getBuffer(std::string Path) const;
 };
 
+/// Creates the file streams to write to.
+///
+/// \tparam FileType - the type of the file stream with the possibility
+/// to write to it and close it.
 template <typename FileType>
 struct FileFactory {
   virtual ~FileFactory() = default;
@@ -45,12 +51,15 @@ struct FileFactory {
   /// \param Path - string containing path to file.
   ///
   /// \returns llvm::ErrorOr object containing either the file
-  /// or llvm::Error object with error information.
+  /// or llvm::Error object with error information. It's llvm::ErrorOr,
+  /// not llvm::Expected, because this is the error format that
+  /// the underlying API returns.
   virtual llvm::ErrorOr<std::unique_ptr<FileType>> getFile(std::string Path);
 };
 
     
-/// Given path to file containig json, parses file and returns object of type T.
+/// Given path to file containing json, parses file and returns object
+/// of type T.
 ///
 /// In case of failing reading file or failing parsing json, returns Error.
 ///
diff --git a/swift/lib/Obfuscation/FileIO.cpp b/swift/lib/Obfuscation/FileIO.cpp
index 8731efbe82d..dc16d7878bd 100644
--- a/swift/lib/Obfuscation/FileIO.cpp
+++ b/swift/lib/Obfuscation/FileIO.cpp
@@ -10,19 +10,20 @@ namespace obfuscation {
 
 llvm::ErrorOr<std::unique_ptr<llvm::MemoryBuffer>>
 MemoryBufferProvider::getBuffer(std::string Path) const {
-    return llvm::MemoryBuffer::getFile(Path);
+  return llvm::MemoryBuffer::getFile(Path);
 }
 
 template<class T>
 llvm::Expected<T> parseJson(std::string PathToJson,
                             const MemoryBufferProvider &BufferProvider) {
 
-  auto Buffer = BufferProvider.getBuffer(PathToJson);
-  if (auto ErrorCode = Buffer.getError()) {
+  auto BufferOrError = BufferProvider.getBuffer(PathToJson);
+  if (auto ErrorCode = BufferOrError.getError()) {
     return stringError("Error during JSON file read", ErrorCode);
   }
-  
-  return llvm::yaml::deserialize<T>(std::move(Buffer.get())->getBuffer());
+
+  auto Buffer = std::move(BufferOrError.get());
+  return llvm::yaml::deserialize<T>(Buffer->getBuffer());
 }
 
 template
diff --git a/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp b/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
index e280839ebdb..ea605c9f7e5 100644
--- a/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
+++ b/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
@@ -27,8 +27,14 @@ NameMappingStrategy("namemappingstrategy",
                     llvm::cl::init(NameMappingStrategy::random),
                     llvm::cl::desc("Choose name mapping strategy:"),
                     llvm::cl::values(
-                      clEnumValN(NameMappingStrategy::random, "random", "Generate random unique identifiers (default)"),
-                      clEnumValN(NameMappingStrategy::deterministic, "deterministic", "Generate deterministic identifiers (useful for testing)")
+                      clEnumValN(NameMappingStrategy::random,
+                                 "random",
+                                 "Generate random unique identifiers "
+                                 "(default)"),
+                      clEnumValN(NameMappingStrategy::deterministic,
+                                 "deterministic",
+                                 "Generate deterministic identifiers "
+                                 "(useful for testing)")
                     ),
                 llvm::cl::cat(ObfuscatorNameMapper));
 }
@@ -44,43 +50,53 @@ void printRenamings(const std::vector<SymbolRenaming> &Renamings) {
 }
 
 int main(int argc, char *argv[]) {
+  // Required by LLVM to properly parse command-line options
   INITIALIZE_LLVM(argc, argv);
   llvm::cl::HideUnrelatedOptions(options::ObfuscatorNameMapper);
-  
+
+  // Defines the handler for flow-aborting errors, which lets you choose
+  // what code to return, whether to log and wheter to do any cleanup
+  // http://llvm.org/docs/ProgrammersManual.html#using-exitonerror-to-simplify-tool-code
   llvm::ExitOnError ExitOnError;
   ExitOnError.setExitCodeMapper(
     [](const llvm::Error &Err) { return 1; }
   );
+
   llvm::outs() << "Swift obfuscator name mapper tool" << '\n';
-  
+
+  // Must be called before checking the options for values
   llvm::cl::ParseCommandLineOptions(argc, argv, "obfuscator-name-mapper");
   
   if (options::SymbolsJsonPath.empty()) {
     llvm::errs() << "cannot find Symbols json file" << '\n';
     return 1;
   }
-
-  MemoryBufferProvider BufferProvider = MemoryBufferProvider();
   std::string PathToJson = options::SymbolsJsonPath;
-  auto SymbolsJsonOrError = parseJson<SymbolsJson>(PathToJson, BufferProvider);
+
+  auto SymbolsJsonOrError = parseJson<SymbolsJson>(PathToJson);
   if (auto Error = SymbolsJsonOrError.takeError()) {
     ExitOnError(std::move(Error));
   }
-  
+
+  // This is the place that the actual name generation is performed using
+  // the strategy defined by the command line option.
+  // The logic for name generation is in the swiftObfuscation library.
   NameMapping NameMapping(options::NameMappingStrategy);
   auto RenamingsOrError = NameMapping.proposeRenamings(SymbolsJsonOrError.get());
   if (auto Error = RenamingsOrError.takeError()) {
     ExitOnError(std::move(Error));
   }
   auto Renamings = RenamingsOrError.get();
-  
+
+  // Prints only to the output, not to file
   printRenamings(Renamings.Symbols);
-  
-  std::string PathToOutput = options::RenamesJsonPath;
-  FileFactory<llvm::raw_fd_ostream> Factory = FileFactory<llvm::raw_fd_ostream>();
 
+  // Writes the renaming proposals to Renames.json file. Saves at given path.
+  std::string PathToOutput = options::RenamesJsonPath;
+  FileFactory<llvm::raw_fd_ostream> Factory;
   if (auto Error = writeToPath(Renamings, PathToOutput, Factory, llvm::outs())) {
     ExitOnError(std::move(Error));
   }
+  
   return 0;
 }
diff --git a/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp b/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
index 1aa382dd781..1d721e8f14f 100644
--- a/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
+++ b/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
@@ -52,14 +52,21 @@ void printObfuscatedFiles(const FilesList &Files) {
 void anchorForGetMainExecutable() {}
 
 int main(int argc, char *argv[]) {
+  // Required by LLVM to properly parse command-line options
   INITIALIZE_LLVM(argc, argv);
   llvm::cl::HideUnrelatedOptions(options::ObfuscatorRenamer);
-  
+
+  // Defines the handler for flow-aborting errors, which lets you choose
+  // what code to return, whether to log and wheter to do any cleanup
+  // http://llvm.org/docs/ProgrammersManual.html#using-exitonerror-to-simplify-tool-code
   llvm::ExitOnError ExitOnError;
   ExitOnError.setExitCodeMapper(
     [](const llvm::Error &Err) { return 1; }
   );
+
   llvm::outs() << "Swift obfuscator renamer tool" << '\n';
+
+  // Must be called before checking the options for values
   llvm::cl::ParseCommandLineOptions(argc, argv, "obfuscator-renamer");
   
   if (options::FilesJsonPath.empty()) {
@@ -75,30 +82,33 @@ int main(int argc, char *argv[]) {
     return 1;
   }
 
-  MemoryBufferProvider BufferProvider = MemoryBufferProvider();
-  auto FilesJsonOrError =
-  parseJson<FilesJson>(options::FilesJsonPath, BufferProvider);
+  auto FilesJsonOrError = parseJson<FilesJson>(options::FilesJsonPath);
   if (auto Error = FilesJsonOrError.takeError()) {
     ExitOnError(std::move(Error));
   }
-  auto RenamesJsonOrError =
-  parseJson<RenamesJson>(options::RenamesJsonPath, BufferProvider);
+  auto RenamesJsonOrError = parseJson<RenamesJson>(options::RenamesJsonPath);
   if (auto Error = RenamesJsonOrError.takeError()) {
     ExitOnError(std::move(Error));
   }
-  
+
+  // Required for the compiler to find the path to this tool, and therefore
+  // exists only in the tools that are performing compilation (semantic analysis)
   void *MainExecutablePointer =
     reinterpret_cast<void *>(&anchorForGetMainExecutable);
   std::string MainExecutablePath =
     llvm::sys::fs::getMainExecutable(argv[0], MainExecutablePointer);
   
   llvm::raw_ostream *DiagnosticStream;
+  // Decides if and where the logs from the compiler will be printed.
+  // If llvm::raw_null_ostream is used, they're just discarded.
   if (options::PrintDiagnostics) {
     DiagnosticStream = &llvm::outs();
   } else {
     DiagnosticStream = new llvm::raw_null_ostream();
   }
-  
+
+  // This is the place that the actual renaming is performed.
+  // The logic for renaming is in the swiftObfuscation library.
   auto FilesOrError = performRenaming(MainExecutablePath,
                                       FilesJsonOrError.get(),
                                       RenamesJsonOrError.get(),
@@ -107,8 +117,10 @@ int main(int argc, char *argv[]) {
   if (auto Error = FilesOrError.takeError()) {
     ExitOnError(std::move(Error));
   }
-  
+
+  // Prints only to the output, not to file
   printObfuscatedFiles(FilesOrError.get());
+  
   return 0;
 }
 
diff --git a/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp b/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
index 58edf68966b..555ec638a09 100644
--- a/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
+++ b/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
@@ -11,7 +11,7 @@ namespace options {
   
 static llvm::cl::OptionCategory
 ObfuscatorSymbolExtractor("Obfuscator Symbol Extractor");
-  
+
 static llvm::cl::opt<std::string>
 FilesJsonPath("filesjson",
               llvm::cl::desc("Name of the file containing File Extractor data"),
@@ -48,41 +48,52 @@ void printSymbols(const std::vector<Symbol> &Symbols) {
 void anchorForGetMainExecutable() {}
 
 int main(int argc, char *argv[]) {
+  // Required by LLVM to properly parse command-line options
   INITIALIZE_LLVM(argc, argv);
   llvm::cl::HideUnrelatedOptions(options::ObfuscatorSymbolExtractor);
-  
+
+  // Defines the handler for flow-aborting errors, which lets you choose
+  // what code to return, whether to log and wheter to do any cleanup
+  // http://llvm.org/docs/ProgrammersManual.html#using-exitonerror-to-simplify-tool-code
   llvm::ExitOnError ExitOnError;
   ExitOnError.setExitCodeMapper(
     [](const llvm::Error &Err) { return 1; }
   );
+
   llvm::outs() << "Swift obfuscator symbol extractor tool" << '\n';
-  
+
+  // Must be called before checking the options for values
   llvm::cl::ParseCommandLineOptions(argc, argv, "obfuscator-symbol-extractor");
   
   if (options::FilesJsonPath.empty()) {
     llvm::errs() << "cannot find Files Extractor json file" << '\n';
     return 1;
   }
-
   std::string PathToJson = options::FilesJsonPath;
+
+  // Required for the compiler to find the path to this tool, and therefore
+  // exists only in the tools that are performing compilation (semantic analysis)
   void *MainExecutablePointer =
     reinterpret_cast<void *>(&anchorForGetMainExecutable);
   std::string MainExecutablePath =
     llvm::sys::fs::getMainExecutable(argv[0], MainExecutablePointer);
 
   auto FilesJsonOrError = parseJson<FilesJson>(PathToJson);
-
   if (auto Error = FilesJsonOrError.takeError()) {
       ExitOnError(std::move(Error));
   }
   
   llvm::raw_ostream *DiagnosticStream;
+  // Decides if and where the logs from the compiler will be printed.
+  // If llvm::raw_null_ostream is used, they're just discarded.
   if (options::PrintDiagnostics) {
     DiagnosticStream = &llvm::outs();
   } else {
     DiagnosticStream = new llvm::raw_null_ostream();
   }
-  
+
+  // This is the place that the actual symbol extraction is performed.
+  // The logic for symbol extraction is in the swiftObfuscation library.
   auto SymbolsOrError = extractSymbols(FilesJsonOrError.get(),
                                        MainExecutablePath,
                                        *DiagnosticStream);
@@ -90,20 +101,23 @@ int main(int argc, char *argv[]) {
     ExitOnError(std::move(Error));
   }
 
+  // Prints only to the output, not to file
   printSymbols(SymbolsOrError.get().Symbols);
+
   if (options::SymbolJsonPath.empty()) {
     llvm::errs() << "there is no path to write extracted symbols to" << '\n';
     return 1;
   }
-
   std::string PathToOutput = options::SymbolJsonPath;
-  FileFactory<llvm::raw_fd_ostream> Factory = FileFactory<llvm::raw_fd_ostream>();
 
+  // Writes the extracted symbols to Symbols.json file. Saves at given path.
+  FileFactory<llvm::raw_fd_ostream> Factory;
   auto WriteErrorCode = writeToPath(SymbolsOrError.get(),
                                     PathToOutput,
                                     Factory,
                                     llvm::outs());
   ExitOnError(std::move(WriteErrorCode));
+
   return 0;
 }
 
-- 
2.17.1 (Apple Git-112)


From ba5ac88107c89b423b87e649684730ceee82bea6 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Tue, 20 Feb 2018 12:49:52 +0100
Subject: [PATCH 073/138] Added important topics to the Renamer

Reviewers: jerzy.kleszcz, michal.zielinski

Reviewed By: michal.zielinski

Subscribers: jerzy.kleszcz, michal.zielinski

Differential Revision: https://phabricator.polidea.com/D2841
---
 Documentation/NameMapper-ImportantTopics.md | 15 ++++++-
 Documentation/Renamer-ImportantTopics.md    | 50 ++++++++++++++++++---
 2 files changed, 57 insertions(+), 8 deletions(-)

diff --git a/Documentation/NameMapper-ImportantTopics.md b/Documentation/NameMapper-ImportantTopics.md
index 5801ed96311..2453e37c06b 100644
--- a/Documentation/NameMapper-ImportantTopics.md
+++ b/Documentation/NameMapper-ImportantTopics.md
@@ -5,7 +5,8 @@ The goal of this document is to be a bag of important ideas, decisions, concepts
 1. [Why is NameMapper a separate command line tool?](#separate)
 2. [Why does NameMapper need to know about the symbol type to generate the obfuscated name proposal?](#type)
 3. [Where are the characters to build the obfuscated name taken from?](#symbols)
-4. [How can we snsure that the generated name will be unique and there will be no name collision?](#unique)
+4. [How can we ensure that the generated name will be unique and there will be no name collision?](#unique)
+5. [Why is there a random and deterministic name generation option available?](#deterministic)
 
 # <a name="separate"></a> `NameMapper` as the separate tool
 
@@ -29,4 +30,16 @@ Similar analysis is used for all supported constructs, like function names or op
 
 There's no name collision preventing at the time, however, that ensures that the generated name is different than some already existing original symbol name. The feature is in the future plans.
 
+# <a name="deterministic"></a> Why is there a random and deterministic name generation option available?
 
+The random generation is the default one and it leads to the obfuscation in its main purpose: to render the code unreadable and more difficult to understand for the attacker that's looking for symbols in the binary file.
+
+The deterministic name generation was created for the testing purpose as it enables to write the expected obfuscated code for the given original source file. It's done with three steps:
+
+* each symbol has a known prefix (dependant on its kind) added to the name instead of replacing its name with the random name (`NF` for functions, `T` for types etc.),
+
+* the strictly incremental index number is appended to the prefix, so that if there's more than one symbol of the same kind and the same name in the source code, the obfuscated name differs between them (for example, `NF1_foo` and `NF2_foo`),
+
+* the symbol extraction is done in the deterministic order from the top of the file to the bottom of the file, with files parsed in the alphabetical order (`a-zA-Z`).
+
+These three rules are enough to know what obfuscated name would a particular symbol get. It's enough to know it's kind, name and the first occurence.
diff --git a/Documentation/Renamer-ImportantTopics.md b/Documentation/Renamer-ImportantTopics.md
index 8a6ce0f1723..3d89254a7b4 100644
--- a/Documentation/Renamer-ImportantTopics.md
+++ b/Documentation/Renamer-ImportantTopics.md
@@ -3,14 +3,46 @@
 The goal of this document is to be a bag of important ideas, decisions, concepts and discoveries in the `Renamer` project. Currently these include:
 
 1. [How does renaming process work?](#renaming)
-2. [Where does `Renamer` take new (obfuscated) names from?](#names)
-3. [Do you support layout files like `.xib` and `.storyboard`?](#layouts)
-4. [Is it possible to exclude parts of the code from being obfuscated?](#exclude)
-5. [How can I verify if the code was renamed correctly?](#verification)
+2. [Why is `Renamer` doing the semantic analysis if it was already done once in the `SymbolExtractor`?](#double)
+3. [Where does `Renamer` take new (obfuscated) names from?](#names)
+4. [Do you support layout files like `.xib` and `.storyboard`?](#layouts)
+5. [Is it possible to exclude parts of the code from being obfuscated?](#exclude)
+6. [How can I verify if the code was renamed correctly?](#verification)
+7. [Why is `Renamer` creating a copy of project to obfuscate the files in?](#copy)
 
-# <a name="renaming"></a> How does it work?
+# <a name="renaming"></a> How does renaming process work?
 
-???
+Renaming is a separate part of the obfuscation process done by the `Renamer` command line tool. It's the step in which the actual obfuscation is performed; before `Renamer` only the infrastructure work is done, like identifying and building dependencies or creating the `Files.json`, `Symbols.json` and `Renames.json` medata files. No change to the original Xcode project is done yet nor any copy is created.
+
+The `Renamer` than takes three pieces of information to perform obfuscation (they correspond to the command line interface of the tool and parameters it requires):
+
+* `Files.json` file so that it's able to identify the location of the original Xcode project, which files should be renamed, and what information does the compiler need to perform the semantic analysis,
+
+* `Renames.json` file with a list of symbols that might get renamed and the proposed renamings,
+
+* a path under which the obfuscated copy of the original project should be created.
+
+Having the three pieces of information the renamer performs following steps:
+
+* creates a copy of the original project under the path provided by the user,
+
+* creates the compiler invocation using information from  `Files.json` and performs the semantic analysis,
+
+* traverses the resulting AST and identifies all the symbols in it in the same way as the [`SymbolExtractor`](./SymbolExtractor-ImportantTopics.md) does,
+
+* decides for each symbol whether it should be renamed and if it should, tries to find it in the `Renames.json` file. If the symbol is found in the `Renames.json`, the actual writing to the file is done, with the proper change (obfuscated name in place of the original one),
+
+* the same process is then performed for XIB / Storyboard files.
+
+# <a name="double"></a> Why renaming requires another semantic analysis?
+
+In the `Renamer` we're performing the same semantic analysis process that is already done once in the `SymbolExtractor`. While it might seem as the waste of work, there's a number of underlying reasons for it:
+
+* decoupling of the symbol extraction and the renaming makes it possible to identify the symbols in one source code and use them for renaming in a separate source code. While this might be an edge case to change the source code between the symbol extraction and renaming, it may happen if the project incorporates the code generation steps or automatic linting,
+
+* the symbol extractor identifies the symbols, not their occurences. One identifier that's occuring multiple time in the source code will be represented by just one symbol in the `Symbols.json` file. It makes the tools working on `Symbols.json` way simpler, the schema more readable and the whole data set smaller,
+
+* writing all the occurences of identifier in `Symbols.json` would mean that we need to write the location in the source file under which the identifier should be renamed. The actual renaming changes that location; for example, if the obfuscated name is longer than the original name, the location should be offset further to accomodate for additional characters in the obfuscated name. The location correction logic would be tricky to implement and at the same time any bug in it would render the whole project unable to be compiled.
 
 # <a name="names"></a> Where are new names coming from?
 
@@ -31,4 +63,8 @@ It's not possible currently. The feature is in the future plans.
 
 # <a name="verification"></a> Verify if the code was correctly renamed
 
-???
+The verification of the correct renaming is done with the [integration tests](./IntegrationTesting.md).
+
+# <a name="copy"></a> Why is `Renamer` creating a copy of project to obfuscate the files in?
+
+Our main goal is to be as little invasive and as developer-friendly as possible. While it's entirely possible to rename files in place (and there're plans to bring this option in the future), creating a copy ensures that the developer won't have any chance of destroying or corrupting their original project.
-- 
2.17.1 (Apple Git-112)


From f79b3046a8c00d21378749f02d7811a055d26433 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Wed, 21 Feb 2018 12:54:00 +0100
Subject: [PATCH 074/138] Comments and documentation improvements after second
 documentation meeting

Reviewers: michal.zielinski, jerzy.kleszcz

Reviewed By: michal.zielinski

Subscribers: michal.zielinski, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2843
---
 Documentation/ASTGuide.md                     |  33 +++++
 ...SwiftObfuscationLibrary-ImportantTopics.md |  12 ++
 Documentation/ToDescribe.md                   |   1 +
 .../Obfuscation/ParameterDeclarationParser.h  |   4 +
 .../swift/Obfuscation/SourceFileWalker.h      |   4 +-
 .../swift/Obfuscation/SymbolExtracting.h      |   6 +-
 .../ParameterDeclarationParser.cpp            |  32 +++++
 swift/lib/Obfuscation/SourceFileWalker.cpp    | 113 +++++++-----------
 swift/lib/Obfuscation/SymbolExtracting.cpp    |  62 +++++++---
 9 files changed, 176 insertions(+), 91 deletions(-)
 create mode 100644 Documentation/ASTGuide.md

diff --git a/Documentation/ASTGuide.md b/Documentation/ASTGuide.md
new file mode 100644
index 00000000000..680e51f7919
--- /dev/null
+++ b/Documentation/ASTGuide.md
@@ -0,0 +1,33 @@
+# Swift AST Guide
+
+This document stores all the information that we've gathered while working with the Swift AST. Since AST is not documented (the closest to the introductory guide is provided by [this blogpost](https://medium.com/@slavapestov/the-secret-life-of-types-in-swift-ff83c3c000a5)), the knowledge is partial and experimental. Please treat it as the work in progress, not as the very trusted source :)
+
+# Basic AST node types
+
+* `Decl` is the AST node that represents a declaration, so basically the identifier in code.
+
+* `Expr` is the AST node that represents an expression, which is something that returns value.
+
+* `Stmt` is the AST node that represents a statement, the language part that is used for the control flow and defining the context for the expressions and identifiers, but doesn't return value.
+
+# `Decl` AST node subtypes
+
+* `NominalTypeDecl` represents a declaration of type, like struct or class or enum or protocol. It has four subclasses:
+
+  * `EnumDecl` represents the declaration of enum
+
+  * `StructDecl` represents the declaration of struct
+
+  * `ClassDecl` represents the declaration of class
+
+  * `ProtocolDecl` represents the declaration of protocol
+
+* `FuncDecl` represents the declaration of functions
+
+* `OperatorDecl` represents the declaration of the operator
+
+* `ConstructorDecl` represents the declaration of constructor
+
+* `ParamDecl` represents the declaration of parameter
+
+* `VarDecl` represents the declaration of variable
diff --git a/Documentation/SwiftObfuscationLibrary-ImportantTopics.md b/Documentation/SwiftObfuscationLibrary-ImportantTopics.md
index e8ae4c54db3..68ec7d19b01 100644
--- a/Documentation/SwiftObfuscationLibrary-ImportantTopics.md
+++ b/Documentation/SwiftObfuscationLibrary-ImportantTopics.md
@@ -5,6 +5,8 @@ The goal of this document is to be a bag of important ideas, decisions, concepts
 * [What is `swiftObfuscation` library?](#what)
 * [Why do we write the templates implementations in *-template.h files?](#templates)
 * [Why do we use llvm::yaml for json deserialization and swift::json for json serialization?](#json)
+* [Why are we using the main module when working with the compiler instance?](#main-module)
+* [Why do we use index in the symbol walker and collector to index the symbols?](#index)
 
 # <a name="what"></a> What is `swiftObfuscation` library?
 
@@ -28,3 +30,13 @@ LLVM contains the YAML parser with the serialization and deserialization support
 - http://yaml.org/spec/1.2/spec.html#id2759572
 
 Therefore to deserialize JSON (read JSON from file) the already existing `llvm::yaml` parser is perfectly fine. However, the serialization (write JSON to file) cannot be done with `llvm::yaml` because it prints YAML, not JSON. Thankfully, the Swift compiler community has provided the tool for JSON serialization (not deserialization) in the `swift::json` namespace. It keeps almost the same API as the LLVM YAML parser and therefore is easy to use. That's why we're using it.
+
+# <a name="main-module"></a> Why are we using the main module when working with the compiler instance?
+
+While setting up the compiler instance it requires that the module name is given. All the input files will be parsed as part of this modules. All the identifiers from the source code that is written in the input files will also be treated as part of this module.
+
+That's why when we want to traverse the AST that represents the input Swift source files we're asking the `CompilerInstance` object to give us the main module and then to give the files that are parts of this module.
+
+# <a name="index"></a> Why do we use index in the symbol walker and collector to index the symbols?
+
+The symbol walker and collector parses the AST and identifies the symbols in the order of occurrence in the source file. This order is persisted across all the files with the static integer representing the symbol index. If one symbol's index is smaller than the other's, it's guaranteed that the former symbol was encountered before the latter in the AST traversal. This order is kept during the symbol extraction. We're sure that when we print the symbols to `Symbols.json`, the deterministic and identifier-agnostic order is preserved. This is what makes the [integration testing](./IntegrationTesting.md) possible.
diff --git a/Documentation/ToDescribe.md b/Documentation/ToDescribe.md
index 3db0385d316..43caa1ed3c6 100644
--- a/Documentation/ToDescribe.md
+++ b/Documentation/ToDescribe.md
@@ -1,2 +1,3 @@
 # Things to add
 
+
diff --git a/swift/include/swift/Obfuscation/ParameterDeclarationParser.h b/swift/include/swift/Obfuscation/ParameterDeclarationParser.h
index 0c71eb1153b..884684af88b 100644
--- a/swift/include/swift/Obfuscation/ParameterDeclarationParser.h
+++ b/swift/include/swift/Obfuscation/ParameterDeclarationParser.h
@@ -24,6 +24,10 @@ SymbolsOrError parseSeparateDeclarationWithRange(const ParamDecl* Declaration,
 
 SymbolsOrError parse(const ParamDecl* Declaration);
 
+llvm::Expected<SymbolWithRange> buildSymbol(Identifier Name,
+                                            ValueDecl *Decl,
+                                            CharSourceRange Range);
+
   
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/include/swift/Obfuscation/SourceFileWalker.h b/swift/include/swift/Obfuscation/SourceFileWalker.h
index e09d0d96aa2..fb55954bd9c 100644
--- a/swift/include/swift/Obfuscation/SourceFileWalker.h
+++ b/swift/include/swift/Obfuscation/SourceFileWalker.h
@@ -10,7 +10,7 @@ namespace swift {
 namespace obfuscation {
 
 /// Identifies the symbols in the given Swift AST SourceFile object with
-/// the index of their occurence among all files.
+/// the index of their occurrence among all files.
 ///
 /// The SourceFile might be extracted from the compiler after it consumes and
 /// performs the semantic analysis of the Swift cource code file. It's an AST
@@ -25,6 +25,8 @@ namespace obfuscation {
 /// for (auto* File : CompilerInstance.getMainModule()->getFiles()) {
 ///   if (auto* SourceFile = dyn_cast<SourceFile>(File)) {
 ///     auto SymbolsWithRanges = walkAndCollectSymbols(*SourceFile);
+///   }
+/// }
 /// \endcode
 ///
 /// \param SourceFile AST tree representing the Swift source file.
diff --git a/swift/include/swift/Obfuscation/SymbolExtracting.h b/swift/include/swift/Obfuscation/SymbolExtracting.h
index f26258d2105..4b34c9fbdab 100644
--- a/swift/include/swift/Obfuscation/SymbolExtracting.h
+++ b/swift/include/swift/Obfuscation/SymbolExtracting.h
@@ -19,13 +19,15 @@ namespace obfuscation {
 /// semantic analysis, and then it uses the results of the analysis (AST tree)
 /// to identify the symbols in the Swift source code that should be obfuscated.
 ///
-/// It's designed to be called from the Swift compiler tool.
+/// It's designed to be called from the Swift compiler command line tool.
 ///
 /// Typical usage:
 /// \code
 /// std::string MainExecutablePath = llvm::sys::fs::getMainExecutable(
 ///             argv[0], reinterpret_cast<void *>(&anchorForGetMainExecutable));
-/// auto SymbolsOrError = extractSymbols(FilesJson, MainExecutablePath);
+/// auto SymbolsOrError = extractSymbols(FilesJson,
+///                                      MainExecutablePath,
+///                                      DiagnosticStream);
 /// \endcode
 ///
 /// \param FilesJson It's the structure containing information necessary for
diff --git a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
index 270d5873723..13ae07691a6 100644
--- a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
@@ -189,5 +189,37 @@ SymbolsOrError parseSeparateDeclarationWithRange(const ParamDecl* Declaration,
   return Result;
 }
 
+llvm::Expected<SymbolWithRange> buildSymbol(Identifier Name,
+                                            ValueDecl *Decl,
+                                            CharSourceRange Range) {
+  if (const auto *FunctionDecl = dyn_cast<AbstractFunctionDecl>(Decl)) {
+    auto ParameterLists = FunctionDecl->getParameterLists();
+    auto ParameterName = Name.str();
+
+    for (auto *ParameterList: ParameterLists) {
+      for (auto *Parameter : *ParameterList) {
+        if (ParameterName == internalParameterName(Parameter)
+            || ParameterName == externalParameterName(Parameter)) {
+          SymbolsOrError Symbols = parse(Parameter);
+          if (auto Error = Symbols.takeError()) {
+            return std::move(Error);
+          } else {
+            if (Symbols.get().size() > 0) {
+              auto Symbol = Symbols.get()[0];
+              Symbol.Range = Range;
+              return Symbol;
+            }
+          }
+        }
+      }
+    }
+    return stringError("Cannot find parameter identifier in function declaration");
+  } else {
+    return stringError("Cannot build symbol for argument without "
+                       "function declaration");
+  }
+}
+
+
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/lib/Obfuscation/SourceFileWalker.cpp b/swift/lib/Obfuscation/SourceFileWalker.cpp
index bf4b77aee86..92bf134582c 100644
--- a/swift/lib/Obfuscation/SourceFileWalker.cpp
+++ b/swift/lib/Obfuscation/SourceFileWalker.cpp
@@ -12,32 +12,17 @@
 namespace swift {
 namespace obfuscation {
 
-struct RenamesCollector: public SourceEntityWalker {
+struct SymbolsWalkerAndCollector: public SourceEntityWalker {
+
   static int SymbolIndex;
   std::set<IndexedSymbolWithRange,
-           IndexedSymbolWithRange::SymbolWithRangeCompare> Bucket;
-  
-  void handleSymbols(std::vector<SymbolWithRange> &Symbols) {
-    for (auto &Symbol : Symbols) {
-      handleSymbol(Symbol);
-    }
-  }
+           IndexedSymbolWithRange::SymbolWithRangeCompare> Symbols;
 
-  void handleSymbol(SymbolWithRange & Symbol) {
-    auto InsertionResult =
-      Bucket.insert(IndexedSymbolWithRange(SymbolIndex, Symbol));
-    if (InsertionResult.second == true) {
-      ++RenamesCollector::SymbolIndex;
-    }
-  }
+// Overriden methods called back as the AST is walked
 
   bool walkToExprPre(Expr *Expression) override {
     auto Symbols = extractSymbol(Expression);
-    if (auto Error = Symbols.takeError()) {
-      llvm::consumeError(std::move(Error));
-      return true;
-    }
-    handleSymbols(Symbols.get());
+    handleExtractionResult(Symbols);
     return true;
   }
   
@@ -46,62 +31,47 @@ struct RenamesCollector: public SourceEntityWalker {
       return false;
     }
     auto Symbols = extractSymbol(Declaration, Range);
-    if (auto Error = Symbols.takeError()) {
-      llvm::consumeError(std::move(Error));
-      return true;
-    }
-    handleSymbols(Symbols.get());
+    handleExtractionResult(Symbols);
     return true;
   }
 
-  llvm::Expected<SymbolWithRange> buildSymbol(Identifier Name, ValueDecl *Decl,
-                                              CharSourceRange Range) {
-  if (const auto *FunctionDecl = dyn_cast<AbstractFunctionDecl>(Decl)) {
-    auto ParameterLists = FunctionDecl->getParameterLists();
-    auto ParameterName = Name.str();
-
-    for (auto *ParameterList: ParameterLists) {
-      for (auto *Parameter : *ParameterList) {
-        if (ParameterName == internalParameterName(Parameter)
-            || ParameterName == externalParameterName(Parameter)) {
-          SymbolsOrError Symbols = parse(Parameter);
-          if (auto Error = Symbols.takeError()) {
-            return std::move(Error);
-          } else {
-            if (Symbols.get().size() > 0) {
-              auto Symbol = Symbols.get()[0];
-              Symbol.Range = Range;
-              return Symbol;
-            }
-          }
-        }
-      }
-    }
-    return stringError("Cannot find parameter identifier in function declaration");
-  } else {
-    return stringError("Cannot build symbol for argument without "
-                         "function declaration");
-    }
+  // We need to extract symbols here even though we might have already seen
+  // this node in the walkToDeclPre because here we have additional
+  // contextual information like CtorTyRef
+  bool visitDeclReference(ValueDecl *Declaration, CharSourceRange Range,
+                          TypeDecl *CtorTyRef, ExtensionDecl *ExtTyRef,
+                          Type T, ReferenceMetaData Data) override {
+    auto Symbols = extractSymbol(CtorTyRef ? CtorTyRef : Declaration, Range);
+    handleExtractionResult(Symbols);
+    return true;
   }
 
   bool visitCallArgName(Identifier Name, CharSourceRange Range,
-                                  ValueDecl *D) override {
+                        ValueDecl *D) override {
 
     auto Symbol = buildSymbol(Name, D, Range);
-      if (auto Error = Symbol.takeError()) {
-        llvm::consumeError(std::move(Error));
-      } else {
-        handleSymbol(Symbol.get());
-      }
-      return true;
+    if (auto Error = Symbol.takeError()) {
+      llvm::consumeError(std::move(Error));
+    } else {
+      handleSymbol(Symbol.get());
+    }
+    return true;
   }
 
-  bool visitDeclReference(ValueDecl *Declaration, CharSourceRange Range,
-                          TypeDecl *CtorTyRef, ExtensionDecl *ExtTyRef,
-                          Type T, ReferenceMetaData Data) override {
-    auto Symbols = extractSymbol(CtorTyRef ? CtorTyRef : Declaration, Range);
-    handleExtractionResult(Symbols);
-    return true;
+// Methods for handling the extracted symbols
+
+  void handleSymbol(SymbolWithRange & Symbol) {
+    auto InsertionResult =
+      Symbols.insert(IndexedSymbolWithRange(SymbolIndex, Symbol));
+    if (InsertionResult.second == true) {
+      ++SymbolsWalkerAndCollector::SymbolIndex;
+    }
+  }
+
+  void handleSymbols(std::vector<SymbolWithRange> &Symbols) {
+    for (auto &Symbol : Symbols) {
+      handleSymbol(Symbol);
+    }
   }
 
   void handleExtractionResult(SymbolsOrError &Symbols) {
@@ -111,15 +81,16 @@ struct RenamesCollector: public SourceEntityWalker {
       handleSymbols(Symbols.get());
     }
   }
+
 };
 
-int RenamesCollector::SymbolIndex;
+int SymbolsWalkerAndCollector::SymbolIndex;
 
 std::set<IndexedSymbolWithRange, IndexedSymbolWithRange::SymbolWithRangeCompare>
-  walkAndCollectSymbols(SourceFile &SourceFile) {
-  RenamesCollector Collector;
-  Collector.walk(SourceFile);
-  return Collector.Bucket;
+walkAndCollectSymbols(SourceFile &SourceFile) {
+  SymbolsWalkerAndCollector Walker;
+  Walker.walk(SourceFile);
+  return Walker.Symbols;
 }
 
 } //namespace obfuscation
diff --git a/swift/lib/Obfuscation/SymbolExtracting.cpp b/swift/lib/Obfuscation/SymbolExtracting.cpp
index 66421918a78..9e0520ac29e 100644
--- a/swift/lib/Obfuscation/SymbolExtracting.cpp
+++ b/swift/lib/Obfuscation/SymbolExtracting.cpp
@@ -10,7 +10,30 @@
 namespace swift {
 namespace obfuscation {
 
-llvm::Expected<SymbolsJson>
+using FileWithName = std::pair<std::string, SourceFile *>;
+
+// Creates a vector of parsed source files that is sorted alphabetically
+// by the file name
+std::vector<FileWithName>
+getSortedSourceFiles(swift::CompilerInstance &CompilerInstance) {
+
+  std::vector<FileWithName> Files;
+  for (auto* Unit : CompilerInstance.getMainModule()->getFiles()) {
+    if (auto* Current = dyn_cast<SourceFile>(Unit)) {
+      Files.push_back(std::make_pair(Current->getFilename().str(), Current));
+    }
+  }
+
+  std::sort(Files.begin(),
+            Files.end(),
+            [](const FileWithName &Left, const FileWithName &Right) {
+              return Left.first < Right.first;
+            });
+
+  return Files;
+}
+
+  llvm::Expected<SymbolsJson>
 extractSymbols(const FilesJson &FilesJson,
                std::string MainExecutablePath,
                llvm::raw_ostream &DiagnosticStream) {
@@ -23,54 +46,59 @@ extractSymbols(const FilesJson &FilesJson,
   if (Error) {
     return std::move(Error);
   }
-  
-  SymbolsJson Json;
 
-  using FileWithName = std::pair<std::string, SourceFile *>;
-  std::vector<FileWithName> Files;
-  for (auto* Unit : CompilerInstance.getMainModule()->getFiles()) {
-    if (auto* Current = dyn_cast<SourceFile>(Unit)) {
-      Files.push_back(std::make_pair(Current->getFilename().str(), Current));
-    }
-  }
-  std::sort(Files.begin(),
-            Files.end(),
-            [](const FileWithName &Left, const FileWithName &Right) {
-              return Left.first < Right.first;
-            });
+  auto Files = getSortedSourceFiles(CompilerInstance);
 
+  // This set is designed to treat all the occurences of symbol
+  // (different ranges) as one symbol
   std::set<IndexedSymbolWithRange,
            IndexedSymbolWithRange::SymbolCompare> Symbols;
 
   for (auto &Unit : Files) {
+    // CurrentSymbols are sorted by the identifier and range
     auto CurrentSymbols = walkAndCollectSymbols(*Unit.second);
+
     std::vector<IndexedSymbolWithRange> SortedSymbols;
     copyToVector(CurrentSymbols, SortedSymbols);
+
+    // Sorting symbols by index
     std::sort(SortedSymbols.begin(),
               SortedSymbols.end(),
               [](const IndexedSymbolWithRange &Left,
                  const IndexedSymbolWithRange &Right) {
                 return Left.Index < Right.Index;
               });
+
+    // Inserting sorted symbols so that only the first occurrence's
+    // index is present in the Symbols set. It ensures that
+    // the order in which symbols occur is preserved
     copyToSet(SortedSymbols, Symbols);
   }
 
   std::vector<IndexedSymbolWithRange> Result;
   copyToVector(Symbols, Result);
 
+  // This ensures that the alphabetical order of walking the source files
+  // is preserved
   std::sort(Result.begin(),
             Result.end(),
             [](const IndexedSymbolWithRange &Left,
                const IndexedSymbolWithRange &Right) {
               return Left.Index < Right.Index;
             });
+
+  SymbolsJson ResultingJson;
+
+  // map: IndexedSymbolWithRange -> Symbol
+  
   std::transform(Result.cbegin(),
                  Result.cend(),
-                 std::back_inserter(Json.Symbols),
+                 std::back_inserter(ResultingJson.Symbols),
                  [](const IndexedSymbolWithRange &Symbol) -> struct Symbol {
                    return Symbol.SymbolWithRange.Symbol;
                  });
-  return Json;
+
+  return ResultingJson;
 }
 
 } //namespace obfuscation
-- 
2.17.1 (Apple Git-112)


From ca86e5561d0cb8c18d8c4cf0bd1a5ee89f392f74 Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Tue, 20 Feb 2018 10:44:29 +0100
Subject: [PATCH 075/138] renaming outlets and actions in layout files

Summary:
obfuscating selectors in xml

updated doc

Reviewers: jerzy.kleszcz, krzysztof.siejkowski

Reviewed By: jerzy.kleszcz, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2839
---
 Documentation/Renamer-ImportantTopics.md      |   5 +-
 .../include/swift/Obfuscation/LayoutRenamer.h |  75 ++-
 swift/include/swift/Obfuscation/Utils.h       |   3 +
 swift/lib/Obfuscation/LayoutRenamer.cpp       | 473 ++++++++++++++++--
 swift/lib/Obfuscation/Utils.cpp               |  12 +
 .../Expected/LayoutStoryboard.storyboard      |  47 +-
 .../Expected/LayoutStoryboard.swift           |  13 +-
 .../LayoutStoryboard.storyboard               |  47 +-
 .../LayoutStoryboard/LayoutStoryboard.swift   |  12 +-
 .../Expected/UnsupportedLayout.storyboard     |  35 --
 .../Expected/UnsupportedLayout.swift          |  12 -
 .../UnsupportedLayout.storyboard              |  35 --
 .../UnsupportedLayout/UnsupportedLayout.swift |  14 -
 13 files changed, 578 insertions(+), 205 deletions(-)
 delete mode 100644 swift/test/Obfuscation/FullProcess/UnsupportedLayout/Expected/UnsupportedLayout.storyboard
 delete mode 100644 swift/test/Obfuscation/FullProcess/UnsupportedLayout/Expected/UnsupportedLayout.swift
 delete mode 100644 swift/test/Obfuscation/FullProcess/UnsupportedLayout/UnsupportedLayout.storyboard
 delete mode 100644 swift/test/Obfuscation/FullProcess/UnsupportedLayout/UnsupportedLayout.swift

diff --git a/Documentation/Renamer-ImportantTopics.md b/Documentation/Renamer-ImportantTopics.md
index 3d89254a7b4..bdcc3105ee2 100644
--- a/Documentation/Renamer-ImportantTopics.md
+++ b/Documentation/Renamer-ImportantTopics.md
@@ -55,7 +55,10 @@ Yes, layout files are being renamed.
 First [`FileExtractor` tool](./ImportantTopics.md) extracts information about all layout (`.xib` and `.storyboard`) files that are present in the project.
 Then when `Renamer` is renaming symbols, it also stores each successfully renamed symbol in a set. After that it iterates over gathered layout files and renames them one by one. Both `.xib` and `.storyboard` are `.xml` files. `Renamer` parses them using `libxml` and then traverses the tree looking for types and functions that can be renamed. It decides if a found name should be renamed by checking if such symbol was renamed during symbol renaming. Such check is possible because it has access to the set containing all renamed symbols. After the file is finally processed `Renamer` saves the result in obfuscated project directory.
 
-Currently only class names are being obfuscated. Support for outlets and actions is in the future plans.
+Currently the tool renames:
+  - class names
+  - outlets
+  - actions (without parameters or with one default parameter, support for general selectors support is in the future plans)
 
 # <a name="exclude"></a> Excluding parts of code from obfuscation
 
diff --git a/swift/include/swift/Obfuscation/LayoutRenamer.h b/swift/include/swift/Obfuscation/LayoutRenamer.h
index ccf3e28b366..632d01e6e62 100644
--- a/swift/include/swift/Obfuscation/LayoutRenamer.h
+++ b/swift/include/swift/Obfuscation/LayoutRenamer.h
@@ -10,13 +10,61 @@
 namespace swift {
 namespace obfuscation {
 
+enum TargetRuntime {
+  Undefined, CocoaTouch, Cocoa
+};
+  
+enum TraversalDirection {
+  Up, Down
+};
+  
 /// Base class for renaming strategies. If a new layout file appears then
 /// a new strategy should be created and applied to that new type of file.
 /// Old files should use old strategies to ensure compatibility.
 class BaseLayoutRenamingStrategy {
+  protected:
+    xmlNode *RootNode;
   
+  /// Searches for a Node in the xml document starting from a given Node.
+  ///
+  /// \param Node a node where the search begins.
+  /// \param AttributeName name of the attribute
+  ///                      that the searched node should have.
+  /// \param AttributeValue value of the attribute
+  ///                       that the searched node should have.
+  /// \param TraversalDirection which direction should
+  ///                           the document be traversed in - Up or Down.
+  ///
+  /// \returns a Node if it exists or nullptr if not.
+    xmlNode* findNodeWithAttributeValue(
+                                   xmlNode *Node,
+                                   const xmlChar *AttributeName,
+                                   const xmlChar *AttributeValue,
+                                   const TraversalDirection TraversalDirection);
+
+
 public:
-  virtual  void performActualRenaming(xmlNode *Node, const std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols, bool &performedRenaming) = 0;
+  virtual  void performActualRenaming(
+          xmlNode *Node,
+          const std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols,
+          bool &PerformedRenaming) = 0;
+  
+  virtual  void renameCustomClass(
+          xmlNode *Node,
+          const std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols,
+          bool &PerformedRenaming) = 0;
+  
+  virtual  void renameAction(
+          xmlNode *Node,
+          const std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols,
+          bool &PerformedRenaming) = 0;
+  
+  virtual  void renameOutlet(
+          xmlNode *Node,
+          const std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols,
+          bool &PerformedRenaming) = 0;
+  
+  BaseLayoutRenamingStrategy(xmlNode *RootNode);
   virtual ~BaseLayoutRenamingStrategy() = default;
 };
   
@@ -28,16 +76,20 @@ private:
   
   xmlDoc *XmlDocument;
     
-  llvm::Expected<std::unique_ptr<BaseLayoutRenamingStrategy>> createRenamingStrategy(xmlNode *RootNode);
+  llvm::Expected<std::unique_ptr<BaseLayoutRenamingStrategy>>
+                                      createRenamingStrategy(xmlNode *RootNode);
 
 public:
 
   LayoutRenamer(std::string FileName);
 
-  /// Performs renaming of layout (.xib and .storyboard) files from FilesJson in the following steps:
+  /// Performs renaming of layout (.xib and .storyboard) files
+  /// from FilesJson in the following steps:
   ///
-  /// 1. Gathers all renamed symbols (see Renaming.h) and stores them in RenamedSymbols map.
-  /// 2. Iterates through FilesJson.LayoutFiles list and picks renaming strategy based on file type and version.
+  /// 1. Gathers all renamed symbols (see Renaming.h)
+  ///    and stores them in RenamedSymbols map.
+  /// 2. Iterates through FilesJson.LayoutFiles list
+  ///    and picks renaming strategy based on file type and version.
   /// 3. Performs actual renaming if all conditions are met.
   /// 4. Saves renamed layout files in OutputPath.
   ///
@@ -45,24 +97,27 @@ public:
   /// \code
   /// LayoutRenamer LayoutRenamer(LayoutFile); // param is a path to layout file
   ///
-  /// auto PerformedRenamingOrError = LayoutRenamer.performRenaming(RenamedSymbols, Path);
+  /// auto RenamedOrError = LayoutRenamer.performRenaming(RenamedSymbols, Path);
   ///
-  /// if (auto Error = PerformedRenamingOrError.takeError()) {
+  /// if (auto Error = RenamedOrError()) {
   ///   return std::move(Error);
   /// }
   ///
-  /// auto PerformedRenaming = PerformedRenamingOrError.get();
+  /// auto PerformedRenaming = RenamedOrError();
   ///
   /// if (PerformedRenaming) {
   ///   ...
   /// }
   /// \endcode
   ///
-  /// \param RenamedSymbols a map containing all renamed symbols in the source code.
+  /// \param RenamedSymbols a map containing all renamed symbols
+  ///                       in the source code.
   /// \param OutputPath Path where layout files will be saved after renaming.
   ///
   /// \returns true if file was renamed and false if it wasn't.
-  llvm::Expected<bool> performRenaming(std::unordered_map<std::string, SymbolRenaming> RenamedSymbols, std::string OutputPath);
+  llvm::Expected<bool> performRenaming(
+                 std::unordered_map<std::string, SymbolRenaming> RenamedSymbols,
+                 std::string OutputPath);
 
   ~LayoutRenamer();
 };
diff --git a/swift/include/swift/Obfuscation/Utils.h b/swift/include/swift/Obfuscation/Utils.h
index 16adbf6042e..05997a7b84b 100644
--- a/swift/include/swift/Obfuscation/Utils.h
+++ b/swift/include/swift/Obfuscation/Utils.h
@@ -6,6 +6,7 @@
 #include <set>
 #include <string>
 #include <vector>
+#include <sstream>
 
 namespace swift {
 namespace obfuscation {
@@ -51,6 +52,8 @@ template<typename ElementType>
 void copyToStream(const std::vector<ElementType> &FromVector,
                   std::ostream_iterator<ElementType> Inserter);
 
+std::vector<std::string> split(const std::string &String, char Delimiter);
+  
 } //namespace obfuscation
 } //namespace swift
 
diff --git a/swift/lib/Obfuscation/LayoutRenamer.cpp b/swift/lib/Obfuscation/LayoutRenamer.cpp
index a82117972ac..03a71c5ebde 100644
--- a/swift/lib/Obfuscation/LayoutRenamer.cpp
+++ b/swift/lib/Obfuscation/LayoutRenamer.cpp
@@ -2,76 +2,404 @@
 
 namespace swift {
 namespace obfuscation {
+  
+BaseLayoutRenamingStrategy::BaseLayoutRenamingStrategy(xmlNode *RootNode)
+  : RootNode(RootNode) {}
+  
+  
+  
+xmlNode*
+BaseLayoutRenamingStrategy::findNodeWithAttributeValue(
+                                  xmlNode *Node,
+                                  const xmlChar *AttributeName,
+                                  const xmlChar *AttributeValue,
+                                  const TraversalDirection TraversalDirection) {
+  
+  if(Node == nullptr || AttributeName == nullptr) {
+    return nullptr;
+  }
+  
+  for (xmlNode *CurrentNode = Node;
+       CurrentNode != nullptr;
+       CurrentNode = CurrentNode->next) {
+    
+    if (CurrentNode->type == XML_ELEMENT_NODE) {
+      
+      for (xmlAttr *CurrentAttribute = CurrentNode->properties;
+           CurrentAttribute != nullptr;
+           CurrentAttribute = CurrentAttribute->next) {
+        
+        if(CurrentAttribute->type == XML_ATTRIBUTE_NODE) {
+          // if AttributeValue == nullptr then it means that we're interested
+          // in finding only a Node with attribute that name is AttributeName
+          if(AttributeValue == nullptr) {
+            return CurrentNode;
+          } else {
+            
+            // otherwise we need to check against AttributeValue as well
+            if(xmlStrcmp(CurrentAttribute->name, AttributeName) == 0){
+              
+              xmlChar* value = xmlGetProp(CurrentNode, AttributeName);
+              if(xmlStrcmp(value, AttributeValue) == 0){
+                return CurrentNode;
+              }
+            }
+          }
+        }
+      }
+    }
+    
+    // depending on the TraversalDirection we go down (children)
+    // or up (parent) of the document
+    xmlNode *NextNode = nullptr;
+    if(TraversalDirection == Up) {
+      NextNode = CurrentNode->parent;
+    } else if(TraversalDirection == Down) {
+      NextNode = CurrentNode->children;
+    }
+    
+    if(NextNode != nullptr) {
+      xmlNode *Found = findNodeWithAttributeValue(NextNode,
+                                                   AttributeName,
+                                                   AttributeValue,
+                                                   TraversalDirection);
+      if(Found != nullptr) {
+        return Found;
+      }
+    }
+  }
+  
+  return nullptr;
+}
 
 class XCode9RenamingStrategy: public BaseLayoutRenamingStrategy {
 
 private:
+  // Needed for type renaming
+  const xmlChar *
+  CustomClassAttributeName = reinterpret_cast<const xmlChar *>("customClass");
+  
+  const xmlChar *
+  CustomModuleAttributeName = reinterpret_cast<const xmlChar *>("customModule");
+  
+  // Needed for outlet renaming
+  const xmlChar *
+  OutletNodeName = reinterpret_cast<const xmlChar *>("outlet");
+  
+  const xmlChar *
+  OutletPropertyAttributeName = reinterpret_cast<const xmlChar *>("property");
+  
+  // Needed for action renaming
+  const xmlChar *
+  ActionNodeName = reinterpret_cast<const xmlChar *>("action");
+  
+  const xmlChar *
+  ActionSelectorAttributeName = reinterpret_cast<const xmlChar *>("selector");
   
-  bool shouldRename(const SymbolRenaming &Symbol, const std::string &CustomClass, const std::string &CustomModule) {
+  //General
+  const xmlChar *
+  IdAttributeName = reinterpret_cast<const xmlChar *>("id");
+  
+  const xmlChar *
+  DestinationAttributeName = reinterpret_cast<const xmlChar *>("destination");
+  
+  const xmlChar *
+  TargetAttributeName = reinterpret_cast<const xmlChar *>("target");
+  
+  TargetRuntime TargetRuntime;
+
+  bool shouldRename(const SymbolRenaming &Symbol,
+                    const std::string &CustomClass,
+                    const std::string &CustomModule) {
     return CustomModule.empty() || CustomModule == Symbol.Module;
   }
   
+  void extractCustomClassAndModule(xmlNode *Node,
+                                   std::string &CustomClass,
+                                   std::string &CustomModule) {
+    
+    for (xmlAttr *CurrentAttribute = Node->properties;
+         CurrentAttribute != nullptr;
+         CurrentAttribute = CurrentAttribute->next) {
+      
+      if(CurrentAttribute->type == XML_ATTRIBUTE_NODE) {
+        
+        if (xmlStrcmp(CurrentAttribute->name, CustomClassAttributeName) == 0) {
+          CustomClass = std::string(reinterpret_cast<const char *>(xmlGetProp(
+                                                      Node,
+                                                      CurrentAttribute->name)));
+        }
+        
+        if (xmlStrcmp(CurrentAttribute->name, CustomModuleAttributeName) == 0) {
+          CustomModule = std::string(reinterpret_cast<const char *>(xmlGetProp(
+                                                      Node,
+                                                      CurrentAttribute->name)));
+        }
+      }
+    }
+  }
+  
 public:
   
-  /// Performs renames if needed based on RenamedSymbols map. Layout files are xmls, it looks for a specific attributes
-  /// such as "customClass" and retrieves their values. These values are then used to
-  /// look up RenamedSymbols map. If a "customClass" value is present inside RenamedSymbols, then
-  /// it means that this symbol was renamed in the source code in previous step and it should be
-  /// renamed in layout file as well. "customModule" attribute is also taken into account - if it's
-  /// present then it's value is compared with symbol's module value (the one found in RenamedSymbols) and
-  /// if it's not present then we assume that it's inherited from target project.
-  void performActualRenaming(xmlNode *Node, const std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols, bool &performedRenaming) {
-    const auto *CustomClassAttributeName = reinterpret_cast<const xmlChar *>("customClass");
-    const auto *CustomModuleAttributeName = reinterpret_cast<const xmlChar *>("customModule");
+  XCode9RenamingStrategy(xmlNode *RootNode, enum TargetRuntime TargetRuntime)
+  : BaseLayoutRenamingStrategy(RootNode) {
+    this->TargetRuntime = TargetRuntime;
+  }
+  
+  // Performs renames if needed based on RenamedSymbols map.
+  // Layout files are xmls, it looks for a specific attributes
+  // such as "customClass" and retrieves their values.
+  // These values are then used to look up RenamedSymbols map.
+  // If a "customClass" value is present inside RenamedSymbols, then
+  // it means that this symbol was renamed in the source code in previous step
+  // and it should be renamed in layout file as well.
+  // "customModule" attribute is also taken into account - if it's present then
+  // it's value is compared with
+  // symbol's module value (the one found in RenamedSymbols) and
+  // if it's not present then we assume that it's inherited from target project.
+  void performActualRenaming(
+          xmlNode *Node,
+          const std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols,
+          bool &PerformedRenaming) {
+    
+    if(Node == nullptr){
+      return;
+    }
     
-    for (xmlNode *CurrentNode = Node; CurrentNode != nullptr; CurrentNode = CurrentNode->next) {
+    for (xmlNode *CurrentNode = Node;
+         CurrentNode != nullptr;
+         CurrentNode = CurrentNode->next) {
       
       if (CurrentNode->type == XML_ELEMENT_NODE) {
+        renameCustomClass(CurrentNode, RenamedSymbols, PerformedRenaming);
+        renameAction(CurrentNode, RenamedSymbols, PerformedRenaming);
+        renameOutlet(CurrentNode, RenamedSymbols, PerformedRenaming);
+      }
+      
+      xmlNode *ChildrenNode = CurrentNode->children;
+      if(ChildrenNode != nullptr) {
+        performActualRenaming(ChildrenNode, RenamedSymbols, PerformedRenaming);
+      }
+    }
+  }
+  
+  void renameCustomClass(
+          xmlNode *Node,
+          const std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols,
+          bool &PerformedRenaming) {
+    
+    std::string CustomClass;
+    std::string CustomModule;
+    
+    extractCustomClassAndModule(Node, CustomClass, CustomModule);
+    
+    if(!CustomClass.empty()) {
+      
+      auto SymbolIterator = RenamedSymbols.find(CustomClass);
+      
+      if ( SymbolIterator != RenamedSymbols.end() ) {
+        
+        auto Symbol = SymbolIterator->second;
+        
+        if(shouldRename(Symbol, CustomClass, CustomModule)) {
+          xmlSetProp(Node,
+                     CustomClassAttributeName,
+                     reinterpret_cast<const xmlChar *>(
+                                                Symbol.ObfuscatedName.c_str()));
+          PerformedRenaming = true;
+        }
+      }
+    }
+  }
+  
+  // actions look like this in xml for macos:
+  // <action selector="customAction:" target="XfG-lQ-9wD" id="UKD-iL-45N"/>
+  //
+  // and like this in xml for ios:
+  // <action selector="customAction:" destination="0Ct-JR-NLr" eventType="touchUpInside" id="s2s-A5-aG6"/>
+  //
+  // in order to obfuscate customAction the module name needs to be known
+  // it looks for a node which id attribute's value is equal to
+  // actions's node destination (or target if destination
+  // is not present) attribute value
+  // then it extracts CustomClass/CustomModule needed for check
+  // if customAction should be obfuscated
+  // it does the check and performs renaming if needed
+  void renameAction(
+          xmlNode *Node,
+          const std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols,
+          bool &PerformedRenaming) {
+    
+    if (xmlStrcmp(Node->name, ActionNodeName) == 0) {
+      
+      std::string DestinationOrTarget;
+      
+      if(TargetRuntime == CocoaTouch) {
+        DestinationOrTarget = std::string(
+                              reinterpret_cast<const char *>(
+                                                    xmlGetProp(Node,
+                                                    DestinationAttributeName)));
+        
+      } else if(TargetRuntime == Cocoa) {
+        DestinationOrTarget = std::string(
+                              reinterpret_cast<const char *>(
+                                                     xmlGetProp(Node,
+                                                    TargetAttributeName)));
+      }
+      
+      // find node with which id attribute value == DestinationOrTarget
+      xmlNode *NodeWithDestinationAsId = findNodeWithAttributeValue(
+                           RootNode,
+                           IdAttributeName,
+                           reinterpret_cast<const xmlChar *>
+                                                  (DestinationOrTarget.c_str()),
+                           TraversalDirection::Down);
+      
+      if(NodeWithDestinationAsId != nullptr) {
         
         std::string CustomClass;
         std::string CustomModule;
         
-        for (xmlAttr *CurrentAttribute = CurrentNode->properties; CurrentAttribute != nullptr; CurrentAttribute = CurrentAttribute->next) {
+        // Try to extract CustomClass and CustomModule
+        extractCustomClassAndModule(
+                                    NodeWithDestinationAsId,
+                                    CustomClass,
+                                    CustomModule);
+        
+        // Check if should rename and if yes then perform actual renaming
+        if(!CustomClass.empty()) {
           
-          if(CurrentAttribute->type == XML_ATTRIBUTE_NODE) {
-            
-            if ((!xmlStrcmp(CurrentAttribute->name, CustomClassAttributeName))) {
-              CustomClass = std::string(reinterpret_cast<const char *>(xmlGetProp(CurrentNode, CurrentAttribute->name)));
-            }
-            
-            if ((!xmlStrcmp(CurrentAttribute->name, CustomModuleAttributeName))) {
-              CustomModule = std::string(reinterpret_cast<const char *>(xmlGetProp(CurrentNode, CurrentAttribute->name)));
-            }
-          }
+          std::string SelectorName = std::string(
+                                     reinterpret_cast<const char *>(xmlGetProp(
+                                                 Node,
+                                                 ActionSelectorAttributeName)));
+          
+          std::vector<std::string> SplittedSelName = split(SelectorName, ':');
+          if(!SplittedSelName.empty()) {
           
-          if(!CustomClass.empty()) {
+            std::string SelectorFunctionName = SplittedSelName[0];
             
-            auto SymbolIterator = RenamedSymbols.find(CustomClass);
+            auto SymbolIterator = RenamedSymbols.find(SelectorFunctionName);
             
             if ( SymbolIterator != RenamedSymbols.end() ) {
               
               auto Symbol = SymbolIterator->second;
               
+              SelectorName.replace(0,
+                                   Symbol.OriginalName.length(),
+                                   Symbol.ObfuscatedName);
+              
               if(shouldRename(Symbol, CustomClass, CustomModule)) {
-                xmlSetProp(CurrentNode, CustomClassAttributeName, reinterpret_cast<const xmlChar *>(Symbol.ObfuscatedName.c_str()));
-                performedRenaming = true;
+                xmlSetProp(Node,
+                           ActionSelectorAttributeName,
+                           reinterpret_cast<const xmlChar *>(
+                                                         SelectorName.c_str()));
+                
+                PerformedRenaming = true;
               }
             }
-            
-            CustomClass.clear();
-            CustomModule.clear();
           }
         }
       }
+    }
+  }
+  
+  // outlets look like this in xml:
+  // <outlet property="prop_name" destination="x0y-zc-UQE" id="IiG-Jc-DUb"/>
+  //
+  // in order to obfuscate prop_name the module name needs to be known
+  // first it looks for a node which id attribute's value is equal
+  // to outlet's node destination attribute value
+  // if it finds such node then it checks if it has
+  // CustomClass and CustomModule attributes
+  // if not then it means that it's probably somewhere higher in the hierarchy
+  // so it looks for the closest parent which has CustomClass attribute
+  // then when it finally have CustomClass/CustomModule needed for check
+  // if prop_name should be obfuscated
+  // it does the check and performs renaming if needed
+  void renameOutlet(
+          xmlNode *Node,
+          const std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols,
+          bool &PerformedRenaming) {
+    
+    if (xmlStrcmp(Node->name, OutletNodeName) == 0) {
+      
+      std::string Destination = std::string(
+                                reinterpret_cast<const char *>(xmlGetProp(
+                                                    Node,
+                                                    DestinationAttributeName)));
+      
+      // find node with which id attribute value == Destination
+      xmlNode *NodeWithDestinationAsId = findNodeWithAttributeValue(
+                                  RootNode,
+                                  IdAttributeName,
+                                  reinterpret_cast<const xmlChar *>
+                                                          (Destination.c_str()),
+                                  TraversalDirection::Down);
       
-      performActualRenaming(CurrentNode->children, RenamedSymbols, performedRenaming);
+      if(NodeWithDestinationAsId != nullptr) {
+        
+        std::string CustomClass;
+        std::string CustomModule;
+        
+        // Try to extract CustomClass and CustomModule
+        extractCustomClassAndModule(NodeWithDestinationAsId,
+                                    CustomClass,
+                                    CustomModule);
+        
+        // find CustomClass attribute value to check
+        // if outlet name should be renamed
+        if(CustomClass.empty()) {
+          
+          //CustomClass was not present in a Node where id == Destination
+          // so search for closest parent Node with custom class
+          xmlNode *Parent = findNodeWithAttributeValue(
+                                                      NodeWithDestinationAsId,
+                                                      CustomClassAttributeName,
+                                                      nullptr,
+                                                      TraversalDirection::Up);
+          
+          if(Parent != nullptr) {
+            
+            // Again, try to extract CustomClass and CustomModule
+            extractCustomClassAndModule(Parent, CustomClass, CustomModule);
+          }
+        }
+        
+        // Check if should rename and if yes then perform actual renaming
+        if(!CustomClass.empty()) {
+          
+          std::string PropertyName = std::string(
+                                     reinterpret_cast<const char *>(xmlGetProp(
+                                                 Node,
+                                                 OutletPropertyAttributeName)));
+          
+          auto SymbolIterator = RenamedSymbols.find(PropertyName);
+          
+          if ( SymbolIterator != RenamedSymbols.end() ) {
+            
+            auto Symbol = SymbolIterator->second;
+            
+            if(shouldRename(Symbol, CustomClass, CustomModule)) {
+              xmlSetProp(Node,
+                         OutletPropertyAttributeName,
+                         reinterpret_cast<const xmlChar *>
+                                               (Symbol.ObfuscatedName.c_str()));
+              
+              PerformedRenaming = true;
+            }
+          }
+        }
+      }
     }
   }
 };
   
 LayoutRenamer::LayoutRenamer(std::string FileName) {
   this->FileName = FileName;
-  XmlDocument = xmlReadFile(FileName.c_str(), /* encoding */ "UTF-8", /* options */ 0);
+  XmlDocument = xmlReadFile(FileName.c_str(),
+                            /* encoding */ "UTF-8",
+                            /* options */ 0);
 }
 
 LayoutRenamer::~LayoutRenamer() {
@@ -84,16 +412,32 @@ LayoutRenamer::~LayoutRenamer() {
 // For now we support layout files with root node that looks like this:
 // <document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" ... >
 // where type can be Cocoa or CocoaTouch .XIB or .Storyboard.XIB
-llvm::Expected<std::unique_ptr<BaseLayoutRenamingStrategy>> LayoutRenamer::createRenamingStrategy(xmlNode *RootNode) {
+llvm::Expected<std::unique_ptr<BaseLayoutRenamingStrategy>>
+  LayoutRenamer::createRenamingStrategy(xmlNode *RootNode) {
+    
   const auto *RootNodeName = reinterpret_cast<const xmlChar *>("document");
   
-  if ((!xmlStrcmp(RootNode->name, RootNodeName))) {
+  if (xmlStrcmp(RootNode->name, RootNodeName) == 0) {
     
-    const auto *RootNodeTypeAttributeName = reinterpret_cast<const xmlChar *>("type");
-    const auto *RootNodeVersionAttributeName = reinterpret_cast<const xmlChar *>("version");
+    const auto *
+    RootNodeTypeAttributeName = reinterpret_cast<const xmlChar *>("type");
     
-    auto TypeAttributeValue = std::string(reinterpret_cast<const char *>(xmlGetProp(RootNode, RootNodeTypeAttributeName)));
-    auto VersionAttributeValue = std::string(reinterpret_cast<const char *>(xmlGetProp(RootNode, RootNodeVersionAttributeName)));
+    const auto *
+    RootNodeVersionAttributeName = reinterpret_cast<const xmlChar *>("version");
+    
+    const auto *
+    TargetRuntimeAttributeName = reinterpret_cast<const xmlChar *>
+                                                              ("targetRuntime");
+    
+    auto TypeAttributeValue = std::string(
+                              reinterpret_cast<const char *>(xmlGetProp(
+                                                   RootNode,
+                                                   RootNodeTypeAttributeName)));
+    
+    auto VersionAttributeValue = std::string(
+                                 reinterpret_cast<const char *>(xmlGetProp(
+                                                RootNode,
+                                                RootNodeVersionAttributeName)));
 
     std::set<std::string> SupportedDocumentTypes = {
       "com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB",
@@ -102,13 +446,39 @@ llvm::Expected<std::unique_ptr<BaseLayoutRenamingStrategy>> LayoutRenamer::creat
       "com.apple.InterfaceBuilder3.Cocoa.XIB"
     };
     
-    if(SupportedDocumentTypes.find(TypeAttributeValue) != SupportedDocumentTypes.end() && VersionAttributeValue == "3.0") {
-      return llvm::make_unique<XCode9RenamingStrategy>();
+    if(SupportedDocumentTypes.find(TypeAttributeValue) !=
+                                                    SupportedDocumentTypes.end()
+       && VersionAttributeValue == "3.0") {
+      
+      // try to find out what the target platform is
+      xmlChar* TargetRuntimeValue = xmlGetProp(RootNode,
+                                               TargetRuntimeAttributeName);
+      
+      TargetRuntime TargetRuntime = Undefined;
+      if(TargetRuntimeValue != nullptr) {
+        std::string TargetRuntimeValueStr = std::string(
+                                            reinterpret_cast<const char *>(
+                                                           TargetRuntimeValue));
+        
+        if (TargetRuntimeValueStr.find("CocoaTouch") != std::string::npos) {
+          TargetRuntime = CocoaTouch;
+        } else if (TargetRuntimeValueStr.find("Cocoa") != std::string::npos) {
+          TargetRuntime = Cocoa;
+        }
+      }
+      
+      if(TargetRuntime == Undefined) {
+        return stringError("Could not parse target runtime in: " + FileName);
+      }
+      
+      return llvm::make_unique<XCode9RenamingStrategy>(RootNode, TargetRuntime);
     } else {
 
-      // Probably a new version of layout file came out and it should be handled separately.
-      // Create a new BaseLayoutRenamingStrategy implementation and update this method so
-      // it returns correct Strategy for specific version of the layout file.
+      // Probably a new version of layout file came out
+      // and it should be handled separately.
+      // Create a new BaseLayoutRenamingStrategy implementation
+      // and update this method so it returns correct Strategy for specific
+      // version of the layout file.
       return stringError("Unknown layout file version for layout: " + FileName);
     }
   } else {
@@ -116,7 +486,10 @@ llvm::Expected<std::unique_ptr<BaseLayoutRenamingStrategy>> LayoutRenamer::creat
   }
 }
 
-llvm::Expected<bool> LayoutRenamer::performRenaming(std::unordered_map<std::string, SymbolRenaming> RenamedSymbols, std::string OutputPath) {
+llvm::Expected<bool>
+  LayoutRenamer::performRenaming(
+                 std::unordered_map<std::string, SymbolRenaming> RenamedSymbols,
+                 std::string OutputPath) {
 
   if (XmlDocument == nullptr) {
     return stringError("Could not parse file: " + FileName);
@@ -132,12 +505,16 @@ llvm::Expected<bool> LayoutRenamer::performRenaming(std::unordered_map<std::stri
   
   auto RenamingStrategy = std::move(RenamingStrategyOrError.get());
   
-  bool performedRenaming = false;
-  RenamingStrategy->performActualRenaming(RootNode, RenamedSymbols, performedRenaming);
+  bool PerformedRenaming = false;
+  RenamingStrategy->performActualRenaming(RootNode,
+                                          RenamedSymbols,
+                                          PerformedRenaming);
   
-  xmlSaveFileEnc(static_cast<const char *>(OutputPath.c_str()), XmlDocument, reinterpret_cast<const char *>(XmlDocument->encoding));
+  xmlSaveFileEnc(static_cast<const char *>(OutputPath.c_str()),
+                 XmlDocument,
+                 reinterpret_cast<const char *>(XmlDocument->encoding));
   
-  return performedRenaming;
+  return PerformedRenaming;
 }
         
 } //namespace obfuscation
diff --git a/swift/lib/Obfuscation/Utils.cpp b/swift/lib/Obfuscation/Utils.cpp
index 421bcb22d99..5139cff3f82 100644
--- a/swift/lib/Obfuscation/Utils.cpp
+++ b/swift/lib/Obfuscation/Utils.cpp
@@ -8,5 +8,17 @@ llvm::Error stringError(const std::string Message,
   return llvm::make_error<llvm::StringError>(Message, Error);
 }
 
+std::vector<std::string> split(const std::string &String, char Delimiter) {
+  std::vector<std::string> SplittedElements;
+  
+  std::stringstream StringStream(String);
+  std::string Item;
+  while (std::getline(StringStream, Item, Delimiter)) {
+    SplittedElements.push_back(Item);
+  }
+  
+  return SplittedElements;
+}
+  
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/test/Obfuscation/FullProcess/LayoutStoryboard/Expected/LayoutStoryboard.storyboard b/swift/test/Obfuscation/FullProcess/LayoutStoryboard/Expected/LayoutStoryboard.storyboard
index 1a680913d27..92ee62fb934 100644
--- a/swift/test/Obfuscation/FullProcess/LayoutStoryboard/Expected/LayoutStoryboard.storyboard
+++ b/swift/test/Obfuscation/FullProcess/LayoutStoryboard/Expected/LayoutStoryboard.storyboard
@@ -1,34 +1,35 @@
 <?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<document type="com.apple.InterfaceBuilder3.Cocoa.Storyboard.XIB" version="3.0" toolsVersion="11134" systemVersion="15F34" targetRuntime="MacOSX.Cocoa" propertyAccessControl="none" useAutolayout="YES" initialViewController="B8D-0N-5wS">
+<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="10117" systemVersion="15G31" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" initialViewController="0Ct-JR-NLr">
     <dependencies>
-        <plugIn identifier="com.apple.InterfaceBuilder.CocoaPlugin" version="11134"/>
+        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="10085"/>
+        <capability name="Constraints to layout margins" minToolsVersion="6.0"/>
     </dependencies>
     <scenes>
-        <!--Application-->
-        <scene sceneID="JPo-4y-FX3">
+        <!--Grind Size View Controller-->
+        <scene sceneID="PFL-L9-gju">
             <objects>
-                <customObject id="Voe-Tx-rLC" customClass="T1_AppDelegate" customModuleProvider="target"/>
-                <customObject id="YLy-65-1bz" customClass="NSFontManager"/>
-                <customObject id="Ady-hI-5gd" userLabel="First Responder" customClass="NSResponder" sceneMemberID="firstResponder"/>
-            </objects>
-            <point key="canvasLocation" x="75" y="0.0"/>
-        </scene>
-        
-        <!--View Controller-->
-        <scene sceneID="hIz-AP-VOD">
-            <objects>
-                <viewController id="XfG-lQ-9wD" customClass="T1_ViewController" customModuleProvider="target" sceneMemberID="viewController">
-                    <view key="view" wantsLayer="YES" id="m2S-Jp-Qdl">
-                        <rect key="frame" x="0.0" y="0.0" width="480" height="270"/>
-                        <autoresizingMask key="autoresizingMask"/>
+                <viewController storyboardIdentifier="GrindSize" id="0Ct-JR-NLr" customClass="T1_ViewController" customModuleProvider="target" sceneMemberID="viewController">
+                    <view key="view" contentMode="scaleToFill" id="Rup-1M-OlM">
+                        <rect key="frame" x="0.0" y="0.0" width="600" height="600"/>
+                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
+                        <subviews>
+                            
+                            <button opaque="NO" contentMode="scaleToFill" contentHorizontalAlignment="center" contentVerticalAlignment="center" buttonType="roundedRect" lineBreakMode="middleTruncation" translatesAutoresizingMaskIntoConstraints="NO" id="meq-CM-Km8">
+                                <rect key="frame" x="175" y="218" width="250" height="30"/>
+                                <state key="normal" title="Tap here to provider numerical value"/>
+                                <connections>
+                                    <action selector="NF1_switchInputRepresentation:" destination="0Ct-JR-NLr" eventType="touchUpInside" id="s2s-A5-aG6"/>
+                                </connections>
+                            </button>
+                            
+                        </subviews>
+                        
                     </view>
+                    <connections>
+                        <outlet property="V1_informativeLabel" destination="0Ct-JR-NLr" id="ZSk-it-QCA"/>
+                    </connections>
                 </viewController>
-                <customObject id="rPt-NT-nkU" userLabel="First Responder" customClass="NSResponder" sceneMemberID="firstResponder"/>
             </objects>
-            <point key="canvasLocation" x="75" y="655"/>
         </scene>
     </scenes>
 </document>
-
-
-
diff --git a/swift/test/Obfuscation/FullProcess/LayoutStoryboard/Expected/LayoutStoryboard.swift b/swift/test/Obfuscation/FullProcess/LayoutStoryboard/Expected/LayoutStoryboard.swift
index 8f4baeb60fd..b2b16097410 100644
--- a/swift/test/Obfuscation/FullProcess/LayoutStoryboard/Expected/LayoutStoryboard.swift
+++ b/swift/test/Obfuscation/FullProcess/LayoutStoryboard/Expected/LayoutStoryboard.swift
@@ -1,3 +1,12 @@
 
-class T1_AppDelegate {}
-class T1_ViewController {}
+import Cocoa
+
+class T1_ViewController {
+  
+  @IBOutlet weak var V1_informativeLabel: NSButton!
+
+  @IBAction func NF1_switchInputRepresentation(_ IP1_sender: NSButton) {
+  }
+  
+}
+
diff --git a/swift/test/Obfuscation/FullProcess/LayoutStoryboard/LayoutStoryboard.storyboard b/swift/test/Obfuscation/FullProcess/LayoutStoryboard/LayoutStoryboard.storyboard
index 7251ccf651c..5121037c7da 100644
--- a/swift/test/Obfuscation/FullProcess/LayoutStoryboard/LayoutStoryboard.storyboard
+++ b/swift/test/Obfuscation/FullProcess/LayoutStoryboard/LayoutStoryboard.storyboard
@@ -1,34 +1,35 @@
 <?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<document type="com.apple.InterfaceBuilder3.Cocoa.Storyboard.XIB" version="3.0" toolsVersion="11134" systemVersion="15F34" targetRuntime="MacOSX.Cocoa" propertyAccessControl="none" useAutolayout="YES" initialViewController="B8D-0N-5wS">
+<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="10117" systemVersion="15G31" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" initialViewController="0Ct-JR-NLr">
     <dependencies>
-        <plugIn identifier="com.apple.InterfaceBuilder.CocoaPlugin" version="11134"/>
+        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="10085"/>
+        <capability name="Constraints to layout margins" minToolsVersion="6.0"/>
     </dependencies>
     <scenes>
-        <!--Application-->
-        <scene sceneID="JPo-4y-FX3">
+        <!--Grind Size View Controller-->
+        <scene sceneID="PFL-L9-gju">
             <objects>
-                <customObject id="Voe-Tx-rLC" customClass="AppDelegate" customModuleProvider="target"/>
-                <customObject id="YLy-65-1bz" customClass="NSFontManager"/>
-                <customObject id="Ady-hI-5gd" userLabel="First Responder" customClass="NSResponder" sceneMemberID="firstResponder"/>
-            </objects>
-            <point key="canvasLocation" x="75" y="0.0"/>
-        </scene>
-        
-        <!--View Controller-->
-        <scene sceneID="hIz-AP-VOD">
-            <objects>
-                <viewController id="XfG-lQ-9wD" customClass="ViewController" customModuleProvider="target" sceneMemberID="viewController">
-                    <view key="view" wantsLayer="YES" id="m2S-Jp-Qdl">
-                        <rect key="frame" x="0.0" y="0.0" width="480" height="270"/>
-                        <autoresizingMask key="autoresizingMask"/>
+                <viewController storyboardIdentifier="GrindSize" id="0Ct-JR-NLr" customClass="ViewController" customModuleProvider="target" sceneMemberID="viewController">
+                    <view key="view" contentMode="scaleToFill" id="Rup-1M-OlM">
+                        <rect key="frame" x="0.0" y="0.0" width="600" height="600"/>
+                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
+                        <subviews>
+                            
+                            <button opaque="NO" contentMode="scaleToFill" contentHorizontalAlignment="center" contentVerticalAlignment="center" buttonType="roundedRect" lineBreakMode="middleTruncation" translatesAutoresizingMaskIntoConstraints="NO" id="meq-CM-Km8">
+                                <rect key="frame" x="175" y="218" width="250" height="30"/>
+                                <state key="normal" title="Tap here to provider numerical value"/>
+                                <connections>
+                                    <action selector="switchInputRepresentation:" destination="0Ct-JR-NLr" eventType="touchUpInside" id="s2s-A5-aG6"/>
+                                </connections>
+                            </button>
+                            
+                        </subviews>
+                        
                     </view>
+                    <connections>
+                        <outlet property="informativeLabel" destination="0Ct-JR-NLr" id="ZSk-it-QCA"/>
+                    </connections>
                 </viewController>
-                <customObject id="rPt-NT-nkU" userLabel="First Responder" customClass="NSResponder" sceneMemberID="firstResponder"/>
             </objects>
-            <point key="canvasLocation" x="75" y="655"/>
         </scene>
     </scenes>
 </document>
-
-
-
diff --git a/swift/test/Obfuscation/FullProcess/LayoutStoryboard/LayoutStoryboard.swift b/swift/test/Obfuscation/FullProcess/LayoutStoryboard/LayoutStoryboard.swift
index 4c8dc214022..5f6e76a7910 100644
--- a/swift/test/Obfuscation/FullProcess/LayoutStoryboard/LayoutStoryboard.swift
+++ b/swift/test/Obfuscation/FullProcess/LayoutStoryboard/LayoutStoryboard.swift
@@ -1,4 +1,12 @@
 //RUN: %target-prepare-obfuscation-with-storyboard "LayoutStoryboard" %target-run-full-obfuscation
 
-class AppDelegate {}
-class ViewController {}
+import Cocoa
+
+class ViewController {
+  
+  @IBOutlet weak var informativeLabel: NSButton!
+
+  @IBAction func switchInputRepresentation(_ sender: NSButton) {
+  }
+
+}
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedLayout/Expected/UnsupportedLayout.storyboard b/swift/test/Obfuscation/FullProcess/UnsupportedLayout/Expected/UnsupportedLayout.storyboard
deleted file mode 100644
index b8154349597..00000000000
--- a/swift/test/Obfuscation/FullProcess/UnsupportedLayout/Expected/UnsupportedLayout.storyboard
+++ /dev/null
@@ -1,35 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="10117" systemVersion="15G31" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" initialViewController="0Ct-JR-NLr">
-    <dependencies>
-        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="10085"/>
-        <capability name="Constraints to layout margins" minToolsVersion="6.0"/>
-    </dependencies>
-    <scenes>
-        <!--Grind Size View Controller-->
-        <scene sceneID="PFL-L9-gju">
-            <objects>
-                <viewController storyboardIdentifier="GrindSize" id="0Ct-JR-NLr" customClass="T1_ViewController" customModule="Dropnote" customModuleProvider="target" sceneMemberID="viewController">
-                    <view key="view" contentMode="scaleToFill" id="Rup-1M-OlM">
-                        <rect key="frame" x="0.0" y="0.0" width="600" height="600"/>
-                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
-                        <subviews>
-                            
-                            <button opaque="NO" contentMode="scaleToFill" contentHorizontalAlignment="center" contentVerticalAlignment="center" buttonType="roundedRect" lineBreakMode="middleTruncation" translatesAutoresizingMaskIntoConstraints="NO" id="meq-CM-Km8">
-                                <rect key="frame" x="175" y="218" width="250" height="30"/>
-                                <state key="normal" title="Tap here to provider numerical value"/>
-                                <connections>
-                                    <action selector="NF1_switchInputRepresentation:" destination="0Ct-JR-NLr" eventType="touchUpInside" id="s2s-A5-aG6"/>
-                                </connections>
-                            </button>
-                            
-                        </subviews>
-                        
-                    </view>
-                    <connections>
-                        <outlet property="V1_informativeLabel" destination="qaH-It-zsV" id="ZSk-it-QCA"/>
-                    </connections>
-                </viewController>
-            </objects>
-        </scene>
-    </scenes>
-</document>
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedLayout/Expected/UnsupportedLayout.swift b/swift/test/Obfuscation/FullProcess/UnsupportedLayout/Expected/UnsupportedLayout.swift
deleted file mode 100644
index 078f57e571e..00000000000
--- a/swift/test/Obfuscation/FullProcess/UnsupportedLayout/Expected/UnsupportedLayout.swift
+++ /dev/null
@@ -1,12 +0,0 @@
-
-import AppKit
-
-class T1_ViewController {
-  
-  @IBOutlet weak var V1_informativeLabel: UIButton!
-
-  @IBAction func NF1_switchInputRepresentation(_ sender: UIButton) {
-  }
-  
-}
-
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedLayout/UnsupportedLayout.storyboard b/swift/test/Obfuscation/FullProcess/UnsupportedLayout/UnsupportedLayout.storyboard
deleted file mode 100644
index f21d3a7d8e2..00000000000
--- a/swift/test/Obfuscation/FullProcess/UnsupportedLayout/UnsupportedLayout.storyboard
+++ /dev/null
@@ -1,35 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="10117" systemVersion="15G31" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" initialViewController="0Ct-JR-NLr">
-    <dependencies>
-        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="10085"/>
-        <capability name="Constraints to layout margins" minToolsVersion="6.0"/>
-    </dependencies>
-    <scenes>
-        <!--Grind Size View Controller-->
-        <scene sceneID="PFL-L9-gju">
-            <objects>
-                <viewController storyboardIdentifier="GrindSize" id="0Ct-JR-NLr" customClass="ViewController" customModule="Dropnote" customModuleProvider="target" sceneMemberID="viewController">
-                    <view key="view" contentMode="scaleToFill" id="Rup-1M-OlM">
-                        <rect key="frame" x="0.0" y="0.0" width="600" height="600"/>
-                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
-                        <subviews>
-                            
-                            <button opaque="NO" contentMode="scaleToFill" contentHorizontalAlignment="center" contentVerticalAlignment="center" buttonType="roundedRect" lineBreakMode="middleTruncation" translatesAutoresizingMaskIntoConstraints="NO" id="meq-CM-Km8">
-                                <rect key="frame" x="175" y="218" width="250" height="30"/>
-                                <state key="normal" title="Tap here to provider numerical value"/>
-                                <connections>
-                                    <action selector="switchInputRepresentation:" destination="0Ct-JR-NLr" eventType="touchUpInside" id="s2s-A5-aG6"/>
-                                </connections>
-                            </button>
-                            
-                        </subviews>
-                        
-                    </view>
-                    <connections>
-                        <outlet property="informativeLabel" destination="qaH-It-zsV" id="ZSk-it-QCA"/>
-                    </connections>
-                </viewController>
-            </objects>
-        </scene>
-    </scenes>
-</document>
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedLayout/UnsupportedLayout.swift b/swift/test/Obfuscation/FullProcess/UnsupportedLayout/UnsupportedLayout.swift
deleted file mode 100644
index a554347afd7..00000000000
--- a/swift/test/Obfuscation/FullProcess/UnsupportedLayout/UnsupportedLayout.swift
+++ /dev/null
@@ -1,14 +0,0 @@
-//XFAIL: *
-
-//RUN: %target-prepare-obfuscation-with-storyboard "UnsupportedLayout" %target-run-full-obfuscation
-
-import AppKit
-
-class ViewController {
-  
-  @IBOutlet weak var informativeLabel: UIButton!
-
-  @IBAction func switchInputRepresentation(_ sender: UIButton) {
-  }
-
-}
-- 
2.17.1 (Apple Git-112)


From e856dbf38b9976b22ceaf3b2fa1c0c94db56f4f5 Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Wed, 21 Feb 2018 13:18:03 +0100
Subject: [PATCH 076/138] proper renaming of generic types names

Reviewers: jerzy.kleszcz, krzysztof.siejkowski

Reviewed By: krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2845
---
 .../NominalTypeDeclarationParser.cpp          |  4 ++--
 .../FullProcess/Types/Expected/Types.swift    | 22 ++++++++++++++-----
 .../Obfuscation/FullProcess/Types/Types.swift | 15 +++++++++++--
 .../Expected/UnsupportedFailing.swift         |  4 ----
 .../UnsupportedTypes/UnsupportedFailing.swift |  4 ----
 5 files changed, 32 insertions(+), 17 deletions(-)

diff --git a/swift/lib/Obfuscation/NominalTypeDeclarationParser.cpp b/swift/lib/Obfuscation/NominalTypeDeclarationParser.cpp
index f43db86c9e8..698416f68eb 100644
--- a/swift/lib/Obfuscation/NominalTypeDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/NominalTypeDeclarationParser.cpp
@@ -29,10 +29,10 @@ SingleSymbolOrError parse(const NominalTypeDecl* Declaration) {
   auto ModuleNameAndParts = moduleNameAndParts(Declaration);
   std::string ModuleName = ModuleNameAndParts.first;
   std::vector<std::string> Parts = ModuleNameAndParts.second;
-  std::string SymbolName = typeName(Declaration);
+  std::string SymbolName = Declaration->getBaseName().getIdentifier().str();
   
   auto NominalTypeParts = nominalTypeIdentifierParts(Declaration,
-                                                     SymbolName);
+                                                     typeName(Declaration));
   if (auto Error = NominalTypeParts.takeError()) {
     return std::move(Error);
   }
diff --git a/swift/test/Obfuscation/FullProcess/Types/Expected/Types.swift b/swift/test/Obfuscation/FullProcess/Types/Expected/Types.swift
index 3b004f7c98c..8afa10f20cd 100644
--- a/swift/test/Obfuscation/FullProcess/Types/Expected/Types.swift
+++ b/swift/test/Obfuscation/FullProcess/Types/Expected/Types.swift
@@ -12,12 +12,10 @@ protocol T1_SampleProtocol {}
 struct T1_SampleStruct {}
 
 class T1_Outer {
-  class T1_Outer.Inner {
-    struct T1_Outer.Inner.InnerStruct: T1_SampleProtocol{
+  class T1_Inner {
+    struct T1_InnerStruct: T1_SampleProtocol{
       func NF1_foo() {
         class T1_InsideFunc: Array<T1_SampleClass?> {}
-        
-        extension T1_InsideFunc {}
       }
     }
   }
@@ -32,5 +30,19 @@ class T1_CustomNSString : NSString {}
 extension NSBoolean {}
 
 struct T1_CustomCFLocaleKey: CFLocaleKey {
-  class T1_CustomCFLocaleKey.CustomGenericNSString: Array<NSString> {}
+  class T1_CustomGenericNSString: Array<NSString> {}
+}
+
+struct T1_Generic<GenericParam> {
+  class T1_InsideGeneric: T1_Generic<String> { }
+}
+
+class T1_RenameGenericTypeConcretization: T1_Generic<T1_SampleProtocol> {}
+
+class T1_A {
+  struct T1_B {}
+}
+
+class T1_C {
+  struct T2_B {}
 }
diff --git a/swift/test/Obfuscation/FullProcess/Types/Types.swift b/swift/test/Obfuscation/FullProcess/Types/Types.swift
index a32d6ea8dbc..455c9579159 100644
--- a/swift/test/Obfuscation/FullProcess/Types/Types.swift
+++ b/swift/test/Obfuscation/FullProcess/Types/Types.swift
@@ -17,8 +17,6 @@ class Outer {
     struct InnerStruct: SampleProtocol{
       func foo() {
         class InsideFunc: Array<SampleClass?> {}
-        
-        extension InsideFunc {}
       }
     }
   }
@@ -36,3 +34,16 @@ struct CustomCFLocaleKey: CFLocaleKey {
   class CustomGenericNSString: Array<NSString> {}
 }
 
+struct Generic<GenericParam> {
+  class InsideGeneric: Generic<String> {}
+}
+
+class RenameGenericTypeConcretization: Generic<SampleProtocol> {}
+
+class A {
+  struct B {}
+}
+
+class C {
+  struct B {}
+}
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedTypes/Expected/UnsupportedFailing.swift b/swift/test/Obfuscation/FullProcess/UnsupportedTypes/Expected/UnsupportedFailing.swift
index 2d79e2c9f5d..d5fa35ac774 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedTypes/Expected/UnsupportedFailing.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedTypes/Expected/UnsupportedFailing.swift
@@ -1,10 +1,6 @@
 
 protocol T1_SampleProtocol { }
 
-struct T1_Generic<GenericParam> {
-  class T1_InsideGeneric: Generic<T1_SampleProtocol> { }
-}
-
 class T1_`BackticksName` {}
 
 class T1_`BackticksNameGeneric`<`BackticksGenericParam`> {
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedTypes/UnsupportedFailing.swift b/swift/test/Obfuscation/FullProcess/UnsupportedTypes/UnsupportedFailing.swift
index 53ae374b532..d141c0a5026 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedTypes/UnsupportedFailing.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedTypes/UnsupportedFailing.swift
@@ -4,10 +4,6 @@
 
 protocol SampleProtocol { }
 
-struct Generic<GenericParam> {
-  class InsideGeneric: Generic<SampleProtocol> {}
-}
-
 class `BackticksName` {}
 
 class `BackticksNameGeneric`<`BackticksGenericParam`> {
-- 
2.17.1 (Apple Git-112)


From 482f3e2d58f4e7c3dce835abd24c75ea5bcba8dd Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Mon, 19 Feb 2018 18:37:27 +0100
Subject: [PATCH 077/138] Renaming memberwise constructors parameters

Reviewers: michal.zielinski, krzysztof.siejkowski

Reviewed By: michal.zielinski, krzysztof.siejkowski

Subscribers: michal.zielinski, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2844
---
 .../Obfuscation/DeclarationParsingUtils.h     |  4 ++
 .../Obfuscation/ParameterDeclarationParser.h  |  5 +-
 .../Obfuscation/DeclarationParsingUtils.cpp   | 21 ++++++++
 .../Obfuscation/FunctionDeclarationParser.cpp |  2 +-
 .../ParameterDeclarationParser.cpp            | 52 +++++++++++++++----
 .../Expected/FunctionParameterNames.swift     | 20 +++++++
 .../FunctionParameterNames.swift              | 20 +++++++
 .../UnsupportedFunctionParameterNames.swift   |  8 ---
 .../UnsupportedFunctionParameterNames.swift   |  8 ---
 .../Inputs/ExpectedSymbols.json               | 12 ++---
 10 files changed, 118 insertions(+), 34 deletions(-)

diff --git a/swift/include/swift/Obfuscation/DeclarationParsingUtils.h b/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
index 3fa3762aeae..64ef68d63a4 100644
--- a/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
+++ b/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
@@ -38,6 +38,10 @@ template<class T>
 const T* baseOverridenDeclarationWithModules(const T *Declaration,
                                             std::set<std::string> &Modules);
 
+bool isMemberwise(const ConstructorDecl* Declaration);
+
+bool isMemberwiseConstructorParameter(const ParamDecl* Declaration);
+
 } //namespace obfuscation
 } //namespace swift
   
diff --git a/swift/include/swift/Obfuscation/ParameterDeclarationParser.h b/swift/include/swift/Obfuscation/ParameterDeclarationParser.h
index 884684af88b..3018aea3e42 100644
--- a/swift/include/swift/Obfuscation/ParameterDeclarationParser.h
+++ b/swift/include/swift/Obfuscation/ParameterDeclarationParser.h
@@ -15,9 +15,12 @@ namespace obfuscation {
   
 SymbolsOrError
 parseSeparateFunctionDeclarationForParameters(const AbstractFunctionDecl* Declaration);
-
+  
 SymbolsOrError
 parseFunctionFromCallExpressionForParameters(const FuncDecl* Declaration);
+
+SingleSymbolOrError
+symbolFromMemberwiseConstructorParameter(const ParamDecl* Parameter);
   
 SymbolsOrError parseSeparateDeclarationWithRange(const ParamDecl* Declaration,
                                                  CharSourceRange Range);
diff --git a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
index 50ea6d32737..24a2848180d 100644
--- a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
+++ b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
@@ -91,6 +91,27 @@ template const AbstractFunctionDecl*
 baseOverridenDeclarationWithModules(const AbstractFunctionDecl *Declaration,
                                     std::set<std::string> &Modules);
 
+// Determines if the ConstructorDecl represents the Struct Memberwise
+// Initializer. Checks if the declaration is implicit. Also checks if
+// parameters list (other than self parameter) is not empty to exclude
+// Default Initializers.
+bool isMemberwiseConstructor(const ConstructorDecl* Declaration) {
+  auto ConstructsStruct = Declaration->getResultInterfaceType()->
+  getStructOrBoundGenericStruct() != nullptr;
+  
+  return ConstructsStruct
+  && Declaration->isImplicit()
+  && Declaration->getParameters()->size() != 0;
+}
+  
+bool isMemberwiseConstructorParameter(const ParamDecl* Declaration) {
+  auto *Context = Declaration->getDeclContext();
+  if (const auto *ConstructorDeclaration = dyn_cast<ConstructorDecl>(Context)) {
+    return isMemberwiseConstructor(ConstructorDeclaration);
+  }
+  return false;
+}
+
 } //namespace obfuscation
 } //namespace swift
 
diff --git a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
index bf91865c792..257d26e4a00 100644
--- a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
@@ -107,7 +107,7 @@ SymbolsOrError parseOverridenDeclaration(const FuncDecl *Declaration,
 }
 
 SymbolsOrError parse(const ConstructorDecl* Declaration, CharSourceRange Range) {
-    return parseSeparateFunctionDeclarationForParameters(Declaration);
+  return parseSeparateFunctionDeclarationForParameters(Declaration);
 }
   
 SymbolsOrError parse(const FuncDecl* Declaration, CharSourceRange Range) {
diff --git a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
index 13ae07691a6..11458b7ca58 100644
--- a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
@@ -1,5 +1,6 @@
 #include "swift/Obfuscation/ParameterDeclarationParser.h"
 #include "swift/Obfuscation/FunctionDeclarationParser.h"
+#include "swift/Obfuscation/VariableDeclarationParser.h"
 #include "swift/Obfuscation/DeclarationParsingUtils.h"
 #include "swift/Obfuscation/Utils.h"
 
@@ -140,6 +141,26 @@ SymbolsOrError parametersSymbolsFromFunction(const AbstractFunctionDecl* Declara
   return Symbols;
 }
 
+SingleSymbolOrError
+symbolFromMemberwiseConstructorParameter(const ParamDecl* Parameter) {
+  auto *Context = Parameter->getDeclContext();
+  if (const auto *Constructor = dyn_cast<ConstructorDecl>(Context)) {
+    auto *StructDeclaration =
+    Constructor->getResultInterfaceType()->getStructOrBoundGenericStruct();
+    auto Properties = StructDeclaration->getStoredProperties();
+    for (auto Variable : Properties) {
+      if (declarationName(Variable) == declarationName(Parameter)) {
+        return parse(Variable);
+      }
+    }
+    return stringError("Failed to find struct property with the same name as "
+                "memberwise constructor parameter");
+  } else {
+    return stringError("Failed to parse constructor declaration"
+                       "from parameter");
+  }
+}
+
 SymbolsOrError
 parseSeparateFunctionDeclarationForParameters(const AbstractFunctionDecl* Declaration) {
   return parametersSymbolsFromFunction(Declaration);
@@ -189,25 +210,36 @@ SymbolsOrError parseSeparateDeclarationWithRange(const ParamDecl* Declaration,
   return Result;
 }
 
-llvm::Expected<SymbolWithRange> buildSymbol(Identifier Name,
-                                            ValueDecl *Decl,
+llvm::Expected<SymbolWithRange> buildSymbol(Identifier Name, ValueDecl *Decl,
                                             CharSourceRange Range) {
   if (const auto *FunctionDecl = dyn_cast<AbstractFunctionDecl>(Decl)) {
     auto ParameterLists = FunctionDecl->getParameterLists();
     auto ParameterName = Name.str();
-
+    
     for (auto *ParameterList: ParameterLists) {
       for (auto *Parameter : *ParameterList) {
         if (ParameterName == internalParameterName(Parameter)
             || ParameterName == externalParameterName(Parameter)) {
-          SymbolsOrError Symbols = parse(Parameter);
-          if (auto Error = Symbols.takeError()) {
-            return std::move(Error);
+          
+          if (isMemberwiseConstructorParameter(Parameter)) {
+            auto SymbolOrError =
+            symbolFromMemberwiseConstructorParameter(Parameter);
+            if (auto Error = SymbolOrError.takeError()) {
+              return std::move(Error);
+            } else {
+              auto Symbol = SymbolOrError.get();
+              return SymbolWithRange(Symbol, Range);
+            }
           } else {
-            if (Symbols.get().size() > 0) {
-              auto Symbol = Symbols.get()[0];
-              Symbol.Range = Range;
-              return Symbol;
+            SymbolsOrError Symbols = parse(Parameter);
+            if (auto Error = Symbols.takeError()) {
+              return std::move(Error);
+            } else {
+              if (Symbols.get().size() > 0) {
+                auto Symbol = Symbols.get()[0];
+                Symbol.Range = Range;
+                return Symbol;
+              }
             }
           }
         }
diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
index 43609302658..df3035f6002 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
@@ -47,6 +47,26 @@ class T1_ConstructorParam {
   init(EP1_extP IP1_intP: T1_SampleClass) {}
 }
 
+let _ = T1_ConstructorParam(SP1_str: "")
+let _ = T1_ConstructorParam(1)
+let _ = T1_ConstructorParam(EP1_extP: T1_SampleClass())
+
+// memberwise constructor params
+struct T1_MemberwiseConstructorParam {
+  let V1_fieldA: Int
+  let V1_fieldB: String
+}
+
+let V1_test = T1_MemberwiseConstructorParam(V1_fieldA: 1, V1_fieldB: "")
+
+// default constructor params
+struct T1_DefaultConstructorParam {
+  let V2_fieldA: Int = 1
+  let V2_fieldB: String = ""
+}
+
+let _ = T1_DefaultConstructorParam()
+
 //protocol functions
 protocol T1_ProtocolFunc {
   func NF1_pFunc(SP1_pFunc: Int)
diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
index bb2ef57e995..78728c9dbd1 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
@@ -48,6 +48,26 @@ class ConstructorParam {
   init(extP intP: SampleClass) {}
 }
 
+let _ = ConstructorParam(str: "")
+let _ = ConstructorParam(1)
+let _ = ConstructorParam(extP: SampleClass())
+
+// memberwise constructor params
+struct MemberwiseConstructorParam {
+  let fieldA: Int
+  let fieldB: String
+}
+
+let test = MemberwiseConstructorParam(fieldA: 1, fieldB: "")
+
+// default constructor params
+struct DefaultConstructorParam {
+  let fieldA: Int = 1
+  let fieldB: String = ""
+}
+
+let _ = DefaultConstructorParam()
+
 //protocol functions
 protocol ProtocolFunc {
   func pFunc(pFunc: Int)
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/Expected/UnsupportedFunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/Expected/UnsupportedFunctionParameterNames.swift
index d6c58f6b297..fa90ded177e 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/Expected/UnsupportedFunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/Expected/UnsupportedFunctionParameterNames.swift
@@ -27,14 +27,6 @@ class T1_Derived: T1_Base {
   override subscript(indexExt IP4_indexInt: Int) -> String { return "" }
 }
 
-// implicit constructor params
-struct T1_SampleStruct {
-  let V1_fieldA: Int
-  let V1_fieldB: String
-}
-
-let V1_test = T1_SampleStruct(V1_fieldA: 1, V1_fieldB:"")
-
 //protocol functions
 protocol T1_ProtocolFunc {
   func NF1_pFunc2(_ IP1_pFunc: Int)
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/UnsupportedFunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/UnsupportedFunctionParameterNames.swift
index 2d5f96af856..9c033aeec4d 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/UnsupportedFunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/UnsupportedFunctionParameterNames.swift
@@ -30,14 +30,6 @@ class Derived: Base {
   override subscript(indexExt indexInt: Int) -> String { return "" }
 }
 
-// implicit constructor params
-struct SampleStruct {
-  let fieldA: Int
-  let fieldB: String
-}
-
-let test = SampleStruct(fieldA: 1, fieldB:"")
-
 //protocol functions
 protocol ProtocolFunc {
   func pFunc2(_ pFunc: Int)
diff --git a/swift/test/Obfuscation/SymbolExtractor/Inputs/ExpectedSymbols.json b/swift/test/Obfuscation/SymbolExtractor/Inputs/ExpectedSymbols.json
index 797efebbfed..8349708bfce 100644
--- a/swift/test/Obfuscation/SymbolExtractor/Inputs/ExpectedSymbols.json
+++ b/swift/test/Obfuscation/SymbolExtractor/Inputs/ExpectedSymbols.json
@@ -84,6 +84,12 @@
       "module": "TestModuleName",
       "type": "type"
     },
+    {
+      "name": "property",
+      "identifier": "module.TestModuleName.struct.StructWithMemberwiseInit.variable.property",
+      "module": "TestModuleName",
+      "type": "variable"
+    },
     {
       "name": "swmiei",
       "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swmiei",
@@ -192,12 +198,6 @@
       "module": "TestModuleName",
       "type": "internalParameter"
     },
-    {
-      "name": "property",
-      "identifier": "module.TestModuleName.struct.StructWithMemberwiseInit.variable.property",
-      "module": "TestModuleName",
-      "type": "variable"
-    },
     {
       "name": "Int",
       "identifier": "module.Swift.struct.Int",
-- 
2.17.1 (Apple Git-112)


From 5221075d8c8b15afec5b726a664d1927dbd0bcfa Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Thu, 22 Feb 2018 08:14:44 +0100
Subject: [PATCH 078/138] Failing tests for dropnote

Summary: first failing dropnote tests

Reviewers: krzysztof.siejkowski, jerzy.kleszcz

Reviewed By: krzysztof.siejkowski, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2846
---
 .../Expected/UnsupportedDropnote.swift        | 21 ++++++++++++++++
 .../UnsupportedDropnote.swift                 | 24 +++++++++++++++++++
 2 files changed, 45 insertions(+)
 create mode 100644 swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift

diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
new file mode 100644
index 00000000000..ce7af559e1a
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
@@ -0,0 +1,21 @@
+
+class T1_Test {}
+
+// capture list is not properly renamed - should be?
+class T1_ClosureTest {
+  let V1_test = T1_Test()
+  
+  lazy var someClosure = {
+    [unowned self, weak V2_test = self.V1_test] in
+  }
+}
+
+// init param FieldA is not renamed if there is a second param with default value
+class T1_Foo {
+  var V1_FieldA: String
+  var V1_FieldB: String?
+  
+  init(SP1_FieldA: String, SP1_FieldB: String? = nil) {}
+}
+let V1_FooObj = T1_Foo(SP1_FieldA: "test")
+
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
new file mode 100644
index 00000000000..e517bd08fff
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
@@ -0,0 +1,24 @@
+
+//RUN: %target-prepare-obfuscation-for-file "UnsupportedDropnote" %target-run-full-obfuscation
+
+class Test {}
+
+// capture list is not properly renamed - should be?
+class ClosureTest {
+  let test = Test()
+  
+  lazy var someClosure = {
+    [unowned self, weak test = self.test] in
+  }
+}
+
+// init param FieldA is not renamed if there is a second param with default value
+class Foo {
+  var FieldA: String
+  var FieldB: String?
+
+  init(FieldA: String, FieldB: String? = nil) {}
+}
+let FooObj = Foo(FieldA: "test")
+
+
-- 
2.17.1 (Apple Git-112)


From 16cdfa5ee6a40223ade839d345585da3179135c6 Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Wed, 21 Feb 2018 18:15:33 +0100
Subject: [PATCH 079/138] Fixed symbol with range duplicates in symbols set

Reviewers: michal.zielinski, krzysztof.siejkowski

Reviewed By: michal.zielinski, krzysztof.siejkowski

Subscribers: michal.zielinski, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2849
---
 swift/lib/Obfuscation/DataStructures.cpp | 18 ++++++++++++------
 1 file changed, 12 insertions(+), 6 deletions(-)

diff --git a/swift/lib/Obfuscation/DataStructures.cpp b/swift/lib/Obfuscation/DataStructures.cpp
index 52b5914978f..b22fe82ef2e 100644
--- a/swift/lib/Obfuscation/DataStructures.cpp
+++ b/swift/lib/Obfuscation/DataStructures.cpp
@@ -60,15 +60,21 @@ SymbolWithRange::SymbolWithRange(const struct Symbol &Symbol,
 : Symbol(Symbol), Range(Range) {}
   
 bool SymbolWithRange::operator< (const SymbolWithRange &Right) const {
-  auto less = std::less<const char *>();
-  if (const auto* RangeValuePointer = pointerToRangeValue(*this)) {
-    if (const auto* RightRangeValuePointer = pointerToRangeValue(Right)) {
-      auto isRangeLess = less(RangeValuePointer, RightRangeValuePointer);
-      return Symbol < Right.Symbol || isRangeLess;
+  if (Symbol < Right.Symbol) {
+    return true;
+  } else if (Right.Symbol < Symbol) {
+    return false;
+  } else {
+    auto less = std::less<const char *>();
+    if (const auto* RangeValuePointer = pointerToRangeValue(*this)) {
+      if (const auto* RightRangeValuePointer = pointerToRangeValue(Right)) {
+        auto isRangeLess = less(RangeValuePointer, RightRangeValuePointer);
+        return isRangeLess;
+      }
     }
   }
   assert(false && "Comparing Symbols with Ranges requires Ranges Start "
-         "Location Values Pointers to be of const char type");
+                  "Location Values Pointers to be of const char type");
 }
 
 IndexedSymbolWithRange::
-- 
2.17.1 (Apple Git-112)


From ac2ee030e23d2436123188bf9d266c028f28ca3d Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Thu, 22 Feb 2018 13:07:46 +0100
Subject: [PATCH 080/138] Fixes after Wednesday documentation meeting

Reviewers: jerzy.kleszcz, michal.zielinski

Reviewed By: michal.zielinski

Subscribers: jerzy.kleszcz, michal.zielinski

Differential Revision: https://phabricator.polidea.com/D2848
---
 Documentation/ToDescribe.md                   |   2 +-
 .../swift/Obfuscation/DataStructures.h        |   2 +
 .../Obfuscation/DeclarationParsingUtils.h     |   6 +-
 .../NominalTypeDeclarationParser.h            |   4 -
 .../swift/Obfuscation/OperatorParser.h        |   2 +-
 swift/lib/Obfuscation/DeclarationParser.cpp   | 132 +++++++++++++-----
 .../Obfuscation/DeclarationParsingUtils.cpp   |  23 ++-
 .../Obfuscation/FunctionDeclarationParser.cpp |   4 +-
 .../NominalTypeDeclarationParser.cpp          |  32 +----
 swift/lib/Obfuscation/OperatorParser.cpp      |  62 ++++----
 .../UnsupportedDropnote.swift                 |   2 +-
 .../Expected/UnsupportedFunctions.swift       |  13 ++
 .../UnsupportedFunctions.swift                |  13 ++
 .../Expected/UnsupportedOperators.swift       |  13 ++
 .../UnsupportedOperators.swift                |  18 +++
 15 files changed, 223 insertions(+), 105 deletions(-)
 create mode 100644 swift/test/Obfuscation/FullProcess/UnsupportedOperators/Expected/UnsupportedOperators.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/UnsupportedOperators/UnsupportedOperators.swift

diff --git a/Documentation/ToDescribe.md b/Documentation/ToDescribe.md
index 43caa1ed3c6..d424279836c 100644
--- a/Documentation/ToDescribe.md
+++ b/Documentation/ToDescribe.md
@@ -1,3 +1,3 @@
 # Things to add
 
-
+* verify the relation between parsing the function parameters in the FuncDecl parsing, in the source entity walker callback and in the ParamDecl parsing and describe in the documentation
diff --git a/swift/include/swift/Obfuscation/DataStructures.h b/swift/include/swift/Obfuscation/DataStructures.h
index 6f3240538a3..2b27cc6cdf1 100644
--- a/swift/include/swift/Obfuscation/DataStructures.h
+++ b/swift/include/swift/Obfuscation/DataStructures.h
@@ -143,6 +143,8 @@ struct IndexedSymbolWithRange {
                      const IndexedSymbolWithRange& Right) const;
   };
 };
+
+using SingleSymbolOrError = llvm::Expected<Symbol>;
   
 using SymbolsOrError = llvm::Expected<std::vector<SymbolWithRange>>;
 
diff --git a/swift/include/swift/Obfuscation/DeclarationParsingUtils.h b/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
index 64ef68d63a4..9b6d424c1c6 100644
--- a/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
+++ b/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
@@ -26,8 +26,12 @@ std::string internalParameterName(const ParamDecl *Declaration);
 std::string symbolName(const OperatorDecl *Declaration);
 
 std::string functionName(const AbstractFunctionDecl* Declaration);
+
+llvm::Expected<std::vector<std::string>>
+nominalTypeIdentifierParts(const NominalTypeDecl *Declaration,
+                           const std::string &SymbolName);
   
-ModuleNameAndParts moduleNameAndParts(const Decl *Declaration);
+ModuleNameAndParts moduleNameAndIdentifierParts(const Decl *Declaration);
   
 std::string typeName(const NominalTypeDecl* Declaration);
 
diff --git a/swift/include/swift/Obfuscation/NominalTypeDeclarationParser.h b/swift/include/swift/Obfuscation/NominalTypeDeclarationParser.h
index dfaea6eb57f..b2a3e2f2913 100644
--- a/swift/include/swift/Obfuscation/NominalTypeDeclarationParser.h
+++ b/swift/include/swift/Obfuscation/NominalTypeDeclarationParser.h
@@ -7,10 +7,6 @@
 
 namespace swift {
 namespace obfuscation {
-
-llvm::Expected<std::vector<std::string>>
-nominalTypeIdentifierParts(const NominalTypeDecl *Declaration,
-                           const std::string &SymbolName);
   
 SingleSymbolOrError parse(const NominalTypeDecl* Declaration);
 
diff --git a/swift/include/swift/Obfuscation/OperatorParser.h b/swift/include/swift/Obfuscation/OperatorParser.h
index 9daef5187c3..50d2e80ee98 100644
--- a/swift/include/swift/Obfuscation/OperatorParser.h
+++ b/swift/include/swift/Obfuscation/OperatorParser.h
@@ -6,7 +6,7 @@
 namespace swift {
 namespace obfuscation {
 
-llvm::Expected<Symbol> parse(const OperatorDecl* Declaration);
+SingleSymbolOrError parse(const OperatorDecl* Declaration);
 SymbolsOrError parseOperator(const FuncDecl* Declaration, CharSourceRange Range);
 
 } //namespace obfuscation
diff --git a/swift/lib/Obfuscation/DeclarationParser.cpp b/swift/lib/Obfuscation/DeclarationParser.cpp
index df157b281b0..ebdda9a1e54 100644
--- a/swift/lib/Obfuscation/DeclarationParser.cpp
+++ b/swift/lib/Obfuscation/DeclarationParser.cpp
@@ -8,48 +8,106 @@
 
 namespace swift {
 namespace obfuscation {
-  
+
+bool isNominal(Decl* Declaration) {
+  return dyn_cast<NominalTypeDecl>(Declaration) != nullptr;
+}
+
+bool isFunc(Decl* Declaration) {
+  return dyn_cast<FuncDecl>(Declaration) != nullptr;
+}
+
+bool isOperator(Decl* Declaration) {
+  return dyn_cast<OperatorDecl>(Declaration) != nullptr;
+}
+
+bool isConstructor(Decl* Declaration) {
+  return dyn_cast<ConstructorDecl>(Declaration) != nullptr;
+}
+
+bool isParam(Decl* Declaration) {
+  return dyn_cast<ParamDecl>(Declaration) != nullptr;
+}
+
+bool isVariable(Decl* Declaration) {
+  return dyn_cast<VarDecl>(Declaration) != nullptr;
+}
+
+std::unique_ptr<SymbolsOrError>
+appendRangeToSymbol(SingleSymbolOrError &&SymbolOrError, CharSourceRange Range) {
+  if (auto Error = SymbolOrError.takeError()) {
+    return llvm::make_unique<SymbolsOrError>(std::move(Error));
+  }
+  std::vector<SymbolWithRange> Symbols { SymbolWithRange(SymbolOrError.get(),
+                                                         Range) };
+  return llvm::make_unique<SymbolsOrError>(Symbols);
+}
+
+std::unique_ptr<SymbolsOrError> parseAsNominal(Decl* Declaration,
+                                                    CharSourceRange Range) {
+  auto NominalDeclaration = dyn_cast<NominalTypeDecl>(Declaration);
+  return appendRangeToSymbol(parse(NominalDeclaration), Range);
+}
+
+std::unique_ptr<SymbolsOrError> parseAsFunction(Decl* Declaration,
+                                                CharSourceRange Range) {
+  auto FunctionDeclaration = dyn_cast<FuncDecl>(Declaration);
+  if (FunctionDeclaration->isOperator()) {
+    return llvm::make_unique<SymbolsOrError>(parseOperator(FunctionDeclaration,
+                                                           Range));
+  } else {
+    return llvm::make_unique<SymbolsOrError>(parse(FunctionDeclaration,
+                                                   Range));
+  }
+}
+
+std::unique_ptr<SymbolsOrError> parseAsOperator(Decl* Declaration,
+                                                CharSourceRange Range) {
+  const auto *OperatorDeclaration = dyn_cast<OperatorDecl>(Declaration);
+  return appendRangeToSymbol(parse(OperatorDeclaration), Range);
+}
+
+std::unique_ptr<SymbolsOrError> parseAsConstructor(Decl* Declaration,
+                                                   CharSourceRange Range) {
+  const auto *ConstructorDeclaration = dyn_cast<ConstructorDecl>(Declaration);
+  return llvm::make_unique<SymbolsOrError>(parse(ConstructorDeclaration,
+                                                 Range));
+}
+
+std::unique_ptr<SymbolsOrError> parseAsParam(Decl* Declaration,
+                                             CharSourceRange Range) {
+  const auto *ParamDeclaration = dyn_cast<ParamDecl>(Declaration);
+  auto Symbols = parseSeparateDeclarationWithRange(ParamDeclaration, Range);
+  return llvm::make_unique<SymbolsOrError>(std::move(Symbols));
+}
+
+std::unique_ptr<SymbolsOrError> parseAsVariable(Decl* Declaration,
+                                                CharSourceRange Range) {
+  const auto *VariableDeclaration = dyn_cast<VarDecl>(Declaration);
+  return appendRangeToSymbol(parse(VariableDeclaration), Range);
+}
+
 SymbolsOrError extractSymbol(Decl* Declaration, CharSourceRange Range) {
-  
-  std::unique_ptr<SingleSymbolOrError> SingleSymbolOrErrorPointer(nullptr);
+
   std::unique_ptr<SymbolsOrError> SymbolsOrErrorPointer(nullptr);
-  
-  if (const auto *NominalTypeDeclaration =
-        dyn_cast<NominalTypeDecl>(Declaration)) {
-    SingleSymbolOrErrorPointer =
-      llvm::make_unique<SingleSymbolOrError>(parse(NominalTypeDeclaration));
-  } else if (const auto *FuncDeclaration = dyn_cast<FuncDecl>(Declaration)) {
-      if (FuncDeclaration->isOperator()) {
-          SymbolsOrErrorPointer =
-          llvm::make_unique<SymbolsOrError>(parseOperator(FuncDeclaration, Range));
-      } else {
-          SymbolsOrErrorPointer =
-          llvm::make_unique<SymbolsOrError>(parse(FuncDeclaration, Range));
-      }
-  } else if (const auto *OperatorDeclaration = dyn_cast<OperatorDecl>(Declaration)) {
-      SingleSymbolOrErrorPointer =
-      llvm::make_unique<SingleSymbolOrError>(parse(OperatorDeclaration));
-  } else if (const auto *ConstructDeclaration = dyn_cast<ConstructorDecl>(Declaration)) {
-      SymbolsOrErrorPointer =
-      llvm::make_unique<SymbolsOrError>(parse(ConstructDeclaration, Range));
-  } else if (const auto *ParamDeclaration = dyn_cast<ParamDecl>(Declaration)) {
-    auto Symbols = parseSeparateDeclarationWithRange(ParamDeclaration, Range);
-    SymbolsOrErrorPointer =
-      llvm::make_unique<SymbolsOrError>(std::move(Symbols));
-  } else if (const auto *VariableDeclaration = dyn_cast<VarDecl>(Declaration)) {
-    SingleSymbolOrErrorPointer =
-      llvm::make_unique<SingleSymbolOrError>(parse(VariableDeclaration));
+
+  if (isNominal(Declaration)) {
+    SymbolsOrErrorPointer = parseAsNominal(Declaration, Range);
+  } else if (isFunc(Declaration)) {
+    SymbolsOrErrorPointer = parseAsFunction(Declaration, Range);
+  } else if (isOperator(Declaration)) {
+    SymbolsOrErrorPointer = parseAsOperator(Declaration, Range);
+  } else if (isConstructor(Declaration)) {
+    SymbolsOrErrorPointer = parseAsConstructor(Declaration, Range);
+  } else if (isParam(Declaration)) {
+    SymbolsOrErrorPointer = parseAsParam(Declaration, Range);
+  } else if (isVariable(Declaration)) {
+    SymbolsOrErrorPointer = parseAsVariable(Declaration, Range);
   } else {
     return stringError("unsupported declaration type");
   }
-  
-  if (SingleSymbolOrErrorPointer) {
-    if (auto Error = SingleSymbolOrErrorPointer->takeError()) {
-      return std::move(Error);
-    }
-    SymbolWithRange Symbol(SingleSymbolOrErrorPointer->get(), Range);
-    return std::vector<SymbolWithRange> { Symbol };
-  } else if (SymbolsOrErrorPointer) {
+
+  if (SymbolsOrErrorPointer != nullptr) {
     if (auto Error = SymbolsOrErrorPointer->takeError()) {
       return std::move(Error);
     }
diff --git a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
index 24a2848180d..3cea0eae5b3 100644
--- a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
+++ b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
@@ -47,7 +47,28 @@ std::string functionName(const AbstractFunctionDecl* Declaration) {
     return Declaration->getName().str().str();
 }
 
-ModuleNameAndParts moduleNameAndParts(const Decl *Declaration) {
+llvm::Expected<std::vector<std::string>>
+nominalTypeIdentifierParts(const NominalTypeDecl *Declaration,
+                           const std::string &SymbolName) {
+
+  std::vector<std::string> Parts;
+
+  if (auto *EnumDeclaration = dyn_cast<EnumDecl>(Declaration)) {
+    Parts.push_back("enum." + SymbolName);
+  } else if (auto *ClassDeclaration = dyn_cast<ClassDecl>(Declaration)) {
+    Parts.push_back("class." + SymbolName);
+  } else if (auto *ProtocolDeclaration = dyn_cast<ProtocolDecl>(Declaration)) {
+    Parts.push_back("protocol." + SymbolName);
+  } else if (auto *StructDeclaration = dyn_cast<StructDecl>(Declaration)) {
+    Parts.push_back("struct." + SymbolName);
+  } else {
+    return stringError("found unsupported declaration type");
+  }
+
+  return Parts;
+}
+
+ModuleNameAndParts moduleNameAndIdentifierParts(const Decl *Declaration) {
   std::string ModuleName = moduleName(Declaration);
   std::vector<std::string> Parts;
   Parts.push_back("module");
diff --git a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
index 257d26e4a00..8d2f6aaf828 100644
--- a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
@@ -117,6 +117,8 @@ SymbolsOrError parse(const FuncDecl* Declaration, CharSourceRange Range) {
   }
   
   if (Declaration->getOverriddenDecl() != nullptr) {
+    // Overriden declaration must be treated separately because
+    // we mustn't rename function that overrides function from different module
     return parseOverridenDeclaration(Declaration,
                                      moduleName(Declaration),
                                      Range);
@@ -130,7 +132,7 @@ SymbolsOrError parse(const FuncDecl* Declaration, CharSourceRange Range) {
                 declarationName(Declaration),
                 ModuleName,
                 SymbolType::NamedFunction);
-  
+
   std::vector<SymbolWithRange> Symbols;
   Symbols.push_back(SymbolWithRange(Symbol, Range));
   
diff --git a/swift/lib/Obfuscation/NominalTypeDeclarationParser.cpp b/swift/lib/Obfuscation/NominalTypeDeclarationParser.cpp
index 698416f68eb..3428a42b2ad 100644
--- a/swift/lib/Obfuscation/NominalTypeDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/NominalTypeDeclarationParser.cpp
@@ -3,32 +3,13 @@
 
 namespace swift {
 namespace obfuscation {
-    
-llvm::Expected<std::vector<std::string>>
-nominalTypeIdentifierParts(const NominalTypeDecl *Declaration,
-                           const std::string &SymbolName) {
-  
-  std::vector<std::string> Parts;
-  
-  if (auto *EnumDeclaration = dyn_cast<EnumDecl>(Declaration)) {
-    Parts.push_back("enum." + SymbolName);
-  } else if (auto *ClassDeclaration = dyn_cast<ClassDecl>(Declaration)) {
-    Parts.push_back("class." + SymbolName);
-  } else if (auto *ProtocolDeclaration = dyn_cast<ProtocolDecl>(Declaration)) {
-    Parts.push_back("protocol." + SymbolName);
-  } else if (auto *StructDeclaration = dyn_cast<StructDecl>(Declaration)) {
-    Parts.push_back("struct." + SymbolName);
-  } else {
-    return stringError("found unsupported declaration type");
-  }
-  return Parts;
-}
 
 SingleSymbolOrError parse(const NominalTypeDecl* Declaration) {
-  
-  auto ModuleNameAndParts = moduleNameAndParts(Declaration);
+
+  auto ModuleNameAndParts = moduleNameAndIdentifierParts(Declaration);
+
   std::string ModuleName = ModuleNameAndParts.first;
-  std::vector<std::string> Parts = ModuleNameAndParts.second;
+  std::vector<std::string> IdentifierParts = ModuleNameAndParts.second;
   std::string SymbolName = Declaration->getBaseName().getIdentifier().str();
   
   auto NominalTypeParts = nominalTypeIdentifierParts(Declaration,
@@ -36,10 +17,9 @@ SingleSymbolOrError parse(const NominalTypeDecl* Declaration) {
   if (auto Error = NominalTypeParts.takeError()) {
     return std::move(Error);
   }
+  copyToVector(NominalTypeParts.get(), IdentifierParts);
   
-  copyToVector(NominalTypeParts.get(), Parts);
-  
-  return Symbol(combineIdentifier(Parts),
+  return Symbol(combineIdentifier(IdentifierParts),
                 SymbolName,
                 ModuleName,
                 SymbolType::Type);
diff --git a/swift/lib/Obfuscation/OperatorParser.cpp b/swift/lib/Obfuscation/OperatorParser.cpp
index 258aea49523..166f05665b9 100644
--- a/swift/lib/Obfuscation/OperatorParser.cpp
+++ b/swift/lib/Obfuscation/OperatorParser.cpp
@@ -7,17 +7,15 @@
 namespace swift {
 namespace obfuscation {
 
-using SingleSymbolOrError = llvm::Expected<Symbol>;
-
 SingleSymbolOrError parse(const OperatorDecl* Declaration) {
 
-  auto ModuleNameAndParts = moduleNameAndParts(Declaration);
+  auto ModuleNameAndParts = moduleNameAndIdentifierParts(Declaration);
   std::string ModuleName = ModuleNameAndParts.first;
-  std::vector<std::string> Parts = ModuleNameAndParts.second;
+  std::vector<std::string> IdentifierParts = ModuleNameAndParts.second;
   std::string SymbolName = symbolName(Declaration);
-  Parts.push_back("operator." + SymbolName);
+  IdentifierParts.push_back("operator." + SymbolName);
 
-  return Symbol(combineIdentifier(Parts),
+  return Symbol(combineIdentifier(IdentifierParts),
                 SymbolName,
                 ModuleName,
                 SymbolType::Operator);
@@ -25,36 +23,36 @@ SingleSymbolOrError parse(const OperatorDecl* Declaration) {
 
 SymbolsOrError parseOperator(const FuncDecl* Declaration, CharSourceRange Range) {
 
-    std::vector<SymbolWithRange> Symbols;
+  std::vector<SymbolWithRange> Symbols;
 
-    auto ParametersSymbolsOrError =
+  auto ParametersSymbolsOrError =
     parseSeparateFunctionDeclarationForParameters(Declaration);
-    if (auto Error = ParametersSymbolsOrError.takeError()) {
-        return std::move(Error);
+  if (auto Error = ParametersSymbolsOrError.takeError()) {
+    return std::move(Error);
+  }
+  copyToVector(ParametersSymbolsOrError.get(), Symbols);
+
+  if (auto OperatorDecl = Declaration->getOperatorDecl()) {
+    auto OperatorModuleName = moduleName(OperatorDecl);
+    if (moduleName(Declaration) != OperatorModuleName) {
+      return Symbols;
     }
-    copyToVector(ParametersSymbolsOrError.get(), Symbols);
+  }
 
-    if (auto OperatorDecl = Declaration->getOperatorDecl()) {
-        auto OperatorModuleName = moduleName(OperatorDecl);
-        if (moduleName(Declaration) != OperatorModuleName) {
-            return Symbols;
-        }
-    }
-  
-    auto ModuleAndParts = functionIdentifierParts(Declaration);
-    auto ModuleName = ModuleAndParts.first;
-    auto Parts = ModuleAndParts.second;
-  
-    auto SymbolName = declarationName(Declaration);
-    Parts.push_back("operator." + SymbolName);
-
-    Symbol Symbol(combineIdentifier(Parts),
-                  SymbolName,
-                  ModuleName,
-                  SymbolType::Operator);
-
-    Symbols.push_back(SymbolWithRange(Symbol, Range));
-    return Symbols;
+  auto ModuleAndParts = moduleNameAndIdentifierParts(Declaration);
+  auto ModuleName = ModuleAndParts.first;
+  auto Parts = ModuleAndParts.second;
+
+  auto SymbolName = declarationName(Declaration);
+  Parts.push_back("operator." + SymbolName);
+
+  Symbol Symbol(combineIdentifier(Parts),
+                SymbolName,
+                ModuleName,
+                SymbolType::Operator);
+
+  Symbols.push_back(SymbolWithRange(Symbol, Range));
+  return Symbols;
 }
 
 } //namespace obfuscation
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
index e517bd08fff..3197f9ffafd 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
@@ -1,4 +1,4 @@
-
+//XFAIL: *
 //RUN: %target-prepare-obfuscation-for-file "UnsupportedDropnote" %target-run-full-obfuscation
 
 class Test {}
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/Expected/UnsupportedFunctions.swift b/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/Expected/UnsupportedFunctions.swift
index 2cd6c2f00b4..8810fb345f3 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/Expected/UnsupportedFunctions.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/Expected/UnsupportedFunctions.swift
@@ -13,3 +13,16 @@ _ = V1_gcii.NF1_method()
 
 let V1_gcsi = T1_GenericClass<T1_SampleClass>()
 _ = V1_gcsi.NF1_method()
+
+// override and protocol combined
+class T1_A {
+  func NF1_a() {}
+}
+
+protocol T1_P {
+  func NF1_a()
+}
+
+class T1_B: T1_A, T1_P {
+  override func NF1_a() {}
+}
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/UnsupportedFunctions.swift b/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/UnsupportedFunctions.swift
index 20a4a9d7fb7..4e39fa40c75 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/UnsupportedFunctions.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/UnsupportedFunctions.swift
@@ -16,3 +16,16 @@ _ = gcii.method()
 
 let gcsi = GenericClass<SampleClass>()
 _ = gcsi.method()
+
+// override and protocol combined
+class A {
+  func a() {}
+}
+
+protocol P {
+  func a()
+}
+
+class B: A, P {
+  override func a() {}
+}
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedOperators/Expected/UnsupportedOperators.swift b/swift/test/Obfuscation/FullProcess/UnsupportedOperators/Expected/UnsupportedOperators.swift
new file mode 100644
index 00000000000..746438c89b9
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedOperators/Expected/UnsupportedOperators.swift
@@ -0,0 +1,13 @@
+prefix operator O1_---
+infix operator O1_^^^
+postfix operator O1_+++
+
+extension Double {
+  static prefix func O1_--- (SP1_number: Double) -> Double { return SP1_number - 2 }
+  static func O1_^^^ (SP1_left: Double, SP1_right: Double) -> Double { return pow(SP1_left, SP1_right) + SP1_left }
+  static postfix func O1_+++ (SP1_number: Double) -> Double { return SP1_number + 2 }
+}
+
+O1_---44
+6O1_^^^2
+40O1_+++
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedOperators/UnsupportedOperators.swift b/swift/test/Obfuscation/FullProcess/UnsupportedOperators/UnsupportedOperators.swift
new file mode 100644
index 00000000000..ed80244644f
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedOperators/UnsupportedOperators.swift
@@ -0,0 +1,18 @@
+// XFAIL: *
+// PLEASE TURN THEM ON AFTER SET COMPARATOR FIX!
+// RUN: %target-prepare-obfuscation-for-file "UnsupportedOperators" %target-run-full-obfuscation
+
+prefix operator ---
+infix operator ^^^
+postfix operator +++
+
+extension Double {
+  static prefix func --- (number: Double) -> Double { return number - 2 }
+  static func ^^^ (left: Double, right: Double) -> Double { return pow(left, right) + left }
+  static postfix func +++ (number: Double) -> Double { return number + 2 }
+}
+
+---44
+6^^^2
+40+++
+
-- 
2.17.1 (Apple Git-112)


From e46a9bef5e72db6eb747cdafd36dcaa5c32aed0f Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Thu, 22 Feb 2018 13:26:31 +0100
Subject: [PATCH 081/138] Fixed test for symbol with range comparison operator

Reviewers: michal.zielinski, krzysztof.siejkowski

Reviewed By: michal.zielinski, krzysztof.siejkowski

Subscribers: michal.zielinski, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2851
---
 .../unittests/SwiftObfuscation/DataStructuresOperatorsTests.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/swift/unittests/SwiftObfuscation/DataStructuresOperatorsTests.cpp b/swift/unittests/SwiftObfuscation/DataStructuresOperatorsTests.cpp
index d9d2258c551..cb61942fea4 100644
--- a/swift/unittests/SwiftObfuscation/DataStructuresOperatorsTests.cpp
+++ b/swift/unittests/SwiftObfuscation/DataStructuresOperatorsTests.cpp
@@ -68,7 +68,7 @@ TEST(SymbolWithRangeLessThanOperator, ComparingSymbolsLessRangesEqual) {
 }
 
 TEST(SymbolWithRangeLessThanOperator, ComparingSymbolsGreaterRangesLess) {
-  EXPECT_TRUE(SymbolWithRange(Symbol2, SourceRange1)
+  EXPECT_FALSE(SymbolWithRange(Symbol2, SourceRange1)
               < SymbolWithRange(Symbol1, SourceRange2));
 }
 
-- 
2.17.1 (Apple Git-112)


From 79a3c1ef99418268a0ba9b6c5618900babb24ed8 Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Thu, 22 Feb 2018 13:50:18 +0100
Subject: [PATCH 082/138] additional dropnote failing tests

Reviewers: jerzy.kleszcz, krzysztof.siejkowski

Reviewed By: jerzy.kleszcz, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2850
---
 .../Expected/UnsupportedDropnote.swift        | 47 ++++++++++++++++++-
 .../UnsupportedDropnote.swift                 | 47 ++++++++++++++++++-
 2 files changed, 91 insertions(+), 3 deletions(-)

diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
index ce7af559e1a..c3e547047b7 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
@@ -1,5 +1,9 @@
 
-class T1_Test {}
+import Foundation
+
+class T1_Test {
+  func NF1_testFunc() {}
+}
 
 // capture list is not properly renamed - should be?
 class T1_ClosureTest {
@@ -19,3 +23,44 @@ class T1_Foo {
 }
 let V1_FooObj = T1_Foo(SP1_FieldA: "test")
 
+// type is not renamed in if case
+let V1_num = 42
+if case 0...225 = V1_num, V1_num is T1_Test {
+}
+
+// debug blocks are omitted
+final class T1_DebugBlock {
+  fileprivate init() {
+    #if !DEBUG
+      let V1_testInDebug = T1_Test()
+    #endif
+  }
+}
+
+//override init
+class T1_Parent{
+  init(SP1_p1: String, SP1_p2: Int) {}
+}
+class T1_Child: T1_Parent {
+  override init(SP1_p1: String, SP1_p2: Int){}
+}
+let V1_c = T1_Child(SP1_p1: "p1", SP1_p2:42)
+
+//error name in catch block should not be renamed
+func NF1_canThrowErrors() throws {}
+func NF1_a() {
+  do {
+    try NF1_canThrowErrors()
+  } catch {
+    error
+  }
+}
+
+//protocol stuff
+protocol T1_Proto {
+  func NF1_hello()
+}
+extension NSString: T1_Proto {}
+extension T1_Proto where Self: NSString {
+  func NF1_hello() {}
+}
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
index 3197f9ffafd..37c87ceffb1 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
@@ -1,7 +1,10 @@
 //XFAIL: *
 //RUN: %target-prepare-obfuscation-for-file "UnsupportedDropnote" %target-run-full-obfuscation
+import Foundation
 
-class Test {}
+class Test {
+  func testFunc() {}
+}
 
 // capture list is not properly renamed - should be?
 class ClosureTest {
@@ -16,9 +19,49 @@ class ClosureTest {
 class Foo {
   var FieldA: String
   var FieldB: String?
-
+  
   init(FieldA: String, FieldB: String? = nil) {}
 }
 let FooObj = Foo(FieldA: "test")
 
+// type is not renamed in if case
+let num = 42
+if case 0...225 = num, num is Test {
+}
+
+// debug blocks are omitted
+final class DebugBlock {
+  fileprivate init() {
+    #if !DEBUG
+      let testInDebug = Test()
+    #endif
+  }
+}
 
+//override init
+class Parent{
+  init(p1: String, p2: Int) {}
+}
+class Child: Parent {
+  override init(p1: String, p2: Int){}
+}
+let c = Child(p1: "p1", p2:42)
+
+//error name in catch block should not be renamed
+func canThrowErrors() throws {}
+func a() {
+  do {
+    try canThrowErrors()
+  } catch {
+    error
+  }
+}
+
+//protocol stuff
+protocol Proto {
+  func hello()
+}
+extension NSString: Proto {}
+extension Proto where Self: NSString {
+  func hello() {}
+}
-- 
2.17.1 (Apple Git-112)


From 1798217a2fe4b5786b12b9be6f0b319aabac7897 Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Thu, 22 Feb 2018 08:53:18 +0100
Subject: [PATCH 083/138] Tests for generic type parameters renaming

Reviewers: krzysztof.siejkowski, jerzy.kleszcz

Reviewed By: krzysztof.siejkowski, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2847
---
 .../FullProcess/Types/Expected/Types.swift          | 13 +++++++++++--
 .../test/Obfuscation/FullProcess/Types/Types.swift  | 11 ++++++++++-
 ...upportedFailing.swift => UnsupportedTypes.swift} |  0
 ...upportedFailing.swift => UnsupportedTypes.swift} |  0
 4 files changed, 21 insertions(+), 3 deletions(-)
 rename swift/test/Obfuscation/FullProcess/UnsupportedTypes/Expected/{UnsupportedFailing.swift => UnsupportedTypes.swift} (100%)
 rename swift/test/Obfuscation/FullProcess/UnsupportedTypes/{UnsupportedFailing.swift => UnsupportedTypes.swift} (100%)

diff --git a/swift/test/Obfuscation/FullProcess/Types/Expected/Types.swift b/swift/test/Obfuscation/FullProcess/Types/Expected/Types.swift
index 8afa10f20cd..89ccff36a4d 100644
--- a/swift/test/Obfuscation/FullProcess/Types/Expected/Types.swift
+++ b/swift/test/Obfuscation/FullProcess/Types/Expected/Types.swift
@@ -33,12 +33,21 @@ struct T1_CustomCFLocaleKey: CFLocaleKey {
   class T1_CustomGenericNSString: Array<NSString> {}
 }
 
-struct T1_Generic<GenericParam> {
-  class T1_InsideGeneric: T1_Generic<String> { }
+class T1_Generic<GenericParam> {
+  class T1_InsideGeneric: T1_Generic<String> {}
 }
 
 class T1_RenameGenericTypeConcretization: T1_Generic<T1_SampleProtocol> {}
 
+class T1_Generic2<T: T1_SampleProtocol> {}
+class T1_RenameGenericTypeConcretization2: T1_Generic2<T1_DerivedClass> {}
+
+class T1_Generic3<T: T1_SampleProtocol, R: NSString, U: T1_DerivedClass> {}
+class T1_RenameGenericTypeConcretization3: T1_Generic3<T1_DerivedClass, NSString, T1_DerivedClass> {}
+
+class T1_Generic4<T: T1_SampleProtocol where T: T1_DerivedClass> {}
+class T1_RenameGenericTypeConcretization4: T1_Generic4<T1_DerivedClass> {}
+
 class T1_A {
   struct T1_B {}
 }
diff --git a/swift/test/Obfuscation/FullProcess/Types/Types.swift b/swift/test/Obfuscation/FullProcess/Types/Types.swift
index 455c9579159..4add6a81e03 100644
--- a/swift/test/Obfuscation/FullProcess/Types/Types.swift
+++ b/swift/test/Obfuscation/FullProcess/Types/Types.swift
@@ -34,12 +34,21 @@ struct CustomCFLocaleKey: CFLocaleKey {
   class CustomGenericNSString: Array<NSString> {}
 }
 
-struct Generic<GenericParam> {
+class Generic<GenericParam> {
   class InsideGeneric: Generic<String> {}
 }
 
 class RenameGenericTypeConcretization: Generic<SampleProtocol> {}
 
+class Generic2<T: SampleProtocol> {}
+class RenameGenericTypeConcretization2: Generic2<DerivedClass> {}
+
+class Generic3<T: SampleProtocol, R: NSString, U: DerivedClass> {}
+class RenameGenericTypeConcretization3: Generic3<DerivedClass, NSString, DerivedClass> {}
+
+class Generic4<T: SampleProtocol where T: DerivedClass> {}
+class RenameGenericTypeConcretization4: Generic4<DerivedClass> {}
+
 class A {
   struct B {}
 }
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedTypes/Expected/UnsupportedFailing.swift b/swift/test/Obfuscation/FullProcess/UnsupportedTypes/Expected/UnsupportedTypes.swift
similarity index 100%
rename from swift/test/Obfuscation/FullProcess/UnsupportedTypes/Expected/UnsupportedFailing.swift
rename to swift/test/Obfuscation/FullProcess/UnsupportedTypes/Expected/UnsupportedTypes.swift
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedTypes/UnsupportedFailing.swift b/swift/test/Obfuscation/FullProcess/UnsupportedTypes/UnsupportedTypes.swift
similarity index 100%
rename from swift/test/Obfuscation/FullProcess/UnsupportedTypes/UnsupportedFailing.swift
rename to swift/test/Obfuscation/FullProcess/UnsupportedTypes/UnsupportedTypes.swift
-- 
2.17.1 (Apple Git-112)


From 4998923fefa512d19f7516d14f20edad4b160a3c Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Thu, 22 Feb 2018 15:06:02 +0100
Subject: [PATCH 084/138] Changes and comments from the thursday documentation
 meeting

Reviewers: jerzy.kleszcz, michal.zielinski

Reviewed By: jerzy.kleszcz, michal.zielinski

Subscribers: jerzy.kleszcz, michal.zielinski

Differential Revision: https://phabricator.polidea.com/D2853
---
 .../Obfuscation/DeclarationParsingUtils.h     |  4 +-
 .../Obfuscation/FunctionDeclarationParser.h   |  1 -
 .../swift/Obfuscation/OperatorParser.h        | 28 ++++++
 .../Obfuscation/DeclarationParsingUtils.cpp   | 38 +++++---
 .../Obfuscation/FunctionDeclarationParser.cpp | 94 ++++++++++++-------
 swift/lib/Obfuscation/OperatorParser.cpp      |  5 +
 .../ParameterDeclarationParser.cpp            |  7 +-
 .../Obfuscation/VariableDeclarationParser.cpp |  5 +-
 8 files changed, 126 insertions(+), 56 deletions(-)

diff --git a/swift/include/swift/Obfuscation/DeclarationParsingUtils.h b/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
index 9b6d424c1c6..611e04ea477 100644
--- a/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
+++ b/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
@@ -39,8 +39,8 @@ std::string typeName(const NominalTypeDecl* Declaration);
 llvm::Expected<std::string> enclosingTypeName(const Decl* Declaration);
 
 template<class T>
-const T* baseOverridenDeclarationWithModules(const T *Declaration,
-                                            std::set<std::string> &Modules);
+std::pair<const T*, std::set<std::string>>
+getBaseOverridenDeclarationWithModules(const T *Declaration);
 
 bool isMemberwise(const ConstructorDecl* Declaration);
 
diff --git a/swift/include/swift/Obfuscation/FunctionDeclarationParser.h b/swift/include/swift/Obfuscation/FunctionDeclarationParser.h
index e27bb124729..7d0b3bcac0e 100644
--- a/swift/include/swift/Obfuscation/FunctionDeclarationParser.h
+++ b/swift/include/swift/Obfuscation/FunctionDeclarationParser.h
@@ -17,7 +17,6 @@ std::string functionName(const AbstractFunctionDecl* Declaration);
   
 ModuleNameAndParts functionIdentifierParts(const AbstractFunctionDecl* Declaration);
 
-  
 SymbolsOrError parse(const FuncDecl* Declaration, CharSourceRange Range);
 SymbolsOrError parse(const ConstructorDecl* Declaration, CharSourceRange Range);
 
diff --git a/swift/include/swift/Obfuscation/OperatorParser.h b/swift/include/swift/Obfuscation/OperatorParser.h
index 50d2e80ee98..2d9d172adcb 100644
--- a/swift/include/swift/Obfuscation/OperatorParser.h
+++ b/swift/include/swift/Obfuscation/OperatorParser.h
@@ -6,7 +6,35 @@
 namespace swift {
 namespace obfuscation {
 
+/// Extract symbol from the declaration of the operator.
+///
+/// The declaration specifies only the name of the operator, its type
+/// (prefix, infix, postfix) and its relation to other operators (precedence).
+/// It's not the operator implementation nor usage.
+///
+/// \param Declaration The Swift AST OperatorDecl node that may represent
+///        the symbol to obfuscate.
+///
+/// \returns SingleSymbolOrError object containing either the symbol extracted
+///          from information in \p Declaration object or llvm::Error object
+///          with the information on why no symbol could be extracted.
 SingleSymbolOrError parse(const OperatorDecl* Declaration);
+
+/// Extracts symbol from the operator's implementation represented as FuncDecl
+/// in the Swift AST.
+///
+/// The function declaration specifies the logic for the operator it implements.
+/// We're parsing it in the similar manner as other functions, so both
+/// the function symbol and the parameters symbols are identified.
+///
+/// \param Declaration The Swift AST node that may or may not represent
+///        the symbol to obfuscate.
+/// \param Range The range of the identifier in the source code
+///        that corresponds with the encountered AST node.
+///
+/// \returns SymbolsOrError object containing either the symbol extracted
+///          from information in \p Declaration object or llvm::Error object
+///          with the information on why no symbol could be extracted.
 SymbolsOrError parseOperator(const FuncDecl* Declaration, CharSourceRange Range);
 
 } //namespace obfuscation
diff --git a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
index 3cea0eae5b3..6f3118927e3 100644
--- a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
+++ b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
@@ -88,29 +88,39 @@ llvm::Expected<std::string> enclosingTypeName(const Decl* Declaration) {
   }
   return stringError("enclosing context of this declaration is not supported");
 }
-  
+
 template<class T>
-const T* baseOverridenDeclarationWithModules(const T *Declaration,
-                                            std::set<std::string> &Modules) {
+const T* findRecursivelyBaseOverridenDeclarationWithModules
+(const T *Declaration, std::set<std::string> &Modules) {
   static_assert(std::is_base_of<Decl, T>::value, "T is not a subclass of Decl");
   if (auto* OverrideDeclaration = Declaration->getOverriddenDecl()) {
     Modules.insert(moduleName(OverrideDeclaration));
-    return baseOverridenDeclarationWithModules(OverrideDeclaration, Modules);
+    return
+    findRecursivelyBaseOverridenDeclarationWithModules(OverrideDeclaration,
+                                                       Modules);
   } else {
     return Declaration;
   }
 }
+  
+template<class T>
+std::pair<const T*, std::set<std::string>>
+getBaseOverridenDeclarationWithModules(const T *Declaration) {
+  std::set<std::string> Modules;
+  auto Base = findRecursivelyBaseOverridenDeclarationWithModules(Declaration,
+                                                                 Modules);
+  return std::make_pair(Base, Modules);
+}
 
-template const VarDecl*
-baseOverridenDeclarationWithModules(const VarDecl *Declaration,
-                                    std::set<std::string> &Modules);
-template const FuncDecl*
-baseOverridenDeclarationWithModules(const FuncDecl *Declaration,
-                                    std::set<std::string> &Modules);
-
-template const AbstractFunctionDecl*
-baseOverridenDeclarationWithModules(const AbstractFunctionDecl *Declaration,
-                                    std::set<std::string> &Modules);
+template
+std::pair<const VarDecl*, std::set<std::string>>
+getBaseOverridenDeclarationWithModules(const VarDecl *Declaration);
+template
+std::pair<const FuncDecl*, std::set<std::string>>
+getBaseOverridenDeclarationWithModules(const FuncDecl *Declaration);
+template
+std::pair<const AbstractFunctionDecl*, std::set<std::string>>
+getBaseOverridenDeclarationWithModules(const AbstractFunctionDecl *Declaration);
 
 // Determines if the ConstructorDecl represents the Struct Memberwise
 // Initializer. Checks if the declaration is implicit. Also checks if
diff --git a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
index 8d2f6aaf828..b6ba389dba7 100644
--- a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
@@ -22,26 +22,44 @@ llvm::Error isDeclarationSupported(const FuncDecl* Declaration) {
 }
 
 std::string functionSignature(const AbstractFunctionDecl *Declaration) {
+  // The signature is available via different getters depending on whether
+  // it is a method or a free function
+  std::string Interface;
   if (Declaration->getDeclContext()->isTypeContext()) {
-    auto Interface = Declaration->getMethodInterfaceType().getString();
-    return "signature." + Interface;
+    Interface = Declaration->getMethodInterfaceType().getString();
   } else {
-    return "signature." + Declaration->getInterfaceType().getString();
+    Interface = Declaration->getInterfaceType().getString();
   }
+  return "signature." + Interface;
 }
 
-ModuleNameAndParts functionIdentifierParts(const AbstractFunctionDecl *Declaration) {
+ModuleNameAndParts
+functionIdentifierParts(const AbstractFunctionDecl *Declaration) {
+
   std::string ModuleName;
-  std::string SymbolName = declarationName(Declaration);
   std::vector<std::string> Parts;
-  
-  auto ProtocolRequirements = Declaration->getSatisfiedProtocolRequirements();
+
+  std::string SymbolName = declarationName(Declaration);
+
+  // Check if function is part of protocol declaration
   auto *ProtocolDeclaration =
-  dyn_cast<ProtocolDecl>(Declaration->getDeclContext());
-  if (ProtocolRequirements.empty() && ProtocolDeclaration == nullptr) {
-    ModuleName = moduleName(Declaration);
-    Parts.push_back("module." + ModuleName);
-    
+    Declaration->getDeclContext()->getAsProtocolOrProtocolExtensionContext();
+  auto IsPartOfProtocol = ProtocolDeclaration != nullptr;
+
+  // Check if function satisfies the protocol implemented by its
+  // containing class
+  auto ProtocolRequirements = Declaration->getSatisfiedProtocolRequirements();
+  auto SatisfiesProtocol = !ProtocolRequirements.empty();
+
+  if (!(SatisfiesProtocol || IsPartOfProtocol)) {
+    // This logic applies to function that has nothing to do with protocols
+
+    auto ModuleNameAndParts = moduleNameAndIdentifierParts(Declaration);
+    ModuleName = ModuleNameAndParts.first;
+    Parts = ModuleNameAndParts.second;
+
+    // Build different identifier depending whether
+    // the function is a free function or method
     auto TypeNameOrError = enclosingTypeName(Declaration);
     if (auto Error = TypeNameOrError.takeError()) {
       llvm::consumeError(std::move(Error));
@@ -55,6 +73,8 @@ ModuleNameAndParts functionIdentifierParts(const AbstractFunctionDecl *Declarati
     }
     
   } else {
+    // This logic applies to function that
+    // is part of protocol or satisfies protocol
     
     // TODO: right now we're renaming all the methods in the protocols with
     //       the same name and signature to the same obfuscated name. the reason
@@ -65,12 +85,15 @@ ModuleNameAndParts functionIdentifierParts(const AbstractFunctionDecl *Declarati
     //       there is no override relationship between the A.a() and B.a() in
     //       protocols. it's just a name that's the same.
     //       this simplified handling should be improved in the future.
-    if (!ProtocolRequirements.empty()) {
-      ModuleName = moduleName(ProtocolRequirements.front());
+    ModuleNameAndParts ModuleNameAndParts;
+    if (SatisfiesProtocol) {
+      ModuleNameAndParts =
+        moduleNameAndIdentifierParts(ProtocolRequirements.front());
     } else {
-      ModuleName = moduleName(ProtocolDeclaration);
+      ModuleNameAndParts = moduleNameAndIdentifierParts(ProtocolDeclaration);
     }
-    Parts.push_back("module." + ModuleName);
+    ModuleName = ModuleNameAndParts.first;
+    Parts = ModuleNameAndParts.second;
     
     Parts.push_back("protocol");
     if (Declaration->isStatic()) {
@@ -84,20 +107,19 @@ ModuleNameAndParts functionIdentifierParts(const AbstractFunctionDecl *Declarati
   return std::make_pair(ModuleName, Parts);
 }
 
-SymbolsOrError parse(const AbstractFunctionDecl* Declaration, CharSourceRange Range) {
-    if (auto FunctionDecl = dyn_cast<FuncDecl>(Declaration)) {
-        return parse(FunctionDecl, Range);
-    } else if (auto ConstructDecl = dyn_cast<ConstructorDecl>(Declaration)) {
-        return parse(ConstructDecl, Range);
-    }
-    return stringError("trying to parse unsupported declaration type");
-}
-
 SymbolsOrError parseOverridenDeclaration(const FuncDecl *Declaration,
                                          const std::string &ModuleName,
                                          const CharSourceRange &Range) {
-  std::set<std::string> Modules;
-  auto Base = baseOverridenDeclarationWithModules(Declaration, Modules);
+
+  auto BaseWithModules = getBaseOverridenDeclarationWithModules(Declaration);
+  auto Base = BaseWithModules.first;
+  auto Modules = BaseWithModules.second;
+
+  // Emits symbol only if the base overriden function and
+  // all the functions overriding it in the inheritance hierarchy are from
+  // the same module and it's the module we've passed as ModuleName parameter.
+  // Emitted symbol represents the base function so that all the functions that
+  // override it are renamed to the same obfuscated name
   if (Modules.size() == 1 && Modules.count(ModuleName) == 1) {
     return parse(Base, Range);
   } else {
@@ -107,6 +129,8 @@ SymbolsOrError parseOverridenDeclaration(const FuncDecl *Declaration,
 }
 
 SymbolsOrError parse(const ConstructorDecl* Declaration, CharSourceRange Range) {
+  // We're not interested in renaming the init function name,
+  // but we're interested in renaming the init parameters
   return parseSeparateFunctionDeclarationForParameters(Declaration);
 }
   
@@ -123,27 +147,27 @@ SymbolsOrError parse(const FuncDecl* Declaration, CharSourceRange Range) {
                                      moduleName(Declaration),
                                      Range);
   }
-  
+
+  // Create the symbol for function
   auto ModuleAndParts = functionIdentifierParts(Declaration);
-  std::string ModuleName = ModuleAndParts.first;
-  std::vector<std::string> Parts = ModuleAndParts.second;
-  
+  auto ModuleName = ModuleAndParts.first;
+  auto Parts = ModuleAndParts.second;
   Symbol Symbol(combineIdentifier(Parts),
                 declarationName(Declaration),
                 ModuleName,
                 SymbolType::NamedFunction);
-
   std::vector<SymbolWithRange> Symbols;
   Symbols.push_back(SymbolWithRange(Symbol, Range));
-  
+
+  // Create the symbols for function parameters
   auto ParametersSymbolsOrError =
     parseSeparateFunctionDeclarationForParameters(Declaration);
   if (auto Error = ParametersSymbolsOrError.takeError()) {
     return std::move(Error);
   }
-  
   copyToVector(ParametersSymbolsOrError.get(), Symbols);
-  
+
+  // Return both the function symbol and the parameters symbols together
   return Symbols;
 }
 
diff --git a/swift/lib/Obfuscation/OperatorParser.cpp b/swift/lib/Obfuscation/OperatorParser.cpp
index 166f05665b9..b479b240f4a 100644
--- a/swift/lib/Obfuscation/OperatorParser.cpp
+++ b/swift/lib/Obfuscation/OperatorParser.cpp
@@ -25,13 +25,18 @@ SymbolsOrError parseOperator(const FuncDecl* Declaration, CharSourceRange Range)
 
   std::vector<SymbolWithRange> Symbols;
 
+  // Creates the symbols for the parameters of the operator implementation
   auto ParametersSymbolsOrError =
     parseSeparateFunctionDeclarationForParameters(Declaration);
   if (auto Error = ParametersSymbolsOrError.takeError()) {
     return std::move(Error);
   }
+  // Parameters for the operator implementation might be always renamed because
+  // they are not part of the interface that the operator defines
   copyToVector(ParametersSymbolsOrError.get(), Symbols);
 
+  // We don't rename the operator if the operator is from other module
+  // than the operator's implementation
   if (auto OperatorDecl = Declaration->getOperatorDecl()) {
     auto OperatorModuleName = moduleName(OperatorDecl);
     if (moduleName(Declaration) != OperatorModuleName) {
diff --git a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
index 11458b7ca58..1e424fff405 100644
--- a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
@@ -41,8 +41,11 @@ SymbolsOrError parse(const ParamDecl* Declaration) {
   if (const auto *FunctionDeclaration =
       dyn_cast<AbstractFunctionDecl>(Declaration->getDeclContext())) {
     
-    std::set<std::string> Modules;
-    auto *BaseFunctionDeclaration = baseOverridenDeclarationWithModules(FunctionDeclaration, Modules);
+
+    auto BaseWithModules =
+      getBaseOverridenDeclarationWithModules(FunctionDeclaration);
+    auto BaseFunctionDeclaration = BaseWithModules.first;
+    auto Modules = BaseWithModules.second;
     
     bool OverridenMethodIsFromTheSameModule =
       Modules.size() == 0
diff --git a/swift/lib/Obfuscation/VariableDeclarationParser.cpp b/swift/lib/Obfuscation/VariableDeclarationParser.cpp
index fae92ed2282..05db9881dec 100644
--- a/swift/lib/Obfuscation/VariableDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/VariableDeclarationParser.cpp
@@ -10,8 +10,9 @@ namespace obfuscation {
 SingleSymbolOrError
 parseOverridenDeclaration(const VarDecl *Declaration,
                           const std::string &ModuleName) {
-  std::set<std::string> Modules;
-  auto Base = baseOverridenDeclarationWithModules(Declaration, Modules);
+  auto BaseWithModules = getBaseOverridenDeclarationWithModules(Declaration);
+  auto Base = BaseWithModules.first;
+  auto Modules = BaseWithModules.second;
   if (Modules.size() == 1 && Modules.count(ModuleName) == 1) {
     return parse(Base);
   } else {
-- 
2.17.1 (Apple Git-112)


From 69cf8c47d59200e4e14324ae3bcf2ecd7f42c58d Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Fri, 23 Feb 2018 10:45:15 +0100
Subject: [PATCH 085/138] =?UTF-8?q?Not=20renaming=20closure=E2=80=99s=20ca?=
 =?UTF-8?q?pture=20list=20elements,=20added=20closure=20tests?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Reviewers: krzysztof.siejkowski, michal.zielinski

Reviewed By: krzysztof.siejkowski, michal.zielinski

Subscribers: michal.zielinski, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2852
---
 .../Obfuscation/VariableDeclarationParser.cpp | 12 ++++
 .../FullProcess/Closures/Closures.swift       | 72 +++++++++++++++++++
 .../Closures/Expected/Closures.swift          | 71 ++++++++++++++++++
 .../Expected/UnsupportedDropnote.swift        | 10 ---
 .../UnsupportedDropnote.swift                 |  9 ---
 5 files changed, 155 insertions(+), 19 deletions(-)
 create mode 100644 swift/test/Obfuscation/FullProcess/Closures/Closures.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/Closures/Expected/Closures.swift

diff --git a/swift/lib/Obfuscation/VariableDeclarationParser.cpp b/swift/lib/Obfuscation/VariableDeclarationParser.cpp
index 05db9881dec..3cdeaccb9e3 100644
--- a/swift/lib/Obfuscation/VariableDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/VariableDeclarationParser.cpp
@@ -7,6 +7,14 @@
 namespace swift {
 namespace obfuscation {
 
+llvm::Error isDeclarationSupported(const VarDecl *Declaration) {
+  if (Declaration->isCaptureList()) {
+    return stringError("The variable is the element of closure's "
+                       "capture list. It must not be renamed.");
+  }
+  return llvm::Error::success();
+}
+  
 SingleSymbolOrError
 parseOverridenDeclaration(const VarDecl *Declaration,
                           const std::string &ModuleName) {
@@ -64,6 +72,10 @@ variableContextParts(const VarDecl *Declaration) {
 
 SingleSymbolOrError parse(const VarDecl* Declaration) {
   
+  if (auto Error = isDeclarationSupported(Declaration)) {
+    return std::move(Error);
+  }
+  
   if (Declaration->getOverriddenDecl() != nullptr) {
     return parseOverridenDeclaration(Declaration, moduleName(Declaration));
   }
diff --git a/swift/test/Obfuscation/FullProcess/Closures/Closures.swift b/swift/test/Obfuscation/FullProcess/Closures/Closures.swift
new file mode 100644
index 00000000000..33776ed32e3
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/Closures/Closures.swift
@@ -0,0 +1,72 @@
+//RUN: %target-prepare-obfuscation-for-file "Closures" %target-run-full-obfuscation
+import AppKit
+
+class Class {}
+
+class ClosureTest {
+  var prop = 1
+  var prop2 = Class()
+  
+  var closureParam: (Int) -> Int = { param in
+    return param
+  }
+
+  var closureShorthandParams: (Int, Int) -> String = {
+    return "\($0) \($1)"
+  }
+  
+  lazy var closureWeakSelf: () -> Int = { [weak self] in
+    return self!.prop
+  }
+  
+  lazy var closureUnownedSelf: () -> Int = { [unowned self] in
+    return self.prop
+  }
+  
+  lazy var closureUnownedSelfWeakProp: () -> Class = { [unowned self, weak p = self.prop2] in
+    return p!
+  }
+  
+  lazy var closureWeakSelfAndParam: (Int) -> Int = { [weak self] param in
+    return self!.prop + param
+  }
+  
+  lazy var closureUnownedSelfAndParam: (Int) -> Int = { [unowned self] param in
+    return self.prop + param
+  }
+  
+  func f0() -> Int {
+    let local = 2
+    
+    self.closureWeakSelf()
+    
+    let closureCapturingLocalVariable: () -> Int = {
+      return local
+    }
+    
+    return closureCapturingLocalVariable()
+  }
+  
+  func f1(closure: (Int) -> (Int)) -> Int {
+    return closure(1)
+  }
+  
+  func f2() {
+    self.closureParam(1)
+    self.closureShorthandParams(1, 2)
+    self.closureWeakSelf()
+    self.closureUnownedSelf()
+    self.closureUnownedSelfWeakProp()
+    self.closureWeakSelfAndParam(1)
+    self.closureUnownedSelfAndParam(1)
+    self.f1 { param in
+      return param
+    }
+    self.f1 { [weak self] param in
+      return param + self!.prop
+    }
+    self.f1 { [unowned self] param in
+      return param + self.prop
+    }
+  }
+}
diff --git a/swift/test/Obfuscation/FullProcess/Closures/Expected/Closures.swift b/swift/test/Obfuscation/FullProcess/Closures/Expected/Closures.swift
new file mode 100644
index 00000000000..6aaaf4b206d
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/Closures/Expected/Closures.swift
@@ -0,0 +1,71 @@
+import AppKit
+
+class T1_Class {}
+
+class T1_ClosureTest {
+  var V1_prop = 1
+  var V1_prop2 = T1_Class()
+  
+  var V1_closureParam: (Int) -> Int = { param in
+    return param
+  }
+
+  var V1_closureShorthandParams: (Int, Int) -> String = {
+    return "\($0) \($1)"
+  }
+  
+  lazy var V1_closureWeakSelf: () -> Int = { [weak self] in
+    return self!.V1_prop
+  }
+  
+  lazy var V1_closureUnownedSelf: () -> Int = { [unowned self] in
+    return self.V1_prop
+  }
+  
+  lazy var V1_closureUnownedSelfWeakProp: () -> T1_Class = { [unowned self, weak p = self.V1_prop2] in
+    return p!
+  }
+  
+  lazy var V1_closureWeakSelfAndParam: (Int) -> Int = { [weak self] param in
+    return self!.V1_prop + param
+  }
+  
+  lazy var V1_closureUnownedSelfAndParam: (Int) -> Int = { [unowned self] param in
+    return self.V1_prop + param
+  }
+  
+  func NF1_f0() -> Int {
+    let V1_local = 2
+    
+    self.V1_closureWeakSelf()
+    
+    let V1_closureCapturingLocalVariable: () -> Int = {
+      return V1_local
+    }
+    
+    return V1_closureCapturingLocalVariable()
+  }
+  
+  func NF1_f1(SP1_closure: (Int) -> (Int)) -> Int {
+    return SP1_closure(1)
+  }
+  
+  func NF1_f2() {
+    self.V1_closureParam(1)
+    self.V1_closureShorthandParams(1, 2)
+    self.V1_closureWeakSelf()
+    self.V1_closureUnownedSelf()
+    self.V1_closureUnownedSelfWeakProp()
+    self.V1_closureWeakSelfAndParam(1)
+    self.V1_closureUnownedSelfAndParam(1)
+    self.NF1_f1 { param in
+      return param
+    }
+    self.NF1_f1 { [weak self] param in
+      return param + self!.V1_prop
+    }
+    self.NF1_f1 { [unowned self] param in
+      return param + self.V1_prop
+    }
+  }
+}
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
index c3e547047b7..4a856ea021f 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
@@ -1,19 +1,9 @@
-
 import Foundation
 
 class T1_Test {
   func NF1_testFunc() {}
 }
 
-// capture list is not properly renamed - should be?
-class T1_ClosureTest {
-  let V1_test = T1_Test()
-  
-  lazy var someClosure = {
-    [unowned self, weak V2_test = self.V1_test] in
-  }
-}
-
 // init param FieldA is not renamed if there is a second param with default value
 class T1_Foo {
   var V1_FieldA: String
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
index 37c87ceffb1..80360b6269d 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
@@ -6,15 +6,6 @@ class Test {
   func testFunc() {}
 }
 
-// capture list is not properly renamed - should be?
-class ClosureTest {
-  let test = Test()
-  
-  lazy var someClosure = {
-    [unowned self, weak test = self.test] in
-  }
-}
-
 // init param FieldA is not renamed if there is a second param with default value
 class Foo {
   var FieldA: String
-- 
2.17.1 (Apple Git-112)


From e92b8a1dac344480100a6d8100c3095d84809cdc Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Fri, 23 Feb 2018 11:59:25 +0100
Subject: [PATCH 086/138] Updated docs for closures renaming

Reviewers: krzysztof.siejkowski, michal.zielinski

Reviewed By: michal.zielinski

Subscribers: michal.zielinski, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2854
---
 Documentation/ThingsThatAreNotObfuscated.md | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/Documentation/ThingsThatAreNotObfuscated.md b/Documentation/ThingsThatAreNotObfuscated.md
index ee84f68da1b..52d1846d19a 100644
--- a/Documentation/ThingsThatAreNotObfuscated.md
+++ b/Documentation/ThingsThatAreNotObfuscated.md
@@ -3,6 +3,8 @@
 There are a couple of language features that are not subject to obfuscation.
 These features are:
   - local variables
+  - closure parameters
+  - closure capture list elements
   - associated types
   - type aliases
   - enum constants
-- 
2.17.1 (Apple Git-112)


From ca51f8aa36ec15cf865b2be0cc6de7e400420165 Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Mon, 26 Feb 2018 13:47:17 +0100
Subject: [PATCH 087/138] Renaming parameters in super calls

---
 .../Obfuscation/ParameterDeclarationParser.h  |  2 +-
 swift/lib/Obfuscation/ExpressionParser.cpp    | 20 +++++++++++++++----
 .../ParameterDeclarationParser.cpp            |  4 +---
 .../Expected/FunctionParameterNames.swift     |  9 +++++++++
 .../FunctionParameterNames.swift              | 10 ++++++++--
 .../Expected/UnsupportedDropnote.swift        |  9 ---------
 .../UnsupportedDropnote.swift                 |  9 ---------
 7 files changed, 35 insertions(+), 28 deletions(-)

diff --git a/swift/include/swift/Obfuscation/ParameterDeclarationParser.h b/swift/include/swift/Obfuscation/ParameterDeclarationParser.h
index 3018aea3e42..e4fd14f3d74 100644
--- a/swift/include/swift/Obfuscation/ParameterDeclarationParser.h
+++ b/swift/include/swift/Obfuscation/ParameterDeclarationParser.h
@@ -17,7 +17,7 @@ SymbolsOrError
 parseSeparateFunctionDeclarationForParameters(const AbstractFunctionDecl* Declaration);
   
 SymbolsOrError
-parseFunctionFromCallExpressionForParameters(const FuncDecl* Declaration);
+parseFunctionFromCallExpressionForParameters(const AbstractFunctionDecl* Declaration);
 
 SingleSymbolOrError
 symbolFromMemberwiseConstructorParameter(const ParamDecl* Parameter);
diff --git a/swift/lib/Obfuscation/ExpressionParser.cpp b/swift/lib/Obfuscation/ExpressionParser.cpp
index 455ba07b111..cf4345bbb4a 100644
--- a/swift/lib/Obfuscation/ExpressionParser.cpp
+++ b/swift/lib/Obfuscation/ExpressionParser.cpp
@@ -5,16 +5,28 @@
 namespace swift {
 namespace obfuscation {
   
-llvm::Expected<FuncDecl*>
+llvm::Expected<AbstractFunctionDecl*>
 declarationOfFunctionCalledInExpression(CallExpr *CallExpression) {
+  auto *App = dyn_cast<ApplyExpr>(CallExpression);
+  
   if (auto *DotSyntaxCallExpression =
         dyn_cast<DotSyntaxCallExpr>(CallExpression->getFn())) {
-    if (auto *DeclarationRefExpression =
-          dyn_cast<DeclRefExpr>(DotSyntaxCallExpression->getFn())) {
+    if(auto *OtherConstructor =
+       dyn_cast<OtherConstructorDeclRefExpr>(DotSyntaxCallExpression->getFn())) {
+      // It's a super call like super.init()
       if (auto *FunctionDeclaration =
-            dyn_cast<FuncDecl>(DeclarationRefExpression->getDecl())) {
+          dyn_cast<AbstractFunctionDecl>(OtherConstructor->getDecl())) {
         return FunctionDeclaration;
       }
+    } else {
+      // It's not a super call
+      if (auto *DeclarationRefExpression =
+          dyn_cast<DeclRefExpr>(DotSyntaxCallExpression->getFn())) {
+        if (auto *FunctionDeclaration =
+            dyn_cast<AbstractFunctionDecl>(DeclarationRefExpression->getDecl())) {
+          return FunctionDeclaration;
+        }
+      }
     }
   }
   return stringError("Cannot found supported Call Expression subtree pattern");
diff --git a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
index 1e424fff405..2e8d516cea3 100644
--- a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
@@ -26,9 +26,7 @@ llvm::Expected<std::string> position(const ParamDecl *Declaration,
         return "list" + std::to_string(ListIndex) +
                "_parameter" + std::to_string(ParameterIndex);
       }
-      
     }
-    
   }
   
   return stringError("Couldn't find parameter position");
@@ -170,7 +168,7 @@ parseSeparateFunctionDeclarationForParameters(const AbstractFunctionDecl* Declar
 }
   
 SymbolsOrError
-parseFunctionFromCallExpressionForParameters(const FuncDecl* Declaration) {
+parseFunctionFromCallExpressionForParameters(const AbstractFunctionDecl* Declaration) {
   
   auto SymbolsOrError = parametersSymbolsFromFunction(Declaration);
   
diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
index df3035f6002..cbf0db8b36b 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
@@ -75,3 +75,12 @@ protocol T1_ProtocolFunc {
 class T1_ProtocolFunClass: T1_ProtocolFunc {
   func NF1_pFunc(SP1_pFunc: Int) {}
 }
+
+//overriden constructors
+class T1_Parent{
+  init(SP1_p1: String, SP1_p2: Int) {}
+}
+class T1_Child: T1_Parent {
+  override init(SP1_p1: String, SP1_p2: Int) { super.init(SP1_p1: SP1_p1, SP1_p2: SP1_p2) }
+}
+let V1_c = T1_Child(SP1_p1: "p1", SP1_p2:42)
diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
index 78728c9dbd1..8da0c338bab 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
@@ -77,5 +77,11 @@ class ProtocolFunClass: ProtocolFunc {
   func pFunc(pFunc: Int) {}
 }
 
-
-
+//overriden constructors
+class Parent{
+  init(p1: String, p2: Int) {}
+}
+class Child: Parent {
+  override init(p1: String, p2: Int) { super.init(p1: p1, p2: p2) }
+}
+let c = Child(p1: "p1", p2:42)
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
index 4a856ea021f..2fd3d1f0388 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
@@ -27,15 +27,6 @@ final class T1_DebugBlock {
   }
 }
 
-//override init
-class T1_Parent{
-  init(SP1_p1: String, SP1_p2: Int) {}
-}
-class T1_Child: T1_Parent {
-  override init(SP1_p1: String, SP1_p2: Int){}
-}
-let V1_c = T1_Child(SP1_p1: "p1", SP1_p2:42)
-
 //error name in catch block should not be renamed
 func NF1_canThrowErrors() throws {}
 func NF1_a() {
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
index 80360b6269d..13bb97619f4 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
@@ -29,15 +29,6 @@ final class DebugBlock {
   }
 }
 
-//override init
-class Parent{
-  init(p1: String, p2: Int) {}
-}
-class Child: Parent {
-  override init(p1: String, p2: Int){}
-}
-let c = Child(p1: "p1", p2:42)
-
 //error name in catch block should not be renamed
 func canThrowErrors() throws {}
 func a() {
-- 
2.17.1 (Apple Git-112)


From 3188e0ae5755aa25874ab036c65fd6827d8f0569 Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Mon, 26 Feb 2018 14:50:18 +0100
Subject: [PATCH 088/138] pretty much working renaming overriden parameters

---
 .../ParameterDeclarationParser.cpp            |  5 ++++-
 .../Expected/FunctionParameterNames.swift     | 19 ++++++++++++++++++-
 .../FunctionParameterNames.swift              | 19 ++++++++++++++++++-
 3 files changed, 40 insertions(+), 3 deletions(-)

diff --git a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
index 2e8d516cea3..5330d5bbcad 100644
--- a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
@@ -22,7 +22,10 @@ llvm::Expected<std::string> position(const ParamDecl *Declaration,
          ++ParameterIndex) {
       
       auto *ParamDeclaration = ParameterList->get(ParameterIndex);
-      if (ParamDeclaration == Declaration) {
+      
+      //this comparison may be wrong but I couldn't come up
+      //with a sample code that breaks it
+      if (Declaration->getName() == ParamDeclaration->getName()) {
         return "list" + std::to_string(ListIndex) +
                "_parameter" + std::to_string(ParameterIndex);
       }
diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
index cbf0db8b36b..75274e3d00c 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
@@ -79,8 +79,25 @@ class T1_ProtocolFunClass: T1_ProtocolFunc {
 //overriden constructors
 class T1_Parent{
   init(SP1_p1: String, SP1_p2: Int) {}
+  init(EP3_foo IP2_foo:Int, EP4_foo IP2_bar: T1_SampleClass) { }
+  init(EP1_extp1 IP1_p1: String, EP1_extp2 IP1_p2: Int) {}
+  init(_ IP1_p1: String, EP1_extp IP1_p2: Int) {}
 }
 class T1_Child: T1_Parent {
-  override init(SP1_p1: String, SP1_p2: Int) { super.init(SP1_p1: SP1_p1, SP1_p2: SP1_p2) }
+  override init(SP1_p1: String, SP1_p2: Int) {
+    super.init(SP1_p1: SP1_p1, SP1_p2: SP1_p2)
+  }
+  override init(EP3_foo IP2_foo:Int, EP4_foo IP2_bar: T1_SampleClass) {
+    super.init(EP3_foo: IP2_foo, EP4_foo: IP2_bar)
+  }
+  override init(EP1_extp1 IP1_p1: String, EP1_extp2 IP1_p2: Int) {
+    super.init(EP1_extp1: IP1_p1, EP1_extp2: IP1_p2)
+  }
+  override init(_ IP1_p1: String, EP1_extp IP1_p2: Int) {
+    super.init(IP1_p1, EP1_extp: IP1_p2)
+  }
 }
 let V1_c = T1_Child(SP1_p1: "p1", SP1_p2:42)
+let V1_c2 = T1_Child(EP3_foo: 42, EP3_foo:T1_SampleClass())
+let V1_c3 = T1_Child(EP1_extp1: "p1", EP1_extp2:42)
+let V1_c4 = T1_Child("p1", EP1_extp:42)
diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
index 8da0c338bab..8465a8ff361 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
@@ -80,8 +80,25 @@ class ProtocolFunClass: ProtocolFunc {
 //overriden constructors
 class Parent{
   init(p1: String, p2: Int) {}
+  init(foo foo:Int, foo bar: SampleClass) { }
+  init(extp1 p1: String, extp2 p2: Int) {}
+  init(_ p1: String, extp p2: Int) {}
 }
 class Child: Parent {
-  override init(p1: String, p2: Int) { super.init(p1: p1, p2: p2) }
+  override init(p1: String, p2: Int) {
+    super.init(p1: p1, p2: p2)
+  }
+  override init(foo foo:Int, foo bar: SampleClass) {
+    super.init(foo: foo, foo: bar)
+  }
+  override init(extp1 p1: String, extp2 p2: Int) {
+    super.init(extp1: p1, extp2: p2)
+  }
+  override init(_ p1: String, extp p2: Int) {
+    super.init(p1, extp: p2)
+  }
 }
 let c = Child(p1: "p1", p2:42)
+let c2 = Child(foo: 42, foo:SampleClass())
+let c3 = Child(extp1: "p1", extp2:42)
+let c4 = Child("p1", extp:42)
-- 
2.17.1 (Apple Git-112)


From d3f7cb24f335439135edf2eb1df48419fa39a385 Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Mon, 26 Feb 2018 14:53:14 +0100
Subject: [PATCH 089/138] pretty much working renaming overriden parameters

---
 .../Expected/FunctionParameterNames.swift                   | 6 ++++++
 .../FunctionParameterNames/FunctionParameterNames.swift     | 6 ++++++
 2 files changed, 12 insertions(+)

diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
index 75274e3d00c..689fe3b6412 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
@@ -82,6 +82,8 @@ class T1_Parent{
   init(EP3_foo IP2_foo:Int, EP4_foo IP2_bar: T1_SampleClass) { }
   init(EP1_extp1 IP1_p1: String, EP1_extp2 IP1_p2: Int) {}
   init(_ IP1_p1: String, EP1_extp IP1_p2: Int) {}
+  
+  func NF1_ffff(EP1_pa IP1_pa: SampleClass, SP1_pu: Int) {}
 }
 class T1_Child: T1_Parent {
   override init(SP1_p1: String, SP1_p2: Int) {
@@ -96,6 +98,10 @@ class T1_Child: T1_Parent {
   override init(_ IP1_p1: String, EP1_extp IP1_p2: Int) {
     super.init(IP1_p1, EP1_extp: IP1_p2)
   }
+  
+  override func NF1_ffff(EP1_pa IP1_pa: SampleClass, SP1_pu: Int) {
+    super.ffff(EP1_pa: EP1_pa, SP1_pu: SP1_pu)
+  }
 }
 let V1_c = T1_Child(SP1_p1: "p1", SP1_p2:42)
 let V1_c2 = T1_Child(EP3_foo: 42, EP3_foo:T1_SampleClass())
diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
index 8465a8ff361..e42ace5c6ce 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
@@ -83,6 +83,8 @@ class Parent{
   init(foo foo:Int, foo bar: SampleClass) { }
   init(extp1 p1: String, extp2 p2: Int) {}
   init(_ p1: String, extp p2: Int) {}
+  
+  func ffff(pa pa: SampleClass, pu: Int) {}
 }
 class Child: Parent {
   override init(p1: String, p2: Int) {
@@ -97,6 +99,10 @@ class Child: Parent {
   override init(_ p1: String, extp p2: Int) {
     super.init(p1, extp: p2)
   }
+  
+  override func ffff(pa pa: SampleClass, pu: Int) {
+    super.ffff(pa: pa, pu: pu)
+  }
 }
 let c = Child(p1: "p1", p2:42)
 let c2 = Child(foo: 42, foo:SampleClass())
-- 
2.17.1 (Apple Git-112)


From 625a39999b2ba3c6858fce2b209e985b9fc20b66 Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Mon, 26 Feb 2018 15:00:57 +0100
Subject: [PATCH 090/138] pretty much working renaming overriden parameters

---
 .../Expected/FunctionParameterNames.swift                 | 8 +-------
 .../FunctionParameterNames/FunctionParameterNames.swift   | 6 ------
 2 files changed, 1 insertion(+), 13 deletions(-)

diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
index 689fe3b6412..718ba002938 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
@@ -81,9 +81,7 @@ class T1_Parent{
   init(SP1_p1: String, SP1_p2: Int) {}
   init(EP3_foo IP2_foo:Int, EP4_foo IP2_bar: T1_SampleClass) { }
   init(EP1_extp1 IP1_p1: String, EP1_extp2 IP1_p2: Int) {}
-  init(_ IP1_p1: String, EP1_extp IP1_p2: Int) {}
-  
-  func NF1_ffff(EP1_pa IP1_pa: SampleClass, SP1_pu: Int) {}
+  init(_ IP1_p1: String, EP1_extp IP1_p2: Int) {}  
 }
 class T1_Child: T1_Parent {
   override init(SP1_p1: String, SP1_p2: Int) {
@@ -98,10 +96,6 @@ class T1_Child: T1_Parent {
   override init(_ IP1_p1: String, EP1_extp IP1_p2: Int) {
     super.init(IP1_p1, EP1_extp: IP1_p2)
   }
-  
-  override func NF1_ffff(EP1_pa IP1_pa: SampleClass, SP1_pu: Int) {
-    super.ffff(EP1_pa: EP1_pa, SP1_pu: SP1_pu)
-  }
 }
 let V1_c = T1_Child(SP1_p1: "p1", SP1_p2:42)
 let V1_c2 = T1_Child(EP3_foo: 42, EP3_foo:T1_SampleClass())
diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
index e42ace5c6ce..8465a8ff361 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
@@ -83,8 +83,6 @@ class Parent{
   init(foo foo:Int, foo bar: SampleClass) { }
   init(extp1 p1: String, extp2 p2: Int) {}
   init(_ p1: String, extp p2: Int) {}
-  
-  func ffff(pa pa: SampleClass, pu: Int) {}
 }
 class Child: Parent {
   override init(p1: String, p2: Int) {
@@ -99,10 +97,6 @@ class Child: Parent {
   override init(_ p1: String, extp p2: Int) {
     super.init(p1, extp: p2)
   }
-  
-  override func ffff(pa pa: SampleClass, pu: Int) {
-    super.ffff(pa: pa, pu: pu)
-  }
 }
 let c = Child(p1: "p1", p2:42)
 let c2 = Child(foo: 42, foo:SampleClass())
-- 
2.17.1 (Apple Git-112)


From 35943a093f788e95a369afe5071e9dbe9bb060f8 Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Mon, 26 Feb 2018 15:35:55 +0100
Subject: [PATCH 091/138] protocol test case

---
 .../Expected/FunctionParameterNames.swift           | 13 ++++++++++++-
 .../FunctionParameterNames.swift                    | 11 +++++++++++
 2 files changed, 23 insertions(+), 1 deletion(-)

diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
index 718ba002938..1896384f18e 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
@@ -81,7 +81,7 @@ class T1_Parent{
   init(SP1_p1: String, SP1_p2: Int) {}
   init(EP3_foo IP2_foo:Int, EP4_foo IP2_bar: T1_SampleClass) { }
   init(EP1_extp1 IP1_p1: String, EP1_extp2 IP1_p2: Int) {}
-  init(_ IP1_p1: String, EP1_extp IP1_p2: Int) {}  
+  init(_ IP1_p1: String, EP1_extp IP1_p2: Int) {}
 }
 class T1_Child: T1_Parent {
   override init(SP1_p1: String, SP1_p2: Int) {
@@ -101,3 +101,14 @@ let V1_c = T1_Child(SP1_p1: "p1", SP1_p2:42)
 let V1_c2 = T1_Child(EP3_foo: 42, EP3_foo:T1_SampleClass())
 let V1_c3 = T1_Child(EP1_extp1: "p1", EP1_extp2:42)
 let V1_c4 = T1_Child("p1", EP1_extp:42)
+
+//protocol constructor
+protocol T1_ProtoInit {
+  init(SP1_protoInitParamA: String, SP1_protoInitParamB: Int)
+}
+
+class T1_ProtoInitClass: T1_ProtoInit {
+  required init(SP1_protoInitParamA: String, SP1_protoInitParamB: Int) {
+  }
+}
+let V1_pic = T1_ProtoInitClass(SP1_protoInitParamA: "", SP1_protoInitParamB: 42)
diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
index 8465a8ff361..08acc9de995 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
@@ -102,3 +102,14 @@ let c = Child(p1: "p1", p2:42)
 let c2 = Child(foo: 42, foo:SampleClass())
 let c3 = Child(extp1: "p1", extp2:42)
 let c4 = Child("p1", extp:42)
+
+//protocol constructor
+protocol ProtoInit {
+  init(protoInitParamA: String, protoInitParamB: Int)
+}
+
+class ProtoInitClass: ProtoInit {
+  required init(protoInitParamA: String, protoInitParamB: Int) {
+  }
+}
+let pic = ProtoInitClass(protoInitParamA: "", protoInitParamB: 42)
-- 
2.17.1 (Apple Git-112)


From 24e03f195c52edbdc5169bbc0aa9ad1affed83b0 Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Fri, 23 Feb 2018 15:14:41 +0100
Subject: [PATCH 092/138] Exclude implicit variables from obfuscation

Reviewers: jerzy.kleszcz, krzysztof.siejkowski

Reviewed By: jerzy.kleszcz, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2855
---
 swift/lib/Obfuscation/DeclarationParser.cpp   |  4 ++++
 .../Properties/Expected/Properties.swift      | 22 +++++++++++++++++++
 .../FullProcess/Properties/Properties.swift   | 21 ++++++++++++++++++
 .../Expected/UnsupportedDropnote.swift        | 10 ---------
 .../UnsupportedDropnote.swift                 | 10 ---------
 5 files changed, 47 insertions(+), 20 deletions(-)

diff --git a/swift/lib/Obfuscation/DeclarationParser.cpp b/swift/lib/Obfuscation/DeclarationParser.cpp
index ebdda9a1e54..b9989f7bd6f 100644
--- a/swift/lib/Obfuscation/DeclarationParser.cpp
+++ b/swift/lib/Obfuscation/DeclarationParser.cpp
@@ -84,6 +84,10 @@ std::unique_ptr<SymbolsOrError> parseAsParam(Decl* Declaration,
 std::unique_ptr<SymbolsOrError> parseAsVariable(Decl* Declaration,
                                                 CharSourceRange Range) {
   const auto *VariableDeclaration = dyn_cast<VarDecl>(Declaration);
+  if(VariableDeclaration->isImplicit()) {
+    return llvm::make_unique<SymbolsOrError>(
+             stringError("Only explicit variables might be safely obfuscated"));
+  }
   return appendRangeToSymbol(parse(VariableDeclaration), Range);
 }
 
diff --git a/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift b/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift
index 8605784fc3a..fa924dc9f82 100644
--- a/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift
+++ b/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift
@@ -68,3 +68,25 @@ class T1_PropertiesUsingClass {
     V2_map["42"] = V2_array[0]
   }
 }
+
+// implicit error name in catch block should not be renamed
+func NF1_canThrowErrors() throws {}
+func NF1_a() {
+  do {
+    try NF1_canThrowErrors()
+  } catch {
+    error
+  }
+}
+
+// implicit variable name inside setter in catch block should not be renamed
+struct T1_ImplicitSetter {
+  var V1_foo: String {
+    get {
+      return "foo"
+    }
+    set {
+      newValue
+    }
+  }
+}
diff --git a/swift/test/Obfuscation/FullProcess/Properties/Properties.swift b/swift/test/Obfuscation/FullProcess/Properties/Properties.swift
index d989133dfd4..b08f1865015 100644
--- a/swift/test/Obfuscation/FullProcess/Properties/Properties.swift
+++ b/swift/test/Obfuscation/FullProcess/Properties/Properties.swift
@@ -71,3 +71,24 @@ class PropertiesUsingClass {
   }
 }
 
+// implicit error name in catch block should not be renamed
+func canThrowErrors() throws {}
+func a() {
+  do {
+    try canThrowErrors()
+  } catch {
+    error
+  }
+}
+
+// implicit variable name inside setter in catch block should not be renamed
+struct ImplicitSetter {
+  var foo: String {
+    get {
+      return "foo"
+    }
+    set {
+      newValue
+    }
+  }
+}
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
index 4a856ea021f..0ee8055a9db 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
@@ -36,16 +36,6 @@ class T1_Child: T1_Parent {
 }
 let V1_c = T1_Child(SP1_p1: "p1", SP1_p2:42)
 
-//error name in catch block should not be renamed
-func NF1_canThrowErrors() throws {}
-func NF1_a() {
-  do {
-    try NF1_canThrowErrors()
-  } catch {
-    error
-  }
-}
-
 //protocol stuff
 protocol T1_Proto {
   func NF1_hello()
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
index 80360b6269d..f6f22d4a494 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
@@ -38,16 +38,6 @@ class Child: Parent {
 }
 let c = Child(p1: "p1", p2:42)
 
-//error name in catch block should not be renamed
-func canThrowErrors() throws {}
-func a() {
-  do {
-    try canThrowErrors()
-  } catch {
-    error
-  }
-}
-
 //protocol stuff
 protocol Proto {
   func hello()
-- 
2.17.1 (Apple Git-112)


From 1587b224f1cb621f9e0c378272d4815418fc6aa1 Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Fri, 23 Feb 2018 15:40:45 +0100
Subject: [PATCH 093/138] Fixed searching for parent node in xml

Reviewers: jerzy.kleszcz, krzysztof.siejkowski

Reviewed By: jerzy.kleszcz, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2856
---
 swift/lib/Obfuscation/LayoutRenamer.cpp | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

diff --git a/swift/lib/Obfuscation/LayoutRenamer.cpp b/swift/lib/Obfuscation/LayoutRenamer.cpp
index 03a71c5ebde..a727a9848ca 100644
--- a/swift/lib/Obfuscation/LayoutRenamer.cpp
+++ b/swift/lib/Obfuscation/LayoutRenamer.cpp
@@ -30,15 +30,15 @@ BaseLayoutRenamingStrategy::findNodeWithAttributeValue(
            CurrentAttribute = CurrentAttribute->next) {
         
         if(CurrentAttribute->type == XML_ATTRIBUTE_NODE) {
-          // if AttributeValue == nullptr then it means that we're interested
-          // in finding only a Node with attribute that name is AttributeName
-          if(AttributeValue == nullptr) {
-            return CurrentNode;
-          } else {
             
-            // otherwise we need to check against AttributeValue as well
-            if(xmlStrcmp(CurrentAttribute->name, AttributeName) == 0){
-              
+          if(xmlStrcmp(CurrentAttribute->name, AttributeName) == 0){
+            // if AttributeValue == nullptr then it means that we're interested
+            // in finding only a Node with attribute that name is AttributeName
+            if(AttributeValue == nullptr) {
+              return CurrentNode;
+            } else {
+              // otherwise we need to pull attribute's value and compare it
+              // with AttributeValue that was passed as a parameter
               xmlChar* value = xmlGetProp(CurrentNode, AttributeName);
               if(xmlStrcmp(value, AttributeValue) == 0){
                 return CurrentNode;
-- 
2.17.1 (Apple Git-112)


From a0d5af152b46d43e38869eb0f0e4edc9861a18a8 Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Tue, 27 Feb 2018 09:48:58 +0100
Subject: [PATCH 094/138] finished

---
 .../Expected/FunctionParameterNames.swift             | 11 -----------
 .../FunctionParameterNames.swift                      | 11 -----------
 .../Expected/UnsupportedFunctionParameterNames.swift  | 11 +++++++++++
 .../UnsupportedFunctionParameterNames.swift           | 11 +++++++++++
 4 files changed, 22 insertions(+), 22 deletions(-)

diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
index 1896384f18e..75274e3d00c 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
@@ -101,14 +101,3 @@ let V1_c = T1_Child(SP1_p1: "p1", SP1_p2:42)
 let V1_c2 = T1_Child(EP3_foo: 42, EP3_foo:T1_SampleClass())
 let V1_c3 = T1_Child(EP1_extp1: "p1", EP1_extp2:42)
 let V1_c4 = T1_Child("p1", EP1_extp:42)
-
-//protocol constructor
-protocol T1_ProtoInit {
-  init(SP1_protoInitParamA: String, SP1_protoInitParamB: Int)
-}
-
-class T1_ProtoInitClass: T1_ProtoInit {
-  required init(SP1_protoInitParamA: String, SP1_protoInitParamB: Int) {
-  }
-}
-let V1_pic = T1_ProtoInitClass(SP1_protoInitParamA: "", SP1_protoInitParamB: 42)
diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
index 08acc9de995..8465a8ff361 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
@@ -102,14 +102,3 @@ let c = Child(p1: "p1", p2:42)
 let c2 = Child(foo: 42, foo:SampleClass())
 let c3 = Child(extp1: "p1", extp2:42)
 let c4 = Child("p1", extp:42)
-
-//protocol constructor
-protocol ProtoInit {
-  init(protoInitParamA: String, protoInitParamB: Int)
-}
-
-class ProtoInitClass: ProtoInit {
-  required init(protoInitParamA: String, protoInitParamB: Int) {
-  }
-}
-let pic = ProtoInitClass(protoInitParamA: "", protoInitParamB: 42)
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/Expected/UnsupportedFunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/Expected/UnsupportedFunctionParameterNames.swift
index fa90ded177e..4f22d3a193b 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/Expected/UnsupportedFunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/Expected/UnsupportedFunctionParameterNames.swift
@@ -39,3 +39,14 @@ class T1_ProtocolFunClass: T1_ProtocolFunc {
   func NF1_pFunc3(EP1_extpFunc IP2_intpFunc: Int) {}
   func NF1_pFunc4(EP1_singleFunc IP1_singleIntFunc: Int)
 }
+
+//protocol constructor
+protocol T1_ProtoInit {
+  init(SP1_protoInitParamA: String, SP1_protoInitParamB: Int)
+}
+
+class T1_ProtoInitClass: T1_ProtoInit {
+  required init(SP1_protoInitParamA: String, SP1_protoInitParamB: Int) {
+  }
+}
+let V1_pic = T1_ProtoInitClass(SP1_protoInitParamA: "", SP1_protoInitParamB: 42)
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/UnsupportedFunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/UnsupportedFunctionParameterNames.swift
index 9c033aeec4d..ecf2975a29b 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/UnsupportedFunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/UnsupportedFunctionParameterNames.swift
@@ -42,3 +42,14 @@ class ProtocolFunClass: ProtocolFunc {
   func pFunc3(extpFunc intpFunc: Int) {}
   func pFunc4(singleFunc singleIntFunc: Int) {}
 }
+
+//protocol constructor
+protocol ProtoInit {
+  init(protoInitParamA: String, protoInitParamB: Int)
+}
+
+class ProtoInitClass: ProtoInit {
+  required init(protoInitParamA: String, protoInitParamB: Int) {
+  }
+}
+let pic = ProtoInitClass(protoInitParamA: "", protoInitParamB: 42)
-- 
2.17.1 (Apple Git-112)


From 207662d0f26cb59da6d8f15d6aee9db912e2d93f Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Tue, 27 Feb 2018 09:52:27 +0100
Subject: [PATCH 095/138] removed unused variable

---
 swift/lib/Obfuscation/ExpressionParser.cpp | 1 -
 1 file changed, 1 deletion(-)

diff --git a/swift/lib/Obfuscation/ExpressionParser.cpp b/swift/lib/Obfuscation/ExpressionParser.cpp
index cf4345bbb4a..6fd1802d09d 100644
--- a/swift/lib/Obfuscation/ExpressionParser.cpp
+++ b/swift/lib/Obfuscation/ExpressionParser.cpp
@@ -7,7 +7,6 @@ namespace obfuscation {
   
 llvm::Expected<AbstractFunctionDecl*>
 declarationOfFunctionCalledInExpression(CallExpr *CallExpression) {
-  auto *App = dyn_cast<ApplyExpr>(CallExpression);
   
   if (auto *DotSyntaxCallExpression =
         dyn_cast<DotSyntaxCallExpr>(CallExpression->getFn())) {
-- 
2.17.1 (Apple Git-112)


From deb87f9cd65673be354b87533c8dd059e52fc861 Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Tue, 27 Feb 2018 12:05:46 +0100
Subject: [PATCH 096/138] added tests for convenience constructors

---
 .../Expected/FunctionParameterNames.swift             | 11 +++++++++++
 .../FunctionParameterNames.swift                      | 11 +++++++++++
 2 files changed, 22 insertions(+)

diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
index 75274e3d00c..5d72bf81938 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
@@ -101,3 +101,14 @@ let V1_c = T1_Child(SP1_p1: "p1", SP1_p2:42)
 let V1_c2 = T1_Child(EP3_foo: 42, EP3_foo:T1_SampleClass())
 let V1_c3 = T1_Child(EP1_extp1: "p1", EP1_extp2:42)
 let V1_c4 = T1_Child("p1", EP1_extp:42)
+
+//convenience constructor
+class T1_SuperTest {
+  init(SP1_convP1: Int) {}
+  
+  convenience init(SP2_convP1: Int, SP1_convP2: String) {
+    self.init(SP1_convP1: SP2_convP1)
+  }
+}
+
+let V1_conv = T1_SuperTest(SP2_convP1:1, SP1_convP2:"asd")
diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
index 8465a8ff361..a1e82319ea8 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
@@ -102,3 +102,14 @@ let c = Child(p1: "p1", p2:42)
 let c2 = Child(foo: 42, foo:SampleClass())
 let c3 = Child(extp1: "p1", extp2:42)
 let c4 = Child("p1", extp:42)
+
+//convenience constructor
+class SuperTest {
+  init(convP1: Int) {}
+  
+  convenience init(convP1: Int, convP2: String) {
+    self.init(convP1: convP1)
+  }
+}
+
+let conv = SuperTest(convP1:1, convP2:"asd")
-- 
2.17.1 (Apple Git-112)


From 5403521cc047183b9b2111d4073fc391f8114922 Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Fri, 23 Feb 2018 11:59:25 +0100
Subject: [PATCH 097/138] Updated docs for closures renaming

Reviewers: krzysztof.siejkowski, michal.zielinski

Reviewed By: michal.zielinski

Subscribers: michal.zielinski, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2854
---
 Documentation/ThingsThatAreNotObfuscated.md | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/Documentation/ThingsThatAreNotObfuscated.md b/Documentation/ThingsThatAreNotObfuscated.md
index ee84f68da1b..52d1846d19a 100644
--- a/Documentation/ThingsThatAreNotObfuscated.md
+++ b/Documentation/ThingsThatAreNotObfuscated.md
@@ -3,6 +3,8 @@
 There are a couple of language features that are not subject to obfuscation.
 These features are:
   - local variables
+  - closure parameters
+  - closure capture list elements
   - associated types
   - type aliases
   - enum constants
-- 
2.17.1 (Apple Git-112)


From feb32acb695c8e12f65d7ae681168b2221a87ec1 Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Fri, 23 Feb 2018 15:14:41 +0100
Subject: [PATCH 098/138] Exclude implicit variables from obfuscation

Reviewers: jerzy.kleszcz, krzysztof.siejkowski

Reviewed By: jerzy.kleszcz, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2855
---
 swift/lib/Obfuscation/DeclarationParser.cpp   |  4 ++++
 .../Properties/Expected/Properties.swift      | 22 +++++++++++++++++++
 .../FullProcess/Properties/Properties.swift   | 21 ++++++++++++++++++
 .../Expected/UnsupportedDropnote.swift        | 10 ---------
 .../UnsupportedDropnote.swift                 | 10 ---------
 5 files changed, 47 insertions(+), 20 deletions(-)

diff --git a/swift/lib/Obfuscation/DeclarationParser.cpp b/swift/lib/Obfuscation/DeclarationParser.cpp
index ebdda9a1e54..b9989f7bd6f 100644
--- a/swift/lib/Obfuscation/DeclarationParser.cpp
+++ b/swift/lib/Obfuscation/DeclarationParser.cpp
@@ -84,6 +84,10 @@ std::unique_ptr<SymbolsOrError> parseAsParam(Decl* Declaration,
 std::unique_ptr<SymbolsOrError> parseAsVariable(Decl* Declaration,
                                                 CharSourceRange Range) {
   const auto *VariableDeclaration = dyn_cast<VarDecl>(Declaration);
+  if(VariableDeclaration->isImplicit()) {
+    return llvm::make_unique<SymbolsOrError>(
+             stringError("Only explicit variables might be safely obfuscated"));
+  }
   return appendRangeToSymbol(parse(VariableDeclaration), Range);
 }
 
diff --git a/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift b/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift
index 8605784fc3a..fa924dc9f82 100644
--- a/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift
+++ b/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift
@@ -68,3 +68,25 @@ class T1_PropertiesUsingClass {
     V2_map["42"] = V2_array[0]
   }
 }
+
+// implicit error name in catch block should not be renamed
+func NF1_canThrowErrors() throws {}
+func NF1_a() {
+  do {
+    try NF1_canThrowErrors()
+  } catch {
+    error
+  }
+}
+
+// implicit variable name inside setter in catch block should not be renamed
+struct T1_ImplicitSetter {
+  var V1_foo: String {
+    get {
+      return "foo"
+    }
+    set {
+      newValue
+    }
+  }
+}
diff --git a/swift/test/Obfuscation/FullProcess/Properties/Properties.swift b/swift/test/Obfuscation/FullProcess/Properties/Properties.swift
index d989133dfd4..b08f1865015 100644
--- a/swift/test/Obfuscation/FullProcess/Properties/Properties.swift
+++ b/swift/test/Obfuscation/FullProcess/Properties/Properties.swift
@@ -71,3 +71,24 @@ class PropertiesUsingClass {
   }
 }
 
+// implicit error name in catch block should not be renamed
+func canThrowErrors() throws {}
+func a() {
+  do {
+    try canThrowErrors()
+  } catch {
+    error
+  }
+}
+
+// implicit variable name inside setter in catch block should not be renamed
+struct ImplicitSetter {
+  var foo: String {
+    get {
+      return "foo"
+    }
+    set {
+      newValue
+    }
+  }
+}
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
index 2fd3d1f0388..0e91a3a88f7 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
@@ -27,16 +27,6 @@ final class T1_DebugBlock {
   }
 }
 
-//error name in catch block should not be renamed
-func NF1_canThrowErrors() throws {}
-func NF1_a() {
-  do {
-    try NF1_canThrowErrors()
-  } catch {
-    error
-  }
-}
-
 //protocol stuff
 protocol T1_Proto {
   func NF1_hello()
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
index 13bb97619f4..0c1a2ae1569 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
@@ -29,16 +29,6 @@ final class DebugBlock {
   }
 }
 
-//error name in catch block should not be renamed
-func canThrowErrors() throws {}
-func a() {
-  do {
-    try canThrowErrors()
-  } catch {
-    error
-  }
-}
-
 //protocol stuff
 protocol Proto {
   func hello()
-- 
2.17.1 (Apple Git-112)


From 75e232779d7097f0c0fb0783247971ac41c33d0b Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Fri, 23 Feb 2018 15:40:45 +0100
Subject: [PATCH 099/138] Fixed searching for parent node in xml

Reviewers: jerzy.kleszcz, krzysztof.siejkowski

Reviewed By: jerzy.kleszcz, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2856
---
 swift/lib/Obfuscation/LayoutRenamer.cpp | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

diff --git a/swift/lib/Obfuscation/LayoutRenamer.cpp b/swift/lib/Obfuscation/LayoutRenamer.cpp
index 03a71c5ebde..a727a9848ca 100644
--- a/swift/lib/Obfuscation/LayoutRenamer.cpp
+++ b/swift/lib/Obfuscation/LayoutRenamer.cpp
@@ -30,15 +30,15 @@ BaseLayoutRenamingStrategy::findNodeWithAttributeValue(
            CurrentAttribute = CurrentAttribute->next) {
         
         if(CurrentAttribute->type == XML_ATTRIBUTE_NODE) {
-          // if AttributeValue == nullptr then it means that we're interested
-          // in finding only a Node with attribute that name is AttributeName
-          if(AttributeValue == nullptr) {
-            return CurrentNode;
-          } else {
             
-            // otherwise we need to check against AttributeValue as well
-            if(xmlStrcmp(CurrentAttribute->name, AttributeName) == 0){
-              
+          if(xmlStrcmp(CurrentAttribute->name, AttributeName) == 0){
+            // if AttributeValue == nullptr then it means that we're interested
+            // in finding only a Node with attribute that name is AttributeName
+            if(AttributeValue == nullptr) {
+              return CurrentNode;
+            } else {
+              // otherwise we need to pull attribute's value and compare it
+              // with AttributeValue that was passed as a parameter
               xmlChar* value = xmlGetProp(CurrentNode, AttributeName);
               if(xmlStrcmp(value, AttributeValue) == 0){
                 return CurrentNode;
-- 
2.17.1 (Apple Git-112)


From 60561777665c035a3b87ef624db98eebc1056e5b Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Mon, 26 Feb 2018 13:47:17 +0100
Subject: [PATCH 100/138] Renaming parameters in super calls

---
 .../FunctionParameterNames/Expected/FunctionParameterNames.swift | 1 +
 .../FunctionParameterNames/FunctionParameterNames.swift          | 1 +
 2 files changed, 2 insertions(+)

diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
index 5d72bf81938..21647e416c1 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
@@ -112,3 +112,4 @@ class T1_SuperTest {
 }
 
 let V1_conv = T1_SuperTest(SP2_convP1:1, SP1_convP2:"asd")
+
diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
index a1e82319ea8..67206074ee2 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
@@ -113,3 +113,4 @@ class SuperTest {
 }
 
 let conv = SuperTest(convP1:1, convP2:"asd")
+
-- 
2.17.1 (Apple Git-112)


From 97b873991e25b762ccc47f2d9c0f57b8b708f8e4 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Wed, 21 Feb 2018 14:11:44 +0100
Subject: [PATCH 101/138] Added support for renaming in the where clauses

Reviewers: michal.zielinski, jerzy.kleszcz

Reviewed By: michal.zielinski, jerzy.kleszcz

Subscribers: michal.zielinski, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2857
---
 swift/include/swift/Obfuscation/NameMapping.h |   7 +-
 .../Obfuscation/TypeRepresentationParser.h    |  35 ++++++
 .../swift/Obfuscation/WhereClauseParser.h     |  34 +++++
 swift/lib/Obfuscation/CMakeLists.txt          |   4 +-
 swift/lib/Obfuscation/NameMapping.cpp         |  48 ++++---
 swift/lib/Obfuscation/SourceFileWalker.cpp    |  33 +++--
 .../Obfuscation/TypeRepresentationParser.cpp  | 118 ++++++++++++++++++
 swift/lib/Obfuscation/WhereClauseParser.cpp   |  73 +++++++++++
 .../Functions/Expected/Functions.swift        |  11 ++
 .../FullProcess/Functions/Functions.swift     |  11 ++
 .../Expected/Operators.swift}                 |   0
 .../Operators.swift}                          |   3 +-
 .../Properties/Expected/Properties.swift      |  23 +++-
 .../FullProcess/Properties/Properties.swift   |  23 +++-
 .../FullProcess/Types/Expected/Types.swift    |  13 ++
 .../Obfuscation/FullProcess/Types/Types.swift |  13 ++
 .../UnsupportedDropnote.swift                 |  12 +-
 .../UnsupportedFunctions.swift                |  11 --
 .../UnsupportedProperties.swift               |  22 ----
 .../Expected/UnsupportedTypes.swift           |   6 -
 .../UnsupportedTypes/UnsupportedTypes.swift   |   6 -
 .../WhereClauses/Expected/WhereClauses.swift  |  58 +++++++++
 .../WhereClauses/WhereClauses.swift           |  60 +++++++++
 23 files changed, 537 insertions(+), 87 deletions(-)
 create mode 100644 swift/include/swift/Obfuscation/TypeRepresentationParser.h
 create mode 100644 swift/include/swift/Obfuscation/WhereClauseParser.h
 create mode 100644 swift/lib/Obfuscation/TypeRepresentationParser.cpp
 create mode 100644 swift/lib/Obfuscation/WhereClauseParser.cpp
 rename swift/test/Obfuscation/FullProcess/{UnsupportedOperators/Expected/UnsupportedOperators.swift => Operators/Expected/Operators.swift} (100%)
 rename swift/test/Obfuscation/FullProcess/{UnsupportedOperators/UnsupportedOperators.swift => Operators/Operators.swift} (70%)
 create mode 100644 swift/test/Obfuscation/FullProcess/WhereClauses/Expected/WhereClauses.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/WhereClauses/WhereClauses.swift

diff --git a/swift/include/swift/Obfuscation/NameMapping.h b/swift/include/swift/Obfuscation/NameMapping.h
index 124168e6991..7c7130add74 100644
--- a/swift/include/swift/Obfuscation/NameMapping.h
+++ b/swift/include/swift/Obfuscation/NameMapping.h
@@ -25,7 +25,8 @@ class BaseIdentifierGenerator {
 protected:
   static const std::vector<std::string> UniquelyTailSymbols;
   static const std::vector<std::string> HeadSymbols;
-  static const std::vector<std::string> OperatorSymbols;
+  static const std::vector<std::string> HeadOperatorSymbols;
+  static const std::vector<std::string> UniquelyTailOperatorSymbols;
   
   std::map<SymbolType, std::string> SymbolShortNameMap = {
     { SymbolType::Type, "T" },
@@ -46,6 +47,10 @@ protected:
     { SymbolType::Variable, {} },
     { SymbolType::Operator, {} }
   };
+ 
+  static std::vector<std::string>
+  concatenateSymbols(const std::vector<std::string> &Head,
+                     const std::vector<std::string> &Tail);
 
 public:
   virtual  llvm::Expected<std::string> generateName(const Symbol &Symbol) = 0;
diff --git a/swift/include/swift/Obfuscation/TypeRepresentationParser.h b/swift/include/swift/Obfuscation/TypeRepresentationParser.h
new file mode 100644
index 00000000000..b1a688defc5
--- /dev/null
+++ b/swift/include/swift/Obfuscation/TypeRepresentationParser.h
@@ -0,0 +1,35 @@
+#ifndef TypeRepresentationParser_h
+#define TypeRepresentationParser_h
+
+#import "swift/AST/TypeRepr.h"
+
+#include <set>
+
+namespace swift {
+namespace obfuscation {
+
+class TypeRepresentationParser {
+
+private:
+
+  std::set<SymbolWithRange> Symbols;
+
+public:
+
+  void collectSymbolsFromTypeRepresentation(TypeRepr *TypeRepresentation);
+
+  std::set<SymbolWithRange> harvestSymbols();
+
+private:
+
+  void handleComponent(ComponentIdentTypeRepr *Component);
+
+  void handleTypeRepresentationRecursively(TypeRepr *ParentOfTypeRepresentation,
+                                           TypeRepr *TypeRepresentation);
+
+};
+
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* TypeRepresentationParser_h */
diff --git a/swift/include/swift/Obfuscation/WhereClauseParser.h b/swift/include/swift/Obfuscation/WhereClauseParser.h
new file mode 100644
index 00000000000..4637d9de45f
--- /dev/null
+++ b/swift/include/swift/Obfuscation/WhereClauseParser.h
@@ -0,0 +1,34 @@
+#ifndef WhereClauseParser_h
+#define WhereClauseParser_h
+
+#include "swift/Obfuscation/DataStructures.h"
+
+#include "swift/AST/Decl.h"
+
+#include <set>
+
+namespace swift {
+namespace obfuscation {
+
+class WhereClauseParser {
+
+private:
+
+  std::set<SymbolWithRange> Symbols;
+
+public:
+
+  void collectSymbolsFromDeclaration(Decl* Declaration);
+
+  std::set<SymbolWithRange> harvestSymbols();
+
+private:
+
+  void handleWhereClause(TrailingWhereClause *WhereClause);
+
+};
+
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* WhereClauseParser_h */
diff --git a/swift/lib/Obfuscation/CMakeLists.txt b/swift/lib/Obfuscation/CMakeLists.txt
index 13e5729dfdf..77173d42e6f 100644
--- a/swift/lib/Obfuscation/CMakeLists.txt
+++ b/swift/lib/Obfuscation/CMakeLists.txt
@@ -11,15 +11,17 @@ add_swift_library(swiftObfuscation STATIC
   ExpressionParser.cpp
   FileIO.cpp
   FunctionDeclarationParser.cpp
+  LayoutRenamer.cpp
   NameMapping.cpp
   NominalTypeDeclarationParser.cpp
   ParameterDeclarationParser.cpp
   Renaming.cpp
   SourceFileWalker.cpp
   SymbolExtracting.cpp
+  TypeRepresentationParser.cpp
   Utils.cpp
   VariableDeclarationParser.cpp
-  LayoutRenamer.cpp
+  WhereClauseParser.cpp
   LINK_LIBRARIES
   swiftParse
   swiftAST
diff --git a/swift/lib/Obfuscation/NameMapping.cpp b/swift/lib/Obfuscation/NameMapping.cpp
index 8568031bcb6..dbe9860b3b6 100644
--- a/swift/lib/Obfuscation/NameMapping.cpp
+++ b/swift/lib/Obfuscation/NameMapping.cpp
@@ -19,13 +19,28 @@ const std::vector<std::string> BaseIdentifierGenerator::HeadSymbols =
     "S", "T", "U", "V", "W", "X", "Y", "Z"};
 
 // "/" symbol is omitted to avoid generating comments in operator names
-const std::vector<std::string> BaseIdentifierGenerator::OperatorSymbols =
-  {"=", "-", "+", "!", "*", "%", "<", ">", "&", "|", "^", "~", "?"};
+const std::vector<std::string> BaseIdentifierGenerator::HeadOperatorSymbols =
+  {"=", "-", "+", "*", "%", "<", ">", "&", "|", "^", "~"};
+  // "/" symbol is omitted to avoid generating comments in operator names
+const std::vector<std::string>
+BaseIdentifierGenerator::UniquelyTailOperatorSymbols =
+  {"!", "?"};
+
+
+std::vector<std::string>
+BaseIdentifierGenerator::
+  concatenateSymbols(const std::vector<std::string> &Head,
+                     const std::vector<std::string> &Tail) {
+  std::vector<std::string> TemporaryTailSymbols = Tail;
+  TemporaryTailSymbols.insert(TemporaryTailSymbols.cend(),
+                              Head.cbegin(),
+                              Head.cend());
+  return TemporaryTailSymbols;
+}
   
 /// Generates random unique identifiers for symbols.
 class RandomUniqueIdentifierGenerator: public BaseIdentifierGenerator {
   std::set<std::string> GeneratedSymbols;
-  std::vector<std::string> TailSymbols;
   RandomUniformCharacterChooser HeadGenerator;
   RandomUniformStringGenerator TailGenerator;
   const std::string::size_type IdentifierLength = 32;
@@ -45,19 +60,10 @@ class RandomUniqueIdentifierGenerator: public BaseIdentifierGenerator {
     }
   }
   
-  static std::vector<std::string> concatenateHeadAndTailSymbols() {
-    std::vector<std::string> TemporaryTailSymbols = UniquelyTailSymbols;
-    TemporaryTailSymbols.insert(TemporaryTailSymbols.cend(),
-                                HeadSymbols.cbegin(),
-                                HeadSymbols.cend());
-    return TemporaryTailSymbols;
-  }
-  
 public:
   RandomUniqueIdentifierGenerator()
-  : TailSymbols(concatenateHeadAndTailSymbols()),
-  HeadGenerator(HeadSymbols),
-  TailGenerator(TailSymbols) {}
+  : HeadGenerator(HeadSymbols),
+    TailGenerator(concatenateSymbols(HeadSymbols, UniquelyTailSymbols)) {}
   
   llvm::Expected<std::string> generateName(const Symbol &Symbol) {
     return generateName(100);
@@ -68,14 +74,17 @@ public:
 /// Generates random unique identifiers for operators.
 class RandomUniqueOperatorGenerator: public BaseIdentifierGenerator {
   std::set<std::string> GeneratedSymbols;
-  RandomUniformStringGenerator Generator;
+  RandomUniformCharacterChooser HeadGenerator;
+  RandomUniformStringGenerator TailGenerator;
   const std::string::size_type IdentifierLength = 32;
 
   llvm::Expected<std::string> generateName(int NumbersOfTriesLeft) {
     if (NumbersOfTriesLeft <= 0) {
       return stringError("couldn't generate unique type name");
     }
-    auto Name = Generator.rand(IdentifierLength);
+    auto Head = HeadGenerator.rand();
+    auto Tail = TailGenerator.rand(IdentifierLength - 1);
+    auto Name = Head + Tail;
 
     if (GeneratedSymbols.insert(Name).second) {
       return Name;
@@ -85,7 +94,12 @@ class RandomUniqueOperatorGenerator: public BaseIdentifierGenerator {
   }
 
 public:
-  RandomUniqueOperatorGenerator() : Generator(OperatorSymbols) {}
+
+  RandomUniqueOperatorGenerator()
+  : HeadGenerator(HeadOperatorSymbols),
+    TailGenerator(concatenateSymbols(HeadOperatorSymbols,
+                                     UniquelyTailOperatorSymbols)) {}
+
   llvm::Expected<std::string> generateName(const Symbol &Symbol) {
     return generateName(100);
   }
diff --git a/swift/lib/Obfuscation/SourceFileWalker.cpp b/swift/lib/Obfuscation/SourceFileWalker.cpp
index 92bf134582c..821effc45b7 100644
--- a/swift/lib/Obfuscation/SourceFileWalker.cpp
+++ b/swift/lib/Obfuscation/SourceFileWalker.cpp
@@ -5,7 +5,7 @@
 #include "swift/Obfuscation/ParameterDeclarationParser.h"
 #include "swift/Obfuscation/Utils-Template.h"
 #include "swift/Obfuscation/Utils.h"
-#include "swift/Obfuscation/DeclarationParsingUtils.h"
+#include "swift/Obfuscation/WhereClauseParser.h"
 
 #include <string>
 
@@ -27,20 +27,29 @@ struct SymbolsWalkerAndCollector: public SourceEntityWalker {
   }
   
   bool walkToDeclPre(Decl *Declaration, CharSourceRange Range) override {
-    if (Declaration->isImplicit()) {
-      return false;
-    }
     auto Symbols = extractSymbol(Declaration, Range);
     handleExtractionResult(Symbols);
     return true;
   }
 
+  void handleWhereClausesIfNeeded(const std::vector<Decl*> &&Declarations) {
+    WhereClauseParser WhereClauseParser;
+    for (auto *Declaration : Declarations) {
+      WhereClauseParser.collectSymbolsFromDeclaration(Declaration);
+    }
+    handleSymbols(WhereClauseParser.harvestSymbols());
+  }
+
   // We need to extract symbols here even though we might have already seen
   // this node in the walkToDeclPre because here we have additional
   // contextual information like CtorTyRef
-  bool visitDeclReference(ValueDecl *Declaration, CharSourceRange Range,
-                          TypeDecl *CtorTyRef, ExtensionDecl *ExtTyRef,
-                          Type T, ReferenceMetaData Data) override {
+  bool visitDeclReference(ValueDecl *Declaration,
+                          CharSourceRange Range,
+                          TypeDecl *CtorTyRef,
+                          ExtensionDecl *ExtTyRef,
+                          Type T,
+                          ReferenceMetaData Data) override {
+    handleWhereClausesIfNeeded({ Declaration, CtorTyRef, ExtTyRef });
     auto Symbols = extractSymbol(CtorTyRef ? CtorTyRef : Declaration, Range);
     handleExtractionResult(Symbols);
     return true;
@@ -60,7 +69,7 @@ struct SymbolsWalkerAndCollector: public SourceEntityWalker {
 
 // Methods for handling the extracted symbols
 
-  void handleSymbol(SymbolWithRange & Symbol) {
+  void handleSymbol(const SymbolWithRange &Symbol) {
     auto InsertionResult =
       Symbols.insert(IndexedSymbolWithRange(SymbolIndex, Symbol));
     if (InsertionResult.second == true) {
@@ -69,7 +78,13 @@ struct SymbolsWalkerAndCollector: public SourceEntityWalker {
   }
 
   void handleSymbols(std::vector<SymbolWithRange> &Symbols) {
-    for (auto &Symbol : Symbols) {
+    for (const auto &Symbol : Symbols) {
+      handleSymbol(Symbol);
+    }
+  }
+
+  void handleSymbols(std::set<SymbolWithRange> &&Symbols) {
+    for (const auto &Symbol : Symbols) {
       handleSymbol(Symbol);
     }
   }
diff --git a/swift/lib/Obfuscation/TypeRepresentationParser.cpp b/swift/lib/Obfuscation/TypeRepresentationParser.cpp
new file mode 100644
index 00000000000..e0cf237f89d
--- /dev/null
+++ b/swift/lib/Obfuscation/TypeRepresentationParser.cpp
@@ -0,0 +1,118 @@
+#include "swift/Obfuscation/DeclarationParser.h"
+#include "swift/Obfuscation/Utils.h"
+#include "swift/Obfuscation/TypeRepresentationParser.h"
+
+namespace swift {
+namespace obfuscation {
+
+void TypeRepresentationParser::handleComponent(ComponentIdentTypeRepr *Component) {
+  auto StartLocation = Component->getStartLoc();
+  if (Component->isBound() && StartLocation.isValid()) {
+    auto TypeDeclaration = Component->getBoundDecl();
+    CharSourceRange TypeRange(StartLocation,
+                              TypeDeclaration->getName().getLength());
+    auto SymbolsOrError = extractSymbol(TypeDeclaration, TypeRange);
+    if (auto Error = SymbolsOrError.takeError()) {
+      llvm::consumeError(std::move(Error));
+      return;
+    }
+    copyToSet(SymbolsOrError.get(), Symbols);
+  }
+}
+
+void TypeRepresentationParser::
+handleTypeRepresentationRecursively(TypeRepr *ParentOfTypeRepresentation,
+                                    TypeRepr *TypeRepresentation) {
+
+  // Guard agains the case in which there is no object
+  // or the object points to itself in the AST.
+  if (TypeRepresentation == nullptr
+      || ParentOfTypeRepresentation == TypeRepresentation) {
+    return;
+  }
+
+  if (auto *Compound = dyn_cast<CompoundIdentTypeRepr>(TypeRepresentation)) {
+    for (auto *Component : Compound->Components) {
+      handleComponent(Component);
+    }
+  }
+
+  if (auto *Generic = dyn_cast<GenericIdentTypeRepr>(TypeRepresentation)) {
+    for (auto *GenericArg : Generic->getGenericArgs()) {
+      handleTypeRepresentationRecursively(Generic, GenericArg);
+    }
+  }
+
+  if (auto *Component = dyn_cast<ComponentIdentTypeRepr>(TypeRepresentation)) {
+    handleComponent(Component);
+  }
+
+  if (auto *InOut = dyn_cast<InOutTypeRepr>(TypeRepresentation)) {
+    handleTypeRepresentationRecursively(InOut, InOut->getBase());
+  }
+
+  if (auto *Attributed = dyn_cast<AttributedTypeRepr>(TypeRepresentation)) {
+    handleTypeRepresentationRecursively(Attributed,
+                                        Attributed->getTypeRepr());
+  }
+
+  if (auto *Function = dyn_cast<FunctionTypeRepr>(TypeRepresentation)) {
+    handleTypeRepresentationRecursively(Function,
+                                        Function->getArgsTypeRepr());
+    handleTypeRepresentationRecursively(Function,
+                                        Function->getResultTypeRepr());
+  }
+
+  if (auto *IUO =
+        dyn_cast<ImplicitlyUnwrappedOptionalTypeRepr>(TypeRepresentation)) {
+    handleTypeRepresentationRecursively(IUO, IUO->getBase());
+  }
+
+  if (auto *Protocol = dyn_cast<ProtocolTypeRepr>(TypeRepresentation)) {
+    handleTypeRepresentationRecursively(Protocol, Protocol->getBase());
+  }
+
+  if (auto *Metatype = dyn_cast<MetatypeTypeRepr>(TypeRepresentation)) {
+    handleTypeRepresentationRecursively(Metatype, Metatype->getBase());
+  }
+
+  if (auto *Array = dyn_cast<ArrayTypeRepr>(TypeRepresentation)) {
+    handleTypeRepresentationRecursively(Array, Array->getBase());
+  }
+
+  if (auto *Dictionary = dyn_cast<DictionaryTypeRepr>(TypeRepresentation)) {
+    handleTypeRepresentationRecursively(Dictionary, Dictionary->getKey());
+    handleTypeRepresentationRecursively(Dictionary, Dictionary->getValue());
+  }
+
+  if (auto *Optional = dyn_cast<OptionalTypeRepr>(TypeRepresentation)) {
+    handleTypeRepresentationRecursively(Optional, Optional->getBase());
+  }
+
+  if (auto *Tuple = dyn_cast<TupleTypeRepr>(TypeRepresentation)) {
+    for (auto *TupleElement : Tuple->getElements()) {
+      handleTypeRepresentationRecursively(Tuple, TupleElement);
+    }
+  }
+
+  if (auto *Composition = dyn_cast<CompositionTypeRepr>(TypeRepresentation)) {
+    for (auto *CompositionElement : Composition->getTypes()) {
+      handleTypeRepresentationRecursively(Composition, CompositionElement);
+    }
+  }
+}
+
+void TypeRepresentationParser::
+  collectSymbolsFromTypeRepresentation(TypeRepr *TypeRepresentation) {
+  handleTypeRepresentationRecursively(/* Parent */ nullptr,
+                                      TypeRepresentation);
+}
+
+std::set<SymbolWithRange> TypeRepresentationParser::harvestSymbols() {
+  std::set<SymbolWithRange> Result = Symbols;
+  Symbols.clear();
+  return Result;
+}
+
+} //namespace obfuscation
+} //namespace swift
diff --git a/swift/lib/Obfuscation/WhereClauseParser.cpp b/swift/lib/Obfuscation/WhereClauseParser.cpp
new file mode 100644
index 00000000000..1519b6da329
--- /dev/null
+++ b/swift/lib/Obfuscation/WhereClauseParser.cpp
@@ -0,0 +1,73 @@
+#include "swift/Obfuscation/WhereClauseParser.h"
+#include "swift/Obfuscation/Utils.h"
+#include "swift/Obfuscation/TypeRepresentationParser.h"
+
+namespace swift {
+namespace obfuscation {
+
+void WhereClauseParser::handleWhereClause(TrailingWhereClause *WhereClause) {
+  if (WhereClause == nullptr) { return; }
+  TypeRepresentationParser TypeReprParser;
+  auto Requirements = WhereClause->getRequirements();
+  for (auto WhereRequirement : Requirements) {
+    if (WhereRequirement.isInvalid()) { continue; }
+    TypeRepr *FirstTypeRepresentation = nullptr;
+    TypeRepr *SecondTypeRepresentation = nullptr;
+    switch (WhereRequirement.getKind()) {
+      case RequirementReprKind::TypeConstraint: {
+        FirstTypeRepresentation = WhereRequirement.getSubjectRepr();
+        SecondTypeRepresentation = WhereRequirement.getConstraintRepr();
+        break;
+      }
+      case RequirementReprKind::SameType: {
+        FirstTypeRepresentation = WhereRequirement.getFirstTypeRepr();
+        SecondTypeRepresentation = WhereRequirement.getSecondTypeRepr();
+        break;
+      }
+      case RequirementReprKind::LayoutConstraint: {
+        FirstTypeRepresentation = WhereRequirement.getSubjectRepr();
+        SecondTypeRepresentation = nullptr;
+        // The secont part of Layout constaint is Layout,
+        // which we think there is no need to rename
+        break;
+      }
+    }
+
+    if (FirstTypeRepresentation != nullptr
+        && !FirstTypeRepresentation->isInvalid()) {
+      TypeReprParser
+        .collectSymbolsFromTypeRepresentation(FirstTypeRepresentation);
+    }
+    if (SecondTypeRepresentation != nullptr
+        && !SecondTypeRepresentation->isInvalid()) {
+      TypeReprParser
+        .collectSymbolsFromTypeRepresentation(SecondTypeRepresentation);
+    }
+  }
+  copyToSet(TypeReprParser.harvestSymbols(), Symbols);
+}
+
+void WhereClauseParser::collectSymbolsFromDeclaration(Decl* Declaration) {
+  if (Declaration != nullptr) {
+    if (auto *Extension = dyn_cast<ExtensionDecl>(Declaration)) {
+      handleWhereClause(Extension->getTrailingWhereClause());
+    } else if (auto *GenericType = dyn_cast<GenericTypeDecl>(Declaration)) {
+      handleWhereClause(GenericType->getTrailingWhereClause());
+    } else if (auto *Subscript = dyn_cast<SubscriptDecl>(Declaration)) {
+      handleWhereClause(Subscript->getTrailingWhereClause());
+    } else if (auto *AbstractFunc = dyn_cast<AbstractFunctionDecl>(Declaration)) {
+      handleWhereClause(AbstractFunc->getTrailingWhereClause());
+    } else if (auto *Associated = dyn_cast<AssociatedTypeDecl>(Declaration)) {
+      handleWhereClause(Associated->getTrailingWhereClause());
+    }
+  }
+}
+
+std::set<SymbolWithRange> WhereClauseParser::harvestSymbols() {
+  std::set<SymbolWithRange> Result = Symbols;
+  Symbols.clear();
+  return Result;
+}
+
+} //namespace obfuscation
+} //namespace swift
diff --git a/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift b/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift
index 293bac590f6..50e3048cd98 100644
--- a/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift
+++ b/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift
@@ -112,3 +112,14 @@ func NF1_outerFunction() -> String {
 }
 
 _ = NF1_outerFunction()
+
+// Generic class methods
+class T1_GenericClass<T> {
+  func NF8_method() -> T { return T() }
+}
+
+let V1_gcii = T1_GenericClass<Int>()
+_ = V1_gcii.NF8_method()
+
+let V1_gcsi = T1_GenericClass<T1_SampleClass>()
+_ = V1_gcsi.NF8_method()
diff --git a/swift/test/Obfuscation/FullProcess/Functions/Functions.swift b/swift/test/Obfuscation/FullProcess/Functions/Functions.swift
index 703dc41f2c3..ab47272b58b 100644
--- a/swift/test/Obfuscation/FullProcess/Functions/Functions.swift
+++ b/swift/test/Obfuscation/FullProcess/Functions/Functions.swift
@@ -113,3 +113,14 @@ func outerFunction() -> String {
 }
 
 _ = outerFunction()
+
+// Generic class methods
+class GenericClass<T> {
+  func method() -> T { return T() }
+}
+
+let gcii = GenericClass<Int>()
+_ = gcii.method()
+
+let gcsi = GenericClass<SampleClass>()
+_ = gcsi.method()
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedOperators/Expected/UnsupportedOperators.swift b/swift/test/Obfuscation/FullProcess/Operators/Expected/Operators.swift
similarity index 100%
rename from swift/test/Obfuscation/FullProcess/UnsupportedOperators/Expected/UnsupportedOperators.swift
rename to swift/test/Obfuscation/FullProcess/Operators/Expected/Operators.swift
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedOperators/UnsupportedOperators.swift b/swift/test/Obfuscation/FullProcess/Operators/Operators.swift
similarity index 70%
rename from swift/test/Obfuscation/FullProcess/UnsupportedOperators/UnsupportedOperators.swift
rename to swift/test/Obfuscation/FullProcess/Operators/Operators.swift
index ed80244644f..43f262567d4 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedOperators/UnsupportedOperators.swift
+++ b/swift/test/Obfuscation/FullProcess/Operators/Operators.swift
@@ -1,6 +1,5 @@
 // XFAIL: *
-// PLEASE TURN THEM ON AFTER SET COMPARATOR FIX!
-// RUN: %target-prepare-obfuscation-for-file "UnsupportedOperators" %target-run-full-obfuscation
+// RUN: %target-prepare-obfuscation-for-file "Operators" %target-run-full-obfuscation
 
 prefix operator ---
 infix operator ^^^
diff --git a/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift b/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift
index fa924dc9f82..30d2c6af4f2 100644
--- a/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift
+++ b/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift
@@ -52,20 +52,26 @@ class T1_ViewClass: NSView {
   override var window: NSWindow? { return nil }
 }
 
-// properties with generic parameters
+// properties usage
+class T1_SomeClass<GenericParam> {
+  var V1_param: String = ""
+}
+
 class T1_GenericUsingClass {
   let V1_array: Array<Int> = []
   let V1_map: [String : Int] = [:]
 }
 
-// properties usage
 class T1_PropertiesUsingClass {
   var V2_array: Array<Int> = []
   var V2_map: [String : Int] = [:]
+  var V1_generic = T1_SomeClass<T1_PropertiesUsingClass>()
 
-  func NF1_foo() {
+  func NF1_foo() -> T1_SomeClass<T1_PropertiesUsingClass> {
     V2_array = [42]
     V2_map["42"] = V2_array[0]
+    V1_generic.V1_param = "42"
+    return V1_generic
   }
 }
 
@@ -90,3 +96,14 @@ struct T1_ImplicitSetter {
     }
   }
 }
+
+class T1_SampleClass {
+  var V1_prop: String = ""
+}
+
+struct T1_SampleStruct {
+  var V1_sample = T1_SampleClass()
+  func NF2_foo() {
+    V1_sample.V1_prop = "42"
+  }
+}
diff --git a/swift/test/Obfuscation/FullProcess/Properties/Properties.swift b/swift/test/Obfuscation/FullProcess/Properties/Properties.swift
index b08f1865015..4a63a1f7809 100644
--- a/swift/test/Obfuscation/FullProcess/Properties/Properties.swift
+++ b/swift/test/Obfuscation/FullProcess/Properties/Properties.swift
@@ -54,20 +54,26 @@ class ViewClass: NSView {
   override var window: NSWindow? { return nil }
 }
 
-// properties with generic parameters
+// properties usage
+class SomeClass<GenericParam> {
+  var param: String = ""
+}
+
 class GenericUsingClass {
   let array: Array<Int> = []
   let map: [String : Int] = [:]
 }
 
-// properties usage
 class PropertiesUsingClass {
   var array: Array<Int> = []
   var map: [String : Int] = [:]
+  var generic = SomeClass<PropertiesUsingClass>()
 
-  func foo() {
+  func foo() -> SomeClass<PropertiesUsingClass> {
     array = [42]
     map["42"] = array[0]
+    generic.param = "42"
+    return generic
   }
 }
 
@@ -92,3 +98,14 @@ struct ImplicitSetter {
     }
   }
 }
+
+class SampleClass {
+  var prop: String = ""
+}
+
+struct SampleStruct {
+  var sample = SampleClass()
+  func foo() {
+    sample.prop = "42"
+  }
+}
diff --git a/swift/test/Obfuscation/FullProcess/Types/Expected/Types.swift b/swift/test/Obfuscation/FullProcess/Types/Expected/Types.swift
index 89ccff36a4d..d2fbc3b9b0d 100644
--- a/swift/test/Obfuscation/FullProcess/Types/Expected/Types.swift
+++ b/swift/test/Obfuscation/FullProcess/Types/Expected/Types.swift
@@ -55,3 +55,16 @@ class T1_A {
 class T1_C {
   struct T2_B {}
 }
+
+extension T1_SampleProtocol where Self: T1_SampleClass {}
+
+extension T1_SampleProtocol where Self == T1_SampleClass {}
+
+//protocol stuff
+protocol T1_Proto {
+  func NF1_hello()
+}
+extension NSString: T1_Proto {}
+extension T1_Proto where Self: NSString {
+  func NF1_hello() {}
+}
diff --git a/swift/test/Obfuscation/FullProcess/Types/Types.swift b/swift/test/Obfuscation/FullProcess/Types/Types.swift
index 4add6a81e03..c2e50c32642 100644
--- a/swift/test/Obfuscation/FullProcess/Types/Types.swift
+++ b/swift/test/Obfuscation/FullProcess/Types/Types.swift
@@ -56,3 +56,16 @@ class A {
 class C {
   struct B {}
 }
+
+extension SampleProtocol where Self: SampleClass {}
+
+extension SampleProtocol where Self == SampleClass {}
+
+//protocol stuff
+protocol Proto {
+  func hello()
+}
+extension NSString: Proto {}
+extension Proto where Self: NSString {
+  func hello() {}
+}
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
index 0c1a2ae1569..ed400066f4c 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
@@ -29,11 +29,11 @@ final class DebugBlock {
   }
 }
 
-//protocol stuff
-protocol Proto {
-  func hello()
+//override init
+class Parent{
+  init(p1: String, p2: Int) {}
 }
-extension NSString: Proto {}
-extension Proto where Self: NSString {
-  func hello() {}
+class Child: Parent {
+  override init(p1: String, p2: Int){}
 }
+let c = Child(p1: "p1", p2:42)
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/UnsupportedFunctions.swift b/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/UnsupportedFunctions.swift
index 4e39fa40c75..f2f02105d93 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/UnsupportedFunctions.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/UnsupportedFunctions.swift
@@ -6,17 +6,6 @@ import AppKit
 // Backtick named functions
 func `function`() -> Int { return 1 }
 
-// Generic class methods
-class GenericClass<T> {
-  func method() -> T { return T() }
-}
-
-let gcii = GenericClass<Int>()
-_ = gcii.method()
-
-let gcsi = GenericClass<SampleClass>()
-_ = gcsi.method()
-
 // override and protocol combined
 class A {
   func a() {}
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedProperties/UnsupportedProperties.swift b/swift/test/Obfuscation/FullProcess/UnsupportedProperties/UnsupportedProperties.swift
index b283973d5e2..4244b8af4aa 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedProperties/UnsupportedProperties.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedProperties/UnsupportedProperties.swift
@@ -9,25 +9,3 @@ struct SpecialStruct {
   var `set`: String
   let `return`: Double
 }
-
-// properties with generic parameters
-class SomeClass<GenericParam> {
-  var param: String = ""
-}
-
-class GenericUsingClass {
-  let array: Array<Int> = []
-  let map: [String : Int] = {:}
-}
-
-class PropertiesUsingClass {
-  var array: Array<Int> = []
-  var map: [String : Int] = {:}
-  var generic = SomeClass<GenericParam>()
-
-  func foo() -> SomeClass {
-    array = [42]
-    map["42"] = array[0]
-    generic.param = map["42"]!.toString()
-  }
-}
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedTypes/Expected/UnsupportedTypes.swift b/swift/test/Obfuscation/FullProcess/UnsupportedTypes/Expected/UnsupportedTypes.swift
index d5fa35ac774..e2f3c42e83c 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedTypes/Expected/UnsupportedTypes.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedTypes/Expected/UnsupportedTypes.swift
@@ -6,9 +6,3 @@ class T1_`BackticksName` {}
 class T1_`BackticksNameGeneric`<`BackticksGenericParam`> {
   class T1_`BackticksInsideBackticksGeneric`: T1_`BackticksNameGeneric`<T1_`BackticksNameGeneric`<T1_`BackticksName`>> {}
 }
-
-class T1_SampleClass {}
-
-extension T1_SampleProtocol where Self: T1_SampleClass {}
-
-extension T1_SampleProtocol where Self == T1_SampleClass {}
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedTypes/UnsupportedTypes.swift b/swift/test/Obfuscation/FullProcess/UnsupportedTypes/UnsupportedTypes.swift
index d141c0a5026..6a51f9bc379 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedTypes/UnsupportedTypes.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedTypes/UnsupportedTypes.swift
@@ -9,9 +9,3 @@ class `BackticksName` {}
 class `BackticksNameGeneric`<`BackticksGenericParam`> {
   class `BackticksInsideBackticksGeneric`: `BackticksNameGeneric`<`BackticksNameGeneric`<`BackticksName`>> {}
 }
-
-class SampleClass {}
-
-extension SampleProtocol where Self: SampleClass {}
-
-extension SampleProtocol where Self == SampleClass {}
diff --git a/swift/test/Obfuscation/FullProcess/WhereClauses/Expected/WhereClauses.swift b/swift/test/Obfuscation/FullProcess/WhereClauses/Expected/WhereClauses.swift
new file mode 100644
index 00000000000..24e5fbd6134
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/WhereClauses/Expected/WhereClauses.swift
@@ -0,0 +1,58 @@
+protocol T1_SampleProtocol {
+  associatedtype AssociatedType
+}
+
+protocol T1_SampleProtocol2 { }
+
+protocol T1_SampleProtocol3: class { }
+
+class T1_SampleClass {}
+
+class T1_Generic<WithType> {}
+
+extension T1_SampleProtocol where Self : T1_SampleClass {}
+
+extension T1_SampleProtocol where AssociatedType == T1_SampleClass {}
+
+extension T1_SampleProtocol where AssociatedType == T1_SampleClass.Type {}
+
+extension T1_SampleProtocol where AssociatedType == T1_SampleClass? {}
+
+extension T1_SampleProtocol where AssociatedType == (T1_SampleClass, T1_SampleClass) {}
+
+extension T1_SampleProtocol where AssociatedType == (T1_SampleClass) -> T1_SampleClass {}
+
+extension T1_SampleProtocol where AssociatedType == (T1_SampleClass) -> T1_SampleClass {}
+
+extension T1_SampleProtocol where AssociatedType == [T1_SampleClass] {}
+
+extension T1_SampleProtocol where AssociatedType == [String: T1_SampleClass] {}
+
+extension Optional where Wrapped : T1_SampleProtocol & T1_SampleProtocol2 {}
+
+extension Optional where Wrapped : T1_SampleProtocol & T1_SampleProtocol2 & T1_SampleProtocol3 {}
+
+extension Optional where Wrapped : T1_SampleProtocol, Wrapped: T1_SampleProtocol3 {}
+
+extension Optional where Wrapped == T1_SampleProtocol.Protocol {}
+
+extension Optional where Wrapped == T1_Generic<T1_SampleClass> {}
+
+extension T1_SampleClass: T1_SampleProtocol2 {}
+
+
+func NF1_foo<T>(SP1_t: T) where T : T1_SampleProtocol {}
+
+protocol T1_Container {
+  associatedtype Item: T1_SampleClass
+  associatedtype Iterator: T1_SampleProtocol where Iterator.AssociatedType == Item
+  subscript(i: Int) -> Item { get }
+}
+
+extension T1_Container {
+  subscript<Indices: Sequence>(indices: Indices) -> [Item]
+    where Indices.Iterator.Element == T1_SampleProtocol2 {
+      let V1_result = [Item]()
+      return V1_result
+  }
+}
diff --git a/swift/test/Obfuscation/FullProcess/WhereClauses/WhereClauses.swift b/swift/test/Obfuscation/FullProcess/WhereClauses/WhereClauses.swift
new file mode 100644
index 00000000000..db00881ddd9
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/WhereClauses/WhereClauses.swift
@@ -0,0 +1,60 @@
+//RUN: %target-prepare-obfuscation-for-file "WhereClauses" %target-run-full-obfuscation
+
+protocol SampleProtocol {
+  associatedtype AssociatedType
+}
+
+protocol SampleProtocol2 { }
+
+protocol SampleProtocol3: class { }
+
+class SampleClass {}
+
+class Generic<WithType> {}
+
+extension SampleProtocol where Self : SampleClass {}
+
+extension SampleProtocol where AssociatedType == SampleClass {}
+
+extension SampleProtocol where AssociatedType == SampleClass.Type {}
+
+extension SampleProtocol where AssociatedType == SampleClass? {}
+
+extension SampleProtocol where AssociatedType == (SampleClass, SampleClass) {}
+
+extension SampleProtocol where AssociatedType == (SampleClass) -> SampleClass {}
+
+extension SampleProtocol where AssociatedType == (SampleClass) -> SampleClass {}
+
+extension SampleProtocol where AssociatedType == [SampleClass] {}
+
+extension SampleProtocol where AssociatedType == [String: SampleClass] {}
+
+extension Optional where Wrapped : SampleProtocol & SampleProtocol2 {}
+
+extension Optional where Wrapped : SampleProtocol & SampleProtocol2 & SampleProtocol3 {}
+
+extension Optional where Wrapped : SampleProtocol, Wrapped: SampleProtocol3 {}
+
+extension Optional where Wrapped == SampleProtocol.Protocol {}
+
+extension Optional where Wrapped == Generic<SampleClass> {}
+
+extension SampleClass: SampleProtocol2 {}
+
+
+func foo<T>(t: T) where T : SampleProtocol {}
+
+protocol Container {
+  associatedtype Item: SampleClass
+  associatedtype Iterator: SampleProtocol where Iterator.AssociatedType == Item
+  subscript(i: Int) -> Item { get }
+}
+
+extension Container {
+  subscript<Indices: Sequence>(indices: Indices) -> [Item]
+    where Indices.Iterator.Element == SampleProtocol2 {
+      let result = [Item]()
+      return result
+  }
+}
-- 
2.17.1 (Apple Git-112)


From d8e3847ecc31a12a95356a76ee3575372a7d0b28 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Thu, 1 Mar 2018 12:11:30 +0100
Subject: [PATCH 102/138] Support for default values in parameters

Reviewers: jerzy.kleszcz, michal.zielinski

Reviewed By: jerzy.kleszcz, michal.zielinski

Subscribers: jerzy.kleszcz, michal.zielinski

Differential Revision: https://phabricator.polidea.com/D2862
---
 .../swift/Obfuscation/DataStructures.h        |   2 +
 .../Obfuscation/ParameterDeclarationParser.h  |   5 -
 .../swift/Obfuscation/Utils-Template.h        |   6 +
 swift/include/swift/Obfuscation/Utils.h       |   3 +
 swift/lib/Obfuscation/DataStructures.cpp      |  10 ++
 swift/lib/Obfuscation/ExpressionParser.cpp    |  77 ++++++---
 .../Obfuscation/FunctionDeclarationParser.cpp |  55 ++++---
 .../ParameterDeclarationParser.cpp            | 146 ++++++++----------
 swift/lib/Obfuscation/SourceFileWalker.cpp    |  12 --
 .../Obfuscation/VariableDeclarationParser.cpp |   2 +
 .../Expected/FunctionParameterNames.swift     |  46 +++++-
 .../FunctionParameterNames.swift              |  29 ++++
 .../Functions/Expected/Functions.swift        |   2 +-
 .../FullProcess/Functions/Functions.swift     |   2 +-
 .../UnsupportedDropnote.swift                 |   9 --
 .../Inputs/ExpectedSymbols.json               |  24 +--
 .../SymbolExtractor/SymbolExtractor.swift     |   1 +
 17 files changed, 261 insertions(+), 170 deletions(-)

diff --git a/swift/include/swift/Obfuscation/DataStructures.h b/swift/include/swift/Obfuscation/DataStructures.h
index 2b27cc6cdf1..d90ce49c3e2 100644
--- a/swift/include/swift/Obfuscation/DataStructures.h
+++ b/swift/include/swift/Obfuscation/DataStructures.h
@@ -119,6 +119,8 @@ struct SymbolWithRange {
   /// @brief Comparison operator required for containing SymbolWithRange in
   /// sets. It's taking into consideration both symbol identifier and range.
   bool operator< (const SymbolWithRange &Right) const;
+
+  bool operator== (const SymbolWithRange &Right) const;
 };
 
 struct IndexedSymbolWithRange {
diff --git a/swift/include/swift/Obfuscation/ParameterDeclarationParser.h b/swift/include/swift/Obfuscation/ParameterDeclarationParser.h
index e4fd14f3d74..803cd871807 100644
--- a/swift/include/swift/Obfuscation/ParameterDeclarationParser.h
+++ b/swift/include/swift/Obfuscation/ParameterDeclarationParser.h
@@ -26,11 +26,6 @@ SymbolsOrError parseSeparateDeclarationWithRange(const ParamDecl* Declaration,
                                                  CharSourceRange Range);
 
 SymbolsOrError parse(const ParamDecl* Declaration);
-
-llvm::Expected<SymbolWithRange> buildSymbol(Identifier Name,
-                                            ValueDecl *Decl,
-                                            CharSourceRange Range);
-
   
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/include/swift/Obfuscation/Utils-Template.h b/swift/include/swift/Obfuscation/Utils-Template.h
index 7e56fba2221..820f7b0c4a6 100644
--- a/swift/include/swift/Obfuscation/Utils-Template.h
+++ b/swift/include/swift/Obfuscation/Utils-Template.h
@@ -44,6 +44,12 @@ void copyToStream(const std::vector<ElementType> &FromVector,
             Inserter);
 };
 
+template<typename T>
+void removeFromVector(std::vector<T> &FromVector, const T &Element) {
+  FromVector.erase(std::remove(FromVector.begin(), FromVector.end(), Element),
+                   FromVector.end());
+};
+
 } //namespace obfuscation
 } //namespace swift
 
diff --git a/swift/include/swift/Obfuscation/Utils.h b/swift/include/swift/Obfuscation/Utils.h
index 05997a7b84b..d29dcc31d8e 100644
--- a/swift/include/swift/Obfuscation/Utils.h
+++ b/swift/include/swift/Obfuscation/Utils.h
@@ -53,6 +53,9 @@ void copyToStream(const std::vector<ElementType> &FromVector,
                   std::ostream_iterator<ElementType> Inserter);
 
 std::vector<std::string> split(const std::string &String, char Delimiter);
+
+template<typename T>
+void removeFromVector(std::vector<T> &FromVector, const T &Element);
   
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/lib/Obfuscation/DataStructures.cpp b/swift/lib/Obfuscation/DataStructures.cpp
index b22fe82ef2e..8e789828908 100644
--- a/swift/lib/Obfuscation/DataStructures.cpp
+++ b/swift/lib/Obfuscation/DataStructures.cpp
@@ -77,6 +77,16 @@ bool SymbolWithRange::operator< (const SymbolWithRange &Right) const {
                   "Location Values Pointers to be of const char type");
 }
 
+bool SymbolWithRange::operator== (const SymbolWithRange &Right) const {
+  if (const auto* RangeValuePointer = pointerToRangeValue(*this)) {
+    if (const auto* RightRangeValuePointer = pointerToRangeValue(Right)) {
+      return Symbol == Right.Symbol
+          && RangeValuePointer == RightRangeValuePointer;
+    }
+  }
+  return false;
+}
+
 IndexedSymbolWithRange::
   IndexedSymbolWithRange(const int Index,
                          const struct SymbolWithRange &SymbolWithRange)
diff --git a/swift/lib/Obfuscation/ExpressionParser.cpp b/swift/lib/Obfuscation/ExpressionParser.cpp
index 6fd1802d09d..0bf4305e0ff 100644
--- a/swift/lib/Obfuscation/ExpressionParser.cpp
+++ b/swift/lib/Obfuscation/ExpressionParser.cpp
@@ -7,26 +7,39 @@ namespace obfuscation {
   
 llvm::Expected<AbstractFunctionDecl*>
 declarationOfFunctionCalledInExpression(CallExpr *CallExpression) {
-  
-  if (auto *DotSyntaxCallExpression =
-        dyn_cast<DotSyntaxCallExpr>(CallExpression->getFn())) {
-    if(auto *OtherConstructor =
-       dyn_cast<OtherConstructorDeclRefExpr>(DotSyntaxCallExpression->getFn())) {
+  auto *CallFn = CallExpression->getFn();
+
+  if (auto *DotSyntaxCallExpression = dyn_cast<DotSyntaxCallExpr>(CallFn)) {
+    auto *DotFn = DotSyntaxCallExpression->getFn();
+    
+    if (auto *OtherConstructor = dyn_cast<OtherConstructorDeclRefExpr>(DotFn)) {
       // It's a super call like super.init()
-      if (auto *FunctionDeclaration =
-          dyn_cast<AbstractFunctionDecl>(OtherConstructor->getDecl())) {
+      auto *Decl = OtherConstructor->getDecl();
+
+      if (auto *FunctionDeclaration = dyn_cast<AbstractFunctionDecl>(Decl)) {
         return FunctionDeclaration;
       }
     } else {
-      // It's not a super call
-      if (auto *DeclarationRefExpression =
-          dyn_cast<DeclRefExpr>(DotSyntaxCallExpression->getFn())) {
-        if (auto *FunctionDeclaration =
-            dyn_cast<AbstractFunctionDecl>(DeclarationRefExpression->getDecl())) {
+      // It's not a super.init call, just a function call
+      if (auto *DeclRefExpression = dyn_cast<DeclRefExpr>(DotFn)) {
+        auto *Decl = DeclRefExpression->getDecl();
+
+        if (auto *FunctionDeclaration = dyn_cast<AbstractFunctionDecl>(Decl)) {
           return FunctionDeclaration;
         }
       }
     }
+  } else if (auto *Constructor = dyn_cast<ConstructorRefCallExpr>(CallFn)) {
+    // It's a constructor call
+    auto * ConstructorFn = Constructor->getFn();
+
+    if (auto *DeclarationRefExpression = dyn_cast<DeclRefExpr>(ConstructorFn)) {
+      auto* Decl = DeclarationRefExpression->getDecl();
+
+      if (auto *FunctionDeclaration = dyn_cast<AbstractFunctionDecl>(Decl)) {
+        return FunctionDeclaration;
+      }
+    }
   }
   return stringError("Cannot found supported Call Expression subtree pattern");
 }
@@ -62,20 +75,38 @@ SymbolsOrError parseCallExpressionWithArguments(CallExpr* CallExpression) {
   if (auto Error = SymbolsOrError.takeError()) {
     return std::move(Error);
   }
-  
+
+  auto CopyOfSymbols = SymbolsOrError.get();
+
   auto ValidArguments = validArguments(CallExpression);
-  
-  if (ValidArguments.size() != SymbolsOrError.get().size()) {
-    return stringError("Unsupported call expression");
-  }
-    
-  for (unsigned i = 0; i < ValidArguments.size(); ++i) {
-    auto Symbol = SymbolsOrError.get()[i];
+  for (size_t i = 0; i < ValidArguments.size(); ++i) {
+
     auto Label = ValidArguments[i].first;
     auto Location = ValidArguments[i].second;
-    if (Location.isValid() && Symbol.Symbol.Name == Label.str().str()) {
-      auto Range = CharSourceRange(Location, Label.getLength());
-      Symbols.push_back(SymbolWithRange(Symbol.Symbol, Range));
+    if (ValidArguments.size() == SymbolsOrError.get().size()) {
+      // The same number of named arguments in call and
+      // external/single parameters in function means that
+      // there are no parameters in this function that are default
+      // or with the external name
+      auto Symbol = SymbolsOrError.get()[i];
+      if (Location.isValid() && Symbol.Symbol.Name == Label.str().str()) {
+        auto Range = CharSourceRange(Location, Label.getLength());
+        Symbols.push_back(SymbolWithRange(Symbol.Symbol, Range));
+      }
+
+    } else {
+      // There is different number of named arguments in call
+      // and external/single parameters in function. It means that
+      // some of the parameters are not required
+      // (default or without external name)
+      for (auto Symbol : CopyOfSymbols) {
+        if (Location.isValid() && Symbol.Symbol.Name == Label.str().str()) {
+          removeFromVector(CopyOfSymbols, Symbol);
+          auto Range = CharSourceRange(Location, Label.getLength());
+          Symbols.push_back(SymbolWithRange(Symbol.Symbol, Range));
+          break;
+        }
+      }
     }
   }
 
diff --git a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
index b6ba389dba7..60d8db00d59 100644
--- a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
@@ -107,9 +107,22 @@ functionIdentifierParts(const AbstractFunctionDecl *Declaration) {
   return std::make_pair(ModuleName, Parts);
 }
 
-SymbolsOrError parseOverridenDeclaration(const FuncDecl *Declaration,
-                                         const std::string &ModuleName,
-                                         const CharSourceRange &Range) {
+SymbolWithRange getFunctionSymbol(const swift::FuncDecl *Declaration,
+                                  const swift::CharSourceRange &Range) {
+  auto ModuleAndParts = functionIdentifierParts(Declaration);
+  auto ModuleName = ModuleAndParts.first;
+  auto Parts = ModuleAndParts.second;
+  Symbol Symbol(combineIdentifier(Parts),
+                declarationName(Declaration),
+                ModuleName,
+                SymbolType::NamedFunction);
+  return SymbolWithRange(Symbol, Range);
+}
+
+llvm::Expected<SymbolWithRange>
+parseOverridenDeclaration(const FuncDecl *Declaration,
+                          const std::string &ModuleName,
+                          const CharSourceRange &Range) {
 
   auto BaseWithModules = getBaseOverridenDeclarationWithModules(Declaration);
   auto Base = BaseWithModules.first;
@@ -121,7 +134,7 @@ SymbolsOrError parseOverridenDeclaration(const FuncDecl *Declaration,
   // Emitted symbol represents the base function so that all the functions that
   // override it are renamed to the same obfuscated name
   if (Modules.size() == 1 && Modules.count(ModuleName) == 1) {
-    return parse(Base, Range);
+    return getFunctionSymbol(Base, Range);
   } else {
     return stringError("only method overriding methods from the same module "
                        "might be safely obfuscated");
@@ -131,40 +144,42 @@ SymbolsOrError parseOverridenDeclaration(const FuncDecl *Declaration,
 SymbolsOrError parse(const ConstructorDecl* Declaration, CharSourceRange Range) {
   // We're not interested in renaming the init function name,
   // but we're interested in renaming the init parameters
+  if (Declaration->isImplicit()) {
+    return stringError("We dont want to parse the implicit constructor "
+                       "declarations, only their usage via calls.");
+  }
   return parseSeparateFunctionDeclarationForParameters(Declaration);
 }
-  
+
 SymbolsOrError parse(const FuncDecl* Declaration, CharSourceRange Range) {
   
   if (auto Error = isDeclarationSupported(Declaration)) {
     return std::move(Error);
   }
-  
+
+  std::vector<SymbolWithRange> Symbols;
+
+  // Create the symbol for function
   if (Declaration->getOverriddenDecl() != nullptr) {
     // Overriden declaration must be treated separately because
     // we mustn't rename function that overrides function from different module
-    return parseOverridenDeclaration(Declaration,
-                                     moduleName(Declaration),
-                                     Range);
+    auto SymbolOrError =
+      parseOverridenDeclaration(Declaration, moduleName(Declaration), Range);
+    if (auto Error = SymbolOrError.takeError()) {
+      return std::move(Error);
+    }
+    Symbols.push_back(SymbolOrError.get());
+  } else {
+    Symbols.push_back(getFunctionSymbol(Declaration, Range));
   }
 
-  // Create the symbol for function
-  auto ModuleAndParts = functionIdentifierParts(Declaration);
-  auto ModuleName = ModuleAndParts.first;
-  auto Parts = ModuleAndParts.second;
-  Symbol Symbol(combineIdentifier(Parts),
-                declarationName(Declaration),
-                ModuleName,
-                SymbolType::NamedFunction);
-  std::vector<SymbolWithRange> Symbols;
-  Symbols.push_back(SymbolWithRange(Symbol, Range));
-
   // Create the symbols for function parameters
   auto ParametersSymbolsOrError =
     parseSeparateFunctionDeclarationForParameters(Declaration);
   if (auto Error = ParametersSymbolsOrError.takeError()) {
     return std::move(Error);
   }
+
   copyToVector(ParametersSymbolsOrError.get(), Symbols);
 
   // Return both the function symbol and the parameters symbols together
diff --git a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
index 5330d5bbcad..986f47a055e 100644
--- a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
@@ -10,8 +10,9 @@
 namespace swift {
 namespace obfuscation {
   
-llvm::Expected<std::string> position(const ParamDecl *Declaration,
-                                     const AbstractFunctionDecl *FunctionDeclaration) {
+llvm::Expected<std::string>
+position(const ParamDecl *Declaration,
+         const AbstractFunctionDecl *FunctionDeclaration) {
   
   auto ParameterLists = FunctionDeclaration->getParameterLists();
   for (unsigned ListIndex = 0; ListIndex < ParameterLists.size(); ++ListIndex) {
@@ -36,13 +37,9 @@ llvm::Expected<std::string> position(const ParamDecl *Declaration,
 }
   
 SymbolsOrError parse(const ParamDecl* Declaration) {
-  if (Declaration->isImplicit()) {
-    return stringError("We shouldn't rename implicit parameters");
-  }
   if (const auto *FunctionDeclaration =
       dyn_cast<AbstractFunctionDecl>(Declaration->getDeclContext())) {
     
-
     auto BaseWithModules =
       getBaseOverridenDeclarationWithModules(FunctionDeclaration);
     auto BaseFunctionDeclaration = BaseWithModules.first;
@@ -56,63 +53,74 @@ SymbolsOrError parse(const ParamDecl* Declaration) {
     auto InternalName = internalParameterName(Declaration);
     
     std::vector<SymbolWithRange> Symbols;
-    
-    std::string FunctionName = declarationName(BaseFunctionDeclaration);
-    auto ModuleAndParts = functionIdentifierParts(BaseFunctionDeclaration);
-    std::string FunctionModuleName = ModuleAndParts.first;
-    std::vector<std::string> Parts = ModuleAndParts.second;
-    
-    auto PositionOrError = position(Declaration, BaseFunctionDeclaration);
-    if (auto Error = PositionOrError.takeError()) {
+
+    std::string BaseFunctionName = declarationName(BaseFunctionDeclaration);
+    auto BaseModuleAndParts = functionIdentifierParts(BaseFunctionDeclaration);
+    std::string BaseFunctionModuleName = BaseModuleAndParts.first;
+    std::vector<std::string> BaseParts = BaseModuleAndParts.second;
+
+    auto BasePositionOrError = position(Declaration, BaseFunctionDeclaration);
+    if (auto Error = BasePositionOrError.takeError()) {
       return std::move(Error);
     } else {
-      Parts.push_back("parameter.position." + PositionOrError.get());
+      BaseParts.push_back("parameter.position." + BasePositionOrError.get());
     }
     
     if (Declaration->getNameLoc().isValid()) {
       if (Declaration->getArgumentNameLoc().isInvalid()
           && OverridenMethodIsFromTheSameModule) {
         
-        Parts.push_back("single." + InternalName);
+        BaseParts.push_back("single." + InternalName);
         CharSourceRange Range(Declaration->getNameLoc(),
                               InternalName.length());
-        Symbol Symbol(combineIdentifier(Parts),
+        Symbol Symbol(combineIdentifier(BaseParts),
                       InternalName,
-                      FunctionModuleName,
+                      BaseFunctionModuleName,
                       SymbolType::SingleParameter);
         Symbols.push_back(SymbolWithRange(Symbol, Range));
         
       } else {
         
         if (!ExternalName.empty() && OverridenMethodIsFromTheSameModule) {
-          auto ExternalParts = Parts;
           
-          ExternalParts.push_back("external." + ExternalName);
+          BaseParts.push_back("external." + ExternalName);
           CharSourceRange ExternalRange(Declaration->getArgumentNameLoc(),
                                         ExternalName.length());
-          Symbol ExternalSymbol(combineIdentifier(ExternalParts),
+          Symbol ExternalSymbol(combineIdentifier(BaseParts),
                                 ExternalName,
-                                FunctionModuleName,
+                                BaseFunctionModuleName,
                                 SymbolType::ExternalParameter);
           Symbols.push_back(SymbolWithRange(ExternalSymbol, ExternalRange));
           
         }
         
-        //  TODO: improve handling internal parameters cases:
-        //  Case1: if we have two implementations of the same protocol
-        //  method in the same module and those implementations have the same
-        //  internal parameter name - this internal parameter will be renamed
-        //  to the same obfuscated name in both implementations.
-        //  Case2: internal parameter in protocol method implementation,
+        //  TODO: improve handling internal parameters in following case:
+        //  internal parameter in protocol method implementation,
         //  where declaration and implementation are in different modules -
         //  Symbol object will have different module name in Identifier
         //  and in Module field.
-        Parts.push_back("internal." + InternalName);
+
+        std::string OriginalFunctionName = declarationName(FunctionDeclaration);
+        std::string OriginalFunctionModuleName =
+          moduleName(FunctionDeclaration);
+        std::vector<std::string> OriginalParts =
+          functionIdentifierParts(FunctionDeclaration).second;
+
+        auto OriginalPositionOrError = position(Declaration,
+                                                FunctionDeclaration);
+        if (auto Error = OriginalPositionOrError.takeError()) {
+          return std::move(Error);
+        } else {
+          auto OriginalPosition = OriginalPositionOrError.get();
+          OriginalParts.push_back("parameter.position." + OriginalPosition);
+        }
+
+        OriginalParts.push_back("internal." + InternalName);
         CharSourceRange InternalRange(Declaration->getNameLoc(),
                                       InternalName.length());
-        Symbol InternalSymbol(combineIdentifier(Parts),
+        Symbol InternalSymbol(combineIdentifier(OriginalParts),
                               InternalName,
-                              moduleName(Declaration),
+                              OriginalFunctionModuleName,
                               SymbolType::InternalParameter);
         Symbols.push_back(SymbolWithRange(InternalSymbol, InternalRange));
       }
@@ -124,14 +132,26 @@ SymbolsOrError parse(const ParamDecl* Declaration) {
   return stringError("Couldn't identify what function parameter belong to");
 }
   
-SymbolsOrError parametersSymbolsFromFunction(const AbstractFunctionDecl* Declaration) {
+SymbolsOrError
+parametersSymbolsFromFunction(const AbstractFunctionDecl* Declaration) {
     
   std::vector<SymbolWithRange> Symbols;
 
   auto ParameterLists = Declaration->getParameterLists();
   for (auto *ParameterList : ParameterLists) {
     for (auto *Parameter : *ParameterList) {
-      if (!Parameter->isImplicit()) {
+      if (isMemberwiseConstructorParameter(Parameter)) {
+        auto SingleSymbolOrError =
+          symbolFromMemberwiseConstructorParameter(Parameter);
+        if (auto Error = SingleSymbolOrError.takeError()) {
+          llvm::consumeError(std::move(Error));
+        } else {
+          CharSourceRange Range(Parameter->getNameLoc(),
+                                SingleSymbolOrError.get().Name.length());
+          SymbolWithRange SymbolWithRange(SingleSymbolOrError.get(), Range);
+          Symbols.push_back(SymbolWithRange);
+        }
+      } else if (!Parameter->isImplicit()) {
         auto SymbolsOrError = parse(Parameter);
         if (auto Error = SymbolsOrError.takeError()) {
           return std::move(Error);
@@ -150,7 +170,11 @@ symbolFromMemberwiseConstructorParameter(const ParamDecl* Parameter) {
   auto *Context = Parameter->getDeclContext();
   if (const auto *Constructor = dyn_cast<ConstructorDecl>(Context)) {
     auto *StructDeclaration =
-    Constructor->getResultInterfaceType()->getStructOrBoundGenericStruct();
+      Constructor->getResultInterfaceType()->getStructOrBoundGenericStruct();
+    if (StructDeclaration == nullptr) {
+      return stringError("The supposedly memberwise constructor is not "
+                         "memberwise, because it doesn't come from struct");
+    }
     auto Properties = StructDeclaration->getStoredProperties();
     for (auto Variable : Properties) {
       if (declarationName(Variable) == declarationName(Parameter)) {
@@ -166,12 +190,14 @@ symbolFromMemberwiseConstructorParameter(const ParamDecl* Parameter) {
 }
 
 SymbolsOrError
-parseSeparateFunctionDeclarationForParameters(const AbstractFunctionDecl* Declaration) {
+parseSeparateFunctionDeclarationForParameters(const AbstractFunctionDecl*
+                                                Declaration) {
   return parametersSymbolsFromFunction(Declaration);
 }
   
 SymbolsOrError
-parseFunctionFromCallExpressionForParameters(const AbstractFunctionDecl* Declaration) {
+parseFunctionFromCallExpressionForParameters(const AbstractFunctionDecl*
+                                              Declaration) {
   
   auto SymbolsOrError = parametersSymbolsFromFunction(Declaration);
   
@@ -193,6 +219,11 @@ parseFunctionFromCallExpressionForParameters(const AbstractFunctionDecl* Declara
 
 SymbolsOrError parseSeparateDeclarationWithRange(const ParamDecl* Declaration,
                                                  CharSourceRange Range) {
+
+  if (Declaration->isImplicit()) {
+    return stringError("We must not rename the implicit parameters "
+                       "at the usage place.");
+  }
   
   auto SymbolsOrError = parse(Declaration);
   if (auto Error = SymbolsOrError.takeError()) {
@@ -214,48 +245,5 @@ SymbolsOrError parseSeparateDeclarationWithRange(const ParamDecl* Declaration,
   return Result;
 }
 
-llvm::Expected<SymbolWithRange> buildSymbol(Identifier Name, ValueDecl *Decl,
-                                            CharSourceRange Range) {
-  if (const auto *FunctionDecl = dyn_cast<AbstractFunctionDecl>(Decl)) {
-    auto ParameterLists = FunctionDecl->getParameterLists();
-    auto ParameterName = Name.str();
-    
-    for (auto *ParameterList: ParameterLists) {
-      for (auto *Parameter : *ParameterList) {
-        if (ParameterName == internalParameterName(Parameter)
-            || ParameterName == externalParameterName(Parameter)) {
-          
-          if (isMemberwiseConstructorParameter(Parameter)) {
-            auto SymbolOrError =
-            symbolFromMemberwiseConstructorParameter(Parameter);
-            if (auto Error = SymbolOrError.takeError()) {
-              return std::move(Error);
-            } else {
-              auto Symbol = SymbolOrError.get();
-              return SymbolWithRange(Symbol, Range);
-            }
-          } else {
-            SymbolsOrError Symbols = parse(Parameter);
-            if (auto Error = Symbols.takeError()) {
-              return std::move(Error);
-            } else {
-              if (Symbols.get().size() > 0) {
-                auto Symbol = Symbols.get()[0];
-                Symbol.Range = Range;
-                return Symbol;
-              }
-            }
-          }
-        }
-      }
-    }
-    return stringError("Cannot find parameter identifier in function declaration");
-  } else {
-    return stringError("Cannot build symbol for argument without "
-                       "function declaration");
-  }
-}
-
-
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/lib/Obfuscation/SourceFileWalker.cpp b/swift/lib/Obfuscation/SourceFileWalker.cpp
index 821effc45b7..932a077d5f5 100644
--- a/swift/lib/Obfuscation/SourceFileWalker.cpp
+++ b/swift/lib/Obfuscation/SourceFileWalker.cpp
@@ -55,18 +55,6 @@ struct SymbolsWalkerAndCollector: public SourceEntityWalker {
     return true;
   }
 
-  bool visitCallArgName(Identifier Name, CharSourceRange Range,
-                        ValueDecl *D) override {
-
-    auto Symbol = buildSymbol(Name, D, Range);
-    if (auto Error = Symbol.takeError()) {
-      llvm::consumeError(std::move(Error));
-    } else {
-      handleSymbol(Symbol.get());
-    }
-    return true;
-  }
-
 // Methods for handling the extracted symbols
 
   void handleSymbol(const SymbolWithRange &Symbol) {
diff --git a/swift/lib/Obfuscation/VariableDeclarationParser.cpp b/swift/lib/Obfuscation/VariableDeclarationParser.cpp
index 3cdeaccb9e3..6a5e64cf8c8 100644
--- a/swift/lib/Obfuscation/VariableDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/VariableDeclarationParser.cpp
@@ -11,6 +11,8 @@ llvm::Error isDeclarationSupported(const VarDecl *Declaration) {
   if (Declaration->isCaptureList()) {
     return stringError("The variable is the element of closure's "
                        "capture list. It must not be renamed.");
+  } else if (Declaration->isImplicit()) {
+    return stringError("The variable is implicit. It must not be renamed.");
   }
   return llvm::Error::success();
 }
diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
index 21647e416c1..3646ec4962c 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
@@ -37,7 +37,9 @@ class T1_Base {
 }
 
 class T1_Derived: T1_Base {
-  override func NF1_baseFunc(param: String) {}
+  override func NF1_baseFunc(SP3_param: String) {}
+  override func NF1_baseFunc2(_ IP5_intParam: Int) {}
+  override func NF1_baseFunc3(EP3_extParam IP6_intParam: T1_SampleClass) {}
 }
 
 // explicit constructor params
@@ -87,18 +89,18 @@ class T1_Child: T1_Parent {
   override init(SP1_p1: String, SP1_p2: Int) {
     super.init(SP1_p1: SP1_p1, SP1_p2: SP1_p2)
   }
-  override init(EP3_foo IP2_foo:Int, EP4_foo IP2_bar: T1_SampleClass) {
-    super.init(EP3_foo: IP2_foo, EP4_foo: IP2_bar)
+  override init(EP3_foo IP3_foo:Int, EP4_foo IP3_bar: T1_SampleClass) {
+    super.init(EP3_foo: IP3_foo, EP4_foo: IP3_bar)
   }
-  override init(EP1_extp1 IP1_p1: String, EP1_extp2 IP1_p2: Int) {
-    super.init(EP1_extp1: IP1_p1, EP1_extp2: IP1_p2)
+  override init(EP1_extp1 IP2_p1: String, EP1_extp2 IP2_p2: Int) {
+    super.init(EP1_extp1: IP2_p1, EP1_extp2: IP2_p2)
   }
-  override init(_ IP1_p1: String, EP1_extp IP1_p2: Int) {
-    super.init(IP1_p1, EP1_extp: IP1_p2)
+  override init(_ IP2_p1: String, EP1_extp IP2_p2: Int) {
+    super.init(IP2_p1, EP1_extp: IP2_p2)
   }
 }
 let V1_c = T1_Child(SP1_p1: "p1", SP1_p2:42)
-let V1_c2 = T1_Child(EP3_foo: 42, EP3_foo:T1_SampleClass())
+let V1_c2 = T1_Child(EP3_foo: 42, EP4_foo:T1_SampleClass())
 let V1_c3 = T1_Child(EP1_extp1: "p1", EP1_extp2:42)
 let V1_c4 = T1_Child("p1", EP1_extp:42)
 
@@ -113,3 +115,31 @@ class T1_SuperTest {
 
 let V1_conv = T1_SuperTest(SP2_convP1:1, SP1_convP2:"asd")
 
+// default values
+
+let V1_defaultValue = 42.0
+
+func NF1_withDefaultValues(SP1_int: Int = 42, EP1_string IP1_string: String = "42", _ IP1_float: Double = V1_defaultValue) {}
+
+class T1_ClassWithDefaultValues {
+  func NF2_withDefaultValues(SP2_int: Int = 42, EP2_string IP2_string: String = "42", _ IP2_float: Double = V1_defaultValue) {}
+}
+
+class T1_ClassWithDefaultValuesInInit {
+  init(SP3_int: Int = 42, EP3_string IP3_string: String = "42", _ IP3_float: Double = V1_defaultValue) {}
+}
+
+let V1_someClassWithDefaultValuesInInit1 = T1_ClassWithDefaultValuesInInit()
+let V1_someClassWithDefaultValuesInInit2 = T1_ClassWithDefaultValuesInInit(EP3_string: "42")
+let V1_someClassWithDefaultValuesInInit3 = T1_ClassWithDefaultValuesInInit(SP3_int: 42, V1_defaultValue)
+let V1_someClassWithDefaultValuesInInit4 = T1_ClassWithDefaultValuesInInit(SP3_int: 42, EP3_string: "42", V1_defaultValue)
+
+class T1_Foo {
+  var V1_FieldA: String
+  var V1_FieldB: String?
+  
+  init(SP1_FieldA: String, SP1_FieldB: String? = nil) {}
+}
+
+let V1_FooObj1 = T1_Foo(SP1_FieldA: "test")
+let V1_FooObj2 = T1_Foo(SP1_FieldA: "test", SP1_FieldB: nil)
diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
index 67206074ee2..a27b9108afe 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
@@ -39,6 +39,8 @@ class Base {
 
 class Derived: Base {
   override func baseFunc(param: String) {}
+  override func baseFunc2(_ intParam: Int) {}
+  override func baseFunc3(extParam intParam: SampleClass) {}
 }
 
 // explicit constructor params
@@ -114,3 +116,30 @@ class SuperTest {
 
 let conv = SuperTest(convP1:1, convP2:"asd")
 
+// default values
+let defaultValue = 42.0
+
+func withDefaultValues(int: Int = 42, string string: String = "42", _ float: Double = defaultValue) {}
+
+class ClassWithDefaultValues {
+  func withDefaultValues(int: Int = 42, string string: String = "42", _ float: Double = defaultValue) {}
+}
+
+class ClassWithDefaultValuesInInit {
+  init(int: Int = 42, string string: String = "42", _ float: Double = defaultValue) {}
+}
+
+let someClassWithDefaultValuesInInit1 = ClassWithDefaultValuesInInit()
+let someClassWithDefaultValuesInInit2 = ClassWithDefaultValuesInInit(string: "42")
+let someClassWithDefaultValuesInInit3 = ClassWithDefaultValuesInInit(int: 42, defaultValue)
+let someClassWithDefaultValuesInInit4 = ClassWithDefaultValuesInInit(int: 42, string: "42", defaultValue)
+
+class Foo {
+  var FieldA: String
+  var FieldB: String?
+  
+  init(FieldA: String, FieldB: String? = nil) {}
+}
+
+let FooObj1 = Foo(FieldA: "test")
+let FooObj2 = Foo(FieldA: "test", FieldB: nil)
diff --git a/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift b/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift
index 50e3048cd98..d45862fc1eb 100644
--- a/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift
+++ b/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift
@@ -91,7 +91,7 @@ let V1_cvi = T1_CustomView()
 V1_cvi.prepareForReuse()
 
 // SDK protocol methods
-class T1_CustomFMDelegate: FileManagerDelegate {
+class T1_CustomFMDelegate: NSObject, FileManagerDelegate {
   func fileManager(_ IP1_fileManager: FileManager, shouldRemoveItemAtPath IP1_path: String) -> Bool {
     return false
   }
diff --git a/swift/test/Obfuscation/FullProcess/Functions/Functions.swift b/swift/test/Obfuscation/FullProcess/Functions/Functions.swift
index ab47272b58b..d192259d0ac 100644
--- a/swift/test/Obfuscation/FullProcess/Functions/Functions.swift
+++ b/swift/test/Obfuscation/FullProcess/Functions/Functions.swift
@@ -92,7 +92,7 @@ let cvi = CustomView()
 cvi.prepareForReuse()
 
 // SDK protocol methods
-class CustomFMDelegate: FileManagerDelegate {
+class CustomFMDelegate: NSObject, FileManagerDelegate {
   func fileManager(_ fileManager: FileManager, shouldRemoveItemAtPath path: String) -> Bool {
     return false
   }
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
index ed400066f4c..29afb4014ff 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
@@ -6,15 +6,6 @@ class Test {
   func testFunc() {}
 }
 
-// init param FieldA is not renamed if there is a second param with default value
-class Foo {
-  var FieldA: String
-  var FieldB: String?
-  
-  init(FieldA: String, FieldB: String? = nil) {}
-}
-let FooObj = Foo(FieldA: "test")
-
 // type is not renamed in if case
 let num = 42
 if case 0...225 = num, num is Test {
diff --git a/swift/test/Obfuscation/SymbolExtractor/Inputs/ExpectedSymbols.json b/swift/test/Obfuscation/SymbolExtractor/Inputs/ExpectedSymbols.json
index 8349708bfce..f3adf0bff9b 100644
--- a/swift/test/Obfuscation/SymbolExtractor/Inputs/ExpectedSymbols.json
+++ b/swift/test/Obfuscation/SymbolExtractor/Inputs/ExpectedSymbols.json
@@ -78,18 +78,18 @@
       "module": "TestModuleName",
       "type": "variable"
     },
-    {
-      "name": "StructWithMemberwiseInit",
-      "identifier": "module.TestModuleName.struct.StructWithMemberwiseInit",
-      "module": "TestModuleName",
-      "type": "type"
-    },
     {
       "name": "property",
       "identifier": "module.TestModuleName.struct.StructWithMemberwiseInit.variable.property",
       "module": "TestModuleName",
       "type": "variable"
     },
+    {
+      "name": "StructWithMemberwiseInit",
+      "identifier": "module.TestModuleName.struct.StructWithMemberwiseInit",
+      "module": "TestModuleName",
+      "type": "type"
+    },
     {
       "name": "swmiei",
       "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swmiei",
@@ -168,18 +168,18 @@
       "module": "TestModuleName",
       "type": "variable"
     },
-    {
-      "name": "CustomInitViewController",
-      "identifier": "module.TestModuleName.class.CustomInitViewController",
-      "module": "TestModuleName",
-      "type": "type"
-    },
     {
       "name": "number",
       "identifier": "module.TestModuleName.type.CustomInitViewController.method.init.signature.(Int) -> CustomInitViewController.parameter.position.list1_parameter0.single.number",
       "module": "TestModuleName",
       "type": "singleParameter"
     },
+    {
+      "name": "CustomInitViewController",
+      "identifier": "module.TestModuleName.class.CustomInitViewController",
+      "module": "TestModuleName",
+      "type": "type"
+    },
     {
       "name": "cvcei",
       "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cvcei",
diff --git a/swift/test/Obfuscation/SymbolExtractor/SymbolExtractor.swift b/swift/test/Obfuscation/SymbolExtractor/SymbolExtractor.swift
index 75d908ecef0..2c2cc70ee94 100644
--- a/swift/test/Obfuscation/SymbolExtractor/SymbolExtractor.swift
+++ b/swift/test/Obfuscation/SymbolExtractor/SymbolExtractor.swift
@@ -1,3 +1,4 @@
+
 //RUN: echo "{\"project\": {\"rootPath\": \"TestRootPath\", \"projectFilePath\": \"testProjectFilePath\"}, \"module\": {\"name\": \"TestModuleName\", \"triple\": \"x86_64-apple-macosx10.13\"}, \"sdk\": {\"name\": \"%target-sdk-name\", \"path\": \"%sdk\"}, \"sourceFiles\": [\"%S/Inputs\/ViewController.swift\", \"%S/Inputs\/AppDelegate.swift\"], \"layoutFiles\": [], \"explicitlyLinkedFrameworks\": [], \"implicitlyLinkedFrameworks\": [], \"frameworkSearchPaths\": []}" > %T/files.json
 //RUN: obfuscator-symbol-extractor -filesjson %T/files.json -symbolsjson %t -printdiagnostics
 //RUN: diff -w %S/Inputs/expectedSymbols.json %t
-- 
2.17.1 (Apple Git-112)


From bea33968a0d19eba8041eef4a24d72a9650bf8ec Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Thu, 1 Mar 2018 12:40:20 +0100
Subject: [PATCH 103/138] Renaming type name in `is` cast from optional to
 non-optional type or vice versa

Reviewers: michal.zielinski, krzysztof.siejkowski

Reviewed By: michal.zielinski, krzysztof.siejkowski

Subscribers: michal.zielinski, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2863
---
 .../Obfuscation/DeclarationParsingUtils.h     |  4 ++
 .../Obfuscation/DeclarationParsingUtils.cpp   | 19 +++++
 swift/lib/Obfuscation/ExpressionParser.cpp    | 71 +++++++++++++++++++
 .../TypeCasting/Expected/TypeCasting.swift    | 67 +++++++++++++++++
 .../FullProcess/TypeCasting/TypeCasting.swift | 68 ++++++++++++++++++
 .../Expected/UnsupportedDropnote.swift        | 14 ----
 .../UnsupportedDropnote.swift                 |  5 --
 7 files changed, 229 insertions(+), 19 deletions(-)
 create mode 100644 swift/test/Obfuscation/FullProcess/TypeCasting/Expected/TypeCasting.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/TypeCasting/TypeCasting.swift

diff --git a/swift/include/swift/Obfuscation/DeclarationParsingUtils.h b/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
index 611e04ea477..d3097ba1df6 100644
--- a/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
+++ b/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
@@ -46,6 +46,10 @@ bool isMemberwise(const ConstructorDecl* Declaration);
 
 bool isMemberwiseConstructorParameter(const ParamDecl* Declaration);
 
+llvm::Expected<CharSourceRange>
+rangeOfFirstOccurenceOfStringInSourceLoc(std::string String,
+                                         SourceLoc StartSourceLoc);
+  
 } //namespace obfuscation
 } //namespace swift
   
diff --git a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
index 6f3118927e3..26ea6c03bf9 100644
--- a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
+++ b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
@@ -142,6 +142,25 @@ bool isMemberwiseConstructorParameter(const ParamDecl* Declaration) {
   }
   return false;
 }
+  
+llvm::Expected<CharSourceRange>
+rangeOfFirstOccurenceOfStringInSourceLoc(std::string String,
+                                         SourceLoc StartSourceLoc) {
+  auto StartLoc =
+    static_cast<const char*>(StartSourceLoc.getOpaquePointerValue());
+  std::string StartLocString(StartLoc);
+  
+  auto FoundPosition = StartLocString.find(String);
+  if (FoundPosition == std::string::npos) {
+    return stringError("Failed to find the string occurence"
+                       "in source location");
+  }
+  
+  auto FirstOccurenceSourceLoc = StartSourceLoc.getAdvancedLoc(FoundPosition);
+  auto Range = CharSourceRange(FirstOccurenceSourceLoc, String.size());
+  
+  return Range;
+}
 
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/lib/Obfuscation/ExpressionParser.cpp b/swift/lib/Obfuscation/ExpressionParser.cpp
index 0bf4305e0ff..68dd449b234 100644
--- a/swift/lib/Obfuscation/ExpressionParser.cpp
+++ b/swift/lib/Obfuscation/ExpressionParser.cpp
@@ -1,6 +1,8 @@
 #include "swift/Obfuscation/ExpressionParser.h"
 #include "swift/Obfuscation/ParameterDeclarationParser.h"
+#include "swift/Obfuscation/NominalTypeDeclarationParser.h"
 #include "swift/Obfuscation/Utils.h"
+#include "swift/Obfuscation/DeclarationParsingUtils.h"
 
 namespace swift {
 namespace obfuscation {
@@ -119,11 +121,80 @@ SymbolsOrError parse(CallExpr* CallExpression) {
   }
   return stringError("Unsupported type of expression");
 }
+  
+// This function handles the specific case of `is` cast of non-optional
+// to optional type or vice versa. In contrast to other castings
+// (represented as is_subtype_expr), this kind of cast is represented
+// in AST as enum_is_case_expr node. When parsing this kind of cast
+// we don't get the callback in SymbolsWalkerAndCollector with NominalTypeDecl
+// representing the CastType (cast-to type) so we have to extract it
+// from the EnumIsCaseExpression.
+SymbolsOrError parse(EnumIsCaseExpr* EnumIsCaseExpression) {
+  NominalTypeDecl *CastTypeDeclaration = nullptr;
+  SourceLoc IsKeywordSourceLoc;
+  
+  // This callback invoked using forEachChildExpr() is used to extract the
+  // declaration of the CastType and the location of the `is` keyword.
+  const std::function<Expr*(Expr*)> &callback =
+    [&CastTypeDeclaration, &IsKeywordSourceLoc](Expr* Child) -> Expr* {
+      
+    // We're looking for CoerceExpr (non-optional to optional type cast)
+    // or ConditionalCheckedCastExpr (optional to non-optional type cast)
+    // which both are subclasses of ExplicitCastExpr.
+    if (auto *ExplicitCastExpression = dyn_cast<ExplicitCastExpr>(Child)) {
+      
+      Type CastType = ExplicitCastExpression->getCastTypeLoc().getType();
+      
+      // The data representing the location of the CastType in the expression
+      // seems to be impossible to retrieve from the EnumIsCastExpression
+      // and its subexpressions. We have to calculate the CastType location
+      // later using `is` keyword and CastType name.
+      IsKeywordSourceLoc = ExplicitCastExpression->getAsLoc();
+      
+      if (ConditionalCheckedCastExpr::classof(ExplicitCastExpression)) {
+        CastTypeDeclaration = CastType->getAnyNominal();
+      } else if (CoerceExpr::classof(ExplicitCastExpression)) {
+        CastTypeDeclaration = CastType->getOptionalObjectType()->getAnyNominal();
+      }
+      
+    }
+    return Child;
+  };
+  EnumIsCaseExpression->forEachChildExpr(callback);
+  
+  if (CastTypeDeclaration != nullptr) {
+    auto SingleSymbolOrError = parse(CastTypeDeclaration);
+    if (auto Error = SingleSymbolOrError.takeError()) {
+      return std::move(Error);
+    }
+    auto CastTypeSymbol = SingleSymbolOrError.get();
+    
+    auto CastTypeName = typeName(CastTypeDeclaration);
+    auto RangeOrError =
+      rangeOfFirstOccurenceOfStringInSourceLoc(CastTypeName,
+                                               IsKeywordSourceLoc);
+    if (auto Error = RangeOrError.takeError()) {
+      return std::move(Error);
+    }
+    auto CastTypeRange = RangeOrError.get();
+    
+    std::vector<SymbolWithRange> Symbols;
+    Symbols.push_back(SymbolWithRange(CastTypeSymbol, CastTypeRange));
+    return Symbols;
+  }
+  
+  return stringError("Failed to extract the cast-to type symbol"
+                     "from the EnumIsCase expression");
+}
 
 SymbolsOrError extractSymbol(Expr* Expression) {
   if (auto *CallExpression = dyn_cast<CallExpr>(Expression)) {
     return parse(CallExpression);
+  } else if (auto *EnumIsCaseExpression = dyn_cast<EnumIsCaseExpr>(Expression)) {
+    // Expression of `is` casting non-optional to optional type or vice versa.
+    return parse(EnumIsCaseExpression);
   }
+  
   return stringError("Unsupported type of expression");
 }
   
diff --git a/swift/test/Obfuscation/FullProcess/TypeCasting/Expected/TypeCasting.swift b/swift/test/Obfuscation/FullProcess/TypeCasting/Expected/TypeCasting.swift
new file mode 100644
index 00000000000..8bd646f8d77
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/TypeCasting/Expected/TypeCasting.swift
@@ -0,0 +1,67 @@
+import AppKit
+
+class T1_SampleClass { }
+
+let V1_castedNonOptional = T1_SampleClass()
+let V1_castedOptional: T1_SampleClass? = nil
+
+let V1_castedNonOptionalSdk = 1
+let V1_castedOptionalSdk: Int? = nil
+
+enum T1_SampleEnum {
+  case case1
+}
+let V1_enumCase = T1_SampleEnum.case1
+
+// binary-expression with type-casting-operator
+V1_castedNonOptional is T1_SampleClass
+V1_castedNonOptional is T1_SampleClass?
+V1_castedNonOptional as T1_SampleClass
+V1_castedNonOptional as T1_SampleClass?
+V1_castedNonOptional as? T1_SampleClass
+V1_castedNonOptional as? T1_SampleClass?
+V1_castedNonOptional as! T1_SampleClass
+V1_castedNonOptional as! T1_SampleClass?
+
+V1_castedOptional is T1_SampleClass
+V1_castedOptional is T1_SampleClass?
+V1_castedOptional as T1_SampleClass?
+V1_castedOptional as? T1_SampleClass
+V1_castedOptional as? T1_SampleClass?
+V1_castedOptional as! T1_SampleClass
+V1_castedOptional as! T1_SampleClass?
+
+V1_castedNonOptionalSdk is Int
+V1_castedNonOptionalSdk is Int?
+V1_castedNonOptionalSdk as Int
+V1_castedNonOptionalSdk as Int?
+V1_castedNonOptionalSdk as? Int
+V1_castedNonOptionalSdk as? Int?
+V1_castedNonOptionalSdk as! Int
+V1_castedNonOptionalSdk as! Int?
+
+V1_castedOptionalSdk is Int
+V1_castedOptionalSdk is Int?
+V1_castedOptionalSdk as Int?
+V1_castedOptionalSdk as? Int
+V1_castedOptionalSdk as? Int?
+V1_castedOptionalSdk as! Int
+V1_castedOptionalSdk as! Int?
+
+// type-casting-pattern in case-condition
+if case .case1 = V1_enumCase, V1_castedNonOptional is T1_SampleClass { }
+if case .case1 = V1_enumCase, V1_castedNonOptional is T1_SampleClass? { }
+if case .case1 = V1_enumCase, let _ = V1_castedNonOptional as T1_SampleClass? { }
+
+if case .case1 = V1_enumCase, V1_castedOptional is T1_SampleClass { }
+if case .case1 = V1_enumCase, V1_castedOptional is T1_SampleClass? { }
+if case .case1 = V1_enumCase, let _ = V1_castedOptional as T1_SampleClass? { }
+
+if case .case1 = V1_enumCase, V1_castedNonOptionalSdk is Int { }
+if case .case1 = V1_enumCase, V1_castedNonOptionalSdk is Int? { }
+if case .case1 = V1_enumCase, let _ = V1_castedNonOptionalSdk as Int? { }
+
+if case .case1 = V1_enumCase, V1_castedOptionalSdk is Int { }
+if case .case1 = V1_enumCase, V1_castedOptionalSdk is Int? { }
+if case .case1 = V1_enumCase, let _ = V1_castedOptionalSdk as Int? { }
+
diff --git a/swift/test/Obfuscation/FullProcess/TypeCasting/TypeCasting.swift b/swift/test/Obfuscation/FullProcess/TypeCasting/TypeCasting.swift
new file mode 100644
index 00000000000..b53ad000743
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/TypeCasting/TypeCasting.swift
@@ -0,0 +1,68 @@
+//RUN: %target-prepare-obfuscation-for-file "TypeCasting" %target-run-full-obfuscation
+import AppKit
+
+class SampleClass { }
+
+let castedNonOptional = SampleClass()
+let castedOptional: SampleClass? = nil
+
+let castedNonOptionalSdk = 1
+let castedOptionalSdk: Int? = nil
+
+enum SampleEnum {
+  case case1
+}
+let enumCase = SampleEnum.case1
+
+// binary-expression with type-casting-operator
+castedNonOptional is SampleClass
+castedNonOptional is SampleClass?
+castedNonOptional as SampleClass
+castedNonOptional as SampleClass?
+castedNonOptional as? SampleClass
+castedNonOptional as? SampleClass?
+castedNonOptional as! SampleClass
+castedNonOptional as! SampleClass?
+
+castedOptional is SampleClass
+castedOptional is SampleClass?
+castedOptional as SampleClass?
+castedOptional as? SampleClass
+castedOptional as? SampleClass?
+castedOptional as! SampleClass
+castedOptional as! SampleClass?
+
+castedNonOptionalSdk is Int
+castedNonOptionalSdk is Int?
+castedNonOptionalSdk as Int
+castedNonOptionalSdk as Int?
+castedNonOptionalSdk as? Int
+castedNonOptionalSdk as? Int?
+castedNonOptionalSdk as! Int
+castedNonOptionalSdk as! Int?
+
+castedOptionalSdk is Int
+castedOptionalSdk is Int?
+castedOptionalSdk as Int?
+castedOptionalSdk as? Int
+castedOptionalSdk as? Int?
+castedOptionalSdk as! Int
+castedOptionalSdk as! Int?
+
+// type-casting-pattern in case-condition
+if case .case1 = enumCase, castedNonOptional is SampleClass { }
+if case .case1 = enumCase, castedNonOptional is SampleClass? { }
+if case .case1 = enumCase, let _ = castedNonOptional as SampleClass? { }
+
+if case .case1 = enumCase, castedOptional is SampleClass { }
+if case .case1 = enumCase, castedOptional is SampleClass? { }
+if case .case1 = enumCase, let _ = castedOptional as SampleClass? { }
+
+if case .case1 = enumCase, castedNonOptionalSdk is Int { }
+if case .case1 = enumCase, castedNonOptionalSdk is Int? { }
+if case .case1 = enumCase, let _ = castedNonOptionalSdk as Int? { }
+
+if case .case1 = enumCase, castedOptionalSdk is Int { }
+if case .case1 = enumCase, castedOptionalSdk is Int? { }
+if case .case1 = enumCase, let _ = castedOptionalSdk as Int? { }
+
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
index 0e91a3a88f7..cbe56086e88 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
@@ -4,20 +4,6 @@ class T1_Test {
   func NF1_testFunc() {}
 }
 
-// init param FieldA is not renamed if there is a second param with default value
-class T1_Foo {
-  var V1_FieldA: String
-  var V1_FieldB: String?
-  
-  init(SP1_FieldA: String, SP1_FieldB: String? = nil) {}
-}
-let V1_FooObj = T1_Foo(SP1_FieldA: "test")
-
-// type is not renamed in if case
-let V1_num = 42
-if case 0...225 = V1_num, V1_num is T1_Test {
-}
-
 // debug blocks are omitted
 final class T1_DebugBlock {
   fileprivate init() {
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
index 29afb4014ff..2a299a74b83 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
@@ -6,11 +6,6 @@ class Test {
   func testFunc() {}
 }
 
-// type is not renamed in if case
-let num = 42
-if case 0...225 = num, num is Test {
-}
-
 // debug blocks are omitted
 final class DebugBlock {
   fileprivate init() {
-- 
2.17.1 (Apple Git-112)


From f16e925b2cdd283a2ba096fb6608aa8c20eca3f0 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Thu, 1 Mar 2018 17:08:52 +0100
Subject: [PATCH 104/138] Documentation comments from tuesday meeting

Reviewers: jerzy.kleszcz, michal.zielinski

Reviewed By: jerzy.kleszcz, michal.zielinski

Subscribers: jerzy.kleszcz, michal.zielinski

Differential Revision: https://phabricator.polidea.com/D2859
---
 .../Obfuscation/DeclarationParsingUtils.h     | 18 +++-
 .../Obfuscation/ParameterDeclarationParser.h  | 38 +++++--
 .../Obfuscation/DeclarationParsingUtils.cpp   |  6 ++
 .../Obfuscation/FunctionDeclarationParser.cpp |  2 +-
 .../ParameterDeclarationParser.cpp            | 99 +++++++++++--------
 5 files changed, 111 insertions(+), 52 deletions(-)

diff --git a/swift/include/swift/Obfuscation/DeclarationParsingUtils.h b/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
index d3097ba1df6..a2b4824cc9c 100644
--- a/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
+++ b/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
@@ -12,7 +12,22 @@ namespace swift {
 namespace obfuscation {
   
 using ModuleNameAndParts = std::pair<std::string, std::vector<std::string>>;
-  
+
+/// Checks that all the overridden functions in the override list are
+/// from the same module and this module is the module of originally parsed
+/// function.
+///
+/// \param Modules The list of modules that the overridden functions
+///        are defined in.
+///
+/// \param OriginModuleName The name of the module that
+///        the originally parsed function is defined in.
+///
+/// \returns true if all overridden functions are from the same module of
+///          the parsed function, and false otherwise.
+bool isOverriddenMethodFromTheSameModule(const std::set<std::string> &Modules,
+                                         const std::string &OriginModuleName);
+
 std::string combineIdentifier(std::vector<std::string> &Parts);
 
 std::string declarationName(const ValueDecl* Declaration);
@@ -35,7 +50,6 @@ ModuleNameAndParts moduleNameAndIdentifierParts(const Decl *Declaration);
   
 std::string typeName(const NominalTypeDecl* Declaration);
 
-
 llvm::Expected<std::string> enclosingTypeName(const Decl* Declaration);
 
 template<class T>
diff --git a/swift/include/swift/Obfuscation/ParameterDeclarationParser.h b/swift/include/swift/Obfuscation/ParameterDeclarationParser.h
index 803cd871807..3033a476f49 100644
--- a/swift/include/swift/Obfuscation/ParameterDeclarationParser.h
+++ b/swift/include/swift/Obfuscation/ParameterDeclarationParser.h
@@ -12,21 +12,45 @@
 
 namespace swift {
 namespace obfuscation {
-  
+
+/// Extracts the parameters' symbols from the function declaration
+/// that defines them.
+///
+/// \param Declaration The Swift AST AbstractFunctionDecl corresponding with
+///        the function declaration that we want to extract the parameters of.
+///
+/// \returns SymbolsOrError object containing either the symbols extracted
+///          from information in \p Declaration object or llvm::Error object
+///          with the information on why no symbol could be extracted.
 SymbolsOrError
 parseSeparateFunctionDeclarationForParameters(const AbstractFunctionDecl* Declaration);
-  
+
+/// Extracts the parameters' symbols from the function call
+/// that references them when passing values as arguments.
+///
+/// \param Declaration The Swift AST AbstractFunctionDecl corresponding with
+///        the declaration of the function that is being called with parameters.
+///
+/// \returns SymbolsOrError object containing either the symbols extracted
+///          from information in \p Declaration object or llvm::Error object
+///          with the information on why no symbol could be extracted.
 SymbolsOrError
 parseFunctionFromCallExpressionForParameters(const AbstractFunctionDecl* Declaration);
 
-SingleSymbolOrError
-symbolFromMemberwiseConstructorParameter(const ParamDecl* Parameter);
-  
+/// Parses the usage of parameter in the body of the function that declares it.
+///
+/// \param Declaration The Swift AST ParamDecl corresponding with
+///        the parameter that is referenced when used in the function body.
+///
+/// \param Range The place in which the parameter is being used
+///        in the function body.
+///
+/// \returns SymbolsOrError object containing either the symbols extracted
+///          from information in \p Declaration object or llvm::Error object
+///          with the information on why no symbol could be extracted.
 SymbolsOrError parseSeparateDeclarationWithRange(const ParamDecl* Declaration,
                                                  CharSourceRange Range);
 
-SymbolsOrError parse(const ParamDecl* Declaration);
-  
 } //namespace obfuscation
 } //namespace swift
 
diff --git a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
index 26ea6c03bf9..2d54eb141bc 100644
--- a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
+++ b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
@@ -23,6 +23,12 @@ std::string combineIdentifier(std::vector<std::string> &Parts) {
   }
 }
 
+bool isOverriddenMethodFromTheSameModule(const std::set<std::string> &Modules,
+                                         const std::string &OriginModuleName) {
+  return Modules.size() == 0
+     || (Modules.size() == 1 && Modules.count(OriginModuleName) == 1);
+}
+
 std::string declarationName(const ValueDecl* Declaration) {
   return Declaration->getName().str().str();
 }
diff --git a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
index 60d8db00d59..4ac68c0e1de 100644
--- a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
@@ -133,7 +133,7 @@ parseOverridenDeclaration(const FuncDecl *Declaration,
   // the same module and it's the module we've passed as ModuleName parameter.
   // Emitted symbol represents the base function so that all the functions that
   // override it are renamed to the same obfuscated name
-  if (Modules.size() == 1 && Modules.count(ModuleName) == 1) {
+  if (isOverriddenMethodFromTheSameModule(Modules, ModuleName)) {
     return getFunctionSymbol(Base, Range);
   } else {
     return stringError("only method overriding methods from the same module "
diff --git a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
index 986f47a055e..fb89e2cb902 100644
--- a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
@@ -9,15 +9,22 @@
 
 namespace swift {
 namespace obfuscation {
-  
+
 llvm::Expected<std::string>
-position(const ParamDecl *Declaration,
-         const AbstractFunctionDecl *FunctionDeclaration) {
+getIdentifierWithParameterPosition(const ParamDecl *Declaration,
+                                   const AbstractFunctionDecl *
+                                    FunctionDeclaration) {
   
   auto ParameterLists = FunctionDeclaration->getParameterLists();
+
+  // We use index, not iterator, because we want to use the index
+  // to build identifier
   for (unsigned ListIndex = 0; ListIndex < ParameterLists.size(); ++ListIndex) {
     
     auto *ParameterList = ParameterLists[ListIndex];
+
+    // We use index, not iterator, because we want to use the index
+    // to build identifier
     for (unsigned ParameterIndex = 0;
          ParameterIndex < ParameterList->size();
          ++ParameterIndex) {
@@ -35,20 +42,19 @@ position(const ParamDecl *Declaration,
   
   return stringError("Couldn't find parameter position");
 }
-  
+
 SymbolsOrError parse(const ParamDecl* Declaration) {
+
   if (const auto *FunctionDeclaration =
-      dyn_cast<AbstractFunctionDecl>(Declaration->getDeclContext())) {
-    
+        dyn_cast<AbstractFunctionDecl>(Declaration->getDeclContext())) {
+
     auto BaseWithModules =
       getBaseOverridenDeclarationWithModules(FunctionDeclaration);
     auto BaseFunctionDeclaration = BaseWithModules.first;
     auto Modules = BaseWithModules.second;
+
     
-    bool OverridenMethodIsFromTheSameModule =
-      Modules.size() == 0
-      || (Modules.size() == 1 && Modules.count(moduleName(Declaration)) == 1);
-    
+    auto ModuleName = moduleName(Declaration);
     auto ExternalName = externalParameterName(Declaration);
     auto InternalName = internalParameterName(Declaration);
     
@@ -59,16 +65,20 @@ SymbolsOrError parse(const ParamDecl* Declaration) {
     std::string BaseFunctionModuleName = BaseModuleAndParts.first;
     std::vector<std::string> BaseParts = BaseModuleAndParts.second;
 
-    auto BasePositionOrError = position(Declaration, BaseFunctionDeclaration);
+    auto BasePositionOrError =
+      getIdentifierWithParameterPosition(Declaration, BaseFunctionDeclaration);
     if (auto Error = BasePositionOrError.takeError()) {
       return std::move(Error);
     } else {
       BaseParts.push_back("parameter.position." + BasePositionOrError.get());
     }
-    
+
+    // We check if parameter has a place that it's declared that we can reach
     if (Declaration->getNameLoc().isValid()) {
-      if (Declaration->getArgumentNameLoc().isInvalid()
-          && OverridenMethodIsFromTheSameModule) {
+
+      auto IsSingle = Declaration->getArgumentNameLoc().isInvalid()
+                   && isOverriddenMethodFromTheSameModule(Modules, ModuleName);
+      if (IsSingle) {
         
         BaseParts.push_back("single." + InternalName);
         CharSourceRange Range(Declaration->getNameLoc(),
@@ -80,8 +90,12 @@ SymbolsOrError parse(const ParamDecl* Declaration) {
         Symbols.push_back(SymbolWithRange(Symbol, Range));
         
       } else {
-        
-        if (!ExternalName.empty() && OverridenMethodIsFromTheSameModule) {
+
+        auto IsExternal = !ExternalName.empty()
+                       && isOverriddenMethodFromTheSameModule(Modules,
+                                                              ModuleName);
+        if (IsExternal) {
+          auto ExternalParts = BaseParts;
           
           BaseParts.push_back("external." + ExternalName);
           CharSourceRange ExternalRange(Declaration->getArgumentNameLoc(),
@@ -106,8 +120,8 @@ SymbolsOrError parse(const ParamDecl* Declaration) {
         std::vector<std::string> OriginalParts =
           functionIdentifierParts(FunctionDeclaration).second;
 
-        auto OriginalPositionOrError = position(Declaration,
-                                                FunctionDeclaration);
+        auto OriginalPositionOrError =
+          getIdentifierWithParameterPosition(Declaration, FunctionDeclaration);
         if (auto Error = OriginalPositionOrError.takeError()) {
           return std::move(Error);
         } else {
@@ -131,6 +145,31 @@ SymbolsOrError parse(const ParamDecl* Declaration) {
   
   return stringError("Couldn't identify what function parameter belong to");
 }
+
+
+SingleSymbolOrError
+symbolFromMemberwiseConstructorParameter(const ParamDecl* Parameter) {
+  auto *Context = Parameter->getDeclContext();
+  if (const auto *Constructor = dyn_cast<ConstructorDecl>(Context)) {
+    auto *StructDeclaration =
+    Constructor->getResultInterfaceType()->getStructOrBoundGenericStruct();
+    if (StructDeclaration == nullptr) {
+      return stringError("The supposedly memberwise constructor is not "
+                         "memberwise, because it doesn't come from struct");
+    }
+    auto Properties = StructDeclaration->getStoredProperties();
+    for (auto Variable : Properties) {
+      if (declarationName(Variable) == declarationName(Parameter)) {
+        return parse(Variable);
+      }
+    }
+    return stringError("Failed to find struct property with the same name as "
+                       "memberwise constructor parameter");
+  } else {
+    return stringError("Failed to parse constructor declaration"
+                       "from parameter");
+  }
+}
   
 SymbolsOrError
 parametersSymbolsFromFunction(const AbstractFunctionDecl* Declaration) {
@@ -165,30 +204,6 @@ parametersSymbolsFromFunction(const AbstractFunctionDecl* Declaration) {
   return Symbols;
 }
 
-SingleSymbolOrError
-symbolFromMemberwiseConstructorParameter(const ParamDecl* Parameter) {
-  auto *Context = Parameter->getDeclContext();
-  if (const auto *Constructor = dyn_cast<ConstructorDecl>(Context)) {
-    auto *StructDeclaration =
-      Constructor->getResultInterfaceType()->getStructOrBoundGenericStruct();
-    if (StructDeclaration == nullptr) {
-      return stringError("The supposedly memberwise constructor is not "
-                         "memberwise, because it doesn't come from struct");
-    }
-    auto Properties = StructDeclaration->getStoredProperties();
-    for (auto Variable : Properties) {
-      if (declarationName(Variable) == declarationName(Parameter)) {
-        return parse(Variable);
-      }
-    }
-    return stringError("Failed to find struct property with the same name as "
-                "memberwise constructor parameter");
-  } else {
-    return stringError("Failed to parse constructor declaration"
-                       "from parameter");
-  }
-}
-
 SymbolsOrError
 parseSeparateFunctionDeclarationForParameters(const AbstractFunctionDecl*
                                                 Declaration) {
-- 
2.17.1 (Apple Git-112)


From ef4f80f934c2d40c5ca13d806aa6469d01e33986 Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Thu, 1 Mar 2018 13:26:26 +0100
Subject: [PATCH 105/138] Proper renaming for overridden and protocol functions

Reviewers: jerzy.kleszcz, krzysztof.siejkowski

Reviewed By: jerzy.kleszcz, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2864
---
 .../swift/Obfuscation/DataStructures.h        |   2 +
 .../swift/Obfuscation/DeclarationParser.h     |   4 +-
 .../Obfuscation/FunctionDeclarationParser.h   |   5 +-
 .../Obfuscation/TypeRepresentationParser.h    |  13 +-
 .../swift/Obfuscation/WhereClauseParser.h     |   6 +-
 swift/lib/Obfuscation/DeclarationParser.cpp   |  18 ++-
 .../Obfuscation/FunctionDeclarationParser.cpp | 132 ++++++++++++++++--
 swift/lib/Obfuscation/SourceFileWalker.cpp    |  18 ++-
 .../Obfuscation/TypeRepresentationParser.cpp  |  73 +++++++---
 swift/lib/Obfuscation/WhereClauseParser.cpp   |  24 ++--
 .../Functions/Expected/Functions.swift        |  48 +++++++
 .../FullProcess/Functions/Functions.swift     |  48 +++++++
 12 files changed, 333 insertions(+), 58 deletions(-)

diff --git a/swift/include/swift/Obfuscation/DataStructures.h b/swift/include/swift/Obfuscation/DataStructures.h
index d90ce49c3e2..23e00f335f8 100644
--- a/swift/include/swift/Obfuscation/DataStructures.h
+++ b/swift/include/swift/Obfuscation/DataStructures.h
@@ -150,6 +150,8 @@ using SingleSymbolOrError = llvm::Expected<Symbol>;
   
 using SymbolsOrError = llvm::Expected<std::vector<SymbolWithRange>>;
 
+using GlobalCollectedSymbols = std::set<IndexedSymbolWithRange,
+                                IndexedSymbolWithRange::SymbolWithRangeCompare>;
 } //namespace obfuscation
 } //namespace swift
 
diff --git a/swift/include/swift/Obfuscation/DeclarationParser.h b/swift/include/swift/Obfuscation/DeclarationParser.h
index 369ccc63602..0f86f941e8c 100644
--- a/swift/include/swift/Obfuscation/DeclarationParser.h
+++ b/swift/include/swift/Obfuscation/DeclarationParser.h
@@ -32,7 +32,9 @@ namespace obfuscation {
 ///          from information in \p Declaration object or llvm::Error object
 ///          with the information on why no symbol could be extracted.
 SymbolsOrError
-extractSymbol(Decl* Declaration, CharSourceRange Range);
+extractSymbol(GlobalCollectedSymbols &CollectedSymbols,
+              Decl* Declaration,
+              CharSourceRange Range);
     
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/include/swift/Obfuscation/FunctionDeclarationParser.h b/swift/include/swift/Obfuscation/FunctionDeclarationParser.h
index 7d0b3bcac0e..66bd34d62df 100644
--- a/swift/include/swift/Obfuscation/FunctionDeclarationParser.h
+++ b/swift/include/swift/Obfuscation/FunctionDeclarationParser.h
@@ -17,7 +17,10 @@ std::string functionName(const AbstractFunctionDecl* Declaration);
   
 ModuleNameAndParts functionIdentifierParts(const AbstractFunctionDecl* Declaration);
 
-SymbolsOrError parse(const FuncDecl* Declaration, CharSourceRange Range);
+SymbolsOrError parse(GlobalCollectedSymbols &CollectedSymbols,
+                     const FuncDecl* Declaration,
+                     CharSourceRange Range);
+  
 SymbolsOrError parse(const ConstructorDecl* Declaration, CharSourceRange Range);
 
 } //namespace obfuscation
diff --git a/swift/include/swift/Obfuscation/TypeRepresentationParser.h b/swift/include/swift/Obfuscation/TypeRepresentationParser.h
index b1a688defc5..5cf7d0c82fe 100644
--- a/swift/include/swift/Obfuscation/TypeRepresentationParser.h
+++ b/swift/include/swift/Obfuscation/TypeRepresentationParser.h
@@ -16,16 +16,21 @@ private:
 
 public:
 
-  void collectSymbolsFromTypeRepresentation(TypeRepr *TypeRepresentation);
+  void collectSymbolsFromTypeRepresentation(
+                                      GlobalCollectedSymbols &CollectedSymbols,
+                                      TypeRepr *TypeRepresentation);
 
   std::set<SymbolWithRange> harvestSymbols();
 
 private:
 
-  void handleComponent(ComponentIdentTypeRepr *Component);
+  void handleComponent(GlobalCollectedSymbols &CollectedSymbols,
+                       ComponentIdentTypeRepr *Component);
 
-  void handleTypeRepresentationRecursively(TypeRepr *ParentOfTypeRepresentation,
-                                           TypeRepr *TypeRepresentation);
+  void handleTypeRepresentationRecursively(
+                                       GlobalCollectedSymbols &CollectedSymbols,
+                                       TypeRepr *ParentOfTypeRepresentation,
+                                       TypeRepr *TypeRepresentation);
 
 };
 
diff --git a/swift/include/swift/Obfuscation/WhereClauseParser.h b/swift/include/swift/Obfuscation/WhereClauseParser.h
index 4637d9de45f..4ce2d085ec0 100644
--- a/swift/include/swift/Obfuscation/WhereClauseParser.h
+++ b/swift/include/swift/Obfuscation/WhereClauseParser.h
@@ -18,13 +18,15 @@ private:
 
 public:
 
-  void collectSymbolsFromDeclaration(Decl* Declaration);
+  void collectSymbolsFromDeclaration(GlobalCollectedSymbols &CollectedSymbols,
+                                     Decl* Declaration);
 
   std::set<SymbolWithRange> harvestSymbols();
 
 private:
 
-  void handleWhereClause(TrailingWhereClause *WhereClause);
+  void handleWhereClause(GlobalCollectedSymbols &CollectedSymbols,
+                         TrailingWhereClause *WhereClause);
 
 };
 
diff --git a/swift/lib/Obfuscation/DeclarationParser.cpp b/swift/lib/Obfuscation/DeclarationParser.cpp
index b9989f7bd6f..49ee1ed47fd 100644
--- a/swift/lib/Obfuscation/DeclarationParser.cpp
+++ b/swift/lib/Obfuscation/DeclarationParser.cpp
@@ -49,14 +49,18 @@ std::unique_ptr<SymbolsOrError> parseAsNominal(Decl* Declaration,
   return appendRangeToSymbol(parse(NominalDeclaration), Range);
 }
 
-std::unique_ptr<SymbolsOrError> parseAsFunction(Decl* Declaration,
-                                                CharSourceRange Range) {
+std::unique_ptr<SymbolsOrError> parseAsFunction(
+                                      GlobalCollectedSymbols &CollectedSymbols,
+                                      Decl* Declaration,
+                                      CharSourceRange Range) {
+  
   auto FunctionDeclaration = dyn_cast<FuncDecl>(Declaration);
   if (FunctionDeclaration->isOperator()) {
     return llvm::make_unique<SymbolsOrError>(parseOperator(FunctionDeclaration,
                                                            Range));
   } else {
-    return llvm::make_unique<SymbolsOrError>(parse(FunctionDeclaration,
+    return llvm::make_unique<SymbolsOrError>(parse(CollectedSymbols,
+                                                   FunctionDeclaration,
                                                    Range));
   }
 }
@@ -91,14 +95,18 @@ std::unique_ptr<SymbolsOrError> parseAsVariable(Decl* Declaration,
   return appendRangeToSymbol(parse(VariableDeclaration), Range);
 }
 
-SymbolsOrError extractSymbol(Decl* Declaration, CharSourceRange Range) {
+SymbolsOrError extractSymbol(GlobalCollectedSymbols &CollectedSymbols,
+                             Decl* Declaration,
+                             CharSourceRange Range) {
 
   std::unique_ptr<SymbolsOrError> SymbolsOrErrorPointer(nullptr);
 
   if (isNominal(Declaration)) {
     SymbolsOrErrorPointer = parseAsNominal(Declaration, Range);
   } else if (isFunc(Declaration)) {
-    SymbolsOrErrorPointer = parseAsFunction(Declaration, Range);
+    SymbolsOrErrorPointer = parseAsFunction(CollectedSymbols,
+                                            Declaration,
+                                            Range);
   } else if (isOperator(Declaration)) {
     SymbolsOrErrorPointer = parseAsOperator(Declaration, Range);
   } else if (isConstructor(Declaration)) {
diff --git a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
index 4ac68c0e1de..a5c33473618 100644
--- a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
@@ -107,7 +107,8 @@ functionIdentifierParts(const AbstractFunctionDecl *Declaration) {
   return std::make_pair(ModuleName, Parts);
 }
 
-SymbolWithRange getFunctionSymbol(const swift::FuncDecl *Declaration,
+SymbolWithRange getFunctionSymbol(GlobalCollectedSymbols &CollectedSymbols,
+                                  const swift::FuncDecl *Declaration,
                                   const swift::CharSourceRange &Range) {
   auto ModuleAndParts = functionIdentifierParts(Declaration);
   auto ModuleName = ModuleAndParts.first;
@@ -120,7 +121,8 @@ SymbolWithRange getFunctionSymbol(const swift::FuncDecl *Declaration,
 }
 
 llvm::Expected<SymbolWithRange>
-parseOverridenDeclaration(const FuncDecl *Declaration,
+parseOverridenDeclaration(GlobalCollectedSymbols &CollectedSymbols,
+                          const FuncDecl *Declaration,
                           const std::string &ModuleName,
                           const CharSourceRange &Range) {
 
@@ -134,14 +136,104 @@ parseOverridenDeclaration(const FuncDecl *Declaration,
   // Emitted symbol represents the base function so that all the functions that
   // override it are renamed to the same obfuscated name
   if (isOverriddenMethodFromTheSameModule(Modules, ModuleName)) {
-    return getFunctionSymbol(Base, Range);
+    return getFunctionSymbol(CollectedSymbols, Base, Range);
   } else {
     return stringError("only method overriding methods from the same module "
                        "might be safely obfuscated");
   }
 }
+  
+llvm::Expected<bool>
+handleSatisfiedProtocolRequirements(GlobalCollectedSymbols &CollectedSymbols,
+                                    SymbolWithRange FunctionNameSymbol,
+                                    const FuncDecl* Declaration) {
+  
+  //check if this overridden method is also satisfying some protocol
+  auto SatisfiesProtocol
+                  = Declaration->getSatisfiedProtocolRequirements().size() > 0;
+  
+  // we assume that there is always only one overriden symbol
+  if(SatisfiesProtocol) {
+    
+    for(auto Requirement: Declaration->getSatisfiedProtocolRequirements() ) {
+      
+      if(auto *ProtocolFun = dyn_cast<FuncDecl>(Requirement)) {
+        auto ModuleAndParts = functionIdentifierParts(ProtocolFun);
+        auto Parts = ModuleAndParts.second;
+        auto ProtocolFunId = combineIdentifier(Parts);
+        
+        // Create the symbols for protocol function parameters
+        auto ProtocolParametersSymbolsOrError
+                  = parseSeparateFunctionDeclarationForParameters(ProtocolFun);
+        if (auto Error = ProtocolParametersSymbolsOrError.takeError()) {
+          return std::move(Error);
+        }
+        auto ProtocolFunParametersSymbols
+                                      = ProtocolParametersSymbolsOrError.get();
+        
+        // Create the symbols for overridden function parameters
+        auto OverriddenParametersSymbolsOrError =
+                           parseSeparateFunctionDeclarationForParameters(Declaration);
+        if (auto Error = OverriddenParametersSymbolsOrError.takeError()) {
+          return std::move(Error);
+        }
+        auto OverriddenFunParametersSymbols
+                                    = OverriddenParametersSymbolsOrError.get();
+        
+        // Parameter count for both protocol method and overridden method
+        // must be the same, otherwise we don't know what to do with them.
+        if(OverriddenFunParametersSymbols.size()
+                                      != ProtocolFunParametersSymbols.size()) {
+          return stringError("Couldn't parse overriden function protocol "
+                             "parameters.");
+        }
+        
+        // rename protocol method symbol id
+        
+        // find protocol function identifier in a set of all collected symbols
+        // and replace it with function identifier of overridden symbol
+        for(auto CollectedSymbol: CollectedSymbols) {
+          if(CollectedSymbol.SymbolWithRange.Symbol.Identifier
+                                                          == ProtocolFunId) {
+            
+            CollectedSymbols.erase(CollectedSymbol);
+            CollectedSymbol.SymbolWithRange.Symbol.Identifier
+                                        = FunctionNameSymbol.Symbol.Identifier;
+            CollectedSymbols.insert(CollectedSymbol);
+            
+            break;
+          }
+        }
+        
+        // rename protocol method parameters symbol ids
+        for(size_t i = 0; i<ProtocolFunParametersSymbols.size(); i++) {
+          auto ProtocolFunParameter = ProtocolFunParametersSymbols[i];
+          auto OverridenFunParameter = OverriddenFunParametersSymbols[i];
+          
+          // find protocol parameter identifier in a set of all collected symbols
+          // and replace it with parameter identifier of overridden symbol
+          for(auto CollectedSymbol: CollectedSymbols) {
+            if(CollectedSymbol.SymbolWithRange.Symbol.Identifier
+                                  == ProtocolFunParameter.Symbol.Identifier) {
 
-SymbolsOrError parse(const ConstructorDecl* Declaration, CharSourceRange Range) {
+              CollectedSymbols.erase(CollectedSymbol);
+              CollectedSymbol.SymbolWithRange.Symbol.Identifier
+                                    = OverridenFunParameter.Symbol.Identifier;
+              CollectedSymbols.insert(CollectedSymbol);
+              
+              break;
+            }
+          }
+        }
+        
+      }
+    }
+  }
+  return true;
+}
+
+SymbolsOrError parse(const ConstructorDecl* Declaration,
+                     CharSourceRange Range) {
   // We're not interested in renaming the init function name,
   // but we're interested in renaming the init parameters
   if (Declaration->isImplicit()) {
@@ -151,7 +243,9 @@ SymbolsOrError parse(const ConstructorDecl* Declaration, CharSourceRange Range)
   return parseSeparateFunctionDeclarationForParameters(Declaration);
 }
 
-SymbolsOrError parse(const FuncDecl* Declaration, CharSourceRange Range) {
+SymbolsOrError parse(GlobalCollectedSymbols &CollectedSymbols,
+                     const FuncDecl* Declaration,
+                     CharSourceRange Range) {
   
   if (auto Error = isDeclarationSupported(Declaration)) {
     return std::move(Error);
@@ -164,13 +258,35 @@ SymbolsOrError parse(const FuncDecl* Declaration, CharSourceRange Range) {
     // Overriden declaration must be treated separately because
     // we mustn't rename function that overrides function from different module
     auto SymbolOrError =
-      parseOverridenDeclaration(Declaration, moduleName(Declaration), Range);
+      parseOverridenDeclaration(CollectedSymbols,
+                                Declaration,
+                                moduleName(Declaration),
+                                Range);
     if (auto Error = SymbolOrError.takeError()) {
       return std::move(Error);
     }
-    Symbols.push_back(SymbolOrError.get());
+    
+    auto FunctionNameSymbol = SymbolOrError.get();
+    
+    // If overridden method also satisfies protocol requirements
+    // we must update symbol identifier for protocol's method to be the same
+    // as symbol identifier of the overridden function. Otherwise function
+    // inside protocol would be renamed differently and our class
+    // will no longer conform to that protocol.
+    auto HandledOrError = handleSatisfiedProtocolRequirements(
+                                                            CollectedSymbols,
+                                                            FunctionNameSymbol,
+                                                            Declaration);
+    
+    if (auto Error = HandledOrError.takeError()) {
+      return std::move(Error);
+    }
+    
+    Symbols.push_back(FunctionNameSymbol);
   } else {
-    Symbols.push_back(getFunctionSymbol(Declaration, Range));
+    Symbols.push_back(getFunctionSymbol(CollectedSymbols,
+                                        Declaration,
+                                        Range));
   }
 
   // Create the symbols for function parameters
diff --git a/swift/lib/Obfuscation/SourceFileWalker.cpp b/swift/lib/Obfuscation/SourceFileWalker.cpp
index 932a077d5f5..a2855fae3ce 100644
--- a/swift/lib/Obfuscation/SourceFileWalker.cpp
+++ b/swift/lib/Obfuscation/SourceFileWalker.cpp
@@ -15,8 +15,10 @@ namespace obfuscation {
 struct SymbolsWalkerAndCollector: public SourceEntityWalker {
 
   static int SymbolIndex;
-  std::set<IndexedSymbolWithRange,
-           IndexedSymbolWithRange::SymbolWithRangeCompare> Symbols;
+
+  // This is a vector that stores all of the collected IndexedSymbolWithRange
+  // thet are compared by symbol and range
+  GlobalCollectedSymbols Symbols;
 
 // Overriden methods called back as the AST is walked
 
@@ -27,15 +29,15 @@ struct SymbolsWalkerAndCollector: public SourceEntityWalker {
   }
   
   bool walkToDeclPre(Decl *Declaration, CharSourceRange Range) override {
-    auto Symbols = extractSymbol(Declaration, Range);
-    handleExtractionResult(Symbols);
+    auto ExtractedSymbols = extractSymbol(Symbols, Declaration, Range);
+    handleExtractionResult(ExtractedSymbols);
     return true;
   }
 
   void handleWhereClausesIfNeeded(const std::vector<Decl*> &&Declarations) {
     WhereClauseParser WhereClauseParser;
     for (auto *Declaration : Declarations) {
-      WhereClauseParser.collectSymbolsFromDeclaration(Declaration);
+      WhereClauseParser.collectSymbolsFromDeclaration(Symbols, Declaration);
     }
     handleSymbols(WhereClauseParser.harvestSymbols());
   }
@@ -50,8 +52,10 @@ struct SymbolsWalkerAndCollector: public SourceEntityWalker {
                           Type T,
                           ReferenceMetaData Data) override {
     handleWhereClausesIfNeeded({ Declaration, CtorTyRef, ExtTyRef });
-    auto Symbols = extractSymbol(CtorTyRef ? CtorTyRef : Declaration, Range);
-    handleExtractionResult(Symbols);
+    auto ExtractedSymbols = extractSymbol(Symbols,
+                                          CtorTyRef ? CtorTyRef : Declaration,
+                                          Range);
+    handleExtractionResult(ExtractedSymbols);
     return true;
   }
 
diff --git a/swift/lib/Obfuscation/TypeRepresentationParser.cpp b/swift/lib/Obfuscation/TypeRepresentationParser.cpp
index e0cf237f89d..259e34eac57 100644
--- a/swift/lib/Obfuscation/TypeRepresentationParser.cpp
+++ b/swift/lib/Obfuscation/TypeRepresentationParser.cpp
@@ -5,13 +5,17 @@
 namespace swift {
 namespace obfuscation {
 
-void TypeRepresentationParser::handleComponent(ComponentIdentTypeRepr *Component) {
+void TypeRepresentationParser::handleComponent(
+                                       GlobalCollectedSymbols &CollectedSymbols,
+                                       ComponentIdentTypeRepr *Component) {
   auto StartLocation = Component->getStartLoc();
   if (Component->isBound() && StartLocation.isValid()) {
     auto TypeDeclaration = Component->getBoundDecl();
     CharSourceRange TypeRange(StartLocation,
                               TypeDeclaration->getName().getLength());
-    auto SymbolsOrError = extractSymbol(TypeDeclaration, TypeRange);
+    auto SymbolsOrError = extractSymbol(CollectedSymbols,
+                                        TypeDeclaration,
+                                        TypeRange);
     if (auto Error = SymbolsOrError.takeError()) {
       llvm::consumeError(std::move(Error));
       return;
@@ -21,7 +25,8 @@ void TypeRepresentationParser::handleComponent(ComponentIdentTypeRepr *Component
 }
 
 void TypeRepresentationParser::
-handleTypeRepresentationRecursively(TypeRepr *ParentOfTypeRepresentation,
+handleTypeRepresentationRecursively(GlobalCollectedSymbols &CollectedSymbols,
+                                    TypeRepr *ParentOfTypeRepresentation,
                                     TypeRepr *TypeRepresentation) {
 
   // Guard agains the case in which there is no object
@@ -33,78 +38,104 @@ handleTypeRepresentationRecursively(TypeRepr *ParentOfTypeRepresentation,
 
   if (auto *Compound = dyn_cast<CompoundIdentTypeRepr>(TypeRepresentation)) {
     for (auto *Component : Compound->Components) {
-      handleComponent(Component);
+      handleComponent(CollectedSymbols, Component);
     }
   }
 
   if (auto *Generic = dyn_cast<GenericIdentTypeRepr>(TypeRepresentation)) {
     for (auto *GenericArg : Generic->getGenericArgs()) {
-      handleTypeRepresentationRecursively(Generic, GenericArg);
+      handleTypeRepresentationRecursively(CollectedSymbols,
+                                          Generic,
+                                          GenericArg);
     }
   }
 
   if (auto *Component = dyn_cast<ComponentIdentTypeRepr>(TypeRepresentation)) {
-    handleComponent(Component);
+    handleComponent(CollectedSymbols, Component);
   }
 
   if (auto *InOut = dyn_cast<InOutTypeRepr>(TypeRepresentation)) {
-    handleTypeRepresentationRecursively(InOut, InOut->getBase());
+    handleTypeRepresentationRecursively(CollectedSymbols,
+                                        InOut,
+                                        InOut->getBase());
   }
 
   if (auto *Attributed = dyn_cast<AttributedTypeRepr>(TypeRepresentation)) {
-    handleTypeRepresentationRecursively(Attributed,
+    handleTypeRepresentationRecursively(CollectedSymbols,
+                                        Attributed,
                                         Attributed->getTypeRepr());
   }
 
   if (auto *Function = dyn_cast<FunctionTypeRepr>(TypeRepresentation)) {
-    handleTypeRepresentationRecursively(Function,
+    handleTypeRepresentationRecursively(CollectedSymbols,
+                                        Function,
                                         Function->getArgsTypeRepr());
-    handleTypeRepresentationRecursively(Function,
+    handleTypeRepresentationRecursively(CollectedSymbols,
+                                        Function,
                                         Function->getResultTypeRepr());
   }
 
   if (auto *IUO =
         dyn_cast<ImplicitlyUnwrappedOptionalTypeRepr>(TypeRepresentation)) {
-    handleTypeRepresentationRecursively(IUO, IUO->getBase());
+    handleTypeRepresentationRecursively(CollectedSymbols,IUO, IUO->getBase());
   }
 
   if (auto *Protocol = dyn_cast<ProtocolTypeRepr>(TypeRepresentation)) {
-    handleTypeRepresentationRecursively(Protocol, Protocol->getBase());
+    handleTypeRepresentationRecursively(CollectedSymbols,
+                                        Protocol,
+                                        Protocol->getBase());
   }
 
   if (auto *Metatype = dyn_cast<MetatypeTypeRepr>(TypeRepresentation)) {
-    handleTypeRepresentationRecursively(Metatype, Metatype->getBase());
+    handleTypeRepresentationRecursively(CollectedSymbols,
+                                        Metatype,
+                                        Metatype->getBase());
   }
 
   if (auto *Array = dyn_cast<ArrayTypeRepr>(TypeRepresentation)) {
-    handleTypeRepresentationRecursively(Array, Array->getBase());
+    handleTypeRepresentationRecursively(CollectedSymbols,
+                                        Array,
+                                        Array->getBase());
   }
 
   if (auto *Dictionary = dyn_cast<DictionaryTypeRepr>(TypeRepresentation)) {
-    handleTypeRepresentationRecursively(Dictionary, Dictionary->getKey());
-    handleTypeRepresentationRecursively(Dictionary, Dictionary->getValue());
+    handleTypeRepresentationRecursively(CollectedSymbols,
+                                        Dictionary,
+                                        Dictionary->getKey());
+    
+    handleTypeRepresentationRecursively(CollectedSymbols,
+                                        Dictionary,
+                                        Dictionary->getValue());
   }
 
   if (auto *Optional = dyn_cast<OptionalTypeRepr>(TypeRepresentation)) {
-    handleTypeRepresentationRecursively(Optional, Optional->getBase());
+    handleTypeRepresentationRecursively(CollectedSymbols,
+                                        Optional,
+                                        Optional->getBase());
   }
 
   if (auto *Tuple = dyn_cast<TupleTypeRepr>(TypeRepresentation)) {
     for (auto *TupleElement : Tuple->getElements()) {
-      handleTypeRepresentationRecursively(Tuple, TupleElement);
+      handleTypeRepresentationRecursively(CollectedSymbols,
+                                          Tuple,
+                                          TupleElement);
     }
   }
 
   if (auto *Composition = dyn_cast<CompositionTypeRepr>(TypeRepresentation)) {
     for (auto *CompositionElement : Composition->getTypes()) {
-      handleTypeRepresentationRecursively(Composition, CompositionElement);
+      handleTypeRepresentationRecursively(CollectedSymbols,
+                                          Composition,
+                                          CompositionElement);
     }
   }
 }
 
 void TypeRepresentationParser::
-  collectSymbolsFromTypeRepresentation(TypeRepr *TypeRepresentation) {
-  handleTypeRepresentationRecursively(/* Parent */ nullptr,
+  collectSymbolsFromTypeRepresentation(GlobalCollectedSymbols &CollectedSymbols,
+                                       TypeRepr *TypeRepresentation) {
+  handleTypeRepresentationRecursively(CollectedSymbols,
+                                      /* Parent */ nullptr,
                                       TypeRepresentation);
 }
 
diff --git a/swift/lib/Obfuscation/WhereClauseParser.cpp b/swift/lib/Obfuscation/WhereClauseParser.cpp
index 1519b6da329..9ef68648805 100644
--- a/swift/lib/Obfuscation/WhereClauseParser.cpp
+++ b/swift/lib/Obfuscation/WhereClauseParser.cpp
@@ -5,7 +5,9 @@
 namespace swift {
 namespace obfuscation {
 
-void WhereClauseParser::handleWhereClause(TrailingWhereClause *WhereClause) {
+void WhereClauseParser::handleWhereClause(
+                                      GlobalCollectedSymbols &CollectedSymbols,
+                                      TrailingWhereClause *WhereClause) {
   if (WhereClause == nullptr) { return; }
   TypeRepresentationParser TypeReprParser;
   auto Requirements = WhereClause->getRequirements();
@@ -36,29 +38,33 @@ void WhereClauseParser::handleWhereClause(TrailingWhereClause *WhereClause) {
     if (FirstTypeRepresentation != nullptr
         && !FirstTypeRepresentation->isInvalid()) {
       TypeReprParser
-        .collectSymbolsFromTypeRepresentation(FirstTypeRepresentation);
+        .collectSymbolsFromTypeRepresentation(CollectedSymbols,
+                                              FirstTypeRepresentation);
     }
     if (SecondTypeRepresentation != nullptr
         && !SecondTypeRepresentation->isInvalid()) {
       TypeReprParser
-        .collectSymbolsFromTypeRepresentation(SecondTypeRepresentation);
+        .collectSymbolsFromTypeRepresentation(CollectedSymbols,
+                                              SecondTypeRepresentation);
     }
   }
   copyToSet(TypeReprParser.harvestSymbols(), Symbols);
 }
 
-void WhereClauseParser::collectSymbolsFromDeclaration(Decl* Declaration) {
+void WhereClauseParser::collectSymbolsFromDeclaration(
+                                      GlobalCollectedSymbols &CollectedSymbols,
+                                      Decl* Declaration) {
   if (Declaration != nullptr) {
     if (auto *Extension = dyn_cast<ExtensionDecl>(Declaration)) {
-      handleWhereClause(Extension->getTrailingWhereClause());
+      handleWhereClause(CollectedSymbols, Extension->getTrailingWhereClause());
     } else if (auto *GenericType = dyn_cast<GenericTypeDecl>(Declaration)) {
-      handleWhereClause(GenericType->getTrailingWhereClause());
+      handleWhereClause(CollectedSymbols, GenericType->getTrailingWhereClause());
     } else if (auto *Subscript = dyn_cast<SubscriptDecl>(Declaration)) {
-      handleWhereClause(Subscript->getTrailingWhereClause());
+      handleWhereClause(CollectedSymbols, Subscript->getTrailingWhereClause());
     } else if (auto *AbstractFunc = dyn_cast<AbstractFunctionDecl>(Declaration)) {
-      handleWhereClause(AbstractFunc->getTrailingWhereClause());
+      handleWhereClause(CollectedSymbols, AbstractFunc->getTrailingWhereClause());
     } else if (auto *Associated = dyn_cast<AssociatedTypeDecl>(Declaration)) {
-      handleWhereClause(Associated->getTrailingWhereClause());
+      handleWhereClause(CollectedSymbols, Associated->getTrailingWhereClause());
     }
   }
 }
diff --git a/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift b/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift
index d45862fc1eb..cd717d463c8 100644
--- a/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift
+++ b/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift
@@ -123,3 +123,51 @@ _ = V1_gcii.NF8_method()
 
 let V1_gcsi = T1_GenericClass<T1_SampleClass>()
 _ = V1_gcsi.NF8_method()
+
+// Protocol extensions
+protocol T1_Proto {
+  func NF1_hello()
+}
+extension NSString: T1_Proto {}
+extension T1_Proto where Self: NSString {
+  func NF1_hello() {}
+}
+
+// Overridden and conforming to protocol at the same time
+class T1_Test {}
+
+protocol T1_TestProto {
+  func NF1_foo(EP1_a IP1_b: T1_Test)
+}
+
+protocol T1_TestProto2 {
+  func NF1_foo(EP1_a IP1_b: T1_Test)
+}
+
+class T1_Parent {
+  func NF1_foo(EP1_a IP2_b: T1_Test) {}
+}
+
+class T1_Child: T1_Parent, T1_TestProto, T1_TestProto2 {
+  override func NF1_foo(EP1_a IP1_b: T1_Test) { super.NF1_foo(EP1_a: IP1_b) }
+}
+
+class T1_Parent2: T1_Parent, T1_TestProto2 {
+  override func NF1_foo(EP1_a IP1_b: T1_Test) { super.NF1_foo(EP1_a: IP1_b) }
+}
+
+class T1_Child2: T1_Parent2, T1_TestProto {
+  override func NF1_foo(EP1_a IP1_b: T1_Test) { super.NF1_foo(EP1_a: IP1_b) }
+}
+
+let V1_p = T1_Parent()
+V1_p.NF1_foo(EP1_a: T1_Test())
+
+let V1_c = T1_Child()
+V1_c.NF1_foo(EP1_a: T1_Test())
+
+let V1_p2 = T1_Parent2()
+V1_p2.NF1_foo(EP1_a: T1_Test())
+
+let V1_c2 = T1_Child2()
+V1_c2.NF1_foo(EP1_a: T1_Test())
diff --git a/swift/test/Obfuscation/FullProcess/Functions/Functions.swift b/swift/test/Obfuscation/FullProcess/Functions/Functions.swift
index d192259d0ac..dc8bf466b5c 100644
--- a/swift/test/Obfuscation/FullProcess/Functions/Functions.swift
+++ b/swift/test/Obfuscation/FullProcess/Functions/Functions.swift
@@ -124,3 +124,51 @@ _ = gcii.method()
 
 let gcsi = GenericClass<SampleClass>()
 _ = gcsi.method()
+
+// Protocol extensions
+protocol Proto {
+  func hello()
+}
+extension NSString: Proto {}
+extension Proto where Self: NSString {
+  func hello() {}
+}
+
+// Overridden and conforming to protocol at the same time
+class Test {}
+
+protocol TestProto {
+  func foo(a b: Test)
+}
+
+protocol TestProto2 {
+  func foo(a b: Test)
+}
+
+class Parent {
+  func foo(a b: Test) {}
+}
+
+class Child: Parent, TestProto, TestProto2 {
+  override func foo(a b: Test) { super.foo(a: b) }
+}
+
+class Parent2: Parent, TestProto2 {
+  override func foo(a b: Test) { super.foo(a: b) }
+}
+
+class Child2: Parent2, TestProto {
+  override func foo(a b: Test) { super.foo(a: b) }
+}
+
+let p = Parent()
+p.foo(a: Test())
+
+let c = Child()
+c.foo(a: Test())
+
+let p2 = Parent2()
+p2.foo(a: Test())
+
+let c2 = Child2()
+c2.foo(a: Test())
-- 
2.17.1 (Apple Git-112)


From aa2a8603fd7820eb1139cd308a13f22751d3e066 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Tue, 27 Feb 2018 15:41:31 +0100
Subject: [PATCH 106/138] Documentation comments from thursday meeting

Reviewers: jerzy.kleszcz, michal.zielinski

Reviewed By: michal.zielinski

Subscribers: michal.zielinski, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2866
---
 .../Obfuscation/VariableDeclarationParser.h   | 12 ++-
 .../Obfuscation/DeclarationParsingUtils.cpp   | 27 +++---
 .../Obfuscation/FunctionDeclarationParser.cpp |  3 +
 .../Obfuscation/VariableDeclarationParser.cpp | 41 ++++----
 swift/lib/Obfuscation/WhereClauseParser.cpp   | 50 ++++++++--
 .../Closures/Expected/Closures.swift          |  8 +-
 .../WhereClauses/Expected/WhereClauses.swift  |  4 +-
 .../Inputs/ExpectedSymbols.json               | 96 -------------------
 8 files changed, 101 insertions(+), 140 deletions(-)

diff --git a/swift/include/swift/Obfuscation/VariableDeclarationParser.h b/swift/include/swift/Obfuscation/VariableDeclarationParser.h
index 82c00071840..c0c360b2497 100644
--- a/swift/include/swift/Obfuscation/VariableDeclarationParser.h
+++ b/swift/include/swift/Obfuscation/VariableDeclarationParser.h
@@ -6,7 +6,17 @@
 
 namespace swift {
 namespace obfuscation {
-    
+
+/// Extracts the symbol from the VarDecl AST node
+///
+/// In case no symbol is found, returnes Error.
+///
+/// \param Declaration The Swift AST node that may or may not represent
+///        the symbol to obfuscate.
+///
+/// \returns llvm::Expected object containing either the symbol extracted
+///          from information in \p Declaration object or llvm::Error object
+///          with the information on why no symbol could be extracted.
 SingleSymbolOrError parse(const VarDecl* Declaration);
     
 } //namespace obfuscation
diff --git a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
index 2d54eb141bc..f6ab9a72723 100644
--- a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
+++ b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
@@ -58,19 +58,22 @@ nominalTypeIdentifierParts(const NominalTypeDecl *Declaration,
                            const std::string &SymbolName) {
 
   std::vector<std::string> Parts;
-
-  if (auto *EnumDeclaration = dyn_cast<EnumDecl>(Declaration)) {
-    Parts.push_back("enum." + SymbolName);
-  } else if (auto *ClassDeclaration = dyn_cast<ClassDecl>(Declaration)) {
-    Parts.push_back("class." + SymbolName);
-  } else if (auto *ProtocolDeclaration = dyn_cast<ProtocolDecl>(Declaration)) {
-    Parts.push_back("protocol." + SymbolName);
-  } else if (auto *StructDeclaration = dyn_cast<StructDecl>(Declaration)) {
-    Parts.push_back("struct." + SymbolName);
-  } else {
-    return stringError("found unsupported declaration type");
+  switch (Declaration->getKind()) {
+    case DeclKind::Enum:
+      Parts.push_back("enum." + SymbolName);
+      break;
+    case DeclKind::Class:
+      Parts.push_back("class." + SymbolName);
+      break;
+    case DeclKind::Protocol:
+      Parts.push_back("protocol." + SymbolName);
+      break;
+    case DeclKind::Struct:
+      Parts.push_back("struct." + SymbolName);
+      break;
+    default:
+      return stringError("found unsupported declaration type");
   }
-
   return Parts;
 }
 
diff --git a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
index a5c33473618..775ed5143b3 100644
--- a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
@@ -87,6 +87,9 @@ functionIdentifierParts(const AbstractFunctionDecl *Declaration) {
     //       this simplified handling should be improved in the future.
     ModuleNameAndParts ModuleNameAndParts;
     if (SatisfiesProtocol) {
+      // TODO: If the function satisfies multiple protocols, we're using
+      // the module name from the first of the protocols. This may lead
+      // to errors and should be changed in the future.
       ModuleNameAndParts =
         moduleNameAndIdentifierParts(ProtocolRequirements.front());
     } else {
diff --git a/swift/lib/Obfuscation/VariableDeclarationParser.cpp b/swift/lib/Obfuscation/VariableDeclarationParser.cpp
index 6a5e64cf8c8..b990ca0e5d4 100644
--- a/swift/lib/Obfuscation/VariableDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/VariableDeclarationParser.cpp
@@ -23,7 +23,8 @@ parseOverridenDeclaration(const VarDecl *Declaration,
   auto BaseWithModules = getBaseOverridenDeclarationWithModules(Declaration);
   auto Base = BaseWithModules.first;
   auto Modules = BaseWithModules.second;
-  if (Modules.size() == 1 && Modules.count(ModuleName) == 1) {
+
+  if (isOverriddenMethodFromTheSameModule(Modules, ModuleName)) {
     return parse(Base);
   } else {
     return stringError("only overriding properties from the same module "
@@ -32,29 +33,32 @@ parseOverridenDeclaration(const VarDecl *Declaration,
 }
 
 llvm::Expected<ModuleNameAndParts>
-variableContextParts(const VarDecl *Declaration) {
+variableIdentifierPartsFromContext(const VarDecl *Declaration) {
+
   std::string ModuleName;
   std::vector<std::string> Parts;
   
   auto ProtocolRequirements = Declaration->getSatisfiedProtocolRequirements();
   auto *ProtocolDeclaration =
-  dyn_cast<ProtocolDecl>(Declaration->getDeclContext());
-  // TODO: for now, we're renaming all protocol properties with the same name
-  // to the same obfuscated name. this should be improved in the future.
+    dyn_cast<ProtocolDecl>(Declaration->getDeclContext());
+
+  // TODO: for now, we're renaming properties from different protocols
+  // but with the same name to the same obfuscated name.
+  // This should be improved in the future.
   if (!ProtocolRequirements.empty() || ProtocolDeclaration != nullptr) {
-    ModuleName = ProtocolRequirements.empty() ?
-    moduleName(ProtocolDeclaration) : moduleName(ProtocolRequirements.front());
+
+    // TODO: If the property satisfies multiple protocols, we're using
+    // the module name from the first of the protocols. This may lead to errors
+    // and should be changed in the future.
+    ModuleName = ProtocolRequirements.empty()
+                    ? moduleName(ProtocolDeclaration)
+                    : moduleName(ProtocolRequirements.front());
     Parts.push_back("module." + ModuleName);
     Parts.push_back("protocol");
-    
-  } else if (auto *FunctionDeclaration =
-             dyn_cast<FuncDecl>(Declaration->getDeclContext())) {
-    auto ModuleAndParts = functionIdentifierParts(FunctionDeclaration);
-    ModuleName = moduleName(Declaration);
-    Parts = ModuleAndParts.second;
-    
+
   } else if (auto *NominalTypeDeclaration =
-             dyn_cast<NominalTypeDecl>(Declaration->getDeclContext())) {
+              dyn_cast<NominalTypeDecl>(Declaration->getDeclContext())) {
+
     ModuleName = moduleName(Declaration);
     Parts.push_back("module." + ModuleName);
     std::string TypeName = typeName(NominalTypeDeclaration);
@@ -64,10 +68,15 @@ variableContextParts(const VarDecl *Declaration) {
       return std::move(Error);
     }
     copyToVector(ModuleAndParts.get(), Parts);
+
   } else if (Declaration->getDeclContext()->isModuleScopeContext()) {
     ModuleName = moduleName(Declaration);
     Parts.push_back("module." + ModuleName);
   }
+
+  if (ModuleName.empty() && Parts.empty()) {
+    return stringError("No supported variable declaration found");
+  }
   
   return std::make_pair(ModuleName, Parts);
 }
@@ -82,7 +91,7 @@ SingleSymbolOrError parse(const VarDecl* Declaration) {
     return parseOverridenDeclaration(Declaration, moduleName(Declaration));
   }
   
-  auto ModuleAndPartsOrError = variableContextParts(Declaration);
+  auto ModuleAndPartsOrError = variableIdentifierPartsFromContext(Declaration);
   if (auto Error = ModuleAndPartsOrError.takeError()) {
     return std::move(Error);
   }
diff --git a/swift/lib/Obfuscation/WhereClauseParser.cpp b/swift/lib/Obfuscation/WhereClauseParser.cpp
index 9ef68648805..774e0008d5a 100644
--- a/swift/lib/Obfuscation/WhereClauseParser.cpp
+++ b/swift/lib/Obfuscation/WhereClauseParser.cpp
@@ -5,32 +5,52 @@
 namespace swift {
 namespace obfuscation {
 
-void WhereClauseParser::handleWhereClause(
-                                      GlobalCollectedSymbols &CollectedSymbols,
-                                      TrailingWhereClause *WhereClause) {
+void
+WhereClauseParser::handleWhereClause(GlobalCollectedSymbols &CollectedSymbols,
+                                     TrailingWhereClause *WhereClause) {
+
   if (WhereClause == nullptr) { return; }
+
   TypeRepresentationParser TypeReprParser;
+
   auto Requirements = WhereClause->getRequirements();
   for (auto WhereRequirement : Requirements) {
+
     if (WhereRequirement.isInvalid()) { continue; }
+
     TypeRepr *FirstTypeRepresentation = nullptr;
     TypeRepr *SecondTypeRepresentation = nullptr;
+
     switch (WhereRequirement.getKind()) {
+      // This represents the constraint to type,
+      // like "Self: UIView" or "Element: Hashable"
       case RequirementReprKind::TypeConstraint: {
+        // In case of type constraints, the left side of ":" colon sign is
+        // represented as Subject, and the right side as Constraint
         FirstTypeRepresentation = WhereRequirement.getSubjectRepr();
         SecondTypeRepresentation = WhereRequirement.getConstraintRepr();
         break;
       }
+      // This represents the type equality requirements, such as
+      // "Self == UIView" or "Element == String"
       case RequirementReprKind::SameType: {
+        // In case of type equality requirement the type on the left side
+        // of "==" sign is represented as FirstType and the type
+        // on the right side is represented as SecondType
         FirstTypeRepresentation = WhereRequirement.getFirstTypeRepr();
         SecondTypeRepresentation = WhereRequirement.getSecondTypeRepr();
         break;
       }
+      // This represents the constraint on the type itself.
+      // The only user-facing case that we know of is "Protocol: class",
+      // but it might represent other situations internal to compiler
+      // or private to stdlib
       case RequirementReprKind::LayoutConstraint: {
+        // The left side of the layout constraint is represented as Subject.
+        // The right side of Layout constaint is Layout,
+        // which we think there is no need to rename
         FirstTypeRepresentation = WhereRequirement.getSubjectRepr();
         SecondTypeRepresentation = nullptr;
-        // The secont part of Layout constaint is Layout,
-        // which we think there is no need to rename
         break;
       }
     }
@@ -55,14 +75,26 @@ void WhereClauseParser::collectSymbolsFromDeclaration(
                                       GlobalCollectedSymbols &CollectedSymbols,
                                       Decl* Declaration) {
   if (Declaration != nullptr) {
+
+    // We need to cast to the right type because there's no one base type
+    // defining the `getTrailingWhereClause` function in all the supported
+    // cases.
     if (auto *Extension = dyn_cast<ExtensionDecl>(Declaration)) {
-      handleWhereClause(CollectedSymbols, Extension->getTrailingWhereClause());
+      handleWhereClause(CollectedSymbols,
+                        Extension->getTrailingWhereClause());
+
     } else if (auto *GenericType = dyn_cast<GenericTypeDecl>(Declaration)) {
-      handleWhereClause(CollectedSymbols, GenericType->getTrailingWhereClause());
+      handleWhereClause(CollectedSymbols,
+                        GenericType->getTrailingWhereClause());
+
     } else if (auto *Subscript = dyn_cast<SubscriptDecl>(Declaration)) {
-      handleWhereClause(CollectedSymbols, Subscript->getTrailingWhereClause());
+      handleWhereClause(CollectedSymbols,
+                        Subscript->getTrailingWhereClause());
+
     } else if (auto *AbstractFunc = dyn_cast<AbstractFunctionDecl>(Declaration)) {
-      handleWhereClause(CollectedSymbols, AbstractFunc->getTrailingWhereClause());
+      handleWhereClause(CollectedSymbols,
+                        AbstractFunc->getTrailingWhereClause());
+
     } else if (auto *Associated = dyn_cast<AssociatedTypeDecl>(Declaration)) {
       handleWhereClause(CollectedSymbols, Associated->getTrailingWhereClause());
     }
diff --git a/swift/test/Obfuscation/FullProcess/Closures/Expected/Closures.swift b/swift/test/Obfuscation/FullProcess/Closures/Expected/Closures.swift
index 6aaaf4b206d..83c5999f98f 100644
--- a/swift/test/Obfuscation/FullProcess/Closures/Expected/Closures.swift
+++ b/swift/test/Obfuscation/FullProcess/Closures/Expected/Closures.swift
@@ -35,15 +35,15 @@ class T1_ClosureTest {
   }
   
   func NF1_f0() -> Int {
-    let V1_local = 2
+    let local = 2
     
     self.V1_closureWeakSelf()
     
-    let V1_closureCapturingLocalVariable: () -> Int = {
-      return V1_local
+    let closureCapturingLocalVariable: () -> Int = {
+      return local
     }
     
-    return V1_closureCapturingLocalVariable()
+    return closureCapturingLocalVariable()
   }
   
   func NF1_f1(SP1_closure: (Int) -> (Int)) -> Int {
diff --git a/swift/test/Obfuscation/FullProcess/WhereClauses/Expected/WhereClauses.swift b/swift/test/Obfuscation/FullProcess/WhereClauses/Expected/WhereClauses.swift
index 24e5fbd6134..77689e53971 100644
--- a/swift/test/Obfuscation/FullProcess/WhereClauses/Expected/WhereClauses.swift
+++ b/swift/test/Obfuscation/FullProcess/WhereClauses/Expected/WhereClauses.swift
@@ -52,7 +52,7 @@ protocol T1_Container {
 extension T1_Container {
   subscript<Indices: Sequence>(indices: Indices) -> [Item]
     where Indices.Iterator.Element == T1_SampleProtocol2 {
-      let V1_result = [Item]()
-      return V1_result
+      let result = [Item]()
+      return result
   }
 }
diff --git a/swift/test/Obfuscation/SymbolExtractor/Inputs/ExpectedSymbols.json b/swift/test/Obfuscation/SymbolExtractor/Inputs/ExpectedSymbols.json
index f3adf0bff9b..7e0839678f4 100644
--- a/swift/test/Obfuscation/SymbolExtractor/Inputs/ExpectedSymbols.json
+++ b/swift/test/Obfuscation/SymbolExtractor/Inputs/ExpectedSymbols.json
@@ -36,48 +36,18 @@
       "module": "Foundation",
       "type": "type"
     },
-    {
-      "name": "ss",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.ss",
-      "module": "TestModuleName",
-      "type": "variable"
-    },
     {
       "name": "SampleStruct",
       "identifier": "module.TestModuleName.struct.SampleStruct",
       "module": "TestModuleName",
       "type": "type"
     },
-    {
-      "name": "ssei",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.ssei",
-      "module": "TestModuleName",
-      "type": "variable"
-    },
-    {
-      "name": "swi",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swi",
-      "module": "TestModuleName",
-      "type": "variable"
-    },
     {
       "name": "StructWithInit",
       "identifier": "module.TestModuleName.struct.StructWithInit",
       "module": "TestModuleName",
       "type": "type"
     },
-    {
-      "name": "swiei",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swiei",
-      "module": "TestModuleName",
-      "type": "variable"
-    },
-    {
-      "name": "swmi",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swmi",
-      "module": "TestModuleName",
-      "type": "variable"
-    },
     {
       "name": "property",
       "identifier": "module.TestModuleName.struct.StructWithMemberwiseInit.variable.property",
@@ -90,84 +60,24 @@
       "module": "TestModuleName",
       "type": "type"
     },
-    {
-      "name": "swmiei",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.swmiei",
-      "module": "TestModuleName",
-      "type": "variable"
-    },
-    {
-      "name": "sc",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.sc",
-      "module": "TestModuleName",
-      "type": "variable"
-    },
     {
       "name": "SampleClass",
       "identifier": "module.TestModuleName.class.SampleClass",
       "module": "TestModuleName",
       "type": "type"
     },
-    {
-      "name": "scei",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.scei",
-      "module": "TestModuleName",
-      "type": "variable"
-    },
-    {
-      "name": "cwi",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cwi",
-      "module": "TestModuleName",
-      "type": "variable"
-    },
     {
       "name": "ClassWithInit",
       "identifier": "module.TestModuleName.class.ClassWithInit",
       "module": "TestModuleName",
       "type": "type"
     },
-    {
-      "name": "cwiei",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cwiei",
-      "module": "TestModuleName",
-      "type": "variable"
-    },
-    {
-      "name": "vc1",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc1",
-      "module": "TestModuleName",
-      "type": "variable"
-    },
     {
       "name": "ViewController",
       "identifier": "module.TestModuleName.class.ViewController",
       "module": "TestModuleName",
       "type": "type"
     },
-    {
-      "name": "vc1ei",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc1ei",
-      "module": "TestModuleName",
-      "type": "variable"
-    },
-    {
-      "name": "vc2",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc2",
-      "module": "TestModuleName",
-      "type": "variable"
-    },
-    {
-      "name": "vc2ei",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.vc2ei",
-      "module": "TestModuleName",
-      "type": "variable"
-    },
-    {
-      "name": "cvc",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cvc",
-      "module": "TestModuleName",
-      "type": "variable"
-    },
     {
       "name": "number",
       "identifier": "module.TestModuleName.type.CustomInitViewController.method.init.signature.(Int) -> CustomInitViewController.parameter.position.list1_parameter0.single.number",
@@ -180,12 +90,6 @@
       "module": "TestModuleName",
       "type": "type"
     },
-    {
-      "name": "cvcei",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().variable.cvcei",
-      "module": "TestModuleName",
-      "type": "variable"
-    },
     {
       "name": "applicationWillTerminate",
       "identifier": "module.AppKit.protocol.method.applicationWillTerminate.signature.(Notification) -> ()",
-- 
2.17.1 (Apple Git-112)


From e9995a64a8c4214ad75aa92f96503cfff9217b83 Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Thu, 1 Mar 2018 18:27:30 +0100
Subject: [PATCH 107/138] Integration tests for enum and switch renaming

Reviewers: krzysztof.siejkowski, michal.zielinski

Reviewed By: krzysztof.siejkowski, michal.zielinski

Subscribers: michal.zielinski, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2865
---
 Documentation/ThingsThatAreNotObfuscated.md   |  4 +++-
 .../FullProcess/Types/Expected/Types.swift    | 21 +++++++++++++++++++
 .../Obfuscation/FullProcess/Types/Types.swift | 21 +++++++++++++++++++
 .../Expected/UnsupportedTypes.swift           | 10 +++++++++
 .../UnsupportedTypes/UnsupportedTypes.swift   | 10 +++++++++
 5 files changed, 65 insertions(+), 1 deletion(-)

diff --git a/Documentation/ThingsThatAreNotObfuscated.md b/Documentation/ThingsThatAreNotObfuscated.md
index 52d1846d19a..e54d6b8dc9b 100644
--- a/Documentation/ThingsThatAreNotObfuscated.md
+++ b/Documentation/ThingsThatAreNotObfuscated.md
@@ -7,7 +7,9 @@ These features are:
   - closure capture list elements
   - associated types
   - type aliases
-  - enum constants
+  - enum constants (raw values)
+  - enum case names
+  - switch case value bindings
   - generic parameters
 
 None of them is visible in the compiled binary. For example local variables are not included in the [symbol table](https://en.wikipedia.org/wiki/Symbol_table). They are kept on [stack](https://en.wikipedia.org/wiki/Call_stack) or in [registers](https://en.wikipedia.org/wiki/Processor_register) depending on how compiler optimized the code. You may be now wondering - how the debugger know the names of local variables? It uses special debug informations that are included in the compiled binary when it's compiled in "debug mode". In release builds these special debug informations are stripped off.
diff --git a/swift/test/Obfuscation/FullProcess/Types/Expected/Types.swift b/swift/test/Obfuscation/FullProcess/Types/Expected/Types.swift
index d2fbc3b9b0d..441873a4c29 100644
--- a/swift/test/Obfuscation/FullProcess/Types/Expected/Types.swift
+++ b/swift/test/Obfuscation/FullProcess/Types/Expected/Types.swift
@@ -68,3 +68,24 @@ extension NSString: T1_Proto {}
 extension T1_Proto where Self: NSString {
   func NF1_hello() {}
 }
+
+// enum
+enum T1_SampleEnum: Int {
+  case case1, case2
+}
+
+let _ = T1_SampleEnum.case1
+let _ = T1_SampleEnum(rawValue: 1)
+
+enum T1_EnumWithUnnamedAssoc {
+  case case1(Int, String)
+}
+
+let V1_test: T1_EnumWithUnnamedAssoc = .case1(0, "")
+
+switch V1_test {
+  // variables created with value binding doesn't have to be renamed
+  case .case1(let bound1, let bound2):
+    print(bound1)
+    print(bound2)
+}
diff --git a/swift/test/Obfuscation/FullProcess/Types/Types.swift b/swift/test/Obfuscation/FullProcess/Types/Types.swift
index c2e50c32642..24f38e16ac2 100644
--- a/swift/test/Obfuscation/FullProcess/Types/Types.swift
+++ b/swift/test/Obfuscation/FullProcess/Types/Types.swift
@@ -69,3 +69,24 @@ extension NSString: Proto {}
 extension Proto where Self: NSString {
   func hello() {}
 }
+
+// enum
+enum SampleEnum: Int {
+  case case1, case2
+}
+
+let _ = SampleEnum.case1
+let _ = SampleEnum(rawValue: 1)
+
+enum EnumWithUnnamedAssoc {
+  case case1(Int, String)
+}
+
+let test: EnumWithUnnamedAssoc = .case1(0, "")
+
+switch test {
+  // variables created with value binding doesn't have to be renamed
+  case .case1(let bound1, let bound2):
+    print(bound1)
+    print(bound2)
+}
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedTypes/Expected/UnsupportedTypes.swift b/swift/test/Obfuscation/FullProcess/UnsupportedTypes/Expected/UnsupportedTypes.swift
index e2f3c42e83c..8bd1729c8e7 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedTypes/Expected/UnsupportedTypes.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedTypes/Expected/UnsupportedTypes.swift
@@ -6,3 +6,13 @@ class T1_`BackticksName` {}
 class T1_`BackticksNameGeneric`<`BackticksGenericParam`> {
   class T1_`BackticksInsideBackticksGeneric`: T1_`BackticksNameGeneric`<T1_`BackticksNameGeneric`<T1_`BackticksName`>> {}
 }
+
+// enum associated values should be renamed
+
+enum T1_EnumWithAssoc {
+  case1(V1_assoc1: Int, V1_assoc2: String)
+  case2(V2_assoc1: Int, V2_assoc2: String)
+}
+
+let _ = T1_EnumWithAssoc.case1(V1_assoc1: 0, V1_assoc2: "")
+let _ = T1_EnumWithAssoc.case2(V2_assoc1: 0, V2_assoc2: "")
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedTypes/UnsupportedTypes.swift b/swift/test/Obfuscation/FullProcess/UnsupportedTypes/UnsupportedTypes.swift
index 6a51f9bc379..7333bf20320 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedTypes/UnsupportedTypes.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedTypes/UnsupportedTypes.swift
@@ -9,3 +9,13 @@ class `BackticksName` {}
 class `BackticksNameGeneric`<`BackticksGenericParam`> {
   class `BackticksInsideBackticksGeneric`: `BackticksNameGeneric`<`BackticksNameGeneric`<`BackticksName`>> {}
 }
+
+// enum associated values should be renamed
+
+enum EnumWithAssoc {
+  case1(assoc1: Int, assoc2: String)
+  case2(assoc1: Int, assoc2: String)
+}
+
+let _ = EnumWithAssoc.case1(assoc1: 0, assoc2: "")
+let _ = EnumWithAssoc.case2(assoc1: 0, assoc2: "")
\ No newline at end of file
-- 
2.17.1 (Apple Git-112)


From 8d39c8d03acde350e980ffc550fbfd1528d989d0 Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Fri, 2 Mar 2018 14:05:24 +0100
Subject: [PATCH 108/138] new unsupported constructs from dropnote

Reviewers: jerzy.kleszcz, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2867
---
 .../Expected/FunctionParameterNames.swift     |   1 +
 .../Expected/UnsupportedDropnote.swift        | 183 +++++++++++++++++-
 .../UnsupportedDropnote.swift                 | 183 +++++++++++++++++-
 3 files changed, 353 insertions(+), 14 deletions(-)

diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
index 3646ec4962c..27f3487fce5 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
@@ -143,3 +143,4 @@ class T1_Foo {
 
 let V1_FooObj1 = T1_Foo(SP1_FieldA: "test")
 let V1_FooObj2 = T1_Foo(SP1_FieldA: "test", SP1_FieldB: nil)
+
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
index cbe56086e88..e4aa6c2acf1 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
@@ -1,4 +1,7 @@
-import Foundation
+
+
+import AppKit
+
 
 class T1_Test {
   func NF1_testFunc() {}
@@ -13,11 +16,177 @@ final class T1_DebugBlock {
   }
 }
 
-//protocol stuff
-protocol T1_Proto {
-  func NF1_hello()
+// fun with protocols and extensions
+struct T1_TestStruct {}
+
+protocol T1_ParentProtocol {
+  associatedtype Fuzz
+  associatedtype Bazz
+  associatedtype Gazz
+  
+  func NF1_foo(_ IP1_indexPath: Int) -> String
+  func NF1_bar(_ IP1_fuzz: Fuzz, EP1_extBazz IP1_bazz: Bazz, EP1_extGazz IP1_gazz: Gazz, EP1_atIndexPath IP2_indexPath: Int)
+}
+
+protocol T1_ChildProtocol: T1_ParentProtocol {
+  var V1_items: [[Gazz]] { get }
+}
+
+
+protocol T1_ChildProtocol2: T1_ChildProtocol { }
+
+
+final class T1_TestClass {
+  
+  var V1_items: [[Gazz]] = [[
+    
+    ]]
+}
+
+
+extension T1_TestClass: T1_ChildProtocol2 {
+  
+  func NF1_foo(_ IP1_indexPath: Int) -> String { return "" }
+  
+  func NF1_bar(_ IP1_fuzz: String, EP1_extBazz IP1_bazz: T1_TestStruct, EP1_extGazz IP1_gazz: T1_Test, EP1_atIndexPath IP2_indexPath: Int) {}
+}
+
+// overridden method parameters
+
+final class T1_TestController: NSViewController {
+  
+  override func viewDidLoad() {
+    super.viewDidLoad()
+  }
+  
+  override func prepare(for segue: NSStoryboardSegue, sender: Any?) {
+    super.prepare(for: segue, sender)
+  }
+}
+
+// protocol vars in extensions
+
+class T1_TestWithBool {
+  var V1_isFoo = false
+}
+
+func NF1_foo(SP1_boolParam: Bool) {}
+
+protocol T1_Activable {
+  var V1_active: Bool { get set }
+}
+
+extension T1_Activable where Self: T1_TestWithBool {
+  var V1_active: Bool {
+    get {
+      return V1_isFoo
+    }
+    set(activeValue) {
+      NF1_foo(activeValue)
+    }
+  }
 }
-extension NSString: T1_Proto {}
-extension T1_Proto where Self: NSString {
-  func NF1_hello() {}
+
+// non working if case cast
+
+class T1_SomeGenericClass<Param> {}
+
+enum T1_RandomEnum {
+  case Foo
 }
+
+func NF1_someRandomFunc() -> T1_RandomEnum { return T1_RandomEnum.Foo }
+
+final class T1_TestController2: NSViewController {
+  
+  override func viewDidLoad() {
+    super.viewDidLoad()
+  }
+  
+  override func prepare(for segue: NSStoryboardSegue, sender: Any?) {
+    if case .Foo = NF1_someRandomFunc() , sender is T1_SomeGenericClass<String> {
+      let V1_casted = sender as! T1_SomeGenericClass<String>
+    }
+  }
+}
+
+// for each stuff
+
+final class T1_ForEachController: NSViewController {
+  
+  var V1_unitsSegmentedControl: NSSegmentedControl!
+  
+  var V1_titles: [String] = []
+  
+  fileprivate func NF1_buggyFunc() {
+    V1_titles.enumerated().map {
+      index, title in (title, index)
+      }.forEach(V1_unitsSegmentedControl.setLabel(_:forSegment:))
+    
+    V1_unitsSegmentedControl.accessibilityHint = ""
+  }
+}
+
+// protocol functions strikes back
+
+class T1_NotWorkingParent {
+  func NF1_addSearchItem() {
+  }
+}
+
+final class T1_NextNotWorking: T1_NotWorkingParent {
+  
+  override func NF1_addSearchItem() {
+    let inserter = T1_ItemInserter()
+    do {
+      let coffee = try inserter.NF1_insertEntityWithName("")
+      
+    } catch {
+      
+    }
+  }
+}
+
+protocol T1_ItemInserterType {
+  associatedtype Entity
+  func NF1_insertEntityWithName(_ IP1_name: String) throws -> Entity
+}
+
+struct T1_ItemInserter: T1_ItemInserterType {
+  
+  func NF1_insertEntityWithName(_ IP1_name: String) throws -> String {
+    return ""
+  }
+}
+
+// nested funcs stuff
+
+class T1_NestedFuncs {
+  
+  fileprivate func NF1_broken() -> [Int] {
+    
+    func NF1_makeInt(EP1_withIdentifier IP1_identifier: String, SP1_model: Int) -> Int {
+      return 42
+    }
+    
+    var ints = [Int]()
+    ints.append(NF1_makeInt(EP1_withIdentifier: "", SP1_model: 42))
+    ints.append(NF1_makeInt(EP1_withIdentifier: "", SP1_model: 42))
+    return ints
+  }
+}
+
+// mocking trick
+
+protocol KeyValueStoreType {
+  func object(forKey defaultName: String) -> Any?
+  func set(_ value: Any?, forKey defaultName: String)
+  func removeObject(forKey defaultName: String)
+  func synchronize() -> Bool
+}
+
+extension UserDefaults: KeyValueStoreType {
+  
+}
+
+
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
index 2a299a74b83..c76399d8d74 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
@@ -1,6 +1,8 @@
 //XFAIL: *
 //RUN: %target-prepare-obfuscation-for-file "UnsupportedDropnote" %target-run-full-obfuscation
-import Foundation
+
+
+import AppKit
 
 class Test {
   func testFunc() {}
@@ -15,11 +17,178 @@ final class DebugBlock {
   }
 }
 
-//override init
-class Parent{
-  init(p1: String, p2: Int) {}
+
+// fun with protocols and extensions
+struct TestStruct {}
+
+protocol ParentProtocol {
+  associatedtype Fuzz
+  associatedtype Bazz
+  associatedtype Gazz
+  
+  func foo(_ indexPath: Int) -> String
+  func bar(_ fuzz: Fuzz, extBazz bazz: Bazz, extGazz gazz: Gazz, atIndexPath indexPath: Int)
+}
+
+protocol ChildProtocol: ParentProtocol {
+  var items: [[Gazz]] { get }
+}
+
+
+protocol ChildProtocol2: ChildProtocol { }
+
+
+final class TestClass {
+  
+  var items: [[Gazz]] = [[
+    
+    ]]
+}
+
+
+extension TestClass: ChildProtocol2 {
+  
+  func foo(_ indexPath: Int) -> String { return "" }
+  
+  func bar(_ fuzz: String, extBazz bazz: TestStruct, extGazz gazz: Test, atIndexPath indexPath: Int) {}
+}
+
+// overridden method parameters
+
+final class TestController: NSViewController {
+  
+  override func viewDidLoad() {
+    super.viewDidLoad()
+  }
+  
+  override func prepare(for segue: NSStoryboardSegue, sender: Any?) {
+    super.prepare(for: segue, sender)
+  }
+}
+
+// protocol vars in extensions
+
+class TestWithBool {
+  var isFoo = false
+}
+
+func foo(boolParam: Bool) {}
+
+protocol Activable {
+  var active: Bool { get set }
+}
+
+extension Activable where Self: TestWithBool {
+  var active: Bool {
+    get {
+      return isFoo
+    }
+    set(activeValue) {
+      foo(activeValue)
+    }
+  }
 }
-class Child: Parent {
-  override init(p1: String, p2: Int){}
+
+// non working if case cast
+
+class SomeGenericClass<Param> {}
+
+enum RandomEnum {
+  case Foo
 }
-let c = Child(p1: "p1", p2:42)
+
+func someRandomFunc() -> RandomEnum { return RandomEnum.Foo }
+
+final class TestController2: NSViewController {
+  
+  override func viewDidLoad() {
+    super.viewDidLoad()
+  }
+  
+  override func prepare(for segue: NSStoryboardSegue, sender: Any?) {
+    if case .Foo = someRandomFunc() , sender is SomeGenericClass<String> {
+      let casted = sender as! SomeGenericClass<String>
+    }
+  }
+}
+
+// for each stuff
+
+final class ForEachController: NSViewController {
+  
+  var unitsSegmentedControl: NSSegmentedControl!
+  
+  var titles: [String] = []
+  
+  fileprivate func buggyFunc() {
+    titles.enumerated().map {
+      index, title in (title, index)
+      }.forEach(unitsSegmentedControl.setLabel(_:forSegment:))
+    
+    unitsSegmentedControl.accessibilityHint = ""
+  }
+}
+
+// protocol functions strikes back
+
+class NotWorkingParent {
+  func addSearchItem() {
+  }
+}
+
+final class NextNotWorking: NotWorkingParent {
+  
+  override func addSearchItem() {
+    let inserter = ItemInserter()
+    do {
+      let coffee = try inserter.insertEntityWithName("")
+      
+    } catch {
+      
+    }
+  }
+}
+
+protocol ItemInserterType {
+  associatedtype Entity
+  func insertEntityWithName(_ name: String) throws -> Entity
+}
+
+struct ItemInserter: ItemInserterType {
+  
+  func insertEntityWithName(_ name: String) throws -> String {
+    return ""
+  }
+}
+
+// nested funcs stuff
+
+class NestedFuncs {
+  
+  fileprivate func broken() -> [Int] {
+    
+    func makeInt(withIdentifier identifier: String, model: Int) -> Int {
+      return 42
+    }
+    
+    var ints = [Int]()
+    ints.append(makeInt(withIdentifier: "", model: 42))
+    ints.append(makeInt(withIdentifier: "", model: 42))
+    return ints
+  }
+}
+
+// mocking trick
+
+protocol KeyValueStoreType {
+  func object(forKey defaultName: String) -> Any?
+  func set(_ value: Any?, forKey defaultName: String)
+  func removeObject(forKey defaultName: String)
+  func synchronize() -> Bool
+}
+
+extension UserDefaults: KeyValueStoreType {
+  
+}
+
+
-- 
2.17.1 (Apple Git-112)


From cd47e813b2b73aa0ca1a84bc3bc3d99d4eaa06db Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Mon, 5 Mar 2018 12:42:25 +0100
Subject: [PATCH 109/138] Renaming vars inside protocol extensions

Summary:
Fixed renaming custom params in setters
Renaming params of methods called from within setters

Reviewers: krzysztof.siejkowski, jerzy.kleszcz

Reviewed By: krzysztof.siejkowski, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2868
---
 swift/lib/Obfuscation/ExpressionParser.cpp    |  8 ++
 .../Obfuscation/FunctionDeclarationParser.cpp | 79 ++++++++++---------
 .../Obfuscation/VariableDeclarationParser.cpp | 12 ++-
 .../Functions/Expected/Functions.swift        | 16 ++++
 .../FullProcess/Functions/Functions.swift     | 16 ++++
 .../Properties/Expected/Properties.swift      | 24 +++++-
 .../FullProcess/Properties/Properties.swift   | 22 ++++++
 .../Expected/UnsupportedDropnote.swift        | 40 ----------
 .../UnsupportedDropnote.swift                 | 40 ----------
 9 files changed, 137 insertions(+), 120 deletions(-)

diff --git a/swift/lib/Obfuscation/ExpressionParser.cpp b/swift/lib/Obfuscation/ExpressionParser.cpp
index 68dd449b234..42eda6acb86 100644
--- a/swift/lib/Obfuscation/ExpressionParser.cpp
+++ b/swift/lib/Obfuscation/ExpressionParser.cpp
@@ -42,6 +42,14 @@ declarationOfFunctionCalledInExpression(CallExpr *CallExpression) {
         return FunctionDeclaration;
       }
     }
+  } else if (auto *Expression = dyn_cast<Expr>(CallFn)) {
+    // This branch is executed for example when
+    // a function is being called inside set {} block
+    auto *Decl = Expression->getReferencedDecl().getDecl();
+    
+    if (auto *FunctionDeclaration = dyn_cast<AbstractFunctionDecl>(Decl)) {
+      return FunctionDeclaration;
+    }
   }
   return stringError("Cannot found supported Call Expression subtree pattern");
 }
diff --git a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
index 775ed5143b3..f8a31f05b6f 100644
--- a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
@@ -10,17 +10,18 @@ namespace swift {
 namespace obfuscation {
 
 llvm::Error isDeclarationSupported(const FuncDecl* Declaration) {
-  if (Declaration->isGetterOrSetter()) {
-    return stringError("don't support getters and setters right now, since "
+  if (Declaration->isGetter()) {
+    return stringError("don't support getters since "
                        "it's the computed property name that should be "
                        "obfuscated");
   }
-  if (Declaration->isAccessor() || Declaration->isObservingAccessor()) {
+  if (!Declaration->isSetter()
+        && (Declaration->isAccessor() || Declaration->isObservingAccessor())) {
     return stringError("don't support property accessors right now");
   }
   return llvm::Error::success();
 }
-
+  
 std::string functionSignature(const AbstractFunctionDecl *Declaration) {
   // The signature is available via different getters depending on whether
   // it is a method or a free function
@@ -249,47 +250,51 @@ SymbolsOrError parse(const ConstructorDecl* Declaration,
 SymbolsOrError parse(GlobalCollectedSymbols &CollectedSymbols,
                      const FuncDecl* Declaration,
                      CharSourceRange Range) {
-  
-  if (auto Error = isDeclarationSupported(Declaration)) {
-    return std::move(Error);
-  }
 
   std::vector<SymbolWithRange> Symbols;
 
-  // Create the symbol for function
-  if (Declaration->getOverriddenDecl() != nullptr) {
-    // Overriden declaration must be treated separately because
-    // we mustn't rename function that overrides function from different module
-    auto SymbolOrError =
-      parseOverridenDeclaration(CollectedSymbols,
-                                Declaration,
-                                moduleName(Declaration),
-                                Range);
-    if (auto Error = SymbolOrError.takeError()) {
-      return std::move(Error);
-    }
-    
-    auto FunctionNameSymbol = SymbolOrError.get();
+  // function name should be renamed only if it's not a setter
+  if(!Declaration->isSetter()) {
     
-    // If overridden method also satisfies protocol requirements
-    // we must update symbol identifier for protocol's method to be the same
-    // as symbol identifier of the overridden function. Otherwise function
-    // inside protocol would be renamed differently and our class
-    // will no longer conform to that protocol.
-    auto HandledOrError = handleSatisfiedProtocolRequirements(
+    // Create the symbol for function
+    if (Declaration->getOverriddenDecl() != nullptr) {
+      // Overriden declaration must be treated separately because we mustn't
+      // rename function that overrides function from different module
+      auto SymbolOrError =
+        parseOverridenDeclaration(CollectedSymbols,
+                                  Declaration,
+                                  moduleName(Declaration),
+                                  Range);
+      if (auto Error = SymbolOrError.takeError()) {
+        return std::move(Error);
+      }
+      
+      auto FunctionNameSymbol = SymbolOrError.get();
+      
+      // If overridden method also satisfies protocol requirements
+      // we must update symbol identifier for protocol's method to be the same
+      // as symbol identifier of the overridden function. Otherwise function
+      // inside protocol would be renamed differently and our class
+      // will no longer conform to that protocol.
+      auto HandledOrError = handleSatisfiedProtocolRequirements(
                                                             CollectedSymbols,
                                                             FunctionNameSymbol,
                                                             Declaration);
-    
-    if (auto Error = HandledOrError.takeError()) {
-      return std::move(Error);
+      
+      if (auto Error = HandledOrError.takeError()) {
+        return std::move(Error);
+      }
+      
+      Symbols.push_back(FunctionNameSymbol);
+    } else {
+      Symbols.push_back(getFunctionSymbol(CollectedSymbols,
+                                          Declaration,
+                                          Range));
     }
-    
-    Symbols.push_back(FunctionNameSymbol);
-  } else {
-    Symbols.push_back(getFunctionSymbol(CollectedSymbols,
-                                        Declaration,
-                                        Range));
+  }
+  
+  if (auto Error = isDeclarationSupported(Declaration)) {
+    return std::move(Error);
   }
 
   // Create the symbols for function parameters
diff --git a/swift/lib/Obfuscation/VariableDeclarationParser.cpp b/swift/lib/Obfuscation/VariableDeclarationParser.cpp
index b990ca0e5d4..4c36e74e3e2 100644
--- a/swift/lib/Obfuscation/VariableDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/VariableDeclarationParser.cpp
@@ -39,8 +39,16 @@ variableIdentifierPartsFromContext(const VarDecl *Declaration) {
   std::vector<std::string> Parts;
   
   auto ProtocolRequirements = Declaration->getSatisfiedProtocolRequirements();
-  auto *ProtocolDeclaration =
-    dyn_cast<ProtocolDecl>(Declaration->getDeclContext());
+  
+  ProtocolDecl *ProtocolDeclaration = nullptr;
+  if (auto *ExtensionDeclaration =
+                       dyn_cast<ExtensionDecl>(Declaration->getDeclContext())) {
+    
+    ProtocolDeclaration = dyn_cast<ProtocolDecl>(
+               ExtensionDeclaration->getAsProtocolOrProtocolExtensionContext());
+  } else {
+    ProtocolDeclaration = dyn_cast<ProtocolDecl>(Declaration->getDeclContext());
+  }
 
   // TODO: for now, we're renaming properties from different protocols
   // but with the same name to the same obfuscated name.
diff --git a/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift b/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift
index cd717d463c8..017a72af76c 100644
--- a/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift
+++ b/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift
@@ -171,3 +171,19 @@ V1_p2.NF1_foo(EP1_a: T1_Test())
 
 let V1_c2 = T1_Child2()
 V1_c2.NF1_foo(EP1_a: T1_Test())
+
+// parameter names when calling nested functions
+class T1_NestedFuncs {
+  
+  fileprivate func NF1_broken() -> [Int] {
+    
+    func NF1_makeInt(EP1_withIdentifier IP1_identifier: String, SP1_model: Int) -> Int {
+      return 42
+    }
+    
+    var ints = [Int]()
+    ints.append(NF1_makeInt(EP1_withIdentifier: "", SP1_model: 42))
+    ints.append(NF1_makeInt(EP1_withIdentifier: "", SP1_model: 42))
+    return ints
+  }
+}
diff --git a/swift/test/Obfuscation/FullProcess/Functions/Functions.swift b/swift/test/Obfuscation/FullProcess/Functions/Functions.swift
index dc8bf466b5c..0c19d645d00 100644
--- a/swift/test/Obfuscation/FullProcess/Functions/Functions.swift
+++ b/swift/test/Obfuscation/FullProcess/Functions/Functions.swift
@@ -172,3 +172,19 @@ p2.foo(a: Test())
 
 let c2 = Child2()
 c2.foo(a: Test())
+
+// parameter names when calling nested functions
+class NestedFuncs {
+  
+  fileprivate func broken() -> [Int] {
+    
+    func makeInt(withIdentifier identifier: String, model: Int) -> Int {
+      return 42
+    }
+    
+    var ints = [Int]()
+    ints.append(makeInt(withIdentifier: "", model: 42))
+    ints.append(makeInt(withIdentifier: "", model: 42))
+    return ints
+  }
+}
diff --git a/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift b/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift
index 30d2c6af4f2..854524dcf11 100644
--- a/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift
+++ b/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift
@@ -97,13 +97,35 @@ struct T1_ImplicitSetter {
   }
 }
 
+// protocol vars in extensions and explicit setter
+class T1_TestWithBool {
+  var V1_isFoo = false
+}
+
+func NF2_foo(SP1_boolParam: Bool) {}
+
+protocol T1_Activable {
+  var V1_active: Bool { get set }
+}
+
+extension T1_Activable where Self: T1_TestWithBool {
+  var V1_active: Bool {
+    get {
+      return V1_isFoo
+    }
+    set(SP1_activeValue) {
+      NF2_foo(SP1_boolParam: SP1_activeValue)
+    }
+  }
+}
+
 class T1_SampleClass {
   var V1_prop: String = ""
 }
 
 struct T1_SampleStruct {
   var V1_sample = T1_SampleClass()
-  func NF2_foo() {
+  func NF3_foo() {
     V1_sample.V1_prop = "42"
   }
 }
diff --git a/swift/test/Obfuscation/FullProcess/Properties/Properties.swift b/swift/test/Obfuscation/FullProcess/Properties/Properties.swift
index 4a63a1f7809..d461ee2c9e6 100644
--- a/swift/test/Obfuscation/FullProcess/Properties/Properties.swift
+++ b/swift/test/Obfuscation/FullProcess/Properties/Properties.swift
@@ -99,6 +99,28 @@ struct ImplicitSetter {
   }
 }
 
+// protocol vars in extensions and explicit setter
+class TestWithBool {
+  var isFoo = false
+}
+
+func foo(boolParam: Bool) {}
+
+protocol Activable {
+  var active: Bool { get set }
+}
+
+extension Activable where Self: TestWithBool {
+  var active: Bool {
+    get {
+      return isFoo
+    }
+    set(activeValue) {
+      foo(boolParam: activeValue)
+    }
+  }
+}
+
 class SampleClass {
   var prop: String = ""
 }
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
index e4aa6c2acf1..762003bc22e 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
@@ -64,29 +64,6 @@ final class T1_TestController: NSViewController {
   }
 }
 
-// protocol vars in extensions
-
-class T1_TestWithBool {
-  var V1_isFoo = false
-}
-
-func NF1_foo(SP1_boolParam: Bool) {}
-
-protocol T1_Activable {
-  var V1_active: Bool { get set }
-}
-
-extension T1_Activable where Self: T1_TestWithBool {
-  var V1_active: Bool {
-    get {
-      return V1_isFoo
-    }
-    set(activeValue) {
-      NF1_foo(activeValue)
-    }
-  }
-}
-
 // non working if case cast
 
 class T1_SomeGenericClass<Param> {}
@@ -159,23 +136,6 @@ struct T1_ItemInserter: T1_ItemInserterType {
   }
 }
 
-// nested funcs stuff
-
-class T1_NestedFuncs {
-  
-  fileprivate func NF1_broken() -> [Int] {
-    
-    func NF1_makeInt(EP1_withIdentifier IP1_identifier: String, SP1_model: Int) -> Int {
-      return 42
-    }
-    
-    var ints = [Int]()
-    ints.append(NF1_makeInt(EP1_withIdentifier: "", SP1_model: 42))
-    ints.append(NF1_makeInt(EP1_withIdentifier: "", SP1_model: 42))
-    return ints
-  }
-}
-
 // mocking trick
 
 protocol KeyValueStoreType {
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
index c76399d8d74..aa4d405ddc3 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
@@ -66,29 +66,6 @@ final class TestController: NSViewController {
   }
 }
 
-// protocol vars in extensions
-
-class TestWithBool {
-  var isFoo = false
-}
-
-func foo(boolParam: Bool) {}
-
-protocol Activable {
-  var active: Bool { get set }
-}
-
-extension Activable where Self: TestWithBool {
-  var active: Bool {
-    get {
-      return isFoo
-    }
-    set(activeValue) {
-      foo(activeValue)
-    }
-  }
-}
-
 // non working if case cast
 
 class SomeGenericClass<Param> {}
@@ -161,23 +138,6 @@ struct ItemInserter: ItemInserterType {
   }
 }
 
-// nested funcs stuff
-
-class NestedFuncs {
-  
-  fileprivate func broken() -> [Int] {
-    
-    func makeInt(withIdentifier identifier: String, model: Int) -> Int {
-      return 42
-    }
-    
-    var ints = [Int]()
-    ints.append(makeInt(withIdentifier: "", model: 42))
-    ints.append(makeInt(withIdentifier: "", model: 42))
-    return ints
-  }
-}
-
 // mocking trick
 
 protocol KeyValueStoreType {
-- 
2.17.1 (Apple Git-112)


From 578794b249b8c5f467e68200c09add21201a5440 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Tue, 6 Mar 2018 12:08:48 +0100
Subject: [PATCH 110/138] Added support for renaming methods using assiciated
 types in signature

Reviewers: michal.zielinski, jerzy.kleszcz

Reviewed By: michal.zielinski, jerzy.kleszcz

Subscribers: michal.zielinski, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2869
---
 .../Obfuscation/FunctionDeclarationParser.cpp | 99 +++++++++++++++++--
 .../Expected/FunctionParameterNames.swift     | 10 +-
 .../Functions/Expected/Functions.swift        | 97 ++++++++++++++++++
 .../FullProcess/Functions/Functions.swift     | 98 ++++++++++++++++++
 .../Expected/UnsupportedDropnote.swift        | 67 -------------
 .../UnsupportedDropnote.swift                 | 68 -------------
 .../Inputs/ExpectedSymbols.json               | 12 +--
 7 files changed, 295 insertions(+), 156 deletions(-)

diff --git a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
index f8a31f05b6f..c4e63521cab 100644
--- a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
@@ -4,6 +4,7 @@
 #include "swift/Obfuscation/DeclarationParsingUtils.h"
 
 #include <string>
+#include <sstream>
 #include <vector>
 
 namespace swift {
@@ -21,16 +22,87 @@ llvm::Error isDeclarationSupported(const FuncDecl* Declaration) {
   }
   return llvm::Error::success();
 }
-  
+
+void extractSignaturePart(const Type &Result,
+                          llvm::raw_string_ostream &StringStream,
+                          std::string Fallback) {
+
+  if (auto *ResultTuple = Result->getAs<TupleType>()) {
+    auto Results = ResultTuple->getElements();
+    if (Results.empty()) {
+      StringStream << Fallback;
+    } else {
+      StringStream << "(";
+      for (auto Argument = Results.begin();
+           Argument != Results.end();
+           ++Argument) {
+        auto Name = Argument->getName().str();
+        if (!Name.empty()) {
+          StringStream << Name << ": ";
+        }
+        if (Argument->getType()->getAs<DependentMemberType>() != nullptr) {
+          // It the signature uses the associated type, we're dropping
+          // the information about it. We don't use it's name nor information
+          // where it comes from. We do it to handle the edga case of
+          // single implementation method fulfilling two functions
+          // with associated types from two different protocols.
+          StringStream << "AssociatedType";
+        } else {
+          StringStream << Argument->getType().getString();
+        }
+        if (Argument != Results.drop_back().end()) {
+          StringStream << ", ";
+        }
+      }
+      StringStream << ")";
+    }
+  } else {
+    StringStream << Result.getString();
+  }
+}
+
+std::string extractSignature(const AbstractFunctionDecl *Declaration,
+                             std::string Fallback) {
+  if (!Declaration->hasInterfaceType()) { return Fallback; }
+
+  if (auto *InstanceFunction =
+        Declaration->getInterfaceType()->getAs<AnyFunctionType>()) {
+
+    AnyFunctionType *FunctionToParse = InstanceFunction;
+
+    if (auto *Function =
+          InstanceFunction->getResult()->getAs<AnyFunctionType>()) {
+      FunctionToParse = Function;
+    }
+
+    std::string Signature;
+    llvm::raw_string_ostream StringStream(Signature);
+    extractSignaturePart(FunctionToParse->getInput(), StringStream, "()");
+    StringStream << " -> ";
+    extractSignaturePart(FunctionToParse->getResult(), StringStream, "Void");
+    return StringStream.str();
+
+  } else {
+
+    return Fallback;
+
+  }
+}
+
 std::string functionSignature(const AbstractFunctionDecl *Declaration) {
   // The signature is available via different getters depending on whether
   // it is a method or a free function
-  std::string Interface;
+  std::string Fallback;
+
+  if (!Declaration->hasInterfaceType()) { return "no_signature"; }
+
   if (Declaration->getDeclContext()->isTypeContext()) {
-    Interface = Declaration->getMethodInterfaceType().getString();
+    Fallback = Declaration->getMethodInterfaceType().getString();
   } else {
-    Interface = Declaration->getInterfaceType().getString();
+    Fallback = Declaration->getInterfaceType().getString();
   }
+
+  auto Interface = extractSignature(Declaration, Fallback);
   return "signature." + Interface;
 }
 
@@ -72,6 +144,8 @@ functionIdentifierParts(const AbstractFunctionDecl *Declaration) {
       }
       Parts.push_back("method." + SymbolName);
     }
+
+    Parts.push_back(functionSignature(Declaration));
     
   } else {
     // This logic applies to function that
@@ -86,16 +160,16 @@ functionIdentifierParts(const AbstractFunctionDecl *Declaration) {
     //       there is no override relationship between the A.a() and B.a() in
     //       protocols. it's just a name that's the same.
     //       this simplified handling should be improved in the future.
-    ModuleNameAndParts ModuleNameAndParts;
+    ValueDecl *BaseDeclaration;
     if (SatisfiesProtocol) {
       // TODO: If the function satisfies multiple protocols, we're using
       // the module name from the first of the protocols. This may lead
       // to errors and should be changed in the future.
-      ModuleNameAndParts =
-        moduleNameAndIdentifierParts(ProtocolRequirements.front());
+      BaseDeclaration = ProtocolRequirements.front();
     } else {
-      ModuleNameAndParts = moduleNameAndIdentifierParts(ProtocolDeclaration);
+      BaseDeclaration = ProtocolDeclaration;
     }
+    auto ModuleNameAndParts = moduleNameAndIdentifierParts(BaseDeclaration);
     ModuleName = ModuleNameAndParts.first;
     Parts = ModuleNameAndParts.second;
     
@@ -104,10 +178,15 @@ functionIdentifierParts(const AbstractFunctionDecl *Declaration) {
       Parts.push_back("static");
     }
     Parts.push_back("method." + SymbolName);
+
+    if (auto *ProtocolFunctionDeclaration =
+        dyn_cast<AbstractFunctionDecl>(BaseDeclaration)) {
+      Parts.push_back(functionSignature(ProtocolFunctionDeclaration));
+    } else {
+      Parts.push_back(functionSignature(Declaration));
+    }
   }
   
-  Parts.push_back(functionSignature(Declaration));
-  
   return std::make_pair(ModuleName, Parts);
 }
 
diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
index 27f3487fce5..8f90cab8953 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
@@ -83,7 +83,7 @@ class T1_Parent{
   init(SP1_p1: String, SP1_p2: Int) {}
   init(EP3_foo IP2_foo:Int, EP4_foo IP2_bar: T1_SampleClass) { }
   init(EP1_extp1 IP1_p1: String, EP1_extp2 IP1_p2: Int) {}
-  init(_ IP1_p1: String, EP1_extp IP1_p2: Int) {}
+  init(_ IP2_p1: String, EP1_extp IP2_p2: Int) {}
 }
 class T1_Child: T1_Parent {
   override init(SP1_p1: String, SP1_p2: Int) {
@@ -92,11 +92,11 @@ class T1_Child: T1_Parent {
   override init(EP3_foo IP3_foo:Int, EP4_foo IP3_bar: T1_SampleClass) {
     super.init(EP3_foo: IP3_foo, EP4_foo: IP3_bar)
   }
-  override init(EP1_extp1 IP2_p1: String, EP1_extp2 IP2_p2: Int) {
-    super.init(EP1_extp1: IP2_p1, EP1_extp2: IP2_p2)
+  override init(EP1_extp1 IP3_p1: String, EP1_extp2 IP3_p2: Int) {
+    super.init(EP1_extp1: IP3_p1, EP1_extp2: IP3_p2)
   }
-  override init(_ IP2_p1: String, EP1_extp IP2_p2: Int) {
-    super.init(IP2_p1, EP1_extp: IP2_p2)
+  override init(_ IP4_p1: String, EP1_extp IP4_p2: Int) {
+    super.init(IP4_p1, EP1_extp: IP4_p2)
   }
 }
 let V1_c = T1_Child(SP1_p1: "p1", SP1_p2:42)
diff --git a/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift b/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift
index 017a72af76c..fe965160380 100644
--- a/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift
+++ b/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift
@@ -187,3 +187,100 @@ class T1_NestedFuncs {
     return ints
   }
 }
+
+// protocols with associated types
+struct T1_TestStruct {}
+enum T1_TestEnum {}
+
+protocol T1_ParentProtocol {
+  associatedtype Fuzz
+  associatedtype Bazz
+  associatedtype Gazz
+
+  func NF2_foo(_ IP1_indexPath: Int) -> String
+  func NF1_bar(_ IP1_fuzz: Fuzz, EP1_extBazz IP1_bazz: Bazz, EP1_extGazz IP1_gazz: Gazz, EP1_atIndexPath IP2_indexPath: Int)
+}
+
+protocol T1_ChildProtocol: T1_ParentProtocol {
+  var V1_items: [[Gazz]] { get }
+}
+
+
+protocol T1_ChildProtocol2: T1_ChildProtocol { }
+
+
+final class T1_TestClass {
+
+  var V1_items: [[Gazz]] = [[
+
+    ]]
+}
+
+extension T1_TestClass: T1_ChildProtocol2 {
+
+  func NF2_foo(_ IP1_indexPath: Int) -> String { return "" }
+
+  func NF1_bar(_ IP1_fuzz: String, EP1_extBazz IP1_bazz: T1_TestStruct, EP1_extGazz IP1_gazz: T1_TestEnum, EP1_atIndexPath IP2_indexPath: Int) {}
+}
+
+protocol T1_ParentProtocol2 {
+  associatedtype Fuzz
+  associatedtype Bazz
+  associatedtype Gazz
+
+  func NF2_bar(_ IP2_fuzz: Fuzz, EP2_extBazz IP2_bazz: Bazz, SP1_gazz: Gazz) -> Void
+}
+
+protocol T1_ParentProtocol3 {
+  associatedtype Fuzz2
+  associatedtype Bazz2
+  associatedtype Gazz2
+
+  func NF2_bar(_ IP2_fuzz: Fuzz2, EP2_extBazz IP2_bazz: Bazz2, SP1_gazz: Gazz2) -> ()
+}
+
+extension T1_TestClass: T1_ParentProtocol2, T1_ParentProtocol3 {
+  typealias Fuzz = String
+  typealias Bazz = T1_TestStruct
+  typealias Gazz = T1_TestEnum
+
+  typealias Fuzz2 = T1_TestEnum
+  typealias Bazz2 = T1_TestStruct
+  typealias Gazz2 = T1_TestEnum
+
+  func NF2_bar(_ IP2_fuzz: String, EP2_extBazz IP2_bazz: T1_TestStruct, SP1_gazz: T1_TestEnum) {}
+
+  func NF2_bar(_ IP2_fuzz: T1_TestEnum, EP2_extBazz IP2_bazz: T1_TestStruct, SP1_gazz: T1_TestEnum) {}
+}
+
+// protocol functions strikes back
+
+class T1_NotWorkingParent {
+  func NF1_addSearchItem() {
+  }
+}
+
+final class T1_NextNotWorking: T1_NotWorkingParent {
+  
+  override func NF1_addSearchItem() {
+    let inserter = T1_ItemInserter()
+    do {
+      let coffee = try inserter.NF1_insertEntityWithName("")
+      
+    } catch {
+      
+    }
+  }
+}
+
+protocol T1_ItemInserterType {
+  associatedtype Entity
+  func NF1_insertEntityWithName(_ IP1_name: String) throws -> Entity
+}
+
+struct T1_ItemInserter: T1_ItemInserterType {
+  
+  func NF1_insertEntityWithName(_ IP1_name: String) throws -> String {
+    return ""
+  }
+}
diff --git a/swift/test/Obfuscation/FullProcess/Functions/Functions.swift b/swift/test/Obfuscation/FullProcess/Functions/Functions.swift
index 0c19d645d00..b24c8fc43e3 100644
--- a/swift/test/Obfuscation/FullProcess/Functions/Functions.swift
+++ b/swift/test/Obfuscation/FullProcess/Functions/Functions.swift
@@ -186,5 +186,103 @@ class NestedFuncs {
     ints.append(makeInt(withIdentifier: "", model: 42))
     ints.append(makeInt(withIdentifier: "", model: 42))
     return ints
+
+  }
+}
+
+// protocols with associated types
+struct TestStruct {}
+enum TestEnum {}
+
+protocol ParentProtocol {
+  associatedtype Fuzz
+  associatedtype Bazz
+  associatedtype Gazz
+
+  func foo(_ indexPath: Int) -> String
+  func bar(_ fuzz: Fuzz, extBazz bazz: Bazz, extGazz gazz: Gazz, atIndexPath indexPath: Int)
+}
+
+protocol ChildProtocol: ParentProtocol {
+  var items: [[Gazz]] { get }
+}
+
+
+protocol ChildProtocol2: ChildProtocol { }
+
+
+final class TestClass {
+
+  var items: [[Gazz]] = [[
+
+    ]]
+}
+
+extension TestClass: ChildProtocol2 {
+
+  func foo(_ indexPath: Int) -> String { return "" }
+
+  func bar(_ fuzz: String, extBazz bazz: TestStruct, extGazz gazz: TestEnum, atIndexPath indexPath: Int) {}
+}
+
+protocol ParentProtocol2 {
+  associatedtype Fuzz
+  associatedtype Bazz
+  associatedtype Gazz
+
+  func bar(_ fuzz: Fuzz, extBazz bazz: Bazz, gazz: Gazz) -> Void
+}
+
+protocol ParentProtocol3 {
+  associatedtype Fuzz2
+  associatedtype Bazz2
+  associatedtype Gazz2
+
+  func bar(_ fuzz: Fuzz2, extBazz bazz: Bazz2, gazz: Gazz2) -> ()
+}
+
+extension TestClass: ParentProtocol2, ParentProtocol3 {
+  typealias Fuzz = String
+  typealias Bazz = TestStruct
+  typealias Gazz = TestEnum
+
+  typealias Fuzz2 = TestEnum
+  typealias Bazz2 = TestStruct
+  typealias Gazz2 = TestEnum
+
+  func bar(_ fuzz: String, extBazz bazz: TestStruct, gazz: TestEnum) {}
+
+  func bar(_ fuzz: TestEnum, extBazz bazz: TestStruct, gazz: TestEnum) {}
+}
+
+// protocol functions strikes back
+
+class NotWorkingParent {
+  func addSearchItem() {
+  }
+}
+
+final class NextNotWorking: NotWorkingParent {
+  
+  override func addSearchItem() {
+    let inserter = ItemInserter()
+    do {
+      let coffee = try inserter.insertEntityWithName("")
+      
+    } catch {
+      
+    }
+  }
+}
+
+protocol ItemInserterType {
+  associatedtype Entity
+  func insertEntityWithName(_ name: String) throws -> Entity
+}
+
+struct ItemInserter: ItemInserterType {
+  
+  func insertEntityWithName(_ name: String) throws -> String {
+    return ""
   }
 }
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
index 762003bc22e..c324bd18150 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
@@ -16,41 +16,6 @@ final class T1_DebugBlock {
   }
 }
 
-// fun with protocols and extensions
-struct T1_TestStruct {}
-
-protocol T1_ParentProtocol {
-  associatedtype Fuzz
-  associatedtype Bazz
-  associatedtype Gazz
-  
-  func NF1_foo(_ IP1_indexPath: Int) -> String
-  func NF1_bar(_ IP1_fuzz: Fuzz, EP1_extBazz IP1_bazz: Bazz, EP1_extGazz IP1_gazz: Gazz, EP1_atIndexPath IP2_indexPath: Int)
-}
-
-protocol T1_ChildProtocol: T1_ParentProtocol {
-  var V1_items: [[Gazz]] { get }
-}
-
-
-protocol T1_ChildProtocol2: T1_ChildProtocol { }
-
-
-final class T1_TestClass {
-  
-  var V1_items: [[Gazz]] = [[
-    
-    ]]
-}
-
-
-extension T1_TestClass: T1_ChildProtocol2 {
-  
-  func NF1_foo(_ IP1_indexPath: Int) -> String { return "" }
-  
-  func NF1_bar(_ IP1_fuzz: String, EP1_extBazz IP1_bazz: T1_TestStruct, EP1_extGazz IP1_gazz: T1_Test, EP1_atIndexPath IP2_indexPath: Int) {}
-}
-
 // overridden method parameters
 
 final class T1_TestController: NSViewController {
@@ -104,38 +69,6 @@ final class T1_ForEachController: NSViewController {
   }
 }
 
-// protocol functions strikes back
-
-class T1_NotWorkingParent {
-  func NF1_addSearchItem() {
-  }
-}
-
-final class T1_NextNotWorking: T1_NotWorkingParent {
-  
-  override func NF1_addSearchItem() {
-    let inserter = T1_ItemInserter()
-    do {
-      let coffee = try inserter.NF1_insertEntityWithName("")
-      
-    } catch {
-      
-    }
-  }
-}
-
-protocol T1_ItemInserterType {
-  associatedtype Entity
-  func NF1_insertEntityWithName(_ IP1_name: String) throws -> Entity
-}
-
-struct T1_ItemInserter: T1_ItemInserterType {
-  
-  func NF1_insertEntityWithName(_ IP1_name: String) throws -> String {
-    return ""
-  }
-}
-
 // mocking trick
 
 protocol KeyValueStoreType {
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
index aa4d405ddc3..20b8ee4d8ae 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
@@ -17,42 +17,6 @@ final class DebugBlock {
   }
 }
 
-
-// fun with protocols and extensions
-struct TestStruct {}
-
-protocol ParentProtocol {
-  associatedtype Fuzz
-  associatedtype Bazz
-  associatedtype Gazz
-  
-  func foo(_ indexPath: Int) -> String
-  func bar(_ fuzz: Fuzz, extBazz bazz: Bazz, extGazz gazz: Gazz, atIndexPath indexPath: Int)
-}
-
-protocol ChildProtocol: ParentProtocol {
-  var items: [[Gazz]] { get }
-}
-
-
-protocol ChildProtocol2: ChildProtocol { }
-
-
-final class TestClass {
-  
-  var items: [[Gazz]] = [[
-    
-    ]]
-}
-
-
-extension TestClass: ChildProtocol2 {
-  
-  func foo(_ indexPath: Int) -> String { return "" }
-  
-  func bar(_ fuzz: String, extBazz bazz: TestStruct, extGazz gazz: Test, atIndexPath indexPath: Int) {}
-}
-
 // overridden method parameters
 
 final class TestController: NSViewController {
@@ -106,38 +70,6 @@ final class ForEachController: NSViewController {
   }
 }
 
-// protocol functions strikes back
-
-class NotWorkingParent {
-  func addSearchItem() {
-  }
-}
-
-final class NextNotWorking: NotWorkingParent {
-  
-  override func addSearchItem() {
-    let inserter = ItemInserter()
-    do {
-      let coffee = try inserter.insertEntityWithName("")
-      
-    } catch {
-      
-    }
-  }
-}
-
-protocol ItemInserterType {
-  associatedtype Entity
-  func insertEntityWithName(_ name: String) throws -> Entity
-}
-
-struct ItemInserter: ItemInserterType {
-  
-  func insertEntityWithName(_ name: String) throws -> String {
-    return ""
-  }
-}
-
 // mocking trick
 
 protocol KeyValueStoreType {
diff --git a/swift/test/Obfuscation/SymbolExtractor/Inputs/ExpectedSymbols.json b/swift/test/Obfuscation/SymbolExtractor/Inputs/ExpectedSymbols.json
index 7e0839678f4..4e5d8252ad6 100644
--- a/swift/test/Obfuscation/SymbolExtractor/Inputs/ExpectedSymbols.json
+++ b/swift/test/Obfuscation/SymbolExtractor/Inputs/ExpectedSymbols.json
@@ -20,13 +20,13 @@
     },
     {
       "name": "applicationDidFinishLaunching",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ()",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> Void",
       "module": "AppKit",
       "type": "namedFunction"
     },
     {
       "name": "aNotification",
-      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> ().parameter.position.list1_parameter0.internal.aNotification",
+      "identifier": "module.AppKit.protocol.method.applicationDidFinishLaunching.signature.(Notification) -> Void.parameter.position.list1_parameter0.internal.aNotification",
       "module": "TestModuleName",
       "type": "internalParameter"
     },
@@ -80,7 +80,7 @@
     },
     {
       "name": "number",
-      "identifier": "module.TestModuleName.type.CustomInitViewController.method.init.signature.(Int) -> CustomInitViewController.parameter.position.list1_parameter0.single.number",
+      "identifier": "module.TestModuleName.type.CustomInitViewController.method.init.signature.(number: Int) -> CustomInitViewController.parameter.position.list1_parameter0.single.number",
       "module": "TestModuleName",
       "type": "singleParameter"
     },
@@ -92,13 +92,13 @@
     },
     {
       "name": "applicationWillTerminate",
-      "identifier": "module.AppKit.protocol.method.applicationWillTerminate.signature.(Notification) -> ()",
+      "identifier": "module.AppKit.protocol.method.applicationWillTerminate.signature.(Notification) -> Void",
       "module": "AppKit",
       "type": "namedFunction"
     },
     {
       "name": "aNotification",
-      "identifier": "module.AppKit.protocol.method.applicationWillTerminate.signature.(Notification) -> ().parameter.position.list1_parameter0.internal.aNotification",
+      "identifier": "module.AppKit.protocol.method.applicationWillTerminate.signature.(Notification) -> Void.parameter.position.list1_parameter0.internal.aNotification",
       "module": "TestModuleName",
       "type": "internalParameter"
     },
@@ -122,7 +122,7 @@
     },
     {
       "name": "fatalError",
-      "identifier": "module.Swift.function.fatalError.signature.(@autoclosure () -> String, StaticString, UInt) -> Never",
+      "identifier": "module.Swift.function.fatalError.signature.(() -> String, file: StaticString, line: UInt) -> Never",
       "module": "Swift",
       "type": "namedFunction"
     },
-- 
2.17.1 (Apple Git-112)


From cb6eba10ea6adc45168493bf39bd020e79e6fa65 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Tue, 6 Mar 2018 12:56:24 +0100
Subject: [PATCH 111/138] Added support for proper parsing parameters in
 overriden methods

Reviewers: michal.zielinski, jerzy.kleszcz

Reviewed By: michal.zielinski, jerzy.kleszcz

Subscribers: jerzy.kleszcz, michal.zielinski

Differential Revision: https://phabricator.polidea.com/D2870
---
 swift/lib/Obfuscation/ExpressionParser.cpp    | 12 ++++--
 .../Obfuscation/FunctionDeclarationParser.cpp | 39 ++++++++++---------
 .../ParameterDeclarationParser.cpp            | 35 +++++++++--------
 .../Obfuscation/VariableDeclarationParser.cpp |  5 ++-
 .../Expected/FunctionParameterNames.swift     | 21 ++++++++--
 .../FunctionParameterNames.swift              | 20 +++++++++-
 .../Expected/UnsupportedDropnote.swift        | 13 -------
 .../UnsupportedDropnote.swift                 | 38 ++++++++++++++----
 8 files changed, 117 insertions(+), 66 deletions(-)

diff --git a/swift/lib/Obfuscation/ExpressionParser.cpp b/swift/lib/Obfuscation/ExpressionParser.cpp
index 42eda6acb86..1679599e117 100644
--- a/swift/lib/Obfuscation/ExpressionParser.cpp
+++ b/swift/lib/Obfuscation/ExpressionParser.cpp
@@ -18,7 +18,8 @@ declarationOfFunctionCalledInExpression(CallExpr *CallExpression) {
       // It's a super call like super.init()
       auto *Decl = OtherConstructor->getDecl();
 
-      if (auto *FunctionDeclaration = dyn_cast<AbstractFunctionDecl>(Decl)) {
+      if (auto *FunctionDeclaration =
+            dyn_cast_or_null<AbstractFunctionDecl>(Decl)) {
         return FunctionDeclaration;
       }
     } else {
@@ -26,7 +27,8 @@ declarationOfFunctionCalledInExpression(CallExpr *CallExpression) {
       if (auto *DeclRefExpression = dyn_cast<DeclRefExpr>(DotFn)) {
         auto *Decl = DeclRefExpression->getDecl();
 
-        if (auto *FunctionDeclaration = dyn_cast<AbstractFunctionDecl>(Decl)) {
+        if (auto *FunctionDeclaration =
+              dyn_cast_or_null<AbstractFunctionDecl>(Decl)) {
           return FunctionDeclaration;
         }
       }
@@ -38,7 +40,8 @@ declarationOfFunctionCalledInExpression(CallExpr *CallExpression) {
     if (auto *DeclarationRefExpression = dyn_cast<DeclRefExpr>(ConstructorFn)) {
       auto* Decl = DeclarationRefExpression->getDecl();
 
-      if (auto *FunctionDeclaration = dyn_cast<AbstractFunctionDecl>(Decl)) {
+      if (auto *FunctionDeclaration =
+            dyn_cast_or_null<AbstractFunctionDecl>(Decl)) {
         return FunctionDeclaration;
       }
     }
@@ -47,7 +50,8 @@ declarationOfFunctionCalledInExpression(CallExpr *CallExpression) {
     // a function is being called inside set {} block
     auto *Decl = Expression->getReferencedDecl().getDecl();
     
-    if (auto *FunctionDeclaration = dyn_cast<AbstractFunctionDecl>(Decl)) {
+    if (auto *FunctionDeclaration =
+          dyn_cast_or_null<AbstractFunctionDecl>(Decl)) {
       return FunctionDeclaration;
     }
   }
diff --git a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
index c4e63521cab..ff1d714bdaa 100644
--- a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
@@ -345,26 +345,29 @@ SymbolsOrError parse(GlobalCollectedSymbols &CollectedSymbols,
                                   moduleName(Declaration),
                                   Range);
       if (auto Error = SymbolOrError.takeError()) {
-        return std::move(Error);
-      }
-      
-      auto FunctionNameSymbol = SymbolOrError.get();
-      
-      // If overridden method also satisfies protocol requirements
-      // we must update symbol identifier for protocol's method to be the same
-      // as symbol identifier of the overridden function. Otherwise function
-      // inside protocol would be renamed differently and our class
-      // will no longer conform to that protocol.
-      auto HandledOrError = handleSatisfiedProtocolRequirements(
-                                                            CollectedSymbols,
-                                                            FunctionNameSymbol,
-                                                            Declaration);
+
+        llvm::consumeError(std::move(Error));
+
+      } else {
       
-      if (auto Error = HandledOrError.takeError()) {
-        return std::move(Error);
+        auto FunctionNameSymbol = SymbolOrError.get();
+
+        // If overridden method also satisfies protocol requirements
+        // we must update symbol identifier for protocol's method to be the same
+        // as symbol identifier of the overridden function. Otherwise function
+        // inside protocol would be renamed differently and our class
+        // will no longer conform to that protocol.
+        auto HandledOrError = handleSatisfiedProtocolRequirements(
+                                                              CollectedSymbols,
+                                                              FunctionNameSymbol,
+                                                              Declaration);
+
+        if (auto Error = HandledOrError.takeError()) {
+          return std::move(Error);
+        }
+
+        Symbols.push_back(FunctionNameSymbol);
       }
-      
-      Symbols.push_back(FunctionNameSymbol);
     } else {
       Symbols.push_back(getFunctionSymbol(CollectedSymbols,
                                           Declaration,
diff --git a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
index fb89e2cb902..3ff91cb35b9 100644
--- a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
@@ -53,7 +53,6 @@ SymbolsOrError parse(const ParamDecl* Declaration) {
     auto BaseFunctionDeclaration = BaseWithModules.first;
     auto Modules = BaseWithModules.second;
 
-    
     auto ModuleName = moduleName(Declaration);
     auto ExternalName = externalParameterName(Declaration);
     auto InternalName = internalParameterName(Declaration);
@@ -76,25 +75,29 @@ SymbolsOrError parse(const ParamDecl* Declaration) {
     // We check if parameter has a place that it's declared that we can reach
     if (Declaration->getNameLoc().isValid()) {
 
-      auto IsSingle = Declaration->getArgumentNameLoc().isInvalid()
-                   && isOverriddenMethodFromTheSameModule(Modules, ModuleName);
+      auto IsSingle = Declaration->getArgumentNameLoc().isInvalid();
+
+      auto isFromTheSameModule = isOverriddenMethodFromTheSameModule(Modules,
+                                                                     ModuleName);
+
       if (IsSingle) {
-        
-        BaseParts.push_back("single." + InternalName);
-        CharSourceRange Range(Declaration->getNameLoc(),
-                              InternalName.length());
-        Symbol Symbol(combineIdentifier(BaseParts),
-                      InternalName,
-                      BaseFunctionModuleName,
-                      SymbolType::SingleParameter);
-        Symbols.push_back(SymbolWithRange(Symbol, Range));
+
+        if (isFromTheSameModule) {
+          BaseParts.push_back("single." + InternalName);
+          CharSourceRange Range(Declaration->getNameLoc(),
+                                InternalName.length());
+          Symbol Symbol(combineIdentifier(BaseParts),
+                        InternalName,
+                        BaseFunctionModuleName,
+                        SymbolType::SingleParameter);
+          Symbols.push_back(SymbolWithRange(Symbol, Range));
+        }
         
       } else {
 
-        auto IsExternal = !ExternalName.empty()
-                       && isOverriddenMethodFromTheSameModule(Modules,
-                                                              ModuleName);
-        if (IsExternal) {
+        auto IsExternal = !ExternalName.empty();
+
+        if (IsExternal && isFromTheSameModule) {
           auto ExternalParts = BaseParts;
           
           BaseParts.push_back("external." + ExternalName);
diff --git a/swift/lib/Obfuscation/VariableDeclarationParser.cpp b/swift/lib/Obfuscation/VariableDeclarationParser.cpp
index 4c36e74e3e2..55a2a8f3ef8 100644
--- a/swift/lib/Obfuscation/VariableDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/VariableDeclarationParser.cpp
@@ -44,10 +44,11 @@ variableIdentifierPartsFromContext(const VarDecl *Declaration) {
   if (auto *ExtensionDeclaration =
                        dyn_cast<ExtensionDecl>(Declaration->getDeclContext())) {
     
-    ProtocolDeclaration = dyn_cast<ProtocolDecl>(
+    ProtocolDeclaration = dyn_cast_or_null<ProtocolDecl>(
                ExtensionDeclaration->getAsProtocolOrProtocolExtensionContext());
   } else {
-    ProtocolDeclaration = dyn_cast<ProtocolDecl>(Declaration->getDeclContext());
+    ProtocolDeclaration =
+      dyn_cast_or_null<ProtocolDecl>(Declaration->getDeclContext());
   }
 
   // TODO: for now, we're renaming properties from different protocols
diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
index 8f90cab8953..8596b9c342c 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
@@ -1,6 +1,9 @@
+import AppKit
 
 class T1_SampleClass {}
 
+protocol T1_OtherSampleClass {}
+
 func NF1_noParams() {}
 
 func NF1_singleParam(SP1_param: T1_SampleClass) {}
@@ -25,9 +28,9 @@ func NF1_intExtParams(EP1_foo IP1_foo:Int, EP2_foo IP1_bar: T1_SampleClass) -> A
 
 func NF1_genericFun<T, R>(_ IP1_a: inout T, _ IP1_b: inout R) {}
 
-func NF1_genericFunc2<T: String & T1_SampleClass>(EP1_e IP1_i: T) {}
+func NF1_genericFunc2<T: T1_OtherSampleClass & T1_SampleClass>(EP1_e IP1_i: T) {}
 
-func NF1_someFunc3<T>(SP1_arg: T) where T:T1_SampleClass, T:Int {}
+func NF1_someFunc3<T>(SP1_arg: T) where T: T1_SampleClass, T: T1_OtherSampleClass {}
 
 // overriding functions
 class T1_Base {
@@ -115,8 +118,20 @@ class T1_SuperTest {
 
 let V1_conv = T1_SuperTest(SP2_convP1:1, SP1_convP2:"asd")
 
-// default values
 
+// overridden method parameters
+final class T1_TestController: NSViewController {
+  
+  override func viewDidLoad() {
+    super.viewDidLoad()
+  }
+  
+  override func prepare(for IP1_segue: NSStoryboardSegue, sender: Any?) {
+    super.prepare(for: IP1_segue, sender: sender)
+  }
+}
+
+// default values
 let V1_defaultValue = 42.0
 
 func NF1_withDefaultValues(SP1_int: Int = 42, EP1_string IP1_string: String = "42", _ IP1_float: Double = V1_defaultValue) {}
diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
index a27b9108afe..572c50523a6 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
@@ -1,7 +1,11 @@
 //RUN: %target-prepare-obfuscation-for-file "FunctionParameterNames" %target-run-full-obfuscation
 
+import AppKit
+
 class SampleClass {}
 
+protocol OtherSampleClass {}
+
 func noParams() {}
 
 func singleParam(param: SampleClass) {}
@@ -26,9 +30,9 @@ func intExtParams(foo foo:Int, foo bar: SampleClass) -> Any? {
 
 func genericFun<T, R>(_ a: inout T, _ b: inout R) {}
 
-func genericFunc2<T: String & SampleClass>(e i: T) {}
+func genericFunc2<T: OtherSampleClass & SampleClass>(e i: T) {}
 
-func someFunc3<T>(arg: T) where T:SampleClass, T:Int {}
+func someFunc3<T>(arg: T) where T: SampleClass, T: OtherSampleClass {}
 
 // overriding functions
 class Base {
@@ -116,6 +120,18 @@ class SuperTest {
 
 let conv = SuperTest(convP1:1, convP2:"asd")
 
+// overridden method parameters
+final class TestController: NSViewController {
+  
+  override func viewDidLoad() {
+    super.viewDidLoad()
+  }
+  
+  override func prepare(for segue: NSStoryboardSegue, sender: Any?) {
+    super.prepare(for: segue, sender: sender)
+  }
+}
+
 // default values
 let defaultValue = 42.0
 
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
index c324bd18150..dabde0fb4a9 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
@@ -16,19 +16,6 @@ final class T1_DebugBlock {
   }
 }
 
-// overridden method parameters
-
-final class T1_TestController: NSViewController {
-  
-  override func viewDidLoad() {
-    super.viewDidLoad()
-  }
-  
-  override func prepare(for segue: NSStoryboardSegue, sender: Any?) {
-    super.prepare(for: segue, sender)
-  }
-}
-
 // non working if case cast
 
 class T1_SomeGenericClass<Param> {}
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
index 20b8ee4d8ae..3fee56bcb30 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
@@ -17,17 +17,39 @@ final class DebugBlock {
   }
 }
 
-// overridden method parameters
+// fun with protocols and extensions
+struct TestStruct {}
 
-final class TestController: NSViewController {
+protocol ParentProtocol {
+  associatedtype Fuzz
+  associatedtype Bazz
+  associatedtype Gazz
   
-  override func viewDidLoad() {
-    super.viewDidLoad()
-  }
+  func foo(_ indexPath: Int) -> String
+  func bar(_ fuzz: Fuzz, extBazz bazz: Bazz, extGazz gazz: Gazz, atIndexPath indexPath: Int)
+}
+
+protocol ChildProtocol: ParentProtocol {
+  var items: [[Gazz]] { get }
+}
+
+
+protocol ChildProtocol2: ChildProtocol { }
+
+
+final class TestClass {
   
-  override func prepare(for segue: NSStoryboardSegue, sender: Any?) {
-    super.prepare(for: segue, sender)
-  }
+  var items: [[Gazz]] = [[
+    
+    ]]
+}
+
+
+extension TestClass: ChildProtocol2 {
+  
+  func foo(_ indexPath: Int) -> String { return "" }
+  
+  func bar(_ fuzz: String, extBazz bazz: TestStruct, extGazz gazz: Test, atIndexPath indexPath: Int) {}
 }
 
 // non working if case cast
-- 
2.17.1 (Apple Git-112)


From c8340d3f2b31dda1bedc2f46bb6f0c87d1da70e8 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Tue, 6 Mar 2018 16:07:08 +0100
Subject: [PATCH 112/138] Fixed permissions when copying sources

Reviewers: michal.zielinski, jerzy.kleszcz

Reviewed By: michal.zielinski, jerzy.kleszcz

Subscribers: jerzy.kleszcz, michal.zielinski

Differential Revision: https://phabricator.polidea.com/D2873
---
 swift/lib/Obfuscation/Renaming.cpp | 40 +++++++++++++++++++++++++++++-
 1 file changed, 39 insertions(+), 1 deletion(-)

diff --git a/swift/lib/Obfuscation/Renaming.cpp b/swift/lib/Obfuscation/Renaming.cpp
index 2906172f81d..60df6897e3e 100644
--- a/swift/lib/Obfuscation/Renaming.cpp
+++ b/swift/lib/Obfuscation/Renaming.cpp
@@ -12,6 +12,8 @@
 #include <memory>
 #include <unordered_map>
 
+#include <sys/stat.h>
+
 namespace swift {
 namespace obfuscation {
 
@@ -54,12 +56,48 @@ llvm::Error copyProject(const StringRef OriginalPath,
       auto Message = "Cannot create directory in " + Path.str().str();
       return stringError(Message, Error);
     }
-    
+
+    llvm::sys::fs::remove(Path);
     if (auto Error = llvm::sys::fs::copy_file(Iterator->path(), Path)) {
       auto Message = "Cannot copy file from " + Iterator->path() + " to " +
         Path.str().str();
       return stringError(Message, Error);
     }
+
+    llvm::sys::fs::file_status Status;
+    auto Error = status(Iterator->path(), Status);
+    if (!Error) {
+      mode_t Modes = 0;
+      auto Permissions = Status.permissions();
+      if (Permissions & llvm::sys::fs::perms::owner_read) {
+        Modes |= S_IRUSR;
+      }
+      if (Permissions & llvm::sys::fs::perms::owner_write) {
+        Modes |= S_IWUSR;
+      }
+      if (Permissions & llvm::sys::fs::perms::owner_exe) {
+        Modes |= S_IXUSR;
+      }
+      if (Permissions & llvm::sys::fs::perms::group_read) {
+        Modes |= S_IRGRP;
+      }
+      if (Permissions & llvm::sys::fs::perms::group_write) {
+        Modes |= S_IWGRP;
+      }
+      if (Permissions & llvm::sys::fs::perms::group_exe) {
+        Modes |= S_IXGRP;
+      }
+      if (Permissions & llvm::sys::fs::perms::others_read) {
+        Modes |= S_IROTH;
+      }
+      if (Permissions & llvm::sys::fs::perms::others_write) {
+        Modes |= S_IWOTH;
+      }
+      if (Permissions & llvm::sys::fs::perms::others_exe) {
+        Modes |= S_IXOTH;
+      }
+      chmod(Path.c_str(), Modes);
+    }
   }
   
   if (ErrorCode) {
-- 
2.17.1 (Apple Git-112)


From 73247f69e632f478266a8fdee74d84c61b19502d Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Wed, 7 Mar 2018 11:56:07 +0100
Subject: [PATCH 113/138] Renaming generic types in `is` cast from non-optional
 to optional type or vice versa

Reviewers: krzysztof.siejkowski, michal.zielinski

Reviewed By: krzysztof.siejkowski, michal.zielinski

Subscribers: michal.zielinski, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2872
---
 swift/lib/Obfuscation/ExpressionParser.cpp    | 129 ++++--
 .../TypeCasting/Expected/TypeCasting.swift    | 388 ++++++++++++++++--
 .../FullProcess/TypeCasting/TypeCasting.swift | 388 ++++++++++++++++--
 .../Expected/UnsupportedDropnote.swift        |  23 --
 .../UnsupportedDropnote.swift                 |  58 ---
 5 files changed, 782 insertions(+), 204 deletions(-)

diff --git a/swift/lib/Obfuscation/ExpressionParser.cpp b/swift/lib/Obfuscation/ExpressionParser.cpp
index 1679599e117..5d02e9a1fec 100644
--- a/swift/lib/Obfuscation/ExpressionParser.cpp
+++ b/swift/lib/Obfuscation/ExpressionParser.cpp
@@ -126,6 +126,37 @@ SymbolsOrError parseCallExpressionWithArguments(CallExpr* CallExpression) {
 
   return Symbols;
 }
+  
+SymbolsOrError
+parseGenericParameters(BoundGenericType *BoundGenericType,
+                       SourceLoc OpeningAngleBracketLoc) {
+  std::vector<SymbolWithRange> Symbols;
+  auto Parameters = BoundGenericType->getGenericArgs();
+  for (auto Parameter : Parameters) {
+    NominalTypeDecl *ParameterDecl = nullptr;
+    if (OptionalType::classof(Parameter.getPointer())) {
+      ParameterDecl =
+      Parameter->getOptionalObjectType()->getAnyNominal();
+    } else {
+      ParameterDecl = Parameter->getAnyNominal();
+    }
+    auto ParameterSymbol = parse(ParameterDecl);
+    if (auto Error = ParameterSymbol.takeError()) {
+      return std::move(Error);
+    }
+    auto ParameterName =
+    ParameterDecl->getBaseName().getIdentifier().str();
+    auto GenericArgRange =
+      rangeOfFirstOccurenceOfStringInSourceLoc(ParameterName,
+                                               OpeningAngleBracketLoc);
+    if (auto Error = GenericArgRange.takeError()) {
+      return std::move(Error);
+    }
+    Symbols.push_back(SymbolWithRange(ParameterSymbol.get(),
+                                      GenericArgRange.get()));
+  }
+  return Symbols;
+}
 
 SymbolsOrError parse(CallExpr* CallExpression) {
   if (CallExpression->hasArgumentLabelLocs()) {
@@ -142,57 +173,85 @@ SymbolsOrError parse(CallExpr* CallExpression) {
 // representing the CastType (cast-to type) so we have to extract it
 // from the EnumIsCaseExpression.
 SymbolsOrError parse(EnumIsCaseExpr* EnumIsCaseExpression) {
-  NominalTypeDecl *CastTypeDeclaration = nullptr;
-  SourceLoc IsKeywordSourceLoc;
+  ExplicitCastExpr *ExplicitCastExpression = nullptr;
   
   // This callback invoked using forEachChildExpr() is used to extract the
   // declaration of the CastType and the location of the `is` keyword.
   const std::function<Expr*(Expr*)> &callback =
-    [&CastTypeDeclaration, &IsKeywordSourceLoc](Expr* Child) -> Expr* {
+    [&ExplicitCastExpression](Expr* Child) -> Expr* {
       
     // We're looking for CoerceExpr (non-optional to optional type cast)
     // or ConditionalCheckedCastExpr (optional to non-optional type cast)
     // which both are subclasses of ExplicitCastExpr.
-    if (auto *ExplicitCastExpression = dyn_cast<ExplicitCastExpr>(Child)) {
-      
-      Type CastType = ExplicitCastExpression->getCastTypeLoc().getType();
-      
-      // The data representing the location of the CastType in the expression
-      // seems to be impossible to retrieve from the EnumIsCastExpression
-      // and its subexpressions. We have to calculate the CastType location
-      // later using `is` keyword and CastType name.
-      IsKeywordSourceLoc = ExplicitCastExpression->getAsLoc();
-      
-      if (ConditionalCheckedCastExpr::classof(ExplicitCastExpression)) {
-        CastTypeDeclaration = CastType->getAnyNominal();
-      } else if (CoerceExpr::classof(ExplicitCastExpression)) {
-        CastTypeDeclaration = CastType->getOptionalObjectType()->getAnyNominal();
-      }
-      
+    if (ExplicitCastExpr::classof(Child)) {
+      ExplicitCastExpression = dyn_cast<ExplicitCastExpr>(Child);
     }
+      
     return Child;
   };
   EnumIsCaseExpression->forEachChildExpr(callback);
   
-  if (CastTypeDeclaration != nullptr) {
-    auto SingleSymbolOrError = parse(CastTypeDeclaration);
-    if (auto Error = SingleSymbolOrError.takeError()) {
-      return std::move(Error);
-    }
-    auto CastTypeSymbol = SingleSymbolOrError.get();
+  if (ExplicitCastExpression != nullptr) {
+    auto CastType = ExplicitCastExpression->getCastTypeLoc().getType();
     
-    auto CastTypeName = typeName(CastTypeDeclaration);
-    auto RangeOrError =
-      rangeOfFirstOccurenceOfStringInSourceLoc(CastTypeName,
-                                               IsKeywordSourceLoc);
-    if (auto Error = RangeOrError.takeError()) {
-      return std::move(Error);
+    // The data representing the location of the CastType in the expression
+    // seems to be impossible to retrieve from the EnumIsCastExpression
+    // and its subexpressions. We have to calculate the CastType location
+    // later using `is` keyword and CastType name.
+    auto IsKeywordSourceLoc = ExplicitCastExpression->getAsLoc();
+  
+    Type UnwrappedCastType;
+    if (ConditionalCheckedCastExpr::classof(ExplicitCastExpression)) {
+      UnwrappedCastType = CastType;
+    } else if (CoerceExpr::classof(ExplicitCastExpression)) {
+      UnwrappedCastType = CastType->getOptionalObjectType();
+    } else {
+      return stringError("Unsupported type of explicit cast expression");
     }
-    auto CastTypeRange = RangeOrError.get();
     
-    std::vector<SymbolWithRange> Symbols;
-    Symbols.push_back(SymbolWithRange(CastTypeSymbol, CastTypeRange));
-    return Symbols;
+    NominalTypeDecl *CastTypeDeclaration = UnwrappedCastType->getAnyNominal();
+    
+    if (CastTypeDeclaration != nullptr) {
+      auto CastTypeSymbol = parse(CastTypeDeclaration);
+      if (auto Error = CastTypeSymbol.takeError()) {
+        return std::move(Error);
+      }
+      
+      auto CastTypeName =
+        CastTypeDeclaration->getBaseName().getIdentifier().str();
+      auto CastTypeRange =
+        rangeOfFirstOccurenceOfStringInSourceLoc(CastTypeName,
+                                                 IsKeywordSourceLoc);
+      if (auto Error = CastTypeRange.takeError()) {
+        return std::move(Error);
+      }
+      
+      std::vector<SymbolWithRange> Symbols;
+      Symbols.push_back(SymbolWithRange(CastTypeSymbol.get(),
+                                        CastTypeRange.get()));
+      
+      if (auto *GenericBoundType =
+            dyn_cast<BoundGenericType>(UnwrappedCastType.getPointer())) {
+        
+        auto GenericNameEndLoc = CastTypeRange.get().getEnd();
+        auto OpeningAngleBracketRange =
+          rangeOfFirstOccurenceOfStringInSourceLoc("<", GenericNameEndLoc);
+        if (auto Error = OpeningAngleBracketRange.takeError()) {
+          return std::move(Error);
+        }
+        auto OpeningAngleBracketLoc = OpeningAngleBracketRange.get().getStart();
+        
+        auto GenericParamsSymbols =
+          parseGenericParameters(GenericBoundType, OpeningAngleBracketLoc);
+        if (auto Error = GenericParamsSymbols.takeError()) {
+          return std::move(Error);
+        }
+        
+        copyToVector(GenericParamsSymbols.get(), Symbols);
+      }
+      
+      return Symbols;
+    }
   }
   
   return stringError("Failed to extract the cast-to type symbol"
diff --git a/swift/test/Obfuscation/FullProcess/TypeCasting/Expected/TypeCasting.swift b/swift/test/Obfuscation/FullProcess/TypeCasting/Expected/TypeCasting.swift
index 8bd646f8d77..28f4c6e3ce2 100644
--- a/swift/test/Obfuscation/FullProcess/TypeCasting/Expected/TypeCasting.swift
+++ b/swift/test/Obfuscation/FullProcess/TypeCasting/Expected/TypeCasting.swift
@@ -1,67 +1,367 @@
 import AppKit
 
-class T1_SampleClass { }
+class T1_SomeGenericClass<Param> {}
 
-let V1_castedNonOptional = T1_SampleClass()
-let V1_castedOptional: T1_SampleClass? = nil
+enum T1_RandomEnum {
+  case Foo
+}
 
-let V1_castedNonOptionalSdk = 1
-let V1_castedOptionalSdk: Int? = nil
+func NF1_someRandomFunc() -> T1_RandomEnum { return T1_RandomEnum.Foo }
 
+final class T1_TestController2: NSViewController {
+  
+  override func viewDidLoad() {
+    super.viewDidLoad()
+  }
+  
+  override func prepare(for IP1_segue: NSStoryboardSegue, sender: Any?) {
+    if case .Foo = NF1_someRandomFunc() , sender is T1_SomeGenericClass<String> {
+      let casted = sender as! T1_SomeGenericClass<String>
+    }
+  }
+}
+
+class T1_SampleClass { }
 enum T1_SampleEnum {
   case case1
 }
 let V1_enumCase = T1_SampleEnum.case1
+class T1_GenericClass<T> { }
+
+let V1_castedNonOptional = T1_SampleClass()
+let V1_castedOptional: T1_SampleClass? = nil
+let V1_genericNonOptional = T1_GenericClass<T1_SampleClass>()
+let V1_genericOptional: T1_GenericClass<T1_SampleClass>? = nil
+let V1_genericParameterOptional: T1_GenericClass<T1_SampleClass>? = nil
 
 // binary-expression with type-casting-operator
-V1_castedNonOptional is T1_SampleClass
-V1_castedNonOptional is T1_SampleClass?
-V1_castedNonOptional as T1_SampleClass
-V1_castedNonOptional as T1_SampleClass?
-V1_castedNonOptional as? T1_SampleClass
-V1_castedNonOptional as? T1_SampleClass?
-V1_castedNonOptional as! T1_SampleClass
-V1_castedNonOptional as! T1_SampleClass?
-
-V1_castedOptional is T1_SampleClass
-V1_castedOptional is T1_SampleClass?
-V1_castedOptional as T1_SampleClass?
-V1_castedOptional as? T1_SampleClass
-V1_castedOptional as? T1_SampleClass?
-V1_castedOptional as! T1_SampleClass
-V1_castedOptional as! T1_SampleClass?
-
-V1_castedNonOptionalSdk is Int
-V1_castedNonOptionalSdk is Int?
-V1_castedNonOptionalSdk as Int
-V1_castedNonOptionalSdk as Int?
-V1_castedNonOptionalSdk as? Int
-V1_castedNonOptionalSdk as? Int?
-V1_castedNonOptionalSdk as! Int
-V1_castedNonOptionalSdk as! Int?
-
-V1_castedOptionalSdk is Int
-V1_castedOptionalSdk is Int?
-V1_castedOptionalSdk as Int?
-V1_castedOptionalSdk as? Int
-V1_castedOptionalSdk as? Int?
-V1_castedOptionalSdk as! Int
-V1_castedOptionalSdk as! Int?
+let _ = V1_castedNonOptional is T1_SampleClass
+let _ = V1_castedNonOptional is T1_SampleClass?
+let _ = V1_castedNonOptional is T1_GenericClass<T1_SampleClass>
+//let _ = castedNonOptional is GenericClass<SampleClass>? //compiler error
+let _ = V1_castedNonOptional is T1_GenericClass<T1_SampleClass?>
+let _ = V1_castedNonOptional is T1_GenericClass<Int>
+//let _ = castedNonOptional is GenericClass<Int>? //compiler error
+let _ = V1_castedNonOptional is T1_GenericClass<Int?>
+let _ = V1_castedNonOptional as T1_SampleClass
+let _ = V1_castedNonOptional as T1_SampleClass?
+//let _ = castedNonOptional as GenericClass<SampleClass> //compiler error
+//let _ = castedNonOptional as GenericClass<SampleClass>? //compiler error
+//let _ = castedNonOptional as GenericClass<SampleClass?> //compiler error
+//let _ = castedNonOptional as GenericClass<Int> //compiler error
+//let _ = castedNonOptional as GenericClass<Int>? //compiler error
+//let _ = castedNonOptional as GenericClass<Int?> //compiler error
+let _ = V1_castedNonOptional as? T1_SampleClass
+let _ = V1_castedNonOptional as? T1_SampleClass?
+let _ = V1_castedNonOptional as? T1_GenericClass<T1_SampleClass>
+//let _ = castedNonOptional as? GenericClass<SampleClass>? //compiler error
+let _ = V1_castedNonOptional as? T1_GenericClass<T1_SampleClass?>
+let _ = V1_castedNonOptional as? T1_GenericClass<Int>
+//let _ = castedNonOptional as? GenericClass<Int>? //compiler error
+let _ = V1_castedNonOptional as? T1_GenericClass<Int?>
+let _ = V1_castedNonOptional as! T1_SampleClass
+let _ = V1_castedNonOptional as! T1_SampleClass?
+let _ = V1_castedNonOptional as! T1_GenericClass<T1_SampleClass>
+//let _ = castedNonOptional as! GenericClass<SampleClass>? //compiler error
+let _ = V1_castedNonOptional as! T1_GenericClass<T1_SampleClass?>
+let _ = V1_castedNonOptional as! T1_GenericClass<Int>
+//let _ = castedNonOptional as! GenericClass<Int>? //compiler error
+let _ = V1_castedNonOptional as! T1_GenericClass<Int?>
+
+let _ = V1_castedOptional is T1_SampleClass
+let _ = V1_castedOptional is T1_SampleClass?
+let _ = V1_castedOptional is T1_GenericClass<T1_SampleClass>
+let _ = V1_castedOptional is T1_GenericClass<T1_SampleClass>?
+let _ = V1_castedOptional is T1_GenericClass<T1_SampleClass?>
+let _ = V1_castedOptional is T1_GenericClass<Int>
+let _ = V1_castedOptional is T1_GenericClass<Int>?
+let _ = V1_castedOptional is T1_GenericClass<Int?>
+//let _ = castedOptional as SampleClass //compiler error
+let _ = V1_castedOptional as T1_SampleClass?
+//let _ = castedOptional as GenericClass<SampleClass> //compiler error
+//let _ = castedOptional as GenericClass<SampleClass>? //compiler error
+//let _ = castedOptional as GenericClass<SampleClass?> //compiler error
+//let _ = castedOptional as GenericClass<Int> //compiler error
+//let _ = castedOptional as GenericClass<Int>? //compiler error
+//let _ = castedOptional as GenericClass<Int?> //compiler error
+let _ = V1_castedOptional as? T1_SampleClass
+let _ = V1_castedOptional as? T1_SampleClass?
+let _ = V1_castedOptional as? T1_GenericClass<T1_SampleClass>
+let _ = V1_castedOptional as? T1_GenericClass<T1_SampleClass>?
+let _ = V1_castedOptional as? T1_GenericClass<T1_SampleClass?>
+let _ = V1_castedOptional as? T1_GenericClass<Int>
+let _ = V1_castedOptional as? T1_GenericClass<Int>?
+let _ = V1_castedOptional as? T1_GenericClass<Int?>
+let _ = V1_castedOptional as! T1_SampleClass
+let _ = V1_castedOptional as! T1_SampleClass?
+let _ = V1_castedOptional as! T1_GenericClass<T1_SampleClass>
+let _ = V1_castedOptional as! T1_GenericClass<T1_SampleClass>?
+let _ = V1_castedOptional as! T1_GenericClass<T1_SampleClass?>
+let _ = V1_castedOptional as! T1_GenericClass<Int>
+let _ = V1_castedOptional as! T1_GenericClass<Int>?
+let _ = V1_castedOptional as! T1_GenericClass<Int?>
+
+let _ = V1_genericNonOptional is T1_SampleClass
+//let _ = genericNonOptional is SampleClass? //compiler error
+let _ = V1_genericNonOptional is T1_GenericClass<T1_SampleClass>
+let _ = V1_genericNonOptional is T1_GenericClass<T1_SampleClass>?
+let _ = V1_genericNonOptional is T1_GenericClass<T1_SampleClass?>
+let _ = V1_genericNonOptional is T1_GenericClass<Int>
+//let _ = genericNonOptional is GenericClass<Int>? //compiler error
+let _ = V1_genericNonOptional is T1_GenericClass<Int?>
+//let _ = genericNonOptional as SampleClass //compiler error
+//let _ = genericNonOptional as SampleClass? //compiler error
+let _ = V1_genericNonOptional as T1_GenericClass<T1_SampleClass>
+let _ = V1_genericNonOptional as T1_GenericClass<T1_SampleClass>?
+//let _ = genericNonOptional as GenericClass<SampleClass?> //compiler error
+//let _ = genericNonOptional as GenericClass<Int> //compiler error
+//let _ = genericNonOptional as GenericClass<Int>? //compiler error
+//let _ = genericNonOptional as GenericClass<Int?> //compiler error
+let _ = V1_genericNonOptional as? T1_SampleClass
+//let _ = genericNonOptional as? SampleClass? //compiler error
+let _ = V1_genericNonOptional as? T1_GenericClass<T1_SampleClass>
+let _ = V1_genericNonOptional as? T1_GenericClass<T1_SampleClass>?
+let _ = V1_genericNonOptional as? T1_GenericClass<T1_SampleClass?>
+let _ = V1_genericNonOptional as? T1_GenericClass<Int>
+//let _ = genericNonOptional as? GenericClass<Int>? //compiler error
+let _ = V1_genericNonOptional as? T1_GenericClass<Int?>
+let _ = V1_genericNonOptional as! T1_SampleClass
+//let _ = genericNonOptional as! SampleClass? //compiler error
+let _ = V1_genericNonOptional as! T1_GenericClass<T1_SampleClass>
+let _ = V1_genericNonOptional as! T1_GenericClass<T1_SampleClass>?
+let _ = V1_genericNonOptional as! T1_GenericClass<T1_SampleClass?>
+let _ = V1_genericNonOptional as! T1_GenericClass<Int>
+//let _ = genericNonOptional as! GenericClass<Int>? //compiler error
+let _ = V1_genericNonOptional as! T1_GenericClass<Int?>
+
+let _ = V1_genericOptional is T1_SampleClass
+let _ = V1_genericOptional is T1_SampleClass?
+let _ = V1_genericOptional is T1_GenericClass<T1_SampleClass>
+let _ = V1_genericOptional is T1_GenericClass<T1_SampleClass>?
+let _ = V1_genericOptional is T1_GenericClass<T1_SampleClass?>
+let _ = V1_genericOptional is T1_GenericClass<Int>
+let _ = V1_genericOptional is T1_GenericClass<Int>?
+let _ = V1_genericOptional is T1_GenericClass<Int?>
+//let _ = genericOptional as SampleClass //compiler error
+//let _ = genericOptional as SampleClass? //compiler error
+//let _ = genericOptional as GenericClass<SampleClass> //compiler error
+let _ = V1_genericOptional as T1_GenericClass<T1_SampleClass>?
+//let _ = genericOptional as GenericClass<SampleClass?> //compiler error
+//let _ = genericOptional as GenericClass<Int> //compiler error
+//let _ = genericOptional as GenericClass<Int>? //compiler error
+//let _ = genericOptional as GenericClass<Int?> //compiler error
+let _ = V1_genericOptional as? T1_SampleClass
+let _ = V1_genericOptional as? T1_SampleClass?
+let _ = V1_genericOptional as? T1_GenericClass<T1_SampleClass>
+let _ = V1_genericOptional as? T1_GenericClass<T1_SampleClass>?
+let _ = V1_genericOptional as? T1_GenericClass<T1_SampleClass?>
+let _ = V1_genericOptional as? T1_GenericClass<Int>
+let _ = V1_genericOptional as? T1_GenericClass<Int>?
+let _ = V1_genericOptional as? T1_GenericClass<Int?>
+let _ = V1_genericOptional as! T1_SampleClass
+let _ = V1_genericOptional as! T1_SampleClass?
+let _ = V1_genericOptional as! T1_GenericClass<T1_SampleClass>
+let _ = V1_genericOptional as! T1_GenericClass<T1_SampleClass>?
+let _ = V1_genericOptional as! T1_GenericClass<T1_SampleClass?>
+let _ = V1_genericOptional as! T1_GenericClass<Int>
+let _ = V1_genericOptional as! T1_GenericClass<Int>?
+let _ = V1_genericOptional as! T1_GenericClass<Int?>
+
+let _ = V1_genericParameterOptional is T1_SampleClass
+let _ = V1_genericParameterOptional is T1_SampleClass?
+let _ = V1_genericParameterOptional is T1_GenericClass<T1_SampleClass>
+let _ = V1_genericParameterOptional is T1_GenericClass<T1_SampleClass>?
+let _ = V1_genericParameterOptional is T1_GenericClass<T1_SampleClass?>
+let _ = V1_genericParameterOptional is T1_GenericClass<Int>
+let _ = V1_genericParameterOptional is T1_GenericClass<Int>?
+let _ = V1_genericParameterOptional is T1_GenericClass<Int?>
+//let _ = genericParameterOptional as SampleClass //compiler error
+//let _ = genericParameterOptional as SampleClass? //compiler error
+//let _ = genericParameterOptional as GenericClass<SampleClass> //compiler error
+let _ = V1_genericParameterOptional as T1_GenericClass<T1_SampleClass>?
+//let _ = genericParameterOptional as GenericClass<SampleClass?> //compiler error
+//let _ = genericParameterOptional as GenericClass<Int> //compiler error
+//let _ = genericParameterOptional as GenericClass<Int>? //compiler error
+//let _ = genericParameterOptional as GenericClass<Int?> //compiler error
+let _ = V1_genericParameterOptional as? T1_SampleClass
+let _ = V1_genericParameterOptional as? T1_SampleClass?
+let _ = V1_genericParameterOptional as? T1_GenericClass<T1_SampleClass>
+let _ = V1_genericParameterOptional as? T1_GenericClass<T1_SampleClass>?
+let _ = V1_genericParameterOptional as? T1_GenericClass<T1_SampleClass?>
+let _ = V1_genericParameterOptional as? T1_GenericClass<Int>
+let _ = V1_genericParameterOptional as? T1_GenericClass<Int>?
+let _ = V1_genericParameterOptional as? T1_GenericClass<Int?>
+let _ = V1_genericParameterOptional as! T1_SampleClass
+let _ = V1_genericParameterOptional as! T1_SampleClass?
+let _ = V1_genericParameterOptional as! T1_GenericClass<T1_SampleClass>
+let _ = V1_genericParameterOptional as! T1_GenericClass<T1_SampleClass>?
+let _ = V1_genericParameterOptional as! T1_GenericClass<T1_SampleClass?>
+let _ = V1_genericParameterOptional as! T1_GenericClass<Int>
+let _ = V1_genericParameterOptional as! T1_GenericClass<Int>?
+let _ = V1_genericParameterOptional as! T1_GenericClass<Int?>
 
 // type-casting-pattern in case-condition
 if case .case1 = V1_enumCase, V1_castedNonOptional is T1_SampleClass { }
 if case .case1 = V1_enumCase, V1_castedNonOptional is T1_SampleClass? { }
+if case .case1 = V1_enumCase, V1_castedNonOptional is T1_GenericClass<T1_SampleClass> { }
+//if case .case1 = enumCase, castedNonOptional is GenericClass<SampleClass>? { } //compiler error
+if case .case1 = V1_enumCase, V1_castedNonOptional is T1_GenericClass<T1_SampleClass?> { }
+if case .case1 = V1_enumCase, V1_castedNonOptional is T1_GenericClass<Int> { }
+//if case .case1 = enumCase, castedNonOptional is GenericClass<Int>? { } //compiler error
+if case .case1 = V1_enumCase, V1_castedNonOptional is T1_GenericClass<Int?> { }
+//if case .case1 = enumCase, let _ = castedNonOptional as SampleClass { } //compiler error
 if case .case1 = V1_enumCase, let _ = V1_castedNonOptional as T1_SampleClass? { }
+//if case .case1 = enumCase, let _ = castedNonOptional as GenericClass<SampleClass> { } //compiler error
+//if case .case1 = enumCase, let _ = castedNonOptional as GenericClass<SampleClass>? { } //compiler error
+//if case .case1 = enumCase, let _ = castedNonOptional as GenericClass<SampleClass?> { } //compiler error
+//if case .case1 = enumCase, let _ = castedNonOptional as GenericClass<Int> { } //compiler error
+//if case .case1 = enumCase, let _ = castedNonOptional as GenericClass<Int>? { } //compiler error
+//if case .case1 = enumCase, let _ = castedNonOptional as GenericClass<Int?> { } //compiler error
+if case .case1 = V1_enumCase, let _ = V1_castedNonOptional as? T1_SampleClass { }
+if case .case1 = V1_enumCase, let _ = V1_castedNonOptional as? T1_SampleClass? { }
+if case .case1 = V1_enumCase, let _ = V1_castedNonOptional as? T1_GenericClass<T1_SampleClass> { }
+//if case .case1 = enumCase, let _ = castedNonOptional as? GenericClass<SampleClass>? { } //compiler error
+if case .case1 = V1_enumCase, let _ = V1_castedNonOptional as? T1_GenericClass<T1_SampleClass?> { }
+if case .case1 = V1_enumCase, let _ = V1_castedNonOptional as? T1_GenericClass<Int> { }
+//if case .case1 = enumCase, let _ = castedNonOptional as? GenericClass<Int>? { } //compiler error
+if case .case1 = V1_enumCase, let _ = V1_castedNonOptional as? T1_GenericClass<Int?> { }
+//if case .case1 = enumCase, let _ = castedNonOptional as! SampleClass { } //compiler error
+if case .case1 = V1_enumCase, let _ = V1_castedNonOptional as! T1_SampleClass? { }
+//if case .case1 = enumCase, let _ = castedNonOptional as! GenericClass<SampleClass> { } //compiler error
+//if case .case1 = enumCase, let _ = castedNonOptional as! GenericClass<SampleClass>? { } //compiler error
+//if case .case1 = enumCase, let _ = castedNonOptional as! GenericClass<SampleClass?> { } //compiler error
+//if case .case1 = enumCase, let _ = castedNonOptional as! GenericClass<Int> { } //compiler error
+//if case .case1 = enumCase, let _ = castedNonOptional as! GenericClass<Int>? { } //compiler error
+//if case .case1 = enumCase, let _ = castedNonOptional as! GenericClass<Int?> { } //compiler error
 
 if case .case1 = V1_enumCase, V1_castedOptional is T1_SampleClass { }
 if case .case1 = V1_enumCase, V1_castedOptional is T1_SampleClass? { }
+if case .case1 = V1_enumCase, V1_castedOptional is T1_GenericClass<T1_SampleClass> { }
+if case .case1 = V1_enumCase, V1_castedOptional is T1_GenericClass<T1_SampleClass>? { }
+if case .case1 = V1_enumCase, V1_castedOptional is T1_GenericClass<T1_SampleClass?> { }
+if case .case1 = V1_enumCase, V1_castedOptional is T1_GenericClass<Int> { }
+if case .case1 = V1_enumCase, V1_castedOptional is T1_GenericClass<Int>? { }
+if case .case1 = V1_enumCase, V1_castedOptional is T1_GenericClass<Int?> { }
+//if case .case1 = enumCase, let _ = castedOptional as SampleClass { } //compiler error
 if case .case1 = V1_enumCase, let _ = V1_castedOptional as T1_SampleClass? { }
+//if case .case1 = enumCase, let _ = castedOptional as GenericClass<SampleClass> { } //compiler error
+//if case .case1 = enumCase, let _ = castedOptional as GenericClass<SampleClass>? { } //compiler error
+//if case .case1 = enumCase, let _ = castedOptional as GenericClass<SampleClass?> { } //compiler error
+//if case .case1 = enumCase, let _ = castedOptional as GenericClass<Int> { } //compiler error
+//if case .case1 = enumCase, let _ = castedOptional as GenericClass<Int>? { } //compiler error
+//if case .case1 = enumCase, let _ = castedOptional as GenericClass<Int?> { } //compiler error
+if case .case1 = V1_enumCase, let _ = V1_castedOptional as? T1_SampleClass { }
+if case .case1 = V1_enumCase, let _ = V1_castedOptional as? T1_SampleClass? { }
+if case .case1 = V1_enumCase, let _ = V1_castedOptional as? T1_GenericClass<T1_SampleClass> { }
+if case .case1 = V1_enumCase, let _ = V1_castedOptional as? T1_GenericClass<T1_SampleClass>? { }
+if case .case1 = V1_enumCase, let _ = V1_castedOptional as? T1_GenericClass<T1_SampleClass?> { }
+if case .case1 = V1_enumCase, let _ = V1_castedOptional as? T1_GenericClass<Int> { }
+if case .case1 = V1_enumCase, let _ = V1_castedOptional as? T1_GenericClass<Int>? { }
+if case .case1 = V1_enumCase, let _ = V1_castedOptional as? T1_GenericClass<Int?> { }
+//if case .case1 = enumCase, let _ = castedOptional as! SampleClass { } //compiler error
+if case .case1 = V1_enumCase, let _ = V1_castedOptional as! T1_SampleClass? { }
+//if case .case1 = enumCase, let _ = castedOptional as! GenericClass<SampleClass> { } //compiler error
+if case .case1 = V1_enumCase, let _ = V1_castedOptional as! T1_GenericClass<T1_SampleClass>? { }
+//if case .case1 = enumCase, let _ = castedOptional as! GenericClass<SampleClass?> { } //compiler error
+//if case .case1 = enumCase, let _ = castedOptional as! GenericClass<Int> { } //compiler error
+if case .case1 = V1_enumCase, let _ = V1_castedOptional as! T1_GenericClass<Int>? { }
+//if case .case1 = enumCase, let _ = castedOptional as! GenericClass<Int?> { } //compiler error
 
-if case .case1 = V1_enumCase, V1_castedNonOptionalSdk is Int { }
-if case .case1 = V1_enumCase, V1_castedNonOptionalSdk is Int? { }
-if case .case1 = V1_enumCase, let _ = V1_castedNonOptionalSdk as Int? { }
+if case .case1 = V1_enumCase, V1_genericNonOptional is T1_SampleClass { }
+//if case .case1 = enumCase, genericNonOptional is SampleClass? { } //compiler error
+if case .case1 = V1_enumCase, V1_genericNonOptional is T1_GenericClass<T1_SampleClass> { }
+if case .case1 = V1_enumCase, V1_genericNonOptional is T1_GenericClass<T1_SampleClass>? { }
+if case .case1 = V1_enumCase, V1_genericNonOptional is T1_GenericClass<T1_SampleClass?> { }
+if case .case1 = V1_enumCase, V1_genericNonOptional is T1_GenericClass<Int> { }
+//if case .case1 = enumCase, genericNonOptional is GenericClass<Int>? { } //compiler error
+if case .case1 = V1_enumCase, V1_genericNonOptional is T1_GenericClass<Int?> { }
+//if case .case1 = enumCase, let _ = genericNonOptional as SampleClass { } //compiler error
+//if case .case1 = enumCase, let _ = genericNonOptional as SampleClass? { } //compiler error
+//if case .case1 = enumCase, let _ = genericNonOptional as GenericClass<SampleClass> { } //compiler error
+if case .case1 = V1_enumCase, let _ = V1_genericNonOptional as T1_GenericClass<T1_SampleClass>? { }
+//if case .case1 = enumCase, let _ = genericNonOptional as GenericClass<SampleClass?> { } //compiler error
+//if case .case1 = enumCase, let _ = genericNonOptional as GenericClass<Int> { } //compiler error
+//if case .case1 = enumCase, let _ = genericNonOptional as GenericClass<Int>? { } //compiler error
+//if case .case1 = enumCase, let _ = genericNonOptional as GenericClass<Int?> { } //compiler error
+if case .case1 = V1_enumCase, let _ = V1_genericNonOptional as? T1_SampleClass { }
+//if case .case1 = enumCase, let _ = genericNonOptional as? SampleClass? { } //compiler error
+if case .case1 = V1_enumCase, let _ = V1_genericNonOptional as? T1_GenericClass<T1_SampleClass> { }
+if case .case1 = V1_enumCase, let _ = V1_genericNonOptional as? T1_GenericClass<T1_SampleClass>? { }
+if case .case1 = V1_enumCase, let _ = V1_genericNonOptional as? T1_GenericClass<T1_SampleClass?> { }
+if case .case1 = V1_enumCase, let _ = V1_genericNonOptional as? T1_GenericClass<Int> { }
+//if case .case1 = enumCase, let _ = genericNonOptional as? GenericClass<Int>? { } //compiler error
+if case .case1 = V1_enumCase, let _ = V1_genericNonOptional as? T1_GenericClass<Int?> { }
+//if case .case1 = enumCase, let _ = genericNonOptional as! SampleClass { } //compiler error
+//if case .case1 = enumCase, let _ = genericNonOptional as! SampleClass? { } //compiler error
+//if case .case1 = enumCase, let _ = genericNonOptional as! GenericClass<SampleClass> { } //compiler error
+if case .case1 = V1_enumCase, let _ = V1_genericNonOptional as! T1_GenericClass<T1_SampleClass>? { }
+//if case .case1 = enumCase, let _ = genericNonOptional as! GenericClass<SampleClass?> { } //compiler error
+//if case .case1 = enumCase, let _ = genericNonOptional as! GenericClass<Int> { } //compiler error
+//if case .case1 = enumCase, let _ = genericNonOptional as! GenericClass<Int>? { } //compiler error
+//if case .case1 = enumCase, let _ = genericNonOptional as! GenericClass<Int?> { } //compiler error
 
-if case .case1 = V1_enumCase, V1_castedOptionalSdk is Int { }
-if case .case1 = V1_enumCase, V1_castedOptionalSdk is Int? { }
-if case .case1 = V1_enumCase, let _ = V1_castedOptionalSdk as Int? { }
+if case .case1 = V1_enumCase, V1_genericOptional is T1_SampleClass { }
+if case .case1 = V1_enumCase, V1_genericOptional is T1_SampleClass? { }
+if case .case1 = V1_enumCase, V1_genericOptional is T1_GenericClass<T1_SampleClass> { }
+if case .case1 = V1_enumCase, V1_genericOptional is T1_GenericClass<T1_SampleClass>? { }
+if case .case1 = V1_enumCase, V1_genericOptional is T1_GenericClass<T1_SampleClass?> { }
+if case .case1 = V1_enumCase, V1_genericOptional is T1_GenericClass<Int> { }
+if case .case1 = V1_enumCase, V1_genericOptional is T1_GenericClass<Int>? { }
+if case .case1 = V1_enumCase, V1_genericOptional is T1_GenericClass<Int?> { }
+//if case .case1 = enumCase, let _ = genericOptional as SampleClass { } //compiler error
+//if case .case1 = enumCase, let _ = genericOptional as SampleClass? { } //compiler error
+//if case .case1 = enumCase, let _ = genericOptional as GenericClass<SampleClass> { } //compiler error
+if case .case1 = V1_enumCase, let _ = V1_genericOptional as T1_GenericClass<T1_SampleClass>? { }
+//if case .case1 = enumCase, let _ = genericOptional as GenericClass<SampleClass?> { } //compiler error
+//if case .case1 = enumCase, let _ = genericOptional as GenericClass<Int> { } //compiler error
+//if case .case1 = enumCase, let _ = genericOptional as GenericClass<Int>? { } //compiler error
+//if case .case1 = enumCase, let _ = genericOptional as GenericClass<Int?> { } //compiler error
+if case .case1 = V1_enumCase, let _ = V1_genericOptional as? T1_SampleClass { }
+if case .case1 = V1_enumCase, let _ = V1_genericOptional as? T1_SampleClass? { }
+if case .case1 = V1_enumCase, let _ = V1_genericOptional as? T1_GenericClass<T1_SampleClass> { }
+if case .case1 = V1_enumCase, let _ = V1_genericOptional as? T1_GenericClass<T1_SampleClass>? { }
+if case .case1 = V1_enumCase, let _ = V1_genericOptional as? T1_GenericClass<T1_SampleClass?> { }
+if case .case1 = V1_enumCase, let _ = V1_genericOptional as? T1_GenericClass<Int> { }
+if case .case1 = V1_enumCase, let _ = V1_genericOptional as? T1_GenericClass<Int>? { }
+if case .case1 = V1_enumCase, let _ = V1_genericOptional as? T1_GenericClass<Int?> { }
+//if case .case1 = enumCase, let _ = genericOptional as! SampleClass { } //compiler error
+if case .case1 = V1_enumCase, let _ = V1_genericOptional as! T1_SampleClass? { }
+//if case .case1 = enumCase, let _ = genericOptional as! GenericClass<SampleClass> { } //compiler error
+if case .case1 = V1_enumCase, let _ = V1_genericOptional as! T1_GenericClass<T1_SampleClass>? { }
+//if case .case1 = enumCase, let _ = genericOptional as! GenericClass<SampleClass?> { } //compiler error
+//if case .case1 = enumCase, let _ = genericOptional as! GenericClass<Int> { } //compiler error
+if case .case1 = V1_enumCase, let _ = V1_genericOptional as! T1_GenericClass<Int>? { }
+//if case .case1 = enumCase, let _ = genericOptional as! GenericClass<Int?> { } //compiler error
 
+if case .case1 = V1_enumCase, V1_genericParameterOptional is T1_SampleClass { }
+if case .case1 = V1_enumCase, V1_genericParameterOptional is T1_SampleClass? { }
+if case .case1 = V1_enumCase, V1_genericParameterOptional is T1_GenericClass<T1_SampleClass> { }
+if case .case1 = V1_enumCase, V1_genericParameterOptional is T1_GenericClass<T1_SampleClass>? { }
+if case .case1 = V1_enumCase, V1_genericParameterOptional is T1_GenericClass<T1_SampleClass?> { }
+if case .case1 = V1_enumCase, V1_genericParameterOptional is T1_GenericClass<Int> { }
+if case .case1 = V1_enumCase, V1_genericParameterOptional is T1_GenericClass<Int>? { }
+if case .case1 = V1_enumCase, V1_genericParameterOptional is T1_GenericClass<Int?> { }
+//if case .case1 = enumCase, let _ = genericParameterOptional as SampleClass { } //compiler error
+//if case .case1 = enumCase, let _ = genericParameterOptional as SampleClass? { } //compiler error
+//if case .case1 = enumCase, let _ = genericParameterOptional as GenericClass<SampleClass> { } //compiler error
+//if case .case1 = enumCase, let _ = genericParameterOptional as GenericClass<SampleClass>? { } //compiler error
+//if case .case1 = enumCase, let _ = genericParameterOptional as GenericClass<SampleClass?> { } //compiler error
+//if case .case1 = enumCase, let _ = genericParameterOptional as GenericClass<Int> { } //compiler error
+//if case .case1 = enumCase, let _ = genericParameterOptional as GenericClass<Int>? { } //compiler error
+//if case .case1 = enumCase, let _ = genericParameterOptional as GenericClass<Int?> { } //compiler error
+if case .case1 = V1_enumCase, let _ = V1_genericParameterOptional as? T1_SampleClass { }
+if case .case1 = V1_enumCase, let _ = V1_genericParameterOptional as? T1_SampleClass? { }
+if case .case1 = V1_enumCase, let _ = V1_genericParameterOptional as? T1_GenericClass<T1_SampleClass> { }
+if case .case1 = V1_enumCase, let _ = V1_genericParameterOptional as? T1_GenericClass<T1_SampleClass>? { }
+if case .case1 = V1_enumCase, let _ = V1_genericParameterOptional as? T1_GenericClass<T1_SampleClass?> { }
+if case .case1 = V1_enumCase, let _ = V1_genericParameterOptional as? T1_GenericClass<Int> { }
+if case .case1 = V1_enumCase, let _ = V1_genericParameterOptional as? T1_GenericClass<Int>? { }
+if case .case1 = V1_enumCase, let _ = V1_genericParameterOptional as? T1_GenericClass<Int?> { }
+//if case .case1 = enumCase, let _ = genericParameterOptional as! SampleClass { } //compiler error
+if case .case1 = V1_enumCase, let _ = V1_genericParameterOptional as! T1_SampleClass? { }
+//if case .case1 = enumCase, let _ = genericParameterOptional as! GenericClass<SampleClass> { } //compiler error
+if case .case1 = V1_enumCase, let _ = V1_genericParameterOptional as! T1_GenericClass<T1_SampleClass>? { }
+//if case .case1 = enumCase, let _ = genericParameterOptional as! GenericClass<SampleClass?> { } //compiler error
+//if case .case1 = enumCase, let _ = genericParameterOptional as! GenericClass<Int> { } //compiler error
+if case .case1 = V1_enumCase, let _ = V1_genericParameterOptional as! T1_GenericClass<Int>? { }
+//if case .case1 = enumCase, let _ = genericParameterOptional as! GenericClass<Int?> { } //compiler error
diff --git a/swift/test/Obfuscation/FullProcess/TypeCasting/TypeCasting.swift b/swift/test/Obfuscation/FullProcess/TypeCasting/TypeCasting.swift
index b53ad000743..f42ebfb86f5 100644
--- a/swift/test/Obfuscation/FullProcess/TypeCasting/TypeCasting.swift
+++ b/swift/test/Obfuscation/FullProcess/TypeCasting/TypeCasting.swift
@@ -1,68 +1,368 @@
 //RUN: %target-prepare-obfuscation-for-file "TypeCasting" %target-run-full-obfuscation
 import AppKit
 
-class SampleClass { }
+class SomeGenericClass<Param> {}
 
-let castedNonOptional = SampleClass()
-let castedOptional: SampleClass? = nil
+enum RandomEnum {
+  case Foo
+}
 
-let castedNonOptionalSdk = 1
-let castedOptionalSdk: Int? = nil
+func someRandomFunc() -> RandomEnum { return RandomEnum.Foo }
 
+final class TestController2: NSViewController {
+  
+  override func viewDidLoad() {
+    super.viewDidLoad()
+  }
+  
+  override func prepare(for segue: NSStoryboardSegue, sender: Any?) {
+    if case .Foo = someRandomFunc() , sender is SomeGenericClass<String> {
+      let casted = sender as! SomeGenericClass<String>
+    }
+  }
+}
+
+class SampleClass { }
 enum SampleEnum {
   case case1
 }
 let enumCase = SampleEnum.case1
+class GenericClass<T> { }
+
+let castedNonOptional = SampleClass()
+let castedOptional: SampleClass? = nil
+let genericNonOptional = GenericClass<SampleClass>()
+let genericOptional: GenericClass<SampleClass>? = nil
+let genericParameterOptional: GenericClass<SampleClass>? = nil
 
 // binary-expression with type-casting-operator
-castedNonOptional is SampleClass
-castedNonOptional is SampleClass?
-castedNonOptional as SampleClass
-castedNonOptional as SampleClass?
-castedNonOptional as? SampleClass
-castedNonOptional as? SampleClass?
-castedNonOptional as! SampleClass
-castedNonOptional as! SampleClass?
-
-castedOptional is SampleClass
-castedOptional is SampleClass?
-castedOptional as SampleClass?
-castedOptional as? SampleClass
-castedOptional as? SampleClass?
-castedOptional as! SampleClass
-castedOptional as! SampleClass?
-
-castedNonOptionalSdk is Int
-castedNonOptionalSdk is Int?
-castedNonOptionalSdk as Int
-castedNonOptionalSdk as Int?
-castedNonOptionalSdk as? Int
-castedNonOptionalSdk as? Int?
-castedNonOptionalSdk as! Int
-castedNonOptionalSdk as! Int?
-
-castedOptionalSdk is Int
-castedOptionalSdk is Int?
-castedOptionalSdk as Int?
-castedOptionalSdk as? Int
-castedOptionalSdk as? Int?
-castedOptionalSdk as! Int
-castedOptionalSdk as! Int?
+let _ = castedNonOptional is SampleClass
+let _ = castedNonOptional is SampleClass?
+let _ = castedNonOptional is GenericClass<SampleClass>
+//let _ = castedNonOptional is GenericClass<SampleClass>? //compiler error
+let _ = castedNonOptional is GenericClass<SampleClass?>
+let _ = castedNonOptional is GenericClass<Int>
+//let _ = castedNonOptional is GenericClass<Int>? //compiler error
+let _ = castedNonOptional is GenericClass<Int?>
+let _ = castedNonOptional as SampleClass
+let _ = castedNonOptional as SampleClass?
+//let _ = castedNonOptional as GenericClass<SampleClass> //compiler error
+//let _ = castedNonOptional as GenericClass<SampleClass>? //compiler error
+//let _ = castedNonOptional as GenericClass<SampleClass?> //compiler error
+//let _ = castedNonOptional as GenericClass<Int> //compiler error
+//let _ = castedNonOptional as GenericClass<Int>? //compiler error
+//let _ = castedNonOptional as GenericClass<Int?> //compiler error
+let _ = castedNonOptional as? SampleClass
+let _ = castedNonOptional as? SampleClass?
+let _ = castedNonOptional as? GenericClass<SampleClass>
+//let _ = castedNonOptional as? GenericClass<SampleClass>? //compiler error
+let _ = castedNonOptional as? GenericClass<SampleClass?>
+let _ = castedNonOptional as? GenericClass<Int>
+//let _ = castedNonOptional as? GenericClass<Int>? //compiler error
+let _ = castedNonOptional as? GenericClass<Int?>
+let _ = castedNonOptional as! SampleClass
+let _ = castedNonOptional as! SampleClass?
+let _ = castedNonOptional as! GenericClass<SampleClass>
+//let _ = castedNonOptional as! GenericClass<SampleClass>? //compiler error
+let _ = castedNonOptional as! GenericClass<SampleClass?>
+let _ = castedNonOptional as! GenericClass<Int>
+//let _ = castedNonOptional as! GenericClass<Int>? //compiler error
+let _ = castedNonOptional as! GenericClass<Int?>
+
+let _ = castedOptional is SampleClass
+let _ = castedOptional is SampleClass?
+let _ = castedOptional is GenericClass<SampleClass>
+let _ = castedOptional is GenericClass<SampleClass>?
+let _ = castedOptional is GenericClass<SampleClass?>
+let _ = castedOptional is GenericClass<Int>
+let _ = castedOptional is GenericClass<Int>?
+let _ = castedOptional is GenericClass<Int?>
+//let _ = castedOptional as SampleClass //compiler error
+let _ = castedOptional as SampleClass?
+//let _ = castedOptional as GenericClass<SampleClass> //compiler error
+//let _ = castedOptional as GenericClass<SampleClass>? //compiler error
+//let _ = castedOptional as GenericClass<SampleClass?> //compiler error
+//let _ = castedOptional as GenericClass<Int> //compiler error
+//let _ = castedOptional as GenericClass<Int>? //compiler error
+//let _ = castedOptional as GenericClass<Int?> //compiler error
+let _ = castedOptional as? SampleClass
+let _ = castedOptional as? SampleClass?
+let _ = castedOptional as? GenericClass<SampleClass>
+let _ = castedOptional as? GenericClass<SampleClass>?
+let _ = castedOptional as? GenericClass<SampleClass?>
+let _ = castedOptional as? GenericClass<Int>
+let _ = castedOptional as? GenericClass<Int>?
+let _ = castedOptional as? GenericClass<Int?>
+let _ = castedOptional as! SampleClass
+let _ = castedOptional as! SampleClass?
+let _ = castedOptional as! GenericClass<SampleClass>
+let _ = castedOptional as! GenericClass<SampleClass>?
+let _ = castedOptional as! GenericClass<SampleClass?>
+let _ = castedOptional as! GenericClass<Int>
+let _ = castedOptional as! GenericClass<Int>?
+let _ = castedOptional as! GenericClass<Int?>
+
+let _ = genericNonOptional is SampleClass
+//let _ = genericNonOptional is SampleClass? //compiler error
+let _ = genericNonOptional is GenericClass<SampleClass>
+let _ = genericNonOptional is GenericClass<SampleClass>?
+let _ = genericNonOptional is GenericClass<SampleClass?>
+let _ = genericNonOptional is GenericClass<Int>
+//let _ = genericNonOptional is GenericClass<Int>? //compiler error
+let _ = genericNonOptional is GenericClass<Int?>
+//let _ = genericNonOptional as SampleClass //compiler error
+//let _ = genericNonOptional as SampleClass? //compiler error
+let _ = genericNonOptional as GenericClass<SampleClass>
+let _ = genericNonOptional as GenericClass<SampleClass>?
+//let _ = genericNonOptional as GenericClass<SampleClass?> //compiler error
+//let _ = genericNonOptional as GenericClass<Int> //compiler error
+//let _ = genericNonOptional as GenericClass<Int>? //compiler error
+//let _ = genericNonOptional as GenericClass<Int?> //compiler error
+let _ = genericNonOptional as? SampleClass
+//let _ = genericNonOptional as? SampleClass? //compiler error
+let _ = genericNonOptional as? GenericClass<SampleClass>
+let _ = genericNonOptional as? GenericClass<SampleClass>?
+let _ = genericNonOptional as? GenericClass<SampleClass?>
+let _ = genericNonOptional as? GenericClass<Int>
+//let _ = genericNonOptional as? GenericClass<Int>? //compiler error
+let _ = genericNonOptional as? GenericClass<Int?>
+let _ = genericNonOptional as! SampleClass
+//let _ = genericNonOptional as! SampleClass? //compiler error
+let _ = genericNonOptional as! GenericClass<SampleClass>
+let _ = genericNonOptional as! GenericClass<SampleClass>?
+let _ = genericNonOptional as! GenericClass<SampleClass?>
+let _ = genericNonOptional as! GenericClass<Int>
+//let _ = genericNonOptional as! GenericClass<Int>? //compiler error
+let _ = genericNonOptional as! GenericClass<Int?>
+
+let _ = genericOptional is SampleClass
+let _ = genericOptional is SampleClass?
+let _ = genericOptional is GenericClass<SampleClass>
+let _ = genericOptional is GenericClass<SampleClass>?
+let _ = genericOptional is GenericClass<SampleClass?>
+let _ = genericOptional is GenericClass<Int>
+let _ = genericOptional is GenericClass<Int>?
+let _ = genericOptional is GenericClass<Int?>
+//let _ = genericOptional as SampleClass //compiler error
+//let _ = genericOptional as SampleClass? //compiler error
+//let _ = genericOptional as GenericClass<SampleClass> //compiler error
+let _ = genericOptional as GenericClass<SampleClass>?
+//let _ = genericOptional as GenericClass<SampleClass?> //compiler error
+//let _ = genericOptional as GenericClass<Int> //compiler error
+//let _ = genericOptional as GenericClass<Int>? //compiler error
+//let _ = genericOptional as GenericClass<Int?> //compiler error
+let _ = genericOptional as? SampleClass
+let _ = genericOptional as? SampleClass?
+let _ = genericOptional as? GenericClass<SampleClass>
+let _ = genericOptional as? GenericClass<SampleClass>?
+let _ = genericOptional as? GenericClass<SampleClass?>
+let _ = genericOptional as? GenericClass<Int>
+let _ = genericOptional as? GenericClass<Int>?
+let _ = genericOptional as? GenericClass<Int?>
+let _ = genericOptional as! SampleClass
+let _ = genericOptional as! SampleClass?
+let _ = genericOptional as! GenericClass<SampleClass>
+let _ = genericOptional as! GenericClass<SampleClass>?
+let _ = genericOptional as! GenericClass<SampleClass?>
+let _ = genericOptional as! GenericClass<Int>
+let _ = genericOptional as! GenericClass<Int>?
+let _ = genericOptional as! GenericClass<Int?>
+
+let _ = genericParameterOptional is SampleClass
+let _ = genericParameterOptional is SampleClass?
+let _ = genericParameterOptional is GenericClass<SampleClass>
+let _ = genericParameterOptional is GenericClass<SampleClass>?
+let _ = genericParameterOptional is GenericClass<SampleClass?>
+let _ = genericParameterOptional is GenericClass<Int>
+let _ = genericParameterOptional is GenericClass<Int>?
+let _ = genericParameterOptional is GenericClass<Int?>
+//let _ = genericParameterOptional as SampleClass //compiler error
+//let _ = genericParameterOptional as SampleClass? //compiler error
+//let _ = genericParameterOptional as GenericClass<SampleClass> //compiler error
+let _ = genericParameterOptional as GenericClass<SampleClass>?
+//let _ = genericParameterOptional as GenericClass<SampleClass?> //compiler error
+//let _ = genericParameterOptional as GenericClass<Int> //compiler error
+//let _ = genericParameterOptional as GenericClass<Int>? //compiler error
+//let _ = genericParameterOptional as GenericClass<Int?> //compiler error
+let _ = genericParameterOptional as? SampleClass
+let _ = genericParameterOptional as? SampleClass?
+let _ = genericParameterOptional as? GenericClass<SampleClass>
+let _ = genericParameterOptional as? GenericClass<SampleClass>?
+let _ = genericParameterOptional as? GenericClass<SampleClass?>
+let _ = genericParameterOptional as? GenericClass<Int>
+let _ = genericParameterOptional as? GenericClass<Int>?
+let _ = genericParameterOptional as? GenericClass<Int?>
+let _ = genericParameterOptional as! SampleClass
+let _ = genericParameterOptional as! SampleClass?
+let _ = genericParameterOptional as! GenericClass<SampleClass>
+let _ = genericParameterOptional as! GenericClass<SampleClass>?
+let _ = genericParameterOptional as! GenericClass<SampleClass?>
+let _ = genericParameterOptional as! GenericClass<Int>
+let _ = genericParameterOptional as! GenericClass<Int>?
+let _ = genericParameterOptional as! GenericClass<Int?>
 
 // type-casting-pattern in case-condition
 if case .case1 = enumCase, castedNonOptional is SampleClass { }
 if case .case1 = enumCase, castedNonOptional is SampleClass? { }
+if case .case1 = enumCase, castedNonOptional is GenericClass<SampleClass> { }
+//if case .case1 = enumCase, castedNonOptional is GenericClass<SampleClass>? { } //compiler error
+if case .case1 = enumCase, castedNonOptional is GenericClass<SampleClass?> { }
+if case .case1 = enumCase, castedNonOptional is GenericClass<Int> { }
+//if case .case1 = enumCase, castedNonOptional is GenericClass<Int>? { } //compiler error
+if case .case1 = enumCase, castedNonOptional is GenericClass<Int?> { }
+//if case .case1 = enumCase, let _ = castedNonOptional as SampleClass { } //compiler error
 if case .case1 = enumCase, let _ = castedNonOptional as SampleClass? { }
+//if case .case1 = enumCase, let _ = castedNonOptional as GenericClass<SampleClass> { } //compiler error
+//if case .case1 = enumCase, let _ = castedNonOptional as GenericClass<SampleClass>? { } //compiler error
+//if case .case1 = enumCase, let _ = castedNonOptional as GenericClass<SampleClass?> { } //compiler error
+//if case .case1 = enumCase, let _ = castedNonOptional as GenericClass<Int> { } //compiler error
+//if case .case1 = enumCase, let _ = castedNonOptional as GenericClass<Int>? { } //compiler error
+//if case .case1 = enumCase, let _ = castedNonOptional as GenericClass<Int?> { } //compiler error
+if case .case1 = enumCase, let _ = castedNonOptional as? SampleClass { }
+if case .case1 = enumCase, let _ = castedNonOptional as? SampleClass? { }
+if case .case1 = enumCase, let _ = castedNonOptional as? GenericClass<SampleClass> { }
+//if case .case1 = enumCase, let _ = castedNonOptional as? GenericClass<SampleClass>? { } //compiler error
+if case .case1 = enumCase, let _ = castedNonOptional as? GenericClass<SampleClass?> { }
+if case .case1 = enumCase, let _ = castedNonOptional as? GenericClass<Int> { }
+//if case .case1 = enumCase, let _ = castedNonOptional as? GenericClass<Int>? { } //compiler error
+if case .case1 = enumCase, let _ = castedNonOptional as? GenericClass<Int?> { }
+//if case .case1 = enumCase, let _ = castedNonOptional as! SampleClass { } //compiler error
+if case .case1 = enumCase, let _ = castedNonOptional as! SampleClass? { }
+//if case .case1 = enumCase, let _ = castedNonOptional as! GenericClass<SampleClass> { } //compiler error
+//if case .case1 = enumCase, let _ = castedNonOptional as! GenericClass<SampleClass>? { } //compiler error
+//if case .case1 = enumCase, let _ = castedNonOptional as! GenericClass<SampleClass?> { } //compiler error
+//if case .case1 = enumCase, let _ = castedNonOptional as! GenericClass<Int> { } //compiler error
+//if case .case1 = enumCase, let _ = castedNonOptional as! GenericClass<Int>? { } //compiler error
+//if case .case1 = enumCase, let _ = castedNonOptional as! GenericClass<Int?> { } //compiler error
 
 if case .case1 = enumCase, castedOptional is SampleClass { }
 if case .case1 = enumCase, castedOptional is SampleClass? { }
+if case .case1 = enumCase, castedOptional is GenericClass<SampleClass> { }
+if case .case1 = enumCase, castedOptional is GenericClass<SampleClass>? { }
+if case .case1 = enumCase, castedOptional is GenericClass<SampleClass?> { }
+if case .case1 = enumCase, castedOptional is GenericClass<Int> { }
+if case .case1 = enumCase, castedOptional is GenericClass<Int>? { }
+if case .case1 = enumCase, castedOptional is GenericClass<Int?> { }
+//if case .case1 = enumCase, let _ = castedOptional as SampleClass { } //compiler error
 if case .case1 = enumCase, let _ = castedOptional as SampleClass? { }
+//if case .case1 = enumCase, let _ = castedOptional as GenericClass<SampleClass> { } //compiler error
+//if case .case1 = enumCase, let _ = castedOptional as GenericClass<SampleClass>? { } //compiler error
+//if case .case1 = enumCase, let _ = castedOptional as GenericClass<SampleClass?> { } //compiler error
+//if case .case1 = enumCase, let _ = castedOptional as GenericClass<Int> { } //compiler error
+//if case .case1 = enumCase, let _ = castedOptional as GenericClass<Int>? { } //compiler error
+//if case .case1 = enumCase, let _ = castedOptional as GenericClass<Int?> { } //compiler error
+if case .case1 = enumCase, let _ = castedOptional as? SampleClass { }
+if case .case1 = enumCase, let _ = castedOptional as? SampleClass? { }
+if case .case1 = enumCase, let _ = castedOptional as? GenericClass<SampleClass> { }
+if case .case1 = enumCase, let _ = castedOptional as? GenericClass<SampleClass>? { }
+if case .case1 = enumCase, let _ = castedOptional as? GenericClass<SampleClass?> { }
+if case .case1 = enumCase, let _ = castedOptional as? GenericClass<Int> { }
+if case .case1 = enumCase, let _ = castedOptional as? GenericClass<Int>? { }
+if case .case1 = enumCase, let _ = castedOptional as? GenericClass<Int?> { }
+//if case .case1 = enumCase, let _ = castedOptional as! SampleClass { } //compiler error
+if case .case1 = enumCase, let _ = castedOptional as! SampleClass? { }
+//if case .case1 = enumCase, let _ = castedOptional as! GenericClass<SampleClass> { } //compiler error
+if case .case1 = enumCase, let _ = castedOptional as! GenericClass<SampleClass>? { }
+//if case .case1 = enumCase, let _ = castedOptional as! GenericClass<SampleClass?> { } //compiler error
+//if case .case1 = enumCase, let _ = castedOptional as! GenericClass<Int> { } //compiler error
+if case .case1 = enumCase, let _ = castedOptional as! GenericClass<Int>? { }
+//if case .case1 = enumCase, let _ = castedOptional as! GenericClass<Int?> { } //compiler error
 
-if case .case1 = enumCase, castedNonOptionalSdk is Int { }
-if case .case1 = enumCase, castedNonOptionalSdk is Int? { }
-if case .case1 = enumCase, let _ = castedNonOptionalSdk as Int? { }
+if case .case1 = enumCase, genericNonOptional is SampleClass { }
+//if case .case1 = enumCase, genericNonOptional is SampleClass? { } //compiler error
+if case .case1 = enumCase, genericNonOptional is GenericClass<SampleClass> { }
+if case .case1 = enumCase, genericNonOptional is GenericClass<SampleClass>? { }
+if case .case1 = enumCase, genericNonOptional is GenericClass<SampleClass?> { }
+if case .case1 = enumCase, genericNonOptional is GenericClass<Int> { }
+//if case .case1 = enumCase, genericNonOptional is GenericClass<Int>? { } //compiler error
+if case .case1 = enumCase, genericNonOptional is GenericClass<Int?> { }
+//if case .case1 = enumCase, let _ = genericNonOptional as SampleClass { } //compiler error
+//if case .case1 = enumCase, let _ = genericNonOptional as SampleClass? { } //compiler error
+//if case .case1 = enumCase, let _ = genericNonOptional as GenericClass<SampleClass> { } //compiler error
+if case .case1 = enumCase, let _ = genericNonOptional as GenericClass<SampleClass>? { }
+//if case .case1 = enumCase, let _ = genericNonOptional as GenericClass<SampleClass?> { } //compiler error
+//if case .case1 = enumCase, let _ = genericNonOptional as GenericClass<Int> { } //compiler error
+//if case .case1 = enumCase, let _ = genericNonOptional as GenericClass<Int>? { } //compiler error
+//if case .case1 = enumCase, let _ = genericNonOptional as GenericClass<Int?> { } //compiler error
+if case .case1 = enumCase, let _ = genericNonOptional as? SampleClass { }
+//if case .case1 = enumCase, let _ = genericNonOptional as? SampleClass? { } //compiler error
+if case .case1 = enumCase, let _ = genericNonOptional as? GenericClass<SampleClass> { }
+if case .case1 = enumCase, let _ = genericNonOptional as? GenericClass<SampleClass>? { }
+if case .case1 = enumCase, let _ = genericNonOptional as? GenericClass<SampleClass?> { }
+if case .case1 = enumCase, let _ = genericNonOptional as? GenericClass<Int> { }
+//if case .case1 = enumCase, let _ = genericNonOptional as? GenericClass<Int>? { } //compiler error
+if case .case1 = enumCase, let _ = genericNonOptional as? GenericClass<Int?> { }
+//if case .case1 = enumCase, let _ = genericNonOptional as! SampleClass { } //compiler error
+//if case .case1 = enumCase, let _ = genericNonOptional as! SampleClass? { } //compiler error
+//if case .case1 = enumCase, let _ = genericNonOptional as! GenericClass<SampleClass> { } //compiler error
+if case .case1 = enumCase, let _ = genericNonOptional as! GenericClass<SampleClass>? { }
+//if case .case1 = enumCase, let _ = genericNonOptional as! GenericClass<SampleClass?> { } //compiler error
+//if case .case1 = enumCase, let _ = genericNonOptional as! GenericClass<Int> { } //compiler error
+//if case .case1 = enumCase, let _ = genericNonOptional as! GenericClass<Int>? { } //compiler error
+//if case .case1 = enumCase, let _ = genericNonOptional as! GenericClass<Int?> { } //compiler error
 
-if case .case1 = enumCase, castedOptionalSdk is Int { }
-if case .case1 = enumCase, castedOptionalSdk is Int? { }
-if case .case1 = enumCase, let _ = castedOptionalSdk as Int? { }
+if case .case1 = enumCase, genericOptional is SampleClass { }
+if case .case1 = enumCase, genericOptional is SampleClass? { }
+if case .case1 = enumCase, genericOptional is GenericClass<SampleClass> { }
+if case .case1 = enumCase, genericOptional is GenericClass<SampleClass>? { }
+if case .case1 = enumCase, genericOptional is GenericClass<SampleClass?> { }
+if case .case1 = enumCase, genericOptional is GenericClass<Int> { }
+if case .case1 = enumCase, genericOptional is GenericClass<Int>? { }
+if case .case1 = enumCase, genericOptional is GenericClass<Int?> { }
+//if case .case1 = enumCase, let _ = genericOptional as SampleClass { } //compiler error
+//if case .case1 = enumCase, let _ = genericOptional as SampleClass? { } //compiler error
+//if case .case1 = enumCase, let _ = genericOptional as GenericClass<SampleClass> { } //compiler error
+if case .case1 = enumCase, let _ = genericOptional as GenericClass<SampleClass>? { }
+//if case .case1 = enumCase, let _ = genericOptional as GenericClass<SampleClass?> { } //compiler error
+//if case .case1 = enumCase, let _ = genericOptional as GenericClass<Int> { } //compiler error
+//if case .case1 = enumCase, let _ = genericOptional as GenericClass<Int>? { } //compiler error
+//if case .case1 = enumCase, let _ = genericOptional as GenericClass<Int?> { } //compiler error
+if case .case1 = enumCase, let _ = genericOptional as? SampleClass { }
+if case .case1 = enumCase, let _ = genericOptional as? SampleClass? { }
+if case .case1 = enumCase, let _ = genericOptional as? GenericClass<SampleClass> { }
+if case .case1 = enumCase, let _ = genericOptional as? GenericClass<SampleClass>? { }
+if case .case1 = enumCase, let _ = genericOptional as? GenericClass<SampleClass?> { }
+if case .case1 = enumCase, let _ = genericOptional as? GenericClass<Int> { }
+if case .case1 = enumCase, let _ = genericOptional as? GenericClass<Int>? { }
+if case .case1 = enumCase, let _ = genericOptional as? GenericClass<Int?> { }
+//if case .case1 = enumCase, let _ = genericOptional as! SampleClass { } //compiler error
+if case .case1 = enumCase, let _ = genericOptional as! SampleClass? { }
+//if case .case1 = enumCase, let _ = genericOptional as! GenericClass<SampleClass> { } //compiler error
+if case .case1 = enumCase, let _ = genericOptional as! GenericClass<SampleClass>? { }
+//if case .case1 = enumCase, let _ = genericOptional as! GenericClass<SampleClass?> { } //compiler error
+//if case .case1 = enumCase, let _ = genericOptional as! GenericClass<Int> { } //compiler error
+if case .case1 = enumCase, let _ = genericOptional as! GenericClass<Int>? { }
+//if case .case1 = enumCase, let _ = genericOptional as! GenericClass<Int?> { } //compiler error
 
+if case .case1 = enumCase, genericParameterOptional is SampleClass { }
+if case .case1 = enumCase, genericParameterOptional is SampleClass? { }
+if case .case1 = enumCase, genericParameterOptional is GenericClass<SampleClass> { }
+if case .case1 = enumCase, genericParameterOptional is GenericClass<SampleClass>? { }
+if case .case1 = enumCase, genericParameterOptional is GenericClass<SampleClass?> { }
+if case .case1 = enumCase, genericParameterOptional is GenericClass<Int> { }
+if case .case1 = enumCase, genericParameterOptional is GenericClass<Int>? { }
+if case .case1 = enumCase, genericParameterOptional is GenericClass<Int?> { }
+//if case .case1 = enumCase, let _ = genericParameterOptional as SampleClass { } //compiler error
+//if case .case1 = enumCase, let _ = genericParameterOptional as SampleClass? { } //compiler error
+//if case .case1 = enumCase, let _ = genericParameterOptional as GenericClass<SampleClass> { } //compiler error
+//if case .case1 = enumCase, let _ = genericParameterOptional as GenericClass<SampleClass>? { } //compiler error
+//if case .case1 = enumCase, let _ = genericParameterOptional as GenericClass<SampleClass?> { } //compiler error
+//if case .case1 = enumCase, let _ = genericParameterOptional as GenericClass<Int> { } //compiler error
+//if case .case1 = enumCase, let _ = genericParameterOptional as GenericClass<Int>? { } //compiler error
+//if case .case1 = enumCase, let _ = genericParameterOptional as GenericClass<Int?> { } //compiler error
+if case .case1 = enumCase, let _ = genericParameterOptional as? SampleClass { }
+if case .case1 = enumCase, let _ = genericParameterOptional as? SampleClass? { }
+if case .case1 = enumCase, let _ = genericParameterOptional as? GenericClass<SampleClass> { }
+if case .case1 = enumCase, let _ = genericParameterOptional as? GenericClass<SampleClass>? { }
+if case .case1 = enumCase, let _ = genericParameterOptional as? GenericClass<SampleClass?> { }
+if case .case1 = enumCase, let _ = genericParameterOptional as? GenericClass<Int> { }
+if case .case1 = enumCase, let _ = genericParameterOptional as? GenericClass<Int>? { }
+if case .case1 = enumCase, let _ = genericParameterOptional as? GenericClass<Int?> { }
+//if case .case1 = enumCase, let _ = genericParameterOptional as! SampleClass { } //compiler error
+if case .case1 = enumCase, let _ = genericParameterOptional as! SampleClass? { }
+//if case .case1 = enumCase, let _ = genericParameterOptional as! GenericClass<SampleClass> { } //compiler error
+if case .case1 = enumCase, let _ = genericParameterOptional as! GenericClass<SampleClass>? { }
+//if case .case1 = enumCase, let _ = genericParameterOptional as! GenericClass<SampleClass?> { } //compiler error
+//if case .case1 = enumCase, let _ = genericParameterOptional as! GenericClass<Int> { } //compiler error
+if case .case1 = enumCase, let _ = genericParameterOptional as! GenericClass<Int>? { }
+//if case .case1 = enumCase, let _ = genericParameterOptional as! GenericClass<Int?> { } //compiler error
\ No newline at end of file
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
index dabde0fb4a9..e13e0d34288 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
@@ -16,29 +16,6 @@ final class T1_DebugBlock {
   }
 }
 
-// non working if case cast
-
-class T1_SomeGenericClass<Param> {}
-
-enum T1_RandomEnum {
-  case Foo
-}
-
-func NF1_someRandomFunc() -> T1_RandomEnum { return T1_RandomEnum.Foo }
-
-final class T1_TestController2: NSViewController {
-  
-  override func viewDidLoad() {
-    super.viewDidLoad()
-  }
-  
-  override func prepare(for segue: NSStoryboardSegue, sender: Any?) {
-    if case .Foo = NF1_someRandomFunc() , sender is T1_SomeGenericClass<String> {
-      let V1_casted = sender as! T1_SomeGenericClass<String>
-    }
-  }
-}
-
 // for each stuff
 
 final class T1_ForEachController: NSViewController {
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
index 3fee56bcb30..054c1a2b00c 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
@@ -17,64 +17,6 @@ final class DebugBlock {
   }
 }
 
-// fun with protocols and extensions
-struct TestStruct {}
-
-protocol ParentProtocol {
-  associatedtype Fuzz
-  associatedtype Bazz
-  associatedtype Gazz
-  
-  func foo(_ indexPath: Int) -> String
-  func bar(_ fuzz: Fuzz, extBazz bazz: Bazz, extGazz gazz: Gazz, atIndexPath indexPath: Int)
-}
-
-protocol ChildProtocol: ParentProtocol {
-  var items: [[Gazz]] { get }
-}
-
-
-protocol ChildProtocol2: ChildProtocol { }
-
-
-final class TestClass {
-  
-  var items: [[Gazz]] = [[
-    
-    ]]
-}
-
-
-extension TestClass: ChildProtocol2 {
-  
-  func foo(_ indexPath: Int) -> String { return "" }
-  
-  func bar(_ fuzz: String, extBazz bazz: TestStruct, extGazz gazz: Test, atIndexPath indexPath: Int) {}
-}
-
-// non working if case cast
-
-class SomeGenericClass<Param> {}
-
-enum RandomEnum {
-  case Foo
-}
-
-func someRandomFunc() -> RandomEnum { return RandomEnum.Foo }
-
-final class TestController2: NSViewController {
-  
-  override func viewDidLoad() {
-    super.viewDidLoad()
-  }
-  
-  override func prepare(for segue: NSStoryboardSegue, sender: Any?) {
-    if case .Foo = someRandomFunc() , sender is SomeGenericClass<String> {
-      let casted = sender as! SomeGenericClass<String>
-    }
-  }
-}
-
 // for each stuff
 
 final class ForEachController: NSViewController {
-- 
2.17.1 (Apple Git-112)


From 529db72d26a02607c3467c4e03b9ce287d14527a Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Wed, 7 Mar 2018 13:32:34 +0100
Subject: [PATCH 114/138] Updated tests for unsupported renamings

Reviewers: krzysztof.siejkowski, michal.zielinski

Reviewed By: krzysztof.siejkowski, michal.zielinski

Subscribers: michal.zielinski, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2874
---
 .../Expected/FunctionParameterNames.swift     | 17 +++++++++++
 .../FunctionParameterNames.swift              | 19 ++++++++++++
 .../Properties/Expected/Properties.swift      | 17 +++++++++++
 .../FullProcess/Properties/Properties.swift   | 17 +++++++++++
 .../Selectors/Expected/Selectors.swift        |  1 +
 .../FullProcess/Selectors/Selectors.swift     |  1 +
 .../Expected/UnsupportedDropnote.swift        | 17 -----------
 .../UnsupportedDropnote.swift                 | 17 -----------
 .../UnsupportedFunctionParameterNames.swift   | 28 ++----------------
 .../UnsupportedFunctionParameterNames.swift   | 29 ++-----------------
 .../Expected/UnsupportedFunctions.swift       | 24 ---------------
 .../UnsupportedFunctions.swift                | 13 ---------
 .../Expected/UnsupportedProperties.swift      | 23 ---------------
 .../Expected/UnsupportedSelectors.swift       |  5 +---
 .../UnsupportedSelectors.swift                |  6 +---
 15 files changed, 80 insertions(+), 154 deletions(-)

diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
index 8596b9c342c..78ea042a4fd 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
@@ -118,6 +118,16 @@ class T1_SuperTest {
 
 let V1_conv = T1_SuperTest(SP2_convP1:1, SP1_convP2:"asd")
 
+//protocol constructor
+protocol T1_ProtoInit {
+  init(SP1_protoInitParamA: String, SP1_protoInitParamB: Int)
+}
+
+class T1_ProtoInitClass: T1_ProtoInit {
+  required init(SP1_protoInitParamA: String, SP1_protoInitParamB: Int) {
+  }
+}
+let V1_pic = T1_ProtoInitClass(SP1_protoInitParamA: "", SP1_protoInitParamB: 42)
 
 // overridden method parameters
 final class T1_TestController: NSViewController {
@@ -159,3 +169,10 @@ class T1_Foo {
 let V1_FooObj1 = T1_Foo(SP1_FieldA: "test")
 let V1_FooObj2 = T1_Foo(SP1_FieldA: "test", SP1_FieldB: nil)
 
+//setter parameter
+class T1_ClassWithSetter {
+  var V1_testVar: String {
+    get { return "" }
+    set(SP1_newTestVar) {}
+  }
+}
diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
index 572c50523a6..91b54b29d23 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
@@ -120,6 +120,17 @@ class SuperTest {
 
 let conv = SuperTest(convP1:1, convP2:"asd")
 
+//protocol constructor
+protocol ProtoInit {
+  init(protoInitParamA: String, protoInitParamB: Int)
+}
+
+class ProtoInitClass: ProtoInit {
+  required init(protoInitParamA: String, protoInitParamB: Int) {
+  }
+}
+let pic = ProtoInitClass(protoInitParamA: "", protoInitParamB: 42)
+
 // overridden method parameters
 final class TestController: NSViewController {
   
@@ -159,3 +170,11 @@ class Foo {
 
 let FooObj1 = Foo(FieldA: "test")
 let FooObj2 = Foo(FieldA: "test", FieldB: nil)
+
+//setter parameter
+class ClassWithSetter {
+  var testVar: String {
+    get { return "" }
+    set(newTestVar) {}
+  }
+}
diff --git a/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift b/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift
index 854524dcf11..9b876df57c5 100644
--- a/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift
+++ b/swift/test/Obfuscation/FullProcess/Properties/Expected/Properties.swift
@@ -129,3 +129,20 @@ struct T1_SampleStruct {
     V1_sample.V1_prop = "42"
   }
 }
+
+// for each stuff
+
+final class T1_ForEachController: NSViewController {
+  
+  var V1_unitsSegmentedControl: NSSegmentedControl!
+  
+  var V1_titles: [String] = []
+  
+  fileprivate func NF1_buggyFunc() {
+    V1_titles.enumerated().map {
+      index, title in (title, index)
+      }.forEach(V1_unitsSegmentedControl.setLabel(_:forSegment:))
+    
+    V1_unitsSegmentedControl.selectedSegment = 0
+  }
+}
\ No newline at end of file
diff --git a/swift/test/Obfuscation/FullProcess/Properties/Properties.swift b/swift/test/Obfuscation/FullProcess/Properties/Properties.swift
index d461ee2c9e6..c7edeb3e16b 100644
--- a/swift/test/Obfuscation/FullProcess/Properties/Properties.swift
+++ b/swift/test/Obfuscation/FullProcess/Properties/Properties.swift
@@ -131,3 +131,20 @@ struct SampleStruct {
     sample.prop = "42"
   }
 }
+
+// for each stuff
+
+final class ForEachController: NSViewController {
+  
+  var unitsSegmentedControl: NSSegmentedControl!
+  
+  var titles: [String] = []
+  
+  fileprivate func buggyFunc() {
+    titles.enumerated().map {
+      index, title in (title, index)
+      }.forEach(unitsSegmentedControl.setLabel(_:forSegment:))
+    
+    unitsSegmentedControl.selectedSegment = 0
+  }
+}
diff --git a/swift/test/Obfuscation/FullProcess/Selectors/Expected/Selectors.swift b/swift/test/Obfuscation/FullProcess/Selectors/Expected/Selectors.swift
index a44397b9804..3fc41d68b6e 100644
--- a/swift/test/Obfuscation/FullProcess/Selectors/Expected/Selectors.swift
+++ b/swift/test/Obfuscation/FullProcess/Selectors/Expected/Selectors.swift
@@ -4,6 +4,7 @@ import Foundation
 class T1_SelectorTest: NSObject {
   
   @objc func NF1_foo() {}
+  @objc func NF1_bar(_ IP1_baz: String) {}
   
   let V1_s = #selector(T1_SelectorTest.NF1_foo)
 }
diff --git a/swift/test/Obfuscation/FullProcess/Selectors/Selectors.swift b/swift/test/Obfuscation/FullProcess/Selectors/Selectors.swift
index 1ce948080ae..477a90f0a46 100644
--- a/swift/test/Obfuscation/FullProcess/Selectors/Selectors.swift
+++ b/swift/test/Obfuscation/FullProcess/Selectors/Selectors.swift
@@ -5,6 +5,7 @@ import Foundation
 class SelectorTest: NSObject {
   
   @objc func foo() {}
+  @objc func bar(_ baz: String) {}
   
   let s = #selector(SelectorTest.foo)
 }
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
index e13e0d34288..44d6fa12480 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
@@ -16,23 +16,6 @@ final class T1_DebugBlock {
   }
 }
 
-// for each stuff
-
-final class T1_ForEachController: NSViewController {
-  
-  var V1_unitsSegmentedControl: NSSegmentedControl!
-  
-  var V1_titles: [String] = []
-  
-  fileprivate func NF1_buggyFunc() {
-    V1_titles.enumerated().map {
-      index, title in (title, index)
-      }.forEach(V1_unitsSegmentedControl.setLabel(_:forSegment:))
-    
-    V1_unitsSegmentedControl.accessibilityHint = ""
-  }
-}
-
 // mocking trick
 
 protocol KeyValueStoreType {
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
index 054c1a2b00c..8d7fe5ca63c 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
@@ -17,23 +17,6 @@ final class DebugBlock {
   }
 }
 
-// for each stuff
-
-final class ForEachController: NSViewController {
-  
-  var unitsSegmentedControl: NSSegmentedControl!
-  
-  var titles: [String] = []
-  
-  fileprivate func buggyFunc() {
-    titles.enumerated().map {
-      index, title in (title, index)
-      }.forEach(unitsSegmentedControl.setLabel(_:forSegment:))
-    
-    unitsSegmentedControl.accessibilityHint = ""
-  }
-}
-
 // mocking trick
 
 protocol KeyValueStoreType {
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/Expected/UnsupportedFunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/Expected/UnsupportedFunctionParameterNames.swift
index 4f22d3a193b..ccd6ed13b16 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/Expected/UnsupportedFunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/Expected/UnsupportedFunctionParameterNames.swift
@@ -5,29 +5,18 @@ func NF1_`backticksName`(EP1_`backticksExtName` IP1_`backTicksIntName`: T1_Sampl
 
 // overriding functions
 class T1_Base {
-  func NF1_baseFunc2(_ IP3_intParam: Int) {}
-  func NF1_baseFunc3(EP3_extParam IP4_intParam: T1_SampleClass) {}
-  
   subscript(SP1_index: Int) -> String { return "" }
   subscript(_ IP1_indexInt: Int) -> String { return "" }
   subscript(EP1_indexExt IP2_indexInt: Int) -> String { return "" }
-  
-  var V1_testVar: String {
-    get{ return "" }
-    set(SP1_newTestVar) {}
-  }
 }
 
-class T1_Derived: T1_Base {
-  override func NF1_baseFunc2(_ IP5_intParam: Int) {}
-  override func NF1_baseFunc3(extParam IP6_intParam: T1_SampleClass) {}
-  
+class T1_Derived: T1_Base { 
   override subscript(index: Int) -> String { return "" }
   override subscript(_ IP3_indexInt: Int) -> String { return "" }
   override subscript(indexExt IP4_indexInt: Int) -> String { return "" }
 }
 
-//protocol functions
+//protocol functions - internal parameter names in protocol function's definition and implementation should be different
 protocol T1_ProtocolFunc {
   func NF1_pFunc2(_ IP1_pFunc: Int)
   func NF1_pFunc3(EP1_extpFunc IP1_intpFunc: Int)
@@ -37,16 +26,5 @@ protocol T1_ProtocolFunc {
 class T1_ProtocolFunClass: T1_ProtocolFunc {
   func NF1_pFunc2(_ IP2_pFunc: Int) {}
   func NF1_pFunc3(EP1_extpFunc IP2_intpFunc: Int) {}
-  func NF1_pFunc4(EP1_singleFunc IP1_singleIntFunc: Int)
+  func NF1_pFunc4(EP1_singleFunc IP1_singleIntFunc: Int) {}
 }
-
-//protocol constructor
-protocol T1_ProtoInit {
-  init(SP1_protoInitParamA: String, SP1_protoInitParamB: Int)
-}
-
-class T1_ProtoInitClass: T1_ProtoInit {
-  required init(SP1_protoInitParamA: String, SP1_protoInitParamB: Int) {
-  }
-}
-let V1_pic = T1_ProtoInitClass(SP1_protoInitParamA: "", SP1_protoInitParamB: 42)
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/UnsupportedFunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/UnsupportedFunctionParameterNames.swift
index ecf2975a29b..849f2a9cc50 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/UnsupportedFunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedFunctionParameterNames/UnsupportedFunctionParameterNames.swift
@@ -1,5 +1,4 @@
 //XFAIL: *
-
 //RUN: %target-prepare-obfuscation-for-file "UnsupportedFunctionParameterNames" %target-run-full-obfuscation
 
 class SampleClass {}
@@ -7,30 +6,19 @@ class SampleClass {}
 func `backticksName`(`backticksExtName` `backTicksIntName`: SampleClass) {}
 
 // overriding functions
-class Base {
-  func baseFunc2(_ intParam: Int) {}
-  func baseFunc3(extParam intParam: SampleClass) {}
-  
+class Base {  
   subscript(index: Int) -> String { return "" }
   subscript(_ indexInt: Int) -> String { return "" }
   subscript(indexExt indexInt: Int) -> String { return "" }
-  
-  var testVar: String {
-    get{ return "" }
-    set(newTestVar) {}
-  }
 }
 
-class Derived: Base {
-  override func baseFunc2(_ intParam: Int) {}
-  override func baseFunc3(extParam intParam: SampleClass) {}
-  
+class Derived: Base {  
   override subscript(index: Int) -> String { return "" }
   override subscript(_ indexInt: Int) -> String { return "" }
   override subscript(indexExt indexInt: Int) -> String { return "" }
 }
 
-//protocol functions
+//protocol functions - internal parameter names in protocol function's definition and implementation should be different
 protocol ProtocolFunc {
   func pFunc2(_ pFunc: Int)
   func pFunc3(extpFunc intpFunc: Int)
@@ -42,14 +30,3 @@ class ProtocolFunClass: ProtocolFunc {
   func pFunc3(extpFunc intpFunc: Int) {}
   func pFunc4(singleFunc singleIntFunc: Int) {}
 }
-
-//protocol constructor
-protocol ProtoInit {
-  init(protoInitParamA: String, protoInitParamB: Int)
-}
-
-class ProtoInitClass: ProtoInit {
-  required init(protoInitParamA: String, protoInitParamB: Int) {
-  }
-}
-let pic = ProtoInitClass(protoInitParamA: "", protoInitParamB: 42)
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/Expected/UnsupportedFunctions.swift b/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/Expected/UnsupportedFunctions.swift
index 8810fb345f3..0a742b7c05f 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/Expected/UnsupportedFunctions.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/Expected/UnsupportedFunctions.swift
@@ -2,27 +2,3 @@ import AppKit
 
 // Backtick named function
 func NF1_`function`() -> Int { return 1 }
-
-// Generic class methods
-class T1_GenericClass<T> {
-  func NF1_method() -> T { return T() }
-}
-
-let V1_gcii = T1_GenericClass<Int>()
-_ = V1_gcii.NF1_method()
-
-let V1_gcsi = T1_GenericClass<T1_SampleClass>()
-_ = V1_gcsi.NF1_method()
-
-// override and protocol combined
-class T1_A {
-  func NF1_a() {}
-}
-
-protocol T1_P {
-  func NF1_a()
-}
-
-class T1_B: T1_A, T1_P {
-  override func NF1_a() {}
-}
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/UnsupportedFunctions.swift b/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/UnsupportedFunctions.swift
index f2f02105d93..e4f54b36f27 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/UnsupportedFunctions.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedFunctions/UnsupportedFunctions.swift
@@ -5,16 +5,3 @@ import AppKit
 
 // Backtick named functions
 func `function`() -> Int { return 1 }
-
-// override and protocol combined
-class A {
-  func a() {}
-}
-
-protocol P {
-  func a()
-}
-
-class B: A, P {
-  override func a() {}
-}
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedProperties/Expected/UnsupportedProperties.swift b/swift/test/Obfuscation/FullProcess/UnsupportedProperties/Expected/UnsupportedProperties.swift
index cedb19ac7da..a4885001088 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedProperties/Expected/UnsupportedProperties.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedProperties/Expected/UnsupportedProperties.swift
@@ -6,26 +6,3 @@ struct T1_SpecialStruct {
   var V1_`set`: String
   let V1_`return`: Double
 }
-
-// properties with generic parameters
-class T1_SomeClass<GenericParam> {
-  var V1_param: String = ""
-}
-
-class T1_GenericUsingClass {
-  let V1_array: Array<Int> = []
-  let V1_map: [String : Int] = {:}
-}
-
-class T1_PropertiesUsingClass {
-  var V1_array: Array<Int> = []
-  var V1_map: [String : Int] = {:}
-  var V1_generic = T1_SomeClass<GenericParam>()
-
-  func foo() -> T1_SomeClass {
-    V1_array = [42]
-    V1_map["42"] = V1_array[0]
-    V1_generic.V1_param = V1_map["42"]!.toString()
-    return V1_generic
-  }
-}
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedSelectors/Expected/UnsupportedSelectors.swift b/swift/test/Obfuscation/FullProcess/UnsupportedSelectors/Expected/UnsupportedSelectors.swift
index bf1a78d7925..f2cef5eb097 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedSelectors/Expected/UnsupportedSelectors.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedSelectors/Expected/UnsupportedSelectors.swift
@@ -1,9 +1,6 @@
 
 import Foundation
 
-class T1_SelectorTest: NSObject {
-  
-  @objc func NF1_bar(_ IP1_baz: String) {}
-  
+class T1_SelectorTest: NSObject {  
   let V1_s = Selector(("NF1_bar:"))
 }
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedSelectors/UnsupportedSelectors.swift b/swift/test/Obfuscation/FullProcess/UnsupportedSelectors/UnsupportedSelectors.swift
index 5427860ed5f..0da43f26b08 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedSelectors/UnsupportedSelectors.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedSelectors/UnsupportedSelectors.swift
@@ -1,13 +1,9 @@
 //XFAIL: *
-
 //RUN: %target-prepare-obfuscation-for-file "UnsupportedSelectors" %target-run-full-obfuscation
 
 import Foundation
 
-class SelectorTest: NSObject {
-  
-  @objc func bar(_ baz: String) {}
-  
+class SelectorTest: NSObject {  
   let s = Selector(("bar:"))
 }
 
-- 
2.17.1 (Apple Git-112)


From c33b2286eccb8ea869be77836b53d6caf3c63979 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Fri, 9 Mar 2018 11:57:28 +0100
Subject: [PATCH 115/138] Added ExtensionExcluder to avoid renaming protocols
 covering system API

Reviewers: michal.zielinski, jerzy.kleszcz

Reviewed By: michal.zielinski, jerzy.kleszcz

Subscribers: michal.zielinski, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2875
---
 .../swift/Obfuscation/ExtensionExcluder.h     |  28 +++++
 .../Obfuscation/FunctionDeclarationParser.h   |   2 +
 .../swift/Obfuscation/SourceFileWalker.h      |   3 +-
 swift/lib/Obfuscation/CMakeLists.txt          |   1 +
 swift/lib/Obfuscation/DeclarationParser.cpp   |   2 +-
 swift/lib/Obfuscation/ExpressionParser.cpp    |   2 +-
 swift/lib/Obfuscation/ExtensionExcluder.cpp   | 116 ++++++++++++++++++
 .../Obfuscation/FunctionDeclarationParser.cpp |   2 +-
 swift/lib/Obfuscation/Renaming.cpp            |  12 +-
 swift/lib/Obfuscation/SourceFileWalker.cpp    |  17 ++-
 swift/lib/Obfuscation/SymbolExtracting.cpp    |   6 +-
 .../FullProcess/Types/Expected/Types.swift    |  14 +++
 .../Obfuscation/FullProcess/Types/Types.swift |  14 +++
 .../Expected/UnsupportedDropnote.swift        |  15 ---
 .../UnsupportedDropnote.swift                 |  15 ---
 15 files changed, 208 insertions(+), 41 deletions(-)
 create mode 100644 swift/include/swift/Obfuscation/ExtensionExcluder.h
 create mode 100644 swift/lib/Obfuscation/ExtensionExcluder.cpp

diff --git a/swift/include/swift/Obfuscation/ExtensionExcluder.h b/swift/include/swift/Obfuscation/ExtensionExcluder.h
new file mode 100644
index 00000000000..83ff0fd42f2
--- /dev/null
+++ b/swift/include/swift/Obfuscation/ExtensionExcluder.h
@@ -0,0 +1,28 @@
+#ifndef ExtensionExcluder_h
+#define ExtensionExcluder_h
+
+#include "swift/Frontend/Frontend.h"
+#include "swift/Obfuscation/DataStructures.h"
+
+namespace swift {
+namespace obfuscation {
+
+class ExtensionExcluder {
+
+private:
+
+  std::set<Decl *> DeclarationsToExclude;
+
+public:
+
+  void identifyExclusionsFromExtension(const ExtensionDecl *Declaration);
+
+  std::vector<IndexedSymbolWithRange>
+  excludeSymbolsFrom(GlobalCollectedSymbols &CollectedSymbols);
+
+};
+
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* ExtensionExcluder_h */
diff --git a/swift/include/swift/Obfuscation/FunctionDeclarationParser.h b/swift/include/swift/Obfuscation/FunctionDeclarationParser.h
index 66bd34d62df..f3a2a589cef 100644
--- a/swift/include/swift/Obfuscation/FunctionDeclarationParser.h
+++ b/swift/include/swift/Obfuscation/FunctionDeclarationParser.h
@@ -14,6 +14,8 @@ namespace swift {
 namespace obfuscation {
     
 std::string functionName(const AbstractFunctionDecl* Declaration);
+
+std::string functionSignature(const AbstractFunctionDecl *Declaration);
   
 ModuleNameAndParts functionIdentifierParts(const AbstractFunctionDecl* Declaration);
 
diff --git a/swift/include/swift/Obfuscation/SourceFileWalker.h b/swift/include/swift/Obfuscation/SourceFileWalker.h
index fb55954bd9c..3d9f3c87944 100644
--- a/swift/include/swift/Obfuscation/SourceFileWalker.h
+++ b/swift/include/swift/Obfuscation/SourceFileWalker.h
@@ -3,6 +3,7 @@
 
 #include "swift/Frontend/Frontend.h"
 #include "swift/Obfuscation/DataStructures.h"
+#include "swift/Obfuscation/ExtensionExcluder.h"
 
 #include <set>
 
@@ -34,7 +35,7 @@ namespace obfuscation {
 /// \returns the occurrences of symbols with their metadata, place
 ///          and occurrence index.
 std::set<IndexedSymbolWithRange, IndexedSymbolWithRange::SymbolWithRangeCompare>
-  walkAndCollectSymbols(SourceFile &SourceFile);
+  walkAndCollectSymbols(SourceFile &SourceFile, ExtensionExcluder &Excluder);
 
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/lib/Obfuscation/CMakeLists.txt b/swift/lib/Obfuscation/CMakeLists.txt
index 77173d42e6f..8de72ad3490 100644
--- a/swift/lib/Obfuscation/CMakeLists.txt
+++ b/swift/lib/Obfuscation/CMakeLists.txt
@@ -8,6 +8,7 @@ add_swift_library(swiftObfuscation STATIC
   DeclarationParser.cpp
   OperatorParser.cpp
   DeclarationParsingUtils.cpp
+  ExtensionExcluder.cpp
   ExpressionParser.cpp
   FileIO.cpp
   FunctionDeclarationParser.cpp
diff --git a/swift/lib/Obfuscation/DeclarationParser.cpp b/swift/lib/Obfuscation/DeclarationParser.cpp
index 49ee1ed47fd..16ac3e7971b 100644
--- a/swift/lib/Obfuscation/DeclarationParser.cpp
+++ b/swift/lib/Obfuscation/DeclarationParser.cpp
@@ -88,7 +88,7 @@ std::unique_ptr<SymbolsOrError> parseAsParam(Decl* Declaration,
 std::unique_ptr<SymbolsOrError> parseAsVariable(Decl* Declaration,
                                                 CharSourceRange Range) {
   const auto *VariableDeclaration = dyn_cast<VarDecl>(Declaration);
-  if(VariableDeclaration->isImplicit()) {
+  if (VariableDeclaration->isImplicit()) {
     return llvm::make_unique<SymbolsOrError>(
              stringError("Only explicit variables might be safely obfuscated"));
   }
diff --git a/swift/lib/Obfuscation/ExpressionParser.cpp b/swift/lib/Obfuscation/ExpressionParser.cpp
index 5d02e9a1fec..70c3a513505 100644
--- a/swift/lib/Obfuscation/ExpressionParser.cpp
+++ b/swift/lib/Obfuscation/ExpressionParser.cpp
@@ -57,7 +57,7 @@ declarationOfFunctionCalledInExpression(CallExpr *CallExpression) {
   }
   return stringError("Cannot found supported Call Expression subtree pattern");
 }
-  
+
 std::vector<std::pair<Identifier, SourceLoc>>
 validArguments(CallExpr *CallExpression) {
 
diff --git a/swift/lib/Obfuscation/ExtensionExcluder.cpp b/swift/lib/Obfuscation/ExtensionExcluder.cpp
new file mode 100644
index 00000000000..dff81d43c27
--- /dev/null
+++ b/swift/lib/Obfuscation/ExtensionExcluder.cpp
@@ -0,0 +1,116 @@
+#include "swift/Obfuscation/ExtensionExcluder.h"
+#include "swift/Obfuscation/DeclarationParser.h"
+#include "swift/Obfuscation/DeclarationParsingUtils.h"
+#include "swift/Obfuscation/NominalTypeDeclarationParser.h"
+#include "swift/Obfuscation/FunctionDeclarationParser.h"
+
+namespace swift {
+namespace obfuscation {
+
+void
+ExtensionExcluder::
+  identifyExclusionsFromExtension(const ExtensionDecl *Declaration) {
+
+  std::vector<SymbolWithRange> Results;
+  auto *ExtendedType = Declaration->getExtendedType()->getAnyNominal();
+  auto ExtensionModuleName = moduleName(Declaration);
+  if (ExtendedType == nullptr) {
+    return;
+  }
+
+  auto ExtendedTypeModuleName = moduleName(ExtendedType);
+  if (ExtensionModuleName == ExtendedTypeModuleName) {
+    return;
+  }
+
+  if (!Declaration->getMembers().empty()) {
+    return;
+  }
+
+  auto InheritedArray = Declaration->getInherited();
+
+  for (auto Inherited : InheritedArray) {
+
+    auto *Nominal = Inherited.getType()->getAnyNominal();
+    if (auto *ProtocolDeclaration = dyn_cast_or_null<ProtocolDecl>(Nominal)) {
+      for (auto *Member : ProtocolDeclaration->getMembers()) {
+        Member->getSourceRange();
+        for (auto *Declaration : ExtendedType->getMembers()) {
+
+          if (auto *ExtFunction = dyn_cast<AbstractFunctionDecl>(Declaration)) {
+            if (auto *ProtocolFunction =
+                  dyn_cast<AbstractFunctionDecl>(Member)) {
+
+              auto ExtFunctionSignature = functionSignature(ExtFunction);
+              auto ProtocolFunctionSignature =
+                functionSignature(ProtocolFunction);
+              auto ExtFunctionName = ExtFunction->getName().str().str();
+              auto ProtocolFunctionName =
+                ProtocolFunction->getName().str().str();
+
+              if (ExtFunctionSignature == ProtocolFunctionSignature
+                  && ExtFunctionName == ProtocolFunctionName) {
+                DeclarationsToExclude.insert(Member);
+              }
+            }
+          }
+
+          if (auto *ExtFunction = dyn_cast<AbstractStorageDecl>(Declaration)) {
+            if (auto *ProtocolFunction =
+                  dyn_cast<AbstractStorageDecl>(Member)) {
+
+              auto ExtFunctionSignature =
+                ExtFunction->getInterfaceType().getString();
+              auto ProtocolFunctionSignature =
+                ProtocolFunction->getInterfaceType().getString();
+              auto ExtFunctionName = ExtFunction->getName().str().str();
+              auto ProtocolFunctionName =
+                ProtocolFunction->getName().str().str();
+
+              if (ExtFunctionSignature == ProtocolFunctionSignature
+                  && ExtFunctionName == ProtocolFunctionName) {
+                DeclarationsToExclude.insert(Member);
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+}
+
+std::vector<IndexedSymbolWithRange>
+ExtensionExcluder::
+  excludeSymbolsFrom(GlobalCollectedSymbols &CollectedSymbols) {
+
+  std::vector<IndexedSymbolWithRange> SymbolsToRemove;
+
+  for (auto *Declaration : DeclarationsToExclude) {
+
+    auto Range = CharSourceRange();
+    auto SymbolsOrError = extractSymbol(CollectedSymbols, Declaration, Range);
+    if (auto Error = SymbolsOrError.takeError()) {
+      llvm::consumeError(std::move(Error));
+    } else {
+      auto Symbols = SymbolsOrError.get();
+      for (auto CollectedSymbol : CollectedSymbols) {
+        for (auto Symbol : Symbols) {
+          if(CollectedSymbol.SymbolWithRange.Symbol.Identifier
+             == Symbol.Symbol.Identifier) {
+            SymbolsToRemove.push_back(CollectedSymbol);
+          }
+        }
+      }
+    }
+
+  }
+
+  for (auto IndexedSymbolWithRange : SymbolsToRemove) {
+    CollectedSymbols.erase(IndexedSymbolWithRange);
+  }
+
+  return SymbolsToRemove;
+}
+
+} //namespace obfuscation
+} //namespace swift
diff --git a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
index ff1d714bdaa..6c0f26e9501 100644
--- a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
@@ -275,7 +275,7 @@ handleSatisfiedProtocolRequirements(GlobalCollectedSymbols &CollectedSymbols,
         
         // find protocol function identifier in a set of all collected symbols
         // and replace it with function identifier of overridden symbol
-        for(auto CollectedSymbol: CollectedSymbols) {
+        for (auto CollectedSymbol: CollectedSymbols) {
           if(CollectedSymbol.SymbolWithRange.Symbol.Identifier
                                                           == ProtocolFunId) {
             
diff --git a/swift/lib/Obfuscation/Renaming.cpp b/swift/lib/Obfuscation/Renaming.cpp
index 60df6897e3e..5253aa24bc9 100644
--- a/swift/lib/Obfuscation/Renaming.cpp
+++ b/swift/lib/Obfuscation/Renaming.cpp
@@ -3,6 +3,7 @@
 #include "swift/Obfuscation/SourceFileWalker.h"
 #include "swift/Obfuscation/Utils.h"
 #include "swift/Obfuscation/LayoutRenamer.h"
+#include "swift/Obfuscation/ExtensionExcluder.h"
 
 #include "llvm/ADT/STLExtras.h"
 #include "llvm/Support/FileSystem.h"
@@ -123,9 +124,11 @@ llvm::Expected<bool> performActualRenaming(SourceFile &Current,
                                            SourceManager &SourceManager,
                                            unsigned int BufferId,
                                            StringRef Path,
-                                           std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols) {
+                                           std::unordered_map<std::string,
+                                           SymbolRenaming> &RenamedSymbols,
+                                           ExtensionExcluder &Excluder) {
   bool performedRenaming = false;
-  auto IndexedSymbolsWithRanges = walkAndCollectSymbols(Current);
+  auto IndexedSymbolsWithRanges = walkAndCollectSymbols(Current, Excluder);
   
   using EditConsumer = swift::ide::SourceEditOutputConsumer;
   
@@ -186,6 +189,8 @@ performRenaming(std::string MainExecutablePath,
   
   FilesList Files;
   std::unordered_map<std::string, SymbolRenaming> RenamedSymbols;
+
+  ExtensionExcluder Excluder;
   
   for (auto* Unit : CI.getMainModule()->getFiles()) {
     if (auto* Current = dyn_cast<SourceFile>(Unit)) {
@@ -207,7 +212,8 @@ performRenaming(std::string MainExecutablePath,
                                 SourceManager,
                                 BufferId,
                                 Path,
-                                RenamedSymbols)) {
+                                RenamedSymbols,
+                                Excluder)) {
         auto Filename = llvm::sys::path::filename(Path).str();
         Files.push_back(std::pair<std::string, std::string>(Filename, Path));
       }
diff --git a/swift/lib/Obfuscation/SourceFileWalker.cpp b/swift/lib/Obfuscation/SourceFileWalker.cpp
index a2855fae3ce..a18e009ef0b 100644
--- a/swift/lib/Obfuscation/SourceFileWalker.cpp
+++ b/swift/lib/Obfuscation/SourceFileWalker.cpp
@@ -2,6 +2,7 @@
 #include "swift/Obfuscation/DeclarationParser.h"
 #include "swift/Obfuscation/DeclarationParsingUtils.h"
 #include "swift/Obfuscation/ExpressionParser.h"
+#include "swift/Obfuscation/ExtensionExcluder.h"
 #include "swift/Obfuscation/ParameterDeclarationParser.h"
 #include "swift/Obfuscation/Utils-Template.h"
 #include "swift/Obfuscation/Utils.h"
@@ -20,6 +21,10 @@ struct SymbolsWalkerAndCollector: public SourceEntityWalker {
   // thet are compared by symbol and range
   GlobalCollectedSymbols Symbols;
 
+  ExtensionExcluder &Excluder;
+
+  SymbolsWalkerAndCollector(ExtensionExcluder &Excluder): Excluder(Excluder) {}
+
 // Overriden methods called back as the AST is walked
 
   bool walkToExprPre(Expr *Expression) override {
@@ -51,11 +56,18 @@ struct SymbolsWalkerAndCollector: public SourceEntityWalker {
                           ExtensionDecl *ExtTyRef,
                           Type T,
                           ReferenceMetaData Data) override {
+
     handleWhereClausesIfNeeded({ Declaration, CtorTyRef, ExtTyRef });
+
     auto ExtractedSymbols = extractSymbol(Symbols,
                                           CtorTyRef ? CtorTyRef : Declaration,
                                           Range);
     handleExtractionResult(ExtractedSymbols);
+
+
+    if (ExtTyRef != nullptr) {
+      Excluder.identifyExclusionsFromExtension(ExtTyRef);
+    }
     return true;
   }
 
@@ -94,9 +106,10 @@ struct SymbolsWalkerAndCollector: public SourceEntityWalker {
 int SymbolsWalkerAndCollector::SymbolIndex;
 
 std::set<IndexedSymbolWithRange, IndexedSymbolWithRange::SymbolWithRangeCompare>
-walkAndCollectSymbols(SourceFile &SourceFile) {
-  SymbolsWalkerAndCollector Walker;
+walkAndCollectSymbols(SourceFile &SourceFile, ExtensionExcluder &Excluder) {
+  SymbolsWalkerAndCollector Walker(Excluder);
   Walker.walk(SourceFile);
+  Excluder.excludeSymbolsFrom(Walker.Symbols);
   return Walker.Symbols;
 }
 
diff --git a/swift/lib/Obfuscation/SymbolExtracting.cpp b/swift/lib/Obfuscation/SymbolExtracting.cpp
index 9e0520ac29e..e52324d3657 100644
--- a/swift/lib/Obfuscation/SymbolExtracting.cpp
+++ b/swift/lib/Obfuscation/SymbolExtracting.cpp
@@ -33,7 +33,7 @@ getSortedSourceFiles(swift::CompilerInstance &CompilerInstance) {
   return Files;
 }
 
-  llvm::Expected<SymbolsJson>
+llvm::Expected<SymbolsJson>
 extractSymbols(const FilesJson &FilesJson,
                std::string MainExecutablePath,
                llvm::raw_ostream &DiagnosticStream) {
@@ -54,9 +54,11 @@ extractSymbols(const FilesJson &FilesJson,
   std::set<IndexedSymbolWithRange,
            IndexedSymbolWithRange::SymbolCompare> Symbols;
 
+  ExtensionExcluder Excluder;
+
   for (auto &Unit : Files) {
     // CurrentSymbols are sorted by the identifier and range
-    auto CurrentSymbols = walkAndCollectSymbols(*Unit.second);
+    auto CurrentSymbols = walkAndCollectSymbols(*Unit.second, Excluder);
 
     std::vector<IndexedSymbolWithRange> SortedSymbols;
     copyToVector(CurrentSymbols, SortedSymbols);
diff --git a/swift/test/Obfuscation/FullProcess/Types/Expected/Types.swift b/swift/test/Obfuscation/FullProcess/Types/Expected/Types.swift
index 441873a4c29..091770cb747 100644
--- a/swift/test/Obfuscation/FullProcess/Types/Expected/Types.swift
+++ b/swift/test/Obfuscation/FullProcess/Types/Expected/Types.swift
@@ -1,5 +1,6 @@
 
 import Foundation
+import AppKit
 
 class T1_SampleClass {}
 
@@ -89,3 +90,16 @@ switch V1_test {
     print(bound1)
     print(bound2)
 }
+
+// mocking trick
+
+protocol T1_KeyValueStoreType {
+  func object(forKey defaultName: String) -> Any?
+  func set(_ value: Any?, forKey defaultName: String)
+  func removeObject(forKey defaultName: String)
+  func synchronize() -> Bool
+}
+
+extension UserDefaults: T1_KeyValueStoreType {
+  
+}
diff --git a/swift/test/Obfuscation/FullProcess/Types/Types.swift b/swift/test/Obfuscation/FullProcess/Types/Types.swift
index 24f38e16ac2..30926e3b130 100644
--- a/swift/test/Obfuscation/FullProcess/Types/Types.swift
+++ b/swift/test/Obfuscation/FullProcess/Types/Types.swift
@@ -1,6 +1,7 @@
 //RUN: %target-prepare-obfuscation-for-file "Types" %target-run-full-obfuscation
 
 import Foundation
+import AppKit
 
 class SampleClass {}
 
@@ -90,3 +91,16 @@ switch test {
     print(bound1)
     print(bound2)
 }
+
+// mocking trick
+
+protocol KeyValueStoreType {
+  func object(forKey defaultName: String) -> Any?
+  func set(_ value: Any?, forKey defaultName: String)
+  func removeObject(forKey defaultName: String)
+  func synchronize() -> Bool
+}
+
+extension UserDefaults: KeyValueStoreType {
+  
+}
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
index 44d6fa12480..5b01d3ab3b5 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/Expected/UnsupportedDropnote.swift
@@ -15,18 +15,3 @@ final class T1_DebugBlock {
     #endif
   }
 }
-
-// mocking trick
-
-protocol KeyValueStoreType {
-  func object(forKey defaultName: String) -> Any?
-  func set(_ value: Any?, forKey defaultName: String)
-  func removeObject(forKey defaultName: String)
-  func synchronize() -> Bool
-}
-
-extension UserDefaults: KeyValueStoreType {
-  
-}
-
-
diff --git a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
index 8d7fe5ca63c..62ebf639923 100644
--- a/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
+++ b/swift/test/Obfuscation/FullProcess/UnsupportedDropnote/UnsupportedDropnote.swift
@@ -16,18 +16,3 @@ final class DebugBlock {
     #endif
   }
 }
-
-// mocking trick
-
-protocol KeyValueStoreType {
-  func object(forKey defaultName: String) -> Any?
-  func set(_ value: Any?, forKey defaultName: String)
-  func removeObject(forKey defaultName: String)
-  func synchronize() -> Bool
-}
-
-extension UserDefaults: KeyValueStoreType {
-  
-}
-
-
-- 
2.17.1 (Apple Git-112)


From b9c6a07b8e25dda3c56aa101485f4b58e1543127 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Fri, 9 Mar 2018 11:42:56 +0100
Subject: [PATCH 116/138] Added header search paths and bridging header

Reviewers: jerzy.kleszcz, michal.zielinski

Reviewed By: jerzy.kleszcz, michal.zielinski

Subscribers: jerzy.kleszcz, michal.zielinski

Differential Revision: https://phabricator.polidea.com/D2877
---
 swift/include/swift/Obfuscation/DataStructures.h    |  2 ++
 swift/lib/Obfuscation/CompilerInfrastructure.cpp    | 13 ++++++++++++-
 swift/lib/Obfuscation/DataStructures.cpp            |  4 ++++
 .../SymbolExtractor/SymbolExtractor.swift           |  2 +-
 swift/test/lit.cfg                                  |  6 +++---
 swift/unittests/SwiftObfuscation/FileIOTests.cpp    | 10 +++++++++-
 6 files changed, 31 insertions(+), 6 deletions(-)

diff --git a/swift/include/swift/Obfuscation/DataStructures.h b/swift/include/swift/Obfuscation/DataStructures.h
index 23e00f335f8..8cc3a658d56 100644
--- a/swift/include/swift/Obfuscation/DataStructures.h
+++ b/swift/include/swift/Obfuscation/DataStructures.h
@@ -41,6 +41,8 @@ struct FilesJson {
   std::vector<std::string> ImplicitlyLinkedFrameworks;
   std::vector<ExplicitlyLinkedFrameworks> ExplicitlyLinkedFrameworks;
   std::vector<std::string> FrameworkSearchPaths;
+  std::vector<std::string> HeaderSearchPaths;
+  std::string BridgingHeader;
 };
 
 enum class SymbolType: int {
diff --git a/swift/lib/Obfuscation/CompilerInfrastructure.cpp b/swift/lib/Obfuscation/CompilerInfrastructure.cpp
index 5e6522f1a1a..5e83d7e0ea7 100644
--- a/swift/lib/Obfuscation/CompilerInfrastructure.cpp
+++ b/swift/lib/Obfuscation/CompilerInfrastructure.cpp
@@ -17,6 +17,8 @@ struct CompilerInvocationConfiguration {
   std::string SdkPath;
   std::vector<std::string> InputFilenames;
   std::vector<SearchPathOptions::FrameworkSearchPath> Paths;
+  std::vector<std::string> HeaderPaths;
+  std::string BridgingHeader;
   
   CompilerInvocationConfiguration(const FilesJson &FilesJson,
                                   std::string MainExecutablePath)
@@ -24,7 +26,9 @@ struct CompilerInvocationConfiguration {
   Triple(FilesJson.Module.TargetTriple),
   MainExecutablePath(MainExecutablePath),
   SdkPath(FilesJson.Sdk.Path),
-  InputFilenames(FilesJson.SourceFiles) {
+  InputFilenames(FilesJson.SourceFiles),
+  HeaderPaths(FilesJson.HeaderSearchPaths),
+  BridgingHeader(FilesJson.BridgingHeader) {
     for (const auto &Framework : FilesJson.ExplicitlyLinkedFrameworks) {
       SearchPathOptions::FrameworkSearchPath Path(Framework.Path, false);
       Paths.push_back(Path);
@@ -44,6 +48,13 @@ createInvocation(const CompilerInvocationConfiguration &Configuration) {
   for (const auto &InputFilename : Configuration.InputFilenames) {
     Invocation.addInputFilename(InputFilename);
   }
+  auto ExtraArgs = Invocation.getExtraClangArgs().vec();
+  for (auto HeaderPath : Configuration.HeaderPaths) {
+    ExtraArgs.push_back("-I" + HeaderPath);
+  }
+  Invocation.setExtraClangArgs(ExtraArgs);
+  Invocation.getFrontendOptions().ImplicitObjCHeaderPath =
+    Configuration.BridgingHeader;
   Invocation.getLangOptions().AttachCommentsToDecls = true;
   Invocation.setFrameworkSearchPaths(Configuration.Paths);
   Invocation.setSDKPath(Configuration.SdkPath);
diff --git a/swift/lib/Obfuscation/DataStructures.cpp b/swift/lib/Obfuscation/DataStructures.cpp
index 8e789828908..ea68c9ba8e7 100644
--- a/swift/lib/Obfuscation/DataStructures.cpp
+++ b/swift/lib/Obfuscation/DataStructures.cpp
@@ -122,6 +122,10 @@ void MappingTraits<FilesJson>::mapping(IO &Io, FilesJson &Object) {
                  Object.ExplicitlyLinkedFrameworks);
   Io.mapRequired("frameworkSearchPaths",
                  Object.FrameworkSearchPaths);
+  Io.mapRequired("headerSearchPaths",
+                 Object.HeaderSearchPaths);
+  Io.mapRequired("bridgingHeader",
+                 Object.BridgingHeader);
 }
   
 void MappingTraits<Project>::mapping(IO &Io, Project &Object) {
diff --git a/swift/test/Obfuscation/SymbolExtractor/SymbolExtractor.swift b/swift/test/Obfuscation/SymbolExtractor/SymbolExtractor.swift
index 2c2cc70ee94..ec6e1906d03 100644
--- a/swift/test/Obfuscation/SymbolExtractor/SymbolExtractor.swift
+++ b/swift/test/Obfuscation/SymbolExtractor/SymbolExtractor.swift
@@ -1,5 +1,5 @@
 
-//RUN: echo "{\"project\": {\"rootPath\": \"TestRootPath\", \"projectFilePath\": \"testProjectFilePath\"}, \"module\": {\"name\": \"TestModuleName\", \"triple\": \"x86_64-apple-macosx10.13\"}, \"sdk\": {\"name\": \"%target-sdk-name\", \"path\": \"%sdk\"}, \"sourceFiles\": [\"%S/Inputs\/ViewController.swift\", \"%S/Inputs\/AppDelegate.swift\"], \"layoutFiles\": [], \"explicitlyLinkedFrameworks\": [], \"implicitlyLinkedFrameworks\": [], \"frameworkSearchPaths\": []}" > %T/files.json
+//RUN: echo "{\"project\": {\"rootPath\": \"TestRootPath\", \"projectFilePath\": \"testProjectFilePath\"}, \"module\": {\"name\": \"TestModuleName\", \"triple\": \"x86_64-apple-macosx10.13\"}, \"sdk\": {\"name\": \"%target-sdk-name\", \"path\": \"%sdk\"}, \"sourceFiles\": [\"%S/Inputs\/ViewController.swift\", \"%S/Inputs\/AppDelegate.swift\"], \"layoutFiles\": [], \"explicitlyLinkedFrameworks\": [], \"implicitlyLinkedFrameworks\": [], \"frameworkSearchPaths\": [], \"headerSearchPaths\": [], \"bridgingHeader\": \"\"}" > %T/files.json
 //RUN: obfuscator-symbol-extractor -filesjson %T/files.json -symbolsjson %t -printdiagnostics
 //RUN: diff -w %S/Inputs/expectedSymbols.json %t
 
diff --git a/swift/test/lit.cfg b/swift/test/lit.cfg
index c9e9eee3557..88bf3d83ca8 100644
--- a/swift/test/lit.cfg
+++ b/swift/test/lit.cfg
@@ -411,17 +411,17 @@ config.substitutions.append((
 
 config.substitutions.append((
     '%target-run-files-json-generation', 
-    'echo \\"{\\"project\\": {\\"rootPath\\": \\"%S\\", \\"projectFilePath\\": \\"testProjectFilePath\\"}, \\"module\\": {\\"name\\": \\"TestModuleName\\", \\"triple\\": \\"x86_64-apple-macosx10.13\\"}, \\"sdk\\": {\\"name\\": \\"%target-sdk-name\\", \\"path\\": \\"%sdk\\"}, \\"sourceFiles\\": [\\"%S/\$FILE.swift\\"], \\"layoutFiles\\": [], \\"explicitlyLinkedFrameworks\\": [], \\"implicitlyLinkedFrameworks\\": [], \\"frameworkSearchPaths\\": []}\\" > %t-files.json'
+    'echo \\"{\\"project\\": {\\"rootPath\\": \\"%S\\", \\"projectFilePath\\": \\"testProjectFilePath\\"}, \\"module\\": {\\"name\\": \\"TestModuleName\\", \\"triple\\": \\"x86_64-apple-macosx10.13\\"}, \\"sdk\\": {\\"name\\": \\"%target-sdk-name\\", \\"path\\": \\"%sdk\\"}, \\"sourceFiles\\": [\\"%S/\$FILE.swift\\"], \\"layoutFiles\\": [], \\"explicitlyLinkedFrameworks\\": [], \\"implicitlyLinkedFrameworks\\": [], \\"frameworkSearchPaths\\": [], \\"headerSearchPaths\\": [], \\"bridgingHeader\\": \\"testHeader\\"}\\" > %t-files.json'
 ))
 
 config.substitutions.append((
     '%target-run-files-and-storyboard-json-generation', 
-    'echo \\"{\\"project\\": {\\"rootPath\\": \\"%S\\", \\"projectFilePath\\": \\"testProjectFilePath\\"}, \\"module\\": {\\"name\\": \\"TestModuleName\\", \\"triple\\": \\"x86_64-apple-macosx10.13\\"}, \\"sdk\\": {\\"name\\": \\"%target-sdk-name\\", \\"path\\": \\"%sdk\\"}, \\"sourceFiles\\": [\\"%S/\$FILE.swift\\"], \\"layoutFiles\\": [\\"%S/\$FILE.storyboard\\"], \\"explicitlyLinkedFrameworks\\": [], \\"implicitlyLinkedFrameworks\\": [], \\"frameworkSearchPaths\\": []}\\" > %t-files.json'
+    'echo \\"{\\"project\\": {\\"rootPath\\": \\"%S\\", \\"projectFilePath\\": \\"testProjectFilePath\\"}, \\"module\\": {\\"name\\": \\"TestModuleName\\", \\"triple\\": \\"x86_64-apple-macosx10.13\\"}, \\"sdk\\": {\\"name\\": \\"%target-sdk-name\\", \\"path\\": \\"%sdk\\"}, \\"sourceFiles\\": [\\"%S/\$FILE.swift\\"], \\"layoutFiles\\": [\\"%S/\$FILE.storyboard\\"], \\"explicitlyLinkedFrameworks\\": [], \\"implicitlyLinkedFrameworks\\": [], \\"frameworkSearchPaths\\": [], \\"headerSearchPaths\\": [], \\"bridgingHeader\\": \\"testHeader\\"}\\" > %t-files.json'
 ))
 
 config.substitutions.append((
     '%target-run-files-and-xib-json-generation', 
-    'echo \\"{\\"project\\": {\\"rootPath\\": \\"%S\\", \\"projectFilePath\\": \\"testProjectFilePath\\"}, \\"module\\": {\\"name\\": \\"TestModuleName\\", \\"triple\\": \\"x86_64-apple-macosx10.13\\"}, \\"sdk\\": {\\"name\\": \\"%target-sdk-name\\", \\"path\\": \\"%sdk\\"}, \\"sourceFiles\\": [\\"%S/\$FILE.swift\\"], \\"layoutFiles\\": [\\"%S/\$FILE.xib\\"], \\"explicitlyLinkedFrameworks\\": [], \\"implicitlyLinkedFrameworks\\": [], \\"frameworkSearchPaths\\": []}\\" > %t-files.json'
+    'echo \\"{\\"project\\": {\\"rootPath\\": \\"%S\\", \\"projectFilePath\\": \\"testProjectFilePath\\"}, \\"module\\": {\\"name\\": \\"TestModuleName\\", \\"triple\\": \\"x86_64-apple-macosx10.13\\"}, \\"sdk\\": {\\"name\\": \\"%target-sdk-name\\", \\"path\\": \\"%sdk\\"}, \\"sourceFiles\\": [\\"%S/\$FILE.swift\\"], \\"layoutFiles\\": [\\"%S/\$FILE.xib\\"], \\"explicitlyLinkedFrameworks\\": [], \\"implicitlyLinkedFrameworks\\": [], \\"frameworkSearchPaths\\": [], \\"headerSearchPaths\\": [], \\"bridgingHeader\\": \\"testHeader\\"}\\" > %t-files.json'
 ))
 
 config.substitutions.append((
diff --git a/swift/unittests/SwiftObfuscation/FileIOTests.cpp b/swift/unittests/SwiftObfuscation/FileIOTests.cpp
index 1d10522a92b..2139abaf8a2 100644
--- a/swift/unittests/SwiftObfuscation/FileIOTests.cpp
+++ b/swift/unittests/SwiftObfuscation/FileIOTests.cpp
@@ -102,6 +102,8 @@ TEST(ParseJson, SuccessParsingText) {
     std::string ExplicitFrameworkPath = "testExplicitFrameworkPath";
     std::string ImplicitFramework = "testImplicitFramework";
     std::string FrameworkSearchPath = "testFrameworkSearchPath";
+    std::string HeaderSearchPath = "testHeaderSearchPath";
+    std::string BridgingHeader = "testBridgingHeader";
     FakeMemoryBuffer::Payload = "{\r\n  \"project\":{\r\n"
         "\"rootPath\":\"" + RootPath + "\",\r\n"
         "\"projectFilePath\":\"" + ProjectFilePath + "\"\r\n   },"
@@ -121,7 +123,10 @@ TEST(ParseJson, SuccessParsingText) {
         "\"name\":\"" + ExplicitFrameworkName + "\",\r\n"
         "\"path\":\"" + ExplicitFrameworkPath + "\"\r\n }\r\n ],\r\n"
         "\"implicitlyLinkedFrameworks\":[\r\n \"" + ImplicitFramework + "\"\r\n   ],\r\n"
-        "\"frameworkSearchPaths\":[\r\n \"" + FrameworkSearchPath + "\"\r\n]\r\n}";
+        "\"frameworkSearchPaths\":[\r\n \"" + FrameworkSearchPath + "\"\r\n],\r\n"
+        "\"headerSearchPaths\":[\r\n \"" + HeaderSearchPath + "\"\r\n],\r\n"
+        "\"bridgingHeader\":\"" + BridgingHeader + "\"\r\n"
+        "\r\n}";
     std::string Path = "";
     std::string Expected = "Error during JSON parse";
 
@@ -154,6 +159,9 @@ TEST(ParseJson, SuccessParsingText) {
     EXPECT_EQ(FilesJson.ImplicitlyLinkedFrameworks[0], ImplicitFramework);
     EXPECT_EQ(FilesJson.FrameworkSearchPaths.size(), 1U);
     EXPECT_EQ(FilesJson.FrameworkSearchPaths[0], FrameworkSearchPath);
+    EXPECT_EQ(FilesJson.HeaderSearchPaths.size(), 1U);
+    EXPECT_EQ(FilesJson.HeaderSearchPaths[0], HeaderSearchPath);
+    EXPECT_EQ(FilesJson.BridgingHeader, BridgingHeader);
 }
 
 struct FakeFile {
-- 
2.17.1 (Apple Git-112)


From 8f0312b8285ca67f3565c5e279b996b16491448a Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Mon, 12 Mar 2018 13:12:37 +0100
Subject: [PATCH 117/138] Fixed layout renaming for drop note

Summary: improved layout renaming

Reviewers: jerzy.kleszcz, krzysztof.siejkowski

Reviewed By: jerzy.kleszcz, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2878
---
 .DS_Store                                     | Bin 0 -> 12292 bytes
 .../include/swift/Obfuscation/LayoutRenamer.h |  77 ++--
 swift/lib/Obfuscation/LayoutRenamer.cpp       | 328 +++++++++---------
 swift/lib/Obfuscation/Renaming.cpp            |  24 +-
 4 files changed, 237 insertions(+), 192 deletions(-)
 create mode 100644 .DS_Store

diff --git a/.DS_Store b/.DS_Store
new file mode 100644
index 0000000000000000000000000000000000000000..de69144e8da8c8a3ffbc5c8480d96675641e48e6
GIT binary patch
literal 12292
zcmeHNYj7LY6+Xv_lijtPtn-i~*-DfcCn4CxHjYi=1Z2l~I0+?<^CT&W9verEEE%t4
zCzyaKWy-XKwv;xIw51gKfKd2R0;SUzr9caPQQYzxnCW8%W;&g|pulum`rW%LWmlF=
zXgdP~TF>h2z4zR^ch7#h=ewUwMBJ5$H4`l+A_b?gx(C%L1S?Q*9HL#E<BmzFVVn&(
zajg?YDMS5aP?FN)yx)BlWtftf|74t%)J-YZ{KI&LIO>v-VRImoNJZfFcw`_EH`7f`
zPjlI%$>md~DvG9PmD-1T52S{B)8TZ+><SO=7NyPM^nr+dy)~6e<gUY!?QvsxuRd#a
zDwz()lg6Oz9FG}r*|Q^_jHQOVQki7Tl;iYT4T_>F>R#P9GSbqzydl`q)^emFIMUqI
zjza6Q<|9W`rMkX(RnNZu!<Ua-apcP5m@N(#&nJ%QmdSmd$X%5#N)aeUpcH{p1m15E
zuyccwm+#+iVJJOsDFUSk6o`OWAA&fA4cT_ovU2IbhoI1+T~KIw;2Qe?Sr@cz$hM=F
zm0i(Cc7?UNvc1J%t2^q0!W}kb+fmC}-HEO4#P*%V#zh<~?+zP80SAYqDSeb8P>Mi-
z2-Ki%g1v9dj3y%3y^3$$1a1j)XtlLPE<2XpB0rPeBCBeJuV=%?O?!1cV;WnGL^vHE
zGP=WQ!`!P+H?ddliKdd92aO@@i+4m*iA;YIEmhHQBAS7-(V0l}#xFO_ooVAxT3lUX
zrUuiirQ^;x`ii=}`V7(k;(>HLl{B{-gC?x1p7hKPELeC>)3Oy8c8^s~o32;QP}NJY
zr%tBh`{Tyow&8dzePCDEj2g*UJlVHnC~n3h31e$A+;3FztExKYt)5fq^ZRPEP5E6E
zy-wMgiNr6<#M6hz^l8&8)p@@8s(wn@6T|E;O2x#TVzR|I&sVP~yG8x#K?9#LIjKd9
zed<;dPoakuRn{~#s_NE*5Ce1*QxFqxZc%;P65)uE&||71tJ>OC-;N>cQT2^>Wyea@
zw=<gR@5dvWRosATF(+TAZ?&TTSh-Z(dsEm<Up!zW#qF!-c-PGH`F4r=&REQdDT-1T
zT5MrOhM_LhWR-NWO8cPqTtI8-5~w9f8m8;%DBVEE>2|t@?xXL~qx1y*oPI&Sq-W{3
z^b-A*{zk9RtMqT4$_i^-!E<;%FW@>}%IEVczK}!Q$s71${vdDRUf#nIj<Lb}ImN?#
zm@nrM{wN>iPw}VuMn1ux=P&ZDd=Eds5AhHAVg3>SjDN+?TQe-P(*s>(m9wAx0<I<o
zu&wcwU0Mjh{<Z7YcfBJ3e%525cIK?vbL$p2wzRM8%)Q;bcj<(cM3V&<38O4b<O_A<
z68QG{Yt%q7d~X8^jYEonl0J3J2fWM+`u(~9lOl^})uUJjyes0n;!~IS;Tcx+NwVl)
zsx~WttX^)lwyJF^K&?-<T9>OG3b3nBv05)sL#p`N=_H5ls`slpL;EU%$f9_>jqaic
z=@EJyIQ%ueK)<6u)9Xw;g?09FHT$`S1H6zI^AbLX8+aMF^KxFn9o)@pcpa|?B71o&
zZ|5Dn3y6$LL>}PFc#zYa0WwGVYT)u({uq#XBY%c(;?Dw^x98!oCyPMK^4$~TaHw}M
znMfu3;3beel@j=iKvj*y#(EN|sI5c_nsX=4o8OcNuEu#M`kH&O4h+b);S)a?@6n&?
z?v7>BQKH`*J9y{za|?OI-oj(xfa5OLhcE;fotSluBJTNeHQJo>wfu&tKhN*lJil_R
zGjW_Brf{C;-}5|G+Cpon6I$*?u;)UH&W~9K0;{-U){Av)5aSO(?={`yiwL{C%gMxw
z7pMJ{c6*9vE9U9YkAIR~Tiz-Ccn<XA^V=JO=QS@A`f+=EQ(^h|76cYYQTbTN%Z^|;
zX@aBLK@0B9KKXMwTA)>UD*fx$_srbjDVV(99yt)+(ZN(Au{mYN1qaxbqYLAjb`~ZO
z<LHUb>d9%<we#zjENxxBs%uQJhncfHo-^kU4M^Ui7gkt*jw66CC}T79s_CA&{@{3?
zAX@x${b%Lz1ToCQMSjm|o*-(@Y4CVX^8``T)a>y)c!H=}*5>hN6M*CiqH@J7k3W}5
zKoaC_FZ6d7A_?}C)+maDCe(#?Nsv%(ZLYJ*gc_SMs92x_)PgVMCfbLu*$BwO&2$@x
z!u|9BJxo8Pr?EJ{gvI$4dW~MEH@FN0p^~TZbkGDJ7U^0(n_KuiZUs%~;Sca;NfUPS
zKDj8zxSvfd$3t>KzK%c6pWy4|LVPQKiSOjQ_-_6Ne}^C8NBJ>+QV<3H1OJKtVa+s0
z7dB;QZdrZ})(zw=J-DebkZVB@yglz?AU`X)FIa@PI#_@9ggnAU56+lWj0qM|8}Q6K
zGagan^Us;TptjcL5u#YJu+{?>p^k~dl7(n1!xu#i>seacY*Pw(msU@kO(|sSa!-d%
zDP-#fo{&u`WNX0Ft%6U0Lj13IeVm?>MB<;4NL27lNoCIlkzFon>}rsQwUWpR>adM3
z1xmxf=|P}02|9ZSbasTV;448IEUX^o&+#$7g^z>QeuclvUk7GS@_l@Y@8@svgCMw1
z@R%g80AvoW8}rcmq8qJwB*J$(X;CART?*er0|`0~Vqv0YKWZ{auQAH~<e8V;kdR%;
z?Y|f?n<2!^{ckZLYicn}&_q@ilZw)TyeT2`yQVbzEyg^AG17Q!Ge2{aU<8L8jG)>z
zlHeVpUmt>&3lD;3k5!N{I7gf78cob1g+Ln^VF0fnOo!#j*%#0V?+jW7<Vz~VF`Q#h
zb&Newh()=c%Z-_AN$|+YU`l<6cHaF&WN5J?GC9BO%M=t<%XY>9eF&CBm-}T&qUs!|
zycngG6tRfsdzVJ#_<c66;^jDE<e*Xg+3a&#UC}DMYpS$${|5?{BTNo@RAA4WlUxKn
z^33+nliSjckd!2<W@y^mqenuV@K$?$ZW%>vdTVOEnkyH{<RDstwO+3?F(FNeVYGVh
zB9SH}MY3v^XxNLImXsoEyh}B?9knQuRn@8?oorOI6v?Wbp{-EV96^!~w{n%&o44nd
zn_w}ePE5%`jvN|_nqxz9w|XuV?e(+=Yrp_q1NGzv`Xrs8JLq0IMc=2#K#7EQ@+3V+
z&x0Dh2y*ln`WL;4l*3R@#NO4?PtM|c>|F&hYQx@jC3dZAv1{!?`q_yc>u%^Mf*e_C
z=jz-Z^$YwpnPl$bZ}NQtXO6V8-YRE5`MbDs!!S#NwiJS4pnI0K_ML&DOC(t&)xO-D
z%X?uiKshlqp<-fb6*XGG5<~JOz%1p_r&@xW5J>{TzyiUgbxS1C>H}aQr>sJtKCnbl
z^fEbYLt{YGCrRZ`$S2J$T0k$C8lNb(wQHI_S*n1d*s&6=QzVHOH_>XeE}PugirpEY
z?aOqMz73>3Mb7|Vzo$O}VQ&Co<sjYFAl<c4M&|M&TN`PV_!8QPpf^Gr*$kad(3|bN
z7xX47)w(1PKp8QijU3^tpp1NkuK^K1$~Q>e?l_;YP?e)F>#``bEZ^bAS{{WdN8S|K
zGD&^z)WSk5a3_o?cKu;w>w|foLMw23R>)l3k8h#SRt)rL#91f@IyH+Ty_{MLKlJF!
zxK|NRm*(>Fb#N^1>Cj##^mJ-4WeY=8{Qt*J@BeY%a&dD6Mg0E1ruhH=NvG0BDFUSk
zyf-7jle>GnyYOt;A5ZchQ~cH*#JLZrIE3G*xWIvH`BOZs{3#w*vFmLONcx2Ax>3uD
z5k$T03M;$9%C4|tTO!(nwhh^K)UsChxBpK7_`$1`|EZM!1&WH~XE$q*d*JtE{{IhZ
CgDRE)

literal 0
HcmV?d00001

diff --git a/swift/include/swift/Obfuscation/LayoutRenamer.h b/swift/include/swift/Obfuscation/LayoutRenamer.h
index 632d01e6e62..3f8937d6ab9 100644
--- a/swift/include/swift/Obfuscation/LayoutRenamer.h
+++ b/swift/include/swift/Obfuscation/LayoutRenamer.h
@@ -17,7 +17,19 @@ enum TargetRuntime {
 enum TraversalDirection {
   Up, Down
 };
+
+struct LayoutNodeRenaming {
+  xmlNode *Node;
+  const xmlChar* PropertyName;
+  const std::string ObfuscatedName;
+  
+  LayoutNodeRenaming() = default;
   
+  LayoutNodeRenaming(xmlNode* Node,
+                     const xmlChar* PropertyName,
+                     const std::string ObfuscatedName);
+};
+
 /// Base class for renaming strategies. If a new layout file appears then
 /// a new strategy should be created and applied to that new type of file.
 /// Old files should use old strategies to ensure compatibility.
@@ -44,25 +56,23 @@ class BaseLayoutRenamingStrategy {
 
 
 public:
-  virtual  void performActualRenaming(
-          xmlNode *Node,
-          const std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols,
-          bool &PerformedRenaming) = 0;
+  virtual void
+          extractLayoutRenamingNodes(
+                      xmlNode *Node,
+                      const std::vector<SymbolRenaming> &RenamedSymbols,
+                      std::vector<LayoutNodeRenaming> &NodesToRename) = 0;
   
-  virtual  void renameCustomClass(
+  virtual llvm::Optional<LayoutNodeRenaming> extractCustomClassRenamingNode(
           xmlNode *Node,
-          const std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols,
-          bool &PerformedRenaming) = 0;
+          const std::vector<SymbolRenaming> &RenamedSymbols) = 0;
   
-  virtual  void renameAction(
+  virtual llvm::Optional<LayoutNodeRenaming> extractActionRenamingNode(
           xmlNode *Node,
-          const std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols,
-          bool &PerformedRenaming) = 0;
+          const std::vector<SymbolRenaming> &RenamedSymbols) = 0;
   
-  virtual  void renameOutlet(
+  virtual llvm::Optional<LayoutNodeRenaming> extractOutletRenamingNode(
           xmlNode *Node,
-          const std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols,
-          bool &PerformedRenaming) = 0;
+          const std::vector<SymbolRenaming> &RenamedSymbols) = 0;
   
   BaseLayoutRenamingStrategy(xmlNode *RootNode);
   virtual ~BaseLayoutRenamingStrategy() = default;
@@ -83,41 +93,54 @@ public:
 
   LayoutRenamer(std::string FileName);
 
-  /// Performs renaming of layout (.xib and .storyboard) files
-  /// from FilesJson in the following steps:
+  /// Extracts node info required for renaming of layout
+  /// (.xib and .storyboard) files from FilesJson in the following steps:
   ///
   /// 1. Gathers all renamed symbols (see Renaming.h)
-  ///    and stores them in RenamedSymbols map.
+  ///    and stores them in RenamedSymbols vector.
   /// 2. Iterates through FilesJson.LayoutFiles list
   ///    and picks renaming strategy based on file type and version.
-  /// 3. Performs actual renaming if all conditions are met.
+  /// 3. Extracts all node info that should be renamed.
+  /// 3. Performs actual renaming.
   /// 4. Saves renamed layout files in OutputPath.
   ///
   /// Typical usage:
   /// \code
   /// LayoutRenamer LayoutRenamer(LayoutFile); // param is a path to layout file
   ///
-  /// auto RenamedOrError = LayoutRenamer.performRenaming(RenamedSymbols, Path);
+  /// // Extract nodes
+  /// auto NodesToRenameOrError
+  ///                = LayoutRenamer.extractLayoutRenamingNodes(RenamedSymbols);
   ///
-  /// if (auto Error = RenamedOrError()) {
+  /// if (auto Error = NodesToRenameOrError.takeError()) {
   ///   return std::move(Error);
   /// }
   ///
-  /// auto PerformedRenaming = RenamedOrError();
+  /// auto NodesToRename = NodesToRenameOrError.get();
   ///
-  /// if (PerformedRenaming) {
-  ///   ...
+  /// // Perform renaming on extracted nodes
+  /// if (!NodesToRename.empty()) {
+  ///   LayoutRenamer.performRenaming(NodesToRename, Path);
   /// }
+  ///
   /// \endcode
   ///
-  /// \param RenamedSymbols a map containing all renamed symbols
+  /// \param RenamedSymbols a vector containing all renamed symbols
   ///                       in the source code.
-  /// \param OutputPath Path where layout files will be saved after renaming.
   ///
-  /// \returns true if file was renamed and false if it wasn't.
-  llvm::Expected<bool> performRenaming(
-                 std::unordered_map<std::string, SymbolRenaming> RenamedSymbols,
+  /// \returns a vector containing all node info required to preform renaming.
+  llvm::Expected<std::vector<LayoutNodeRenaming>>
+  extractLayoutRenamingNodes(std::vector<SymbolRenaming> RenamedSymbols);
+  
+  /// Performs actual renaming of layout files
+  /// \param LayoutNodesToRename a vector containing all node info
+  ///                            required to preform renaming.
+  /// \param OutputPath Path where layout files will be saved after renaming.
+  void performRenaming(
+                 const std::vector<LayoutNodeRenaming> LayoutNodesToRename,
                  std::string OutputPath);
+  
+  
 
   ~LayoutRenamer();
 };
diff --git a/swift/lib/Obfuscation/LayoutRenamer.cpp b/swift/lib/Obfuscation/LayoutRenamer.cpp
index a727a9848ca..04cf5ba71a7 100644
--- a/swift/lib/Obfuscation/LayoutRenamer.cpp
+++ b/swift/lib/Obfuscation/LayoutRenamer.cpp
@@ -3,6 +3,13 @@
 namespace swift {
 namespace obfuscation {
   
+LayoutNodeRenaming::LayoutNodeRenaming(xmlNode* Node,
+                                       const xmlChar* PropertyName,
+                                       const std::string ObfuscatedName)
+                                            : Node(Node),
+                                              PropertyName(PropertyName),
+                                              ObfuscatedName(ObfuscatedName) {};
+  
 BaseLayoutRenamingStrategy::BaseLayoutRenamingStrategy(xmlNode *RootNode)
   : RootNode(RootNode) {}
   
@@ -139,6 +146,21 @@ private:
     }
   }
   
+  // Determines if a SymbolIdentifier contains given ClassName and
+  // ModuleName. It used to find proper SymbolRenaming for outlets and actions.
+  bool identifierContainsModuleAndClass(const std::string SymbolIdentifier,
+                                        const std::string ClassName,
+                                        const std::string ModuleName) {
+    
+    auto HasClassName =
+                  SymbolIdentifier.find("."+ClassName+".") != std::string::npos;
+    
+    auto HasModuleName = ModuleName.empty() ||
+               (SymbolIdentifier.find("."+ModuleName+".") != std::string::npos);
+    
+    return HasClassName && HasModuleName;
+  }
+  
 public:
   
   XCode9RenamingStrategy(xmlNode *RootNode, enum TargetRuntime TargetRuntime)
@@ -146,21 +168,22 @@ public:
     this->TargetRuntime = TargetRuntime;
   }
   
-  // Performs renames if needed based on RenamedSymbols map.
+  // Extracts Node information that is required to perform renaming.
   // Layout files are xmls, it looks for a specific attributes
   // such as "customClass" and retrieves their values.
   // These values are then used to look up RenamedSymbols map.
   // If a "customClass" value is present inside RenamedSymbols, then
   // it means that this symbol was renamed in the source code in previous step
-  // and it should be renamed in layout file as well.
+  // and it should be renamed in layout file as well so it collects it in
+  // NodesToRename vector.
   // "customModule" attribute is also taken into account - if it's present then
   // it's value is compared with
   // symbol's module value (the one found in RenamedSymbols) and
   // if it's not present then we assume that it's inherited from target project.
-  void performActualRenaming(
+  void extractLayoutRenamingNodes(
           xmlNode *Node,
-          const std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols,
-          bool &PerformedRenaming) {
+          const std::vector<SymbolRenaming> &RenamedSymbols,
+          std::vector<LayoutNodeRenaming> &NodesToRename) {
     
     if(Node == nullptr){
       return;
@@ -171,22 +194,38 @@ public:
          CurrentNode = CurrentNode->next) {
       
       if (CurrentNode->type == XML_ELEMENT_NODE) {
-        renameCustomClass(CurrentNode, RenamedSymbols, PerformedRenaming);
-        renameAction(CurrentNode, RenamedSymbols, PerformedRenaming);
-        renameOutlet(CurrentNode, RenamedSymbols, PerformedRenaming);
+        auto CustomClassNode = extractCustomClassRenamingNode(
+                                                             CurrentNode,
+                                                             RenamedSymbols);
+        if (CustomClassNode.hasValue()) {
+          NodesToRename.push_back(CustomClassNode.getValue());
+        }
+        
+        
+        auto ActionNode = extractActionRenamingNode(CurrentNode,
+                                                           RenamedSymbols);
+        if (ActionNode.hasValue()) {
+          NodesToRename.push_back(ActionNode.getValue());
+        }
+        
+        auto OutletNode = extractOutletRenamingNode(CurrentNode,
+                                                           RenamedSymbols);
+        if (OutletNode.hasValue()) {
+          NodesToRename.push_back(OutletNode.getValue());
+        }
+        
       }
       
       xmlNode *ChildrenNode = CurrentNode->children;
       if(ChildrenNode != nullptr) {
-        performActualRenaming(ChildrenNode, RenamedSymbols, PerformedRenaming);
+        extractLayoutRenamingNodes(ChildrenNode, RenamedSymbols, NodesToRename);
       }
     }
   }
   
-  void renameCustomClass(
+  llvm::Optional<LayoutNodeRenaming> extractCustomClassRenamingNode(
           xmlNode *Node,
-          const std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols,
-          bool &PerformedRenaming) {
+          const std::vector<SymbolRenaming> &RenamedSymbols) {
     
     std::string CustomClass;
     std::string CustomModule;
@@ -195,21 +234,19 @@ public:
     
     if(!CustomClass.empty()) {
       
-      auto SymbolIterator = RenamedSymbols.find(CustomClass);
-      
-      if ( SymbolIterator != RenamedSymbols.end() ) {
-        
-        auto Symbol = SymbolIterator->second;
-        
-        if(shouldRename(Symbol, CustomClass, CustomModule)) {
-          xmlSetProp(Node,
-                     CustomClassAttributeName,
-                     reinterpret_cast<const xmlChar *>(
-                                                Symbol.ObfuscatedName.c_str()));
-          PerformedRenaming = true;
+      // Find SymbolRenaming for given CustomClass and perform renaming
+      for(auto SymbolRenaming: RenamedSymbols) {
+        if(SymbolRenaming.OriginalName == CustomClass) {
+          
+          if(shouldRename(SymbolRenaming, CustomClass, CustomModule)) {
+            return LayoutNodeRenaming(Node,
+                                      CustomClassAttributeName,
+                                      SymbolRenaming.ObfuscatedName);
+          }
         }
       }
     }
+    return llvm::None;
   }
   
   // actions look like this in xml for macos:
@@ -224,174 +261,140 @@ public:
   // is not present) attribute value
   // then it extracts CustomClass/CustomModule needed for check
   // if customAction should be obfuscated
-  // it does the check and performs renaming if needed
-  void renameAction(
-          xmlNode *Node,
-          const std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols,
-          bool &PerformedRenaming) {
-    
+  // it does the check and returns the node info that will be later renamed
+  llvm::Optional<LayoutNodeRenaming> extractActionRenamingNode(
+                            xmlNode *Node,
+                            const std::vector<SymbolRenaming> &RenamedSymbols) {
+
     if (xmlStrcmp(Node->name, ActionNodeName) == 0) {
-      
+
       std::string DestinationOrTarget;
-      
+
       if(TargetRuntime == CocoaTouch) {
         DestinationOrTarget = std::string(
-                              reinterpret_cast<const char *>(
-                                                    xmlGetProp(Node,
-                                                    DestinationAttributeName)));
-        
+        reinterpret_cast<const char *>(xmlGetProp(Node,
+                                                  DestinationAttributeName)));
       } else if(TargetRuntime == Cocoa) {
-        DestinationOrTarget = std::string(
-                              reinterpret_cast<const char *>(
-                                                     xmlGetProp(Node,
-                                                    TargetAttributeName)));
+        DestinationOrTarget = std::string(reinterpret_cast<const char *>(
+                                              xmlGetProp(Node,
+                                                         TargetAttributeName)));
       }
-      
+
       // find node with which id attribute value == DestinationOrTarget
       xmlNode *NodeWithDestinationAsId = findNodeWithAttributeValue(
-                           RootNode,
-                           IdAttributeName,
-                           reinterpret_cast<const xmlChar *>
+                                          RootNode,
+                                          IdAttributeName,
+                                          reinterpret_cast<const xmlChar *>
                                                   (DestinationOrTarget.c_str()),
-                           TraversalDirection::Down);
-      
+                                          TraversalDirection::Down);
+
       if(NodeWithDestinationAsId != nullptr) {
-        
+
         std::string CustomClass;
         std::string CustomModule;
-        
+
         // Try to extract CustomClass and CustomModule
         extractCustomClassAndModule(
-                                    NodeWithDestinationAsId,
-                                    CustomClass,
-                                    CustomModule);
-        
+        NodeWithDestinationAsId,
+        CustomClass,
+        CustomModule);
+
         // Check if should rename and if yes then perform actual renaming
         if(!CustomClass.empty()) {
-          
+
           std::string SelectorName = std::string(
-                                     reinterpret_cast<const char *>(xmlGetProp(
+                                        reinterpret_cast<const char *>(
+                                              xmlGetProp(
                                                  Node,
                                                  ActionSelectorAttributeName)));
-          
+
           std::vector<std::string> SplittedSelName = split(SelectorName, ':');
-          if(!SplittedSelName.empty()) {
           
+          if(!SplittedSelName.empty()) {
+
             std::string SelectorFunctionName = SplittedSelName[0];
-            
-            auto SymbolIterator = RenamedSymbols.find(SelectorFunctionName);
-            
-            if ( SymbolIterator != RenamedSymbols.end() ) {
-              
-              auto Symbol = SymbolIterator->second;
-              
-              SelectorName.replace(0,
-                                   Symbol.OriginalName.length(),
-                                   Symbol.ObfuscatedName);
-              
-              if(shouldRename(Symbol, CustomClass, CustomModule)) {
-                xmlSetProp(Node,
-                           ActionSelectorAttributeName,
-                           reinterpret_cast<const xmlChar *>(
-                                                         SelectorName.c_str()));
-                
-                PerformedRenaming = true;
+
+            for(auto SymbolRenaming: RenamedSymbols) {
+              if(SymbolRenaming.OriginalName == SelectorFunctionName &&
+                   identifierContainsModuleAndClass(SymbolRenaming.Identifier,
+                                                    CustomClass,
+                                                    CustomModule)) {
+
+                SelectorName.replace(0,
+                                     SymbolRenaming.OriginalName.length(),
+                                     SymbolRenaming.ObfuscatedName);
+
+                if(shouldRename(SymbolRenaming, CustomClass, CustomModule)) {
+                  return LayoutNodeRenaming(
+                                    Node,
+                                    ActionSelectorAttributeName,
+                                    SelectorName);
+                }
               }
             }
           }
         }
       }
     }
+    return llvm::None;
   }
   
   // outlets look like this in xml:
   // <outlet property="prop_name" destination="x0y-zc-UQE" id="IiG-Jc-DUb"/>
   //
   // in order to obfuscate prop_name the module name needs to be known
-  // first it looks for a node which id attribute's value is equal
-  // to outlet's node destination attribute value
-  // if it finds such node then it checks if it has
-  // CustomClass and CustomModule attributes
-  // if not then it means that it's probably somewhere higher in the hierarchy
   // so it looks for the closest parent which has CustomClass attribute
-  // then when it finally have CustomClass/CustomModule needed for check
+  // then when it have CustomClass/CustomModule needed for check
   // if prop_name should be obfuscated
-  // it does the check and performs renaming if needed
-  void renameOutlet(
-          xmlNode *Node,
-          const std::unordered_map<std::string, SymbolRenaming> &RenamedSymbols,
-          bool &PerformedRenaming) {
-    
+  // it does the check and returns the node info that will be later renamed
+  llvm::Optional<LayoutNodeRenaming> extractOutletRenamingNode(
+                            xmlNode *Node,
+                            const std::vector<SymbolRenaming> &RenamedSymbols) {
+
     if (xmlStrcmp(Node->name, OutletNodeName) == 0) {
-      
-      std::string Destination = std::string(
-                                reinterpret_cast<const char *>(xmlGetProp(
-                                                    Node,
-                                                    DestinationAttributeName)));
-      
-      // find node with which id attribute value == Destination
-      xmlNode *NodeWithDestinationAsId = findNodeWithAttributeValue(
-                                  RootNode,
-                                  IdAttributeName,
-                                  reinterpret_cast<const xmlChar *>
-                                                          (Destination.c_str()),
-                                  TraversalDirection::Down);
-      
-      if(NodeWithDestinationAsId != nullptr) {
-        
-        std::string CustomClass;
-        std::string CustomModule;
-        
+
+      std::string CustomClass;
+      std::string CustomModule;
+
+      // Search for closest parent Node with custom class
+      xmlNode *Parent = findNodeWithAttributeValue(
+                                                   Node,
+                                                   CustomClassAttributeName,
+                                                   nullptr,
+                                                   TraversalDirection::Up);
+
+      if(Parent != nullptr) {
+
         // Try to extract CustomClass and CustomModule
-        extractCustomClassAndModule(NodeWithDestinationAsId,
-                                    CustomClass,
-                                    CustomModule);
-        
-        // find CustomClass attribute value to check
-        // if outlet name should be renamed
-        if(CustomClass.empty()) {
-          
-          //CustomClass was not present in a Node where id == Destination
-          // so search for closest parent Node with custom class
-          xmlNode *Parent = findNodeWithAttributeValue(
-                                                      NodeWithDestinationAsId,
-                                                      CustomClassAttributeName,
-                                                      nullptr,
-                                                      TraversalDirection::Up);
-          
-          if(Parent != nullptr) {
-            
-            // Again, try to extract CustomClass and CustomModule
-            extractCustomClassAndModule(Parent, CustomClass, CustomModule);
-          }
-        }
-        
+        extractCustomClassAndModule(Parent, CustomClass, CustomModule);
+
         // Check if should rename and if yes then perform actual renaming
         if(!CustomClass.empty()) {
-          
+
           std::string PropertyName = std::string(
-                                     reinterpret_cast<const char *>(xmlGetProp(
+                                         reinterpret_cast<const char *>(
+                                            xmlGetProp(
                                                  Node,
                                                  OutletPropertyAttributeName)));
-          
-          auto SymbolIterator = RenamedSymbols.find(PropertyName);
-          
-          if ( SymbolIterator != RenamedSymbols.end() ) {
-            
-            auto Symbol = SymbolIterator->second;
-            
-            if(shouldRename(Symbol, CustomClass, CustomModule)) {
-              xmlSetProp(Node,
-                         OutletPropertyAttributeName,
-                         reinterpret_cast<const xmlChar *>
-                                               (Symbol.ObfuscatedName.c_str()));
-              
-              PerformedRenaming = true;
+
+          for(auto SymbolRenaming: RenamedSymbols) {
+            if(SymbolRenaming.OriginalName == PropertyName &&
+                 identifierContainsModuleAndClass(SymbolRenaming.Identifier,
+                                                  CustomClass,
+                                                  CustomModule)) {
+
+              if(shouldRename(SymbolRenaming, CustomClass, CustomModule)) {
+                return LayoutNodeRenaming(
+                                  Node,
+                                  OutletPropertyAttributeName,
+                                  SymbolRenaming.ObfuscatedName);
+              }
             }
           }
         }
       }
     }
+    return llvm::None;
   }
 };
   
@@ -485,12 +488,12 @@ llvm::Expected<std::unique_ptr<BaseLayoutRenamingStrategy>>
      return stringError("Unknown root node type in layout file: " + FileName);
   }
 }
-
-llvm::Expected<bool>
-  LayoutRenamer::performRenaming(
-                 std::unordered_map<std::string, SymbolRenaming> RenamedSymbols,
-                 std::string OutputPath) {
-
+  
+llvm::Expected<std::vector<LayoutNodeRenaming>>
+  LayoutRenamer::extractLayoutRenamingNodes(
+                                   std::vector<SymbolRenaming> RenamedSymbols) {
+  std::vector<LayoutNodeRenaming> NodesToRename;
+  
   if (XmlDocument == nullptr) {
     return stringError("Could not parse file: " + FileName);
   }
@@ -505,16 +508,29 @@ llvm::Expected<bool>
   
   auto RenamingStrategy = std::move(RenamingStrategyOrError.get());
   
-  bool PerformedRenaming = false;
-  RenamingStrategy->performActualRenaming(RootNode,
-                                          RenamedSymbols,
-                                          PerformedRenaming);
+  RenamingStrategy->extractLayoutRenamingNodes(RootNode,
+                                               RenamedSymbols,
+                                               NodesToRename);
+    
+  return NodesToRename;
+}
+
+void
+  LayoutRenamer::performRenaming(
+                 const std::vector<LayoutNodeRenaming> LayoutNodesToRename,
+                 std::string OutputPath) {
+    
+  for (const auto &LayoutNodeToRename: LayoutNodesToRename) {
+    
+    xmlSetProp(LayoutNodeToRename.Node,
+               LayoutNodeToRename.PropertyName,
+               reinterpret_cast<const xmlChar *>(
+                                    LayoutNodeToRename.ObfuscatedName.c_str()));
+  }
   
   xmlSaveFileEnc(static_cast<const char *>(OutputPath.c_str()),
                  XmlDocument,
                  reinterpret_cast<const char *>(XmlDocument->encoding));
-  
-  return PerformedRenaming;
 }
         
 } //namespace obfuscation
diff --git a/swift/lib/Obfuscation/Renaming.cpp b/swift/lib/Obfuscation/Renaming.cpp
index 5253aa24bc9..569f494e21e 100644
--- a/swift/lib/Obfuscation/Renaming.cpp
+++ b/swift/lib/Obfuscation/Renaming.cpp
@@ -124,8 +124,8 @@ llvm::Expected<bool> performActualRenaming(SourceFile &Current,
                                            SourceManager &SourceManager,
                                            unsigned int BufferId,
                                            StringRef Path,
-                                           std::unordered_map<std::string,
-                                           SymbolRenaming> &RenamedSymbols,
+                                           std::vector<SymbolRenaming>
+                                                          &RenamedSymbols,
                                            ExtensionExcluder &Excluder) {
   bool performedRenaming = false;
   auto IndexedSymbolsWithRanges = walkAndCollectSymbols(Current, Excluder);
@@ -158,7 +158,7 @@ llvm::Expected<bool> performActualRenaming(SourceFile &Current,
         Editor->ide::SourceEditConsumer::accept(SourceManager,
                                                 SymbolWithRange.Range,
                                                 ObfuscatedName);
-        RenamedSymbols.insert({Symbol.OriginalName, Symbol});
+        RenamedSymbols.push_back(Symbol);
         performedRenaming = true;
         break;
       }
@@ -188,7 +188,7 @@ performRenaming(std::string MainExecutablePath,
   }
   
   FilesList Files;
-  std::unordered_map<std::string, SymbolRenaming> RenamedSymbols;
+  std::vector<SymbolRenaming> RenamedSymbols;
 
   ExtensionExcluder Excluder;
   
@@ -220,6 +220,7 @@ performRenaming(std::string MainExecutablePath,
     }
   }
   
+  // Rename layout files
   for (const auto &LayoutFile: FilesJson.LayoutFiles) {
     
     auto PathOrError = computeObfuscatedPath(LayoutFile,
@@ -234,19 +235,24 @@ performRenaming(std::string MainExecutablePath,
     
     LayoutRenamer LayoutRenamer(LayoutFile);
 
-    auto PerformedRenamingOrError = LayoutRenamer.performRenaming(RenamedSymbols, Path);
+    // Extract nodes
+    auto NodesToRenameOrError
+                     = LayoutRenamer.extractLayoutRenamingNodes(RenamedSymbols);
     
-    if (auto Error = PerformedRenamingOrError.takeError()) {
+    if (auto Error = NodesToRenameOrError.takeError()) {
       return std::move(Error);
     }
     
-    auto PerformedRenaming = PerformedRenamingOrError.get();
+    auto NodesToRename = NodesToRenameOrError.get();
     
-    if (PerformedRenaming) {
+    // Perform renaming on extracted nodes
+    if (!NodesToRename.empty()) {
+      LayoutRenamer.performRenaming(NodesToRename, Path);
+
       Files.push_back(std::pair<std::string, std::string>(LayoutFile, Path));
     }
   }
-    
+  
   return Files;
 }
 
-- 
2.17.1 (Apple Git-112)


From 73323727de37f44278216cc5d4421a77cf079c6b Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Thu, 15 Mar 2018 15:41:34 +0100
Subject: [PATCH 118/138] Exclude database related code

Reviewers: krzysztof.siejkowski, jerzy.kleszcz

Reviewed By: krzysztof.siejkowski, jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2879
---
 Documentation/ThingsThatAreNotObfuscated.md   |   4 +
 swift/include/swift/Obfuscation/Excluder.h    |  30 ++++
 .../swift/Obfuscation/ExtensionExcluder.h     |  15 +-
 .../swift/Obfuscation/NSManagedExcluder.h     |  19 +++
 .../swift/Obfuscation/SourceFileWalker.h      |   5 +-
 .../Obfuscation/VariableDeclarationParser.h   |   5 +-
 swift/lib/Obfuscation/CMakeLists.txt          |   2 +
 swift/lib/Obfuscation/Excluder.cpp            |  41 ++++++
 swift/lib/Obfuscation/ExtensionExcluder.cpp   | 136 +++++++-----------
 swift/lib/Obfuscation/NSManagedExcluder.cpp   |  38 +++++
 swift/lib/Obfuscation/Renaming.cpp            |  11 +-
 swift/lib/Obfuscation/SourceFileWalker.cpp    |  32 +++--
 swift/lib/Obfuscation/SymbolExtracting.cpp    |   8 +-
 .../ExcludeNSManaged/ExcludeNSManaged.swift   |  14 ++
 .../Expected/ExcludeNSManaged.swift           |  13 ++
 15 files changed, 260 insertions(+), 113 deletions(-)
 create mode 100644 swift/include/swift/Obfuscation/Excluder.h
 create mode 100644 swift/include/swift/Obfuscation/NSManagedExcluder.h
 create mode 100644 swift/lib/Obfuscation/Excluder.cpp
 create mode 100644 swift/lib/Obfuscation/NSManagedExcluder.cpp
 create mode 100644 swift/test/Obfuscation/FullProcess/ExcludeNSManaged/ExcludeNSManaged.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/ExcludeNSManaged/Expected/ExcludeNSManaged.swift

diff --git a/Documentation/ThingsThatAreNotObfuscated.md b/Documentation/ThingsThatAreNotObfuscated.md
index e54d6b8dc9b..fb84c09150f 100644
--- a/Documentation/ThingsThatAreNotObfuscated.md
+++ b/Documentation/ThingsThatAreNotObfuscated.md
@@ -17,6 +17,10 @@ None of them is visible in the compiled binary. For example local variables are
 Similarly associated types, type aliases, enum constants and generic parameters are also not visible in the compiled code.
 
 
+There are also constructs that can't be obfuscated because that would cause runtime errors. A good example is database related code. That means that obfuscator doesn't rename:
+  - variables with `@NSManaged` attribute
+  - subclasses of `NSManagedObject`
+
 References:
   - ["Advanced Apple Debugging & Reverse Engineering" by Derek Selander (pages 124, 159)](https://store.raywenderlich.com/products/advanced-apple-debugging-and-reverse-engineering)
   - [Compiler, Assembler, Linker and Loader:
diff --git a/swift/include/swift/Obfuscation/Excluder.h b/swift/include/swift/Obfuscation/Excluder.h
new file mode 100644
index 00000000000..0496b13388d
--- /dev/null
+++ b/swift/include/swift/Obfuscation/Excluder.h
@@ -0,0 +1,30 @@
+#ifndef Excluder_h
+#define Excluder_h
+
+#include "swift/Frontend/Frontend.h"
+#include "swift/Obfuscation/DataStructures.h"
+
+namespace swift {
+namespace obfuscation {
+  
+/// A base class for excluders
+class Excluder {
+  
+protected:
+  
+  std::set<Decl *> DeclarationsToExclude;
+  
+public:
+  virtual ~Excluder() = default;
+  
+  virtual void identifyExclusions(Decl *Declaration) = 0;
+  
+  void excludeSymbolsFrom(GlobalCollectedSymbols &CollectedSymbols);
+  
+};
+  
+} //namespace obfuscation
+} //namespace swift
+
+
+#endif /* Excluder_h */
diff --git a/swift/include/swift/Obfuscation/ExtensionExcluder.h b/swift/include/swift/Obfuscation/ExtensionExcluder.h
index 83ff0fd42f2..31d4f07b339 100644
--- a/swift/include/swift/Obfuscation/ExtensionExcluder.h
+++ b/swift/include/swift/Obfuscation/ExtensionExcluder.h
@@ -1,25 +1,16 @@
 #ifndef ExtensionExcluder_h
 #define ExtensionExcluder_h
 
-#include "swift/Frontend/Frontend.h"
-#include "swift/Obfuscation/DataStructures.h"
+#include "swift/Obfuscation/Excluder.h"
 
 namespace swift {
 namespace obfuscation {
 
-class ExtensionExcluder {
-
-private:
-
-  std::set<Decl *> DeclarationsToExclude;
+class ExtensionExcluder: public Excluder {
 
 public:
 
-  void identifyExclusionsFromExtension(const ExtensionDecl *Declaration);
-
-  std::vector<IndexedSymbolWithRange>
-  excludeSymbolsFrom(GlobalCollectedSymbols &CollectedSymbols);
-
+    void identifyExclusions(Decl *Declaration);    
 };
 
 } //namespace obfuscation
diff --git a/swift/include/swift/Obfuscation/NSManagedExcluder.h b/swift/include/swift/Obfuscation/NSManagedExcluder.h
new file mode 100644
index 00000000000..49718ecba39
--- /dev/null
+++ b/swift/include/swift/Obfuscation/NSManagedExcluder.h
@@ -0,0 +1,19 @@
+#ifndef NSManagedExcluder_h
+#define NSManagedExcluder_h
+
+#include "swift/Obfuscation/Excluder.h"
+
+namespace swift {
+namespace obfuscation {
+  
+class NSManagedExcluder: public Excluder {
+  
+public:
+  
+  void identifyExclusions(Decl *Declaration);
+};
+  
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* NSManagedExcluder_h */
diff --git a/swift/include/swift/Obfuscation/SourceFileWalker.h b/swift/include/swift/Obfuscation/SourceFileWalker.h
index 3d9f3c87944..0034e9c18d4 100644
--- a/swift/include/swift/Obfuscation/SourceFileWalker.h
+++ b/swift/include/swift/Obfuscation/SourceFileWalker.h
@@ -4,6 +4,7 @@
 #include "swift/Frontend/Frontend.h"
 #include "swift/Obfuscation/DataStructures.h"
 #include "swift/Obfuscation/ExtensionExcluder.h"
+#include "swift/Obfuscation/NSManagedExcluder.h"
 
 #include <set>
 
@@ -31,11 +32,13 @@ namespace obfuscation {
 /// \endcode
 ///
 /// \param SourceFile AST tree representing the Swift source file.
+/// \param Excluders A set of Excluder implementations that will be used to
+///                  exclude declarations that shouldn't be renamed.
 ///
 /// \returns the occurrences of symbols with their metadata, place
 ///          and occurrence index.
 std::set<IndexedSymbolWithRange, IndexedSymbolWithRange::SymbolWithRangeCompare>
-  walkAndCollectSymbols(SourceFile &SourceFile, ExtensionExcluder &Excluder);
+  walkAndCollectSymbols(SourceFile &SourceFile, std::set<Excluder*> &Excluders);
 
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/include/swift/Obfuscation/VariableDeclarationParser.h b/swift/include/swift/Obfuscation/VariableDeclarationParser.h
index c0c360b2497..25ebca841f4 100644
--- a/swift/include/swift/Obfuscation/VariableDeclarationParser.h
+++ b/swift/include/swift/Obfuscation/VariableDeclarationParser.h
@@ -3,6 +3,7 @@
 
 #include "swift/Frontend/Frontend.h"
 #include "swift/Obfuscation/DataStructures.h"
+#include "swift/Obfuscation/DeclarationParsingUtils.h"
 
 namespace swift {
 namespace obfuscation {
@@ -18,7 +19,9 @@ namespace obfuscation {
 ///          from information in \p Declaration object or llvm::Error object
 ///          with the information on why no symbol could be extracted.
 SingleSymbolOrError parse(const VarDecl* Declaration);
-    
+  
+llvm::Expected<ModuleNameAndParts>
+  variableIdentifierPartsFromContext(const VarDecl *Declaration);
 } //namespace obfuscation
 } //namespace swift
 
diff --git a/swift/lib/Obfuscation/CMakeLists.txt b/swift/lib/Obfuscation/CMakeLists.txt
index 8de72ad3490..78c77690de9 100644
--- a/swift/lib/Obfuscation/CMakeLists.txt
+++ b/swift/lib/Obfuscation/CMakeLists.txt
@@ -8,6 +8,7 @@ add_swift_library(swiftObfuscation STATIC
   DeclarationParser.cpp
   OperatorParser.cpp
   DeclarationParsingUtils.cpp
+  Excluder.cpp
   ExtensionExcluder.cpp
   ExpressionParser.cpp
   FileIO.cpp
@@ -15,6 +16,7 @@ add_swift_library(swiftObfuscation STATIC
   LayoutRenamer.cpp
   NameMapping.cpp
   NominalTypeDeclarationParser.cpp
+  NSManagedExcluder.cpp
   ParameterDeclarationParser.cpp
   Renaming.cpp
   SourceFileWalker.cpp
diff --git a/swift/lib/Obfuscation/Excluder.cpp b/swift/lib/Obfuscation/Excluder.cpp
new file mode 100644
index 00000000000..a8284b3015c
--- /dev/null
+++ b/swift/lib/Obfuscation/Excluder.cpp
@@ -0,0 +1,41 @@
+#include "swift/Obfuscation/Excluder.h"
+#include "swift/Obfuscation/DeclarationParsingUtils.h"
+#include "swift/Obfuscation/Utils.h"
+#include "swift/Obfuscation/VariableDeclarationParser.h"
+#include "swift/Obfuscation/DeclarationParser.h"
+
+namespace swift {
+namespace obfuscation {
+  
+void Excluder::
+excludeSymbolsFrom(GlobalCollectedSymbols &CollectedSymbols) {
+  
+  std::vector<IndexedSymbolWithRange> SymbolsToRemove;
+  
+  for (auto *Declaration : DeclarationsToExclude) {
+    
+    auto Range = CharSourceRange();
+    auto SymbolsOrError = extractSymbol(CollectedSymbols, Declaration, Range);
+    if (auto Error = SymbolsOrError.takeError()) {
+      llvm::consumeError(std::move(Error));
+    } else {
+      auto Symbols = SymbolsOrError.get();
+      for (auto CollectedSymbol : CollectedSymbols) {
+        for (auto Symbol : Symbols) {
+          if(CollectedSymbol.SymbolWithRange.Symbol.Identifier
+             == Symbol.Symbol.Identifier) {
+            SymbolsToRemove.push_back(CollectedSymbol);
+          }
+        }
+      }
+    }
+  }
+  
+  for (auto IndexedSymbolWithRange : SymbolsToRemove) {
+    CollectedSymbols.erase(IndexedSymbolWithRange);
+  }
+}
+  
+} //namespace obfuscation
+} //namespace swift
+
diff --git a/swift/lib/Obfuscation/ExtensionExcluder.cpp b/swift/lib/Obfuscation/ExtensionExcluder.cpp
index dff81d43c27..344b79f1b80 100644
--- a/swift/lib/Obfuscation/ExtensionExcluder.cpp
+++ b/swift/lib/Obfuscation/ExtensionExcluder.cpp
@@ -9,67 +9,70 @@ namespace obfuscation {
 
 void
 ExtensionExcluder::
-  identifyExclusionsFromExtension(const ExtensionDecl *Declaration) {
-
-  std::vector<SymbolWithRange> Results;
-  auto *ExtendedType = Declaration->getExtendedType()->getAnyNominal();
-  auto ExtensionModuleName = moduleName(Declaration);
-  if (ExtendedType == nullptr) {
-    return;
-  }
+identifyExclusions(Decl *Declaration) {
+
+  if(auto ExtensionDeclaration = dyn_cast<ExtensionDecl>(Declaration)) {
+    
+    std::vector<SymbolWithRange> Results;
+    auto *ExtendedType = ExtensionDeclaration->getExtendedType()->getAnyNominal();
+    auto ExtensionModuleName = moduleName(ExtensionDeclaration);
+    if (ExtendedType == nullptr) {
+      return;
+    }
 
-  auto ExtendedTypeModuleName = moduleName(ExtendedType);
-  if (ExtensionModuleName == ExtendedTypeModuleName) {
-    return;
-  }
+    auto ExtendedTypeModuleName = moduleName(ExtendedType);
+    if (ExtensionModuleName == ExtendedTypeModuleName) {
+      return;
+    }
 
-  if (!Declaration->getMembers().empty()) {
-    return;
-  }
+    if (!ExtensionDeclaration->getMembers().empty()) {
+      return;
+    }
 
-  auto InheritedArray = Declaration->getInherited();
+    auto InheritedArray = ExtensionDeclaration->getInherited();
 
-  for (auto Inherited : InheritedArray) {
+    for (auto Inherited : InheritedArray) {
 
-    auto *Nominal = Inherited.getType()->getAnyNominal();
-    if (auto *ProtocolDeclaration = dyn_cast_or_null<ProtocolDecl>(Nominal)) {
-      for (auto *Member : ProtocolDeclaration->getMembers()) {
-        Member->getSourceRange();
-        for (auto *Declaration : ExtendedType->getMembers()) {
+      auto *Nominal = Inherited.getType()->getAnyNominal();
+      if (auto *ProtocolDeclaration = dyn_cast_or_null<ProtocolDecl>(Nominal)) {
+        for (auto *Member : ProtocolDeclaration->getMembers()) {
+          Member->getSourceRange();
+          for (auto *Declaration : ExtendedType->getMembers()) {
 
-          if (auto *ExtFunction = dyn_cast<AbstractFunctionDecl>(Declaration)) {
-            if (auto *ProtocolFunction =
-                  dyn_cast<AbstractFunctionDecl>(Member)) {
+            if (auto *ExtFunction = dyn_cast<AbstractFunctionDecl>(Declaration)) {
+              if (auto *ProtocolFunction =
+                    dyn_cast<AbstractFunctionDecl>(Member)) {
 
-              auto ExtFunctionSignature = functionSignature(ExtFunction);
-              auto ProtocolFunctionSignature =
-                functionSignature(ProtocolFunction);
-              auto ExtFunctionName = ExtFunction->getName().str().str();
-              auto ProtocolFunctionName =
-                ProtocolFunction->getName().str().str();
+                auto ExtFunctionSignature = functionSignature(ExtFunction);
+                auto ProtocolFunctionSignature =
+                  functionSignature(ProtocolFunction);
+                auto ExtFunctionName = ExtFunction->getName().str().str();
+                auto ProtocolFunctionName =
+                  ProtocolFunction->getName().str().str();
 
-              if (ExtFunctionSignature == ProtocolFunctionSignature
-                  && ExtFunctionName == ProtocolFunctionName) {
-                DeclarationsToExclude.insert(Member);
+                if (ExtFunctionSignature == ProtocolFunctionSignature
+                    && ExtFunctionName == ProtocolFunctionName) {
+                  DeclarationsToExclude.insert(Member);
+                }
               }
             }
-          }
-
-          if (auto *ExtFunction = dyn_cast<AbstractStorageDecl>(Declaration)) {
-            if (auto *ProtocolFunction =
-                  dyn_cast<AbstractStorageDecl>(Member)) {
-
-              auto ExtFunctionSignature =
-                ExtFunction->getInterfaceType().getString();
-              auto ProtocolFunctionSignature =
-                ProtocolFunction->getInterfaceType().getString();
-              auto ExtFunctionName = ExtFunction->getName().str().str();
-              auto ProtocolFunctionName =
-                ProtocolFunction->getName().str().str();
 
-              if (ExtFunctionSignature == ProtocolFunctionSignature
-                  && ExtFunctionName == ProtocolFunctionName) {
-                DeclarationsToExclude.insert(Member);
+            if (auto *ExtFunction = dyn_cast<AbstractStorageDecl>(Declaration)) {
+              if (auto *ProtocolFunction =
+                    dyn_cast<AbstractStorageDecl>(Member)) {
+
+                auto ExtFunctionSignature =
+                  ExtFunction->getInterfaceType().getString();
+                auto ProtocolFunctionSignature =
+                  ProtocolFunction->getInterfaceType().getString();
+                auto ExtFunctionName = ExtFunction->getName().str().str();
+                auto ProtocolFunctionName =
+                  ProtocolFunction->getName().str().str();
+
+                if (ExtFunctionSignature == ProtocolFunctionSignature
+                    && ExtFunctionName == ProtocolFunctionName) {
+                  DeclarationsToExclude.insert(Member);
+                }
               }
             }
           }
@@ -79,38 +82,5 @@ ExtensionExcluder::
   }
 }
 
-std::vector<IndexedSymbolWithRange>
-ExtensionExcluder::
-  excludeSymbolsFrom(GlobalCollectedSymbols &CollectedSymbols) {
-
-  std::vector<IndexedSymbolWithRange> SymbolsToRemove;
-
-  for (auto *Declaration : DeclarationsToExclude) {
-
-    auto Range = CharSourceRange();
-    auto SymbolsOrError = extractSymbol(CollectedSymbols, Declaration, Range);
-    if (auto Error = SymbolsOrError.takeError()) {
-      llvm::consumeError(std::move(Error));
-    } else {
-      auto Symbols = SymbolsOrError.get();
-      for (auto CollectedSymbol : CollectedSymbols) {
-        for (auto Symbol : Symbols) {
-          if(CollectedSymbol.SymbolWithRange.Symbol.Identifier
-             == Symbol.Symbol.Identifier) {
-            SymbolsToRemove.push_back(CollectedSymbol);
-          }
-        }
-      }
-    }
-
-  }
-
-  for (auto IndexedSymbolWithRange : SymbolsToRemove) {
-    CollectedSymbols.erase(IndexedSymbolWithRange);
-  }
-
-  return SymbolsToRemove;
-}
-
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/lib/Obfuscation/NSManagedExcluder.cpp b/swift/lib/Obfuscation/NSManagedExcluder.cpp
new file mode 100644
index 00000000000..37f790e2a90
--- /dev/null
+++ b/swift/lib/Obfuscation/NSManagedExcluder.cpp
@@ -0,0 +1,38 @@
+#include "swift/Obfuscation/NSManagedExcluder.h"
+#include "swift/Obfuscation/DeclarationParsingUtils.h"
+#include "swift/Obfuscation/Utils.h"
+#include "swift/Obfuscation/VariableDeclarationParser.h"
+#include "swift/Obfuscation/DeclarationParser.h"
+
+namespace swift {
+namespace obfuscation {
+    
+void NSManagedExcluder::
+identifyExclusions(Decl *Declaration) {
+  
+  if(auto NominalDeclaration = dyn_cast<NominalTypeDecl>(Declaration)) {
+    
+    auto ClassOrExtensionCtx
+                      = NominalDeclaration->getAsClassOrClassExtensionContext();
+    
+    if(ClassOrExtensionCtx != nullptr) {
+    
+      auto SuperClass = NominalDeclaration->getAsClassOrClassExtensionContext()->getSuperclassDecl();
+      if(SuperClass != nullptr) {
+        
+        if(SuperClass->getName().str() == "NSManagedObject") {
+          DeclarationsToExclude.insert(NominalDeclaration);
+        }
+      }
+    }
+    
+  } else if (auto *VariableDeclaration = dyn_cast<VarDecl>(Declaration)) {
+    
+    if(VariableDeclaration->getAttrs().hasAttribute<NSManagedAttr>()) {
+      DeclarationsToExclude.insert(VariableDeclaration);
+    }
+  }
+}
+  
+} //namespace obfuscation
+} //namespace swift
diff --git a/swift/lib/Obfuscation/Renaming.cpp b/swift/lib/Obfuscation/Renaming.cpp
index 569f494e21e..cdd033b98e4 100644
--- a/swift/lib/Obfuscation/Renaming.cpp
+++ b/swift/lib/Obfuscation/Renaming.cpp
@@ -126,9 +126,9 @@ llvm::Expected<bool> performActualRenaming(SourceFile &Current,
                                            StringRef Path,
                                            std::vector<SymbolRenaming>
                                                           &RenamedSymbols,
-                                           ExtensionExcluder &Excluder) {
+                                           std::set<Excluder*> &Excluders) {
   bool performedRenaming = false;
-  auto IndexedSymbolsWithRanges = walkAndCollectSymbols(Current, Excluder);
+  auto IndexedSymbolsWithRanges = walkAndCollectSymbols(Current, Excluders);
   
   using EditConsumer = swift::ide::SourceEditOutputConsumer;
   
@@ -190,7 +190,10 @@ performRenaming(std::string MainExecutablePath,
   FilesList Files;
   std::vector<SymbolRenaming> RenamedSymbols;
 
-  ExtensionExcluder Excluder;
+  ExtensionExcluder ExtensionExcluder;
+  NSManagedExcluder NSManagedExcluder;
+  
+  std::set<Excluder*> Excluders = { &ExtensionExcluder, &NSManagedExcluder };
   
   for (auto* Unit : CI.getMainModule()->getFiles()) {
     if (auto* Current = dyn_cast<SourceFile>(Unit)) {
@@ -213,7 +216,7 @@ performRenaming(std::string MainExecutablePath,
                                 BufferId,
                                 Path,
                                 RenamedSymbols,
-                                Excluder)) {
+                                Excluders)) {
         auto Filename = llvm::sys::path::filename(Path).str();
         Files.push_back(std::pair<std::string, std::string>(Filename, Path));
       }
diff --git a/swift/lib/Obfuscation/SourceFileWalker.cpp b/swift/lib/Obfuscation/SourceFileWalker.cpp
index a18e009ef0b..ae5f84d4803 100644
--- a/swift/lib/Obfuscation/SourceFileWalker.cpp
+++ b/swift/lib/Obfuscation/SourceFileWalker.cpp
@@ -21,9 +21,10 @@ struct SymbolsWalkerAndCollector: public SourceEntityWalker {
   // thet are compared by symbol and range
   GlobalCollectedSymbols Symbols;
 
-  ExtensionExcluder &Excluder;
-
-  SymbolsWalkerAndCollector(ExtensionExcluder &Excluder): Excluder(Excluder) {}
+  std::set<Excluder*> &Excluders;
+  
+  SymbolsWalkerAndCollector(std::set<Excluder*> &Excluders)
+                                                      : Excluders(Excluders) {}
 
 // Overriden methods called back as the AST is walked
 
@@ -36,6 +37,7 @@ struct SymbolsWalkerAndCollector: public SourceEntityWalker {
   bool walkToDeclPre(Decl *Declaration, CharSourceRange Range) override {
     auto ExtractedSymbols = extractSymbol(Symbols, Declaration, Range);
     handleExtractionResult(ExtractedSymbols);
+    identifyExclusions(Declaration);
     return true;
   }
 
@@ -64,15 +66,23 @@ struct SymbolsWalkerAndCollector: public SourceEntityWalker {
                                           Range);
     handleExtractionResult(ExtractedSymbols);
 
-
-    if (ExtTyRef != nullptr) {
-      Excluder.identifyExclusionsFromExtension(ExtTyRef);
-    }
+    identifyExclusions(ExtTyRef);
+    identifyExclusions(Declaration);
+    identifyExclusions(CtorTyRef);
+    
     return true;
   }
 
 // Methods for handling the extracted symbols
 
+  void identifyExclusions(Decl* Declaration) {
+    if(Declaration != nullptr) {
+      for(auto Excluder: Excluders) {
+        Excluder->identifyExclusions(Declaration);
+      }
+    }
+  }
+  
   void handleSymbol(const SymbolWithRange &Symbol) {
     auto InsertionResult =
       Symbols.insert(IndexedSymbolWithRange(SymbolIndex, Symbol));
@@ -106,10 +116,12 @@ struct SymbolsWalkerAndCollector: public SourceEntityWalker {
 int SymbolsWalkerAndCollector::SymbolIndex;
 
 std::set<IndexedSymbolWithRange, IndexedSymbolWithRange::SymbolWithRangeCompare>
-walkAndCollectSymbols(SourceFile &SourceFile, ExtensionExcluder &Excluder) {
-  SymbolsWalkerAndCollector Walker(Excluder);
+walkAndCollectSymbols(SourceFile &SourceFile, std::set<Excluder*> &Excluders) {
+  SymbolsWalkerAndCollector Walker(Excluders);
   Walker.walk(SourceFile);
-  Excluder.excludeSymbolsFrom(Walker.Symbols);
+  for(auto Excluder: Excluders) {
+    Excluder->excludeSymbolsFrom(Walker.Symbols);
+  }
   return Walker.Symbols;
 }
 
diff --git a/swift/lib/Obfuscation/SymbolExtracting.cpp b/swift/lib/Obfuscation/SymbolExtracting.cpp
index e52324d3657..2061aae1e45 100644
--- a/swift/lib/Obfuscation/SymbolExtracting.cpp
+++ b/swift/lib/Obfuscation/SymbolExtracting.cpp
@@ -54,11 +54,15 @@ extractSymbols(const FilesJson &FilesJson,
   std::set<IndexedSymbolWithRange,
            IndexedSymbolWithRange::SymbolCompare> Symbols;
 
-  ExtensionExcluder Excluder;
+  
+  ExtensionExcluder ExtensionExcluder;
+  NSManagedExcluder NSManagedExcluder;
+  
+  std::set<Excluder*> Excluders = { &ExtensionExcluder, &NSManagedExcluder };
 
   for (auto &Unit : Files) {
     // CurrentSymbols are sorted by the identifier and range
-    auto CurrentSymbols = walkAndCollectSymbols(*Unit.second, Excluder);
+    auto CurrentSymbols = walkAndCollectSymbols(*Unit.second, Excluders);
 
     std::vector<IndexedSymbolWithRange> SortedSymbols;
     copyToVector(CurrentSymbols, SortedSymbols);
diff --git a/swift/test/Obfuscation/FullProcess/ExcludeNSManaged/ExcludeNSManaged.swift b/swift/test/Obfuscation/FullProcess/ExcludeNSManaged/ExcludeNSManaged.swift
new file mode 100644
index 00000000000..487ab882edb
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/ExcludeNSManaged/ExcludeNSManaged.swift
@@ -0,0 +1,14 @@
+//RUN: %target-prepare-obfuscation-for-file "ExcludeNSManaged" %target-run-full-obfuscation
+import CoreData
+
+class Coffee: NSManagedObject {}
+
+extension Coffee {
+  @NSManaged var name: String?
+}
+
+@objc protocol SelectableSearchModelItem {
+  var name: String? { get set }
+}
+
+extension Coffee: SelectableSearchModelItem {}
diff --git a/swift/test/Obfuscation/FullProcess/ExcludeNSManaged/Expected/ExcludeNSManaged.swift b/swift/test/Obfuscation/FullProcess/ExcludeNSManaged/Expected/ExcludeNSManaged.swift
new file mode 100644
index 00000000000..ed130e6582f
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/ExcludeNSManaged/Expected/ExcludeNSManaged.swift
@@ -0,0 +1,13 @@
+import CoreData
+
+class Coffee: NSManagedObject {}
+
+extension Coffee {
+  @NSManaged var name: String?
+}
+
+@objc protocol T1_SelectableSearchModelItem {
+  var name: String? { get set }
+}
+
+extension Coffee: T1_SelectableSearchModelItem {}
-- 
2.17.1 (Apple Git-112)


From dcc664d1cb180cd9aedbf0fdc5bdfe27ca655bd8 Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Fri, 16 Mar 2018 12:37:36 +0100
Subject: [PATCH 119/138] Fixed identifying base protocol optional function for
 function implemented in extension

Reviewers: michal.zielinski, krzysztof.siejkowski

Reviewed By: michal.zielinski, krzysztof.siejkowski

Subscribers: michal.zielinski, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2880
---
 .../Obfuscation/FunctionDeclarationParser.cpp | 212 +++++++++++-------
 .../Functions/Expected/Functions.swift        |  19 ++
 .../FullProcess/Functions/Functions.swift     |  19 ++
 3 files changed, 174 insertions(+), 76 deletions(-)

diff --git a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
index 6c0f26e9501..0a79e20d1d7 100644
--- a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
+++ b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
@@ -2,6 +2,7 @@
 #include "swift/Obfuscation/ParameterDeclarationParser.h"
 #include "swift/Obfuscation/Utils.h"
 #include "swift/Obfuscation/DeclarationParsingUtils.h"
+#include "swift/AST/ProtocolConformance.h"
 
 #include <string>
 #include <sstream>
@@ -105,6 +106,52 @@ std::string functionSignature(const AbstractFunctionDecl *Declaration) {
   auto Interface = extractSignature(Declaration, Fallback);
   return "signature." + Interface;
 }
+  
+// This function handles the specific case where protocol optional function
+// is declared in extension of the class conforming to the protocol
+// (the function is not implemented in class, only in extension).
+// Both class and protocol are in different module than extension. In this case
+// `ValueDecl::getSatisfiedProtocolRequirements()` does not return the correct
+// protocol requirements so we need to extract them from the extended class.
+std::vector<ValueDecl*>
+satisfiedProtocolOptionalRequirements(const AbstractFunctionDecl* Declaration) {
+  auto Result = std::vector<ValueDecl*>();
+  
+  auto TypeContext = Declaration->getInnermostTypeContext();
+  if (TypeContext != nullptr && TypeContext->getContextKind() == DeclContextKind::ExtensionDecl) {
+    auto *BaseClass = TypeContext->getAsNominalTypeOrNominalTypeExtensionContext();
+    
+    for (auto Conf : BaseClass->getAllConformances()) {
+      
+      if (Conf->getKind() == ProtocolConformanceKind::Normal) {
+        auto NormalConf = cast<NormalProtocolConformance>(Conf);
+        NormalConf->forEachValueWitness(nullptr, [&Declaration, &Result](ValueDecl *Req,
+                                                                         Witness Witness) {
+          if (auto * FuncReq = dyn_cast<AbstractFunctionDecl>(Req)) {
+            if (Declaration->getEffectiveFullName() == FuncReq->getEffectiveFullName()) {
+              Result.push_back(FuncReq);
+            }
+          }
+          
+        });
+      }
+    }
+  }
+  return Result;
+}
+  
+std::vector<ValueDecl*>
+satisfiedProtocolRequirements(const AbstractFunctionDecl* Declaration) {
+  
+  std::vector<ValueDecl*> Requirements;
+  
+  Requirements = Declaration->getSatisfiedProtocolRequirements();
+  
+  auto OptionalRequirements = satisfiedProtocolOptionalRequirements(Declaration);
+  copyToVector(OptionalRequirements, Requirements);
+
+  return Requirements;
+}
 
 ModuleNameAndParts
 functionIdentifierParts(const AbstractFunctionDecl *Declaration) {
@@ -121,7 +168,7 @@ functionIdentifierParts(const AbstractFunctionDecl *Declaration) {
 
   // Check if function satisfies the protocol implemented by its
   // containing class
-  auto ProtocolRequirements = Declaration->getSatisfiedProtocolRequirements();
+  auto ProtocolRequirements = satisfiedProtocolRequirements(Declaration);
   auto SatisfiesProtocol = !ProtocolRequirements.empty();
 
   if (!(SatisfiesProtocol || IsPartOfProtocol)) {
@@ -186,7 +233,7 @@ functionIdentifierParts(const AbstractFunctionDecl *Declaration) {
       Parts.push_back(functionSignature(Declaration));
     }
   }
-  
+
   return std::make_pair(ModuleName, Parts);
 }
 
@@ -225,96 +272,109 @@ parseOverridenDeclaration(GlobalCollectedSymbols &CollectedSymbols,
                        "might be safely obfuscated");
   }
 }
+
+llvm::Error handleRequirement(const ValueDecl* Requirement,
+                              GlobalCollectedSymbols &CollectedSymbols,
+                              SymbolWithRange FunctionNameSymbol,
+                              const FuncDecl* Declaration) {
   
+  if(auto *ProtocolFun = dyn_cast<FuncDecl>(Requirement)) {
+    auto ModuleAndParts = functionIdentifierParts(ProtocolFun);
+    auto Parts = ModuleAndParts.second;
+    auto ProtocolFunId = combineIdentifier(Parts);
+    
+    // Create the symbols for protocol function parameters
+    auto ProtocolParametersSymbolsOrError
+      = parseSeparateFunctionDeclarationForParameters(ProtocolFun);
+    if (auto Error = ProtocolParametersSymbolsOrError.takeError()) {
+      return Error;
+    }
+    auto ProtocolFunParametersSymbols
+    = ProtocolParametersSymbolsOrError.get();
+    
+    // Create the symbols for overridden function parameters
+    auto OverriddenParametersSymbolsOrError =
+    parseSeparateFunctionDeclarationForParameters(Declaration);
+    if (auto Error = OverriddenParametersSymbolsOrError.takeError()) {
+      return Error;
+    }
+    auto OverriddenFunParametersSymbols
+    = OverriddenParametersSymbolsOrError.get();
+    
+    // Parameter count for both protocol method and overridden method
+    // must be the same, otherwise we don't know what to do with them.
+    if(OverriddenFunParametersSymbols.size()
+       != ProtocolFunParametersSymbols.size()) {
+      return stringError("Couldn't parse overriden function protocol "
+                         "parameters.");
+    }
+    
+    // rename protocol method symbol id
+    
+    // find protocol function identifier in a set of all collected symbols
+    // and replace it with function identifier of overridden symbol
+    for (auto CollectedSymbol: CollectedSymbols) {
+      if(CollectedSymbol.SymbolWithRange.Symbol.Identifier
+         == ProtocolFunId) {
+        
+        CollectedSymbols.erase(CollectedSymbol);
+        CollectedSymbol.SymbolWithRange.Symbol.Identifier
+        = FunctionNameSymbol.Symbol.Identifier;
+        CollectedSymbols.insert(CollectedSymbol);
+        
+        return llvm::Error::success();
+      }
+    }
+    
+    // rename protocol method parameters symbol ids
+    for(size_t i = 0; i<ProtocolFunParametersSymbols.size(); i++) {
+      auto ProtocolFunParameter = ProtocolFunParametersSymbols[i];
+      auto OverridenFunParameter = OverriddenFunParametersSymbols[i];
+      
+      // find protocol parameter identifier in a set of all collected symbols
+      // and replace it with parameter identifier of overridden symbol
+      for(auto CollectedSymbol: CollectedSymbols) {
+        if(CollectedSymbol.SymbolWithRange.Symbol.Identifier
+           == ProtocolFunParameter.Symbol.Identifier) {
+          
+          CollectedSymbols.erase(CollectedSymbol);
+          CollectedSymbol.SymbolWithRange.Symbol.Identifier
+          = OverridenFunParameter.Symbol.Identifier;
+          CollectedSymbols.insert(CollectedSymbol);
+          
+          return llvm::Error::success();
+        }
+      }
+    }
+  }
+  return llvm::Error::success();
+}
+
 llvm::Expected<bool>
 handleSatisfiedProtocolRequirements(GlobalCollectedSymbols &CollectedSymbols,
                                     SymbolWithRange FunctionNameSymbol,
                                     const FuncDecl* Declaration) {
   
   //check if this overridden method is also satisfying some protocol
-  auto SatisfiesProtocol
-                  = Declaration->getSatisfiedProtocolRequirements().size() > 0;
+  auto ProtocolRequirements = satisfiedProtocolRequirements(Declaration);
+  auto SatisfiesProtocol = !ProtocolRequirements.empty();
   
   // we assume that there is always only one overriden symbol
   if(SatisfiesProtocol) {
     
-    for(auto Requirement: Declaration->getSatisfiedProtocolRequirements() ) {
-      
-      if(auto *ProtocolFun = dyn_cast<FuncDecl>(Requirement)) {
-        auto ModuleAndParts = functionIdentifierParts(ProtocolFun);
-        auto Parts = ModuleAndParts.second;
-        auto ProtocolFunId = combineIdentifier(Parts);
-        
-        // Create the symbols for protocol function parameters
-        auto ProtocolParametersSymbolsOrError
-                  = parseSeparateFunctionDeclarationForParameters(ProtocolFun);
-        if (auto Error = ProtocolParametersSymbolsOrError.takeError()) {
-          return std::move(Error);
-        }
-        auto ProtocolFunParametersSymbols
-                                      = ProtocolParametersSymbolsOrError.get();
-        
-        // Create the symbols for overridden function parameters
-        auto OverriddenParametersSymbolsOrError =
-                           parseSeparateFunctionDeclarationForParameters(Declaration);
-        if (auto Error = OverriddenParametersSymbolsOrError.takeError()) {
-          return std::move(Error);
-        }
-        auto OverriddenFunParametersSymbols
-                                    = OverriddenParametersSymbolsOrError.get();
-        
-        // Parameter count for both protocol method and overridden method
-        // must be the same, otherwise we don't know what to do with them.
-        if(OverriddenFunParametersSymbols.size()
-                                      != ProtocolFunParametersSymbols.size()) {
-          return stringError("Couldn't parse overriden function protocol "
-                             "parameters.");
-        }
-        
-        // rename protocol method symbol id
-        
-        // find protocol function identifier in a set of all collected symbols
-        // and replace it with function identifier of overridden symbol
-        for (auto CollectedSymbol: CollectedSymbols) {
-          if(CollectedSymbol.SymbolWithRange.Symbol.Identifier
-                                                          == ProtocolFunId) {
-            
-            CollectedSymbols.erase(CollectedSymbol);
-            CollectedSymbol.SymbolWithRange.Symbol.Identifier
-                                        = FunctionNameSymbol.Symbol.Identifier;
-            CollectedSymbols.insert(CollectedSymbol);
-            
-            break;
-          }
-        }
-        
-        // rename protocol method parameters symbol ids
-        for(size_t i = 0; i<ProtocolFunParametersSymbols.size(); i++) {
-          auto ProtocolFunParameter = ProtocolFunParametersSymbols[i];
-          auto OverridenFunParameter = OverriddenFunParametersSymbols[i];
-          
-          // find protocol parameter identifier in a set of all collected symbols
-          // and replace it with parameter identifier of overridden symbol
-          for(auto CollectedSymbol: CollectedSymbols) {
-            if(CollectedSymbol.SymbolWithRange.Symbol.Identifier
-                                  == ProtocolFunParameter.Symbol.Identifier) {
-
-              CollectedSymbols.erase(CollectedSymbol);
-              CollectedSymbol.SymbolWithRange.Symbol.Identifier
-                                    = OverridenFunParameter.Symbol.Identifier;
-              CollectedSymbols.insert(CollectedSymbol);
-              
-              break;
-            }
-          }
-        }
-        
+    for(auto Requirement : ProtocolRequirements) {
+      if (auto Error = handleRequirement(Requirement,
+                                         CollectedSymbols,
+                                         FunctionNameSymbol,
+                                         Declaration)) {
+        return std::move(Error);
       }
     }
   }
+  
   return true;
 }
-
+  
 SymbolsOrError parse(const ConstructorDecl* Declaration,
                      CharSourceRange Range) {
   // We're not interested in renaming the init function name,
diff --git a/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift b/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift
index fe965160380..0db6b6bf8de 100644
--- a/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift
+++ b/swift/test/Obfuscation/FullProcess/Functions/Expected/Functions.swift
@@ -284,3 +284,22 @@ struct T1_ItemInserter: T1_ItemInserterType {
     return ""
   }
 }
+
+// protocol optional func implemented in class extension
+// TODO: check the case where Protocol and Conforming are in different module than extension
+
+@objc protocol T1_Protocol {
+  @objc optional func NF1_instFunc()
+  @objc optional static func NF1_classFunc()
+  @objc optional func NF2_instFunc(SP1_param: Int)
+  @objc optional static func NF2_classFunc(SP2_param: Int)
+}
+
+class T1_Conforming: T1_Protocol { }
+
+extension T1_Conforming {
+  func NF1_instFunc() { }
+  static func NF1_classFunc() { }
+  optional func NF2_instFunc(SP1_param: Int) { }
+  optional static func NF2_classFunc(SP2_param: Int) { }
+}
\ No newline at end of file
diff --git a/swift/test/Obfuscation/FullProcess/Functions/Functions.swift b/swift/test/Obfuscation/FullProcess/Functions/Functions.swift
index b24c8fc43e3..ea591a3357d 100644
--- a/swift/test/Obfuscation/FullProcess/Functions/Functions.swift
+++ b/swift/test/Obfuscation/FullProcess/Functions/Functions.swift
@@ -286,3 +286,22 @@ struct ItemInserter: ItemInserterType {
     return ""
   }
 }
+
+// protocol optional func implemented in class extension
+// TODO: check the case where Protocol and Conforming are in different module than extension
+
+@objc protocol Protocol {
+  @objc optional func instFunc()
+  @objc optional static func classFunc()
+  @objc optional func instFunc(param: Int)
+  @objc optional static func classFunc(param: Int)
+}
+
+class Conforming: Protocol { }
+
+extension Conforming {
+  func instFunc() { }
+  static func classFunc() { }
+  optional func instFunc(param: Int) { }
+  optional static func classFunc(param: Int) { }
+}
\ No newline at end of file
-- 
2.17.1 (Apple Git-112)


From b43bce7b8651360a0ce4a78ac3e42bd9189039cd Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Fri, 16 Mar 2018 16:25:36 +0100
Subject: [PATCH 120/138] Fixes wrong renaming in for each in Dropnote

Reviewers: michal.zielinski, jerzy.kleszcz

Reviewed By: jerzy.kleszcz

Subscribers: jerzy.kleszcz, michal.zielinski

Differential Revision: https://phabricator.polidea.com/D2881
---
 swift/lib/Obfuscation/CompilerInfrastructure.cpp | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

diff --git a/swift/lib/Obfuscation/CompilerInfrastructure.cpp b/swift/lib/Obfuscation/CompilerInfrastructure.cpp
index 5e83d7e0ea7..9da8afe1496 100644
--- a/swift/lib/Obfuscation/CompilerInfrastructure.cpp
+++ b/swift/lib/Obfuscation/CompilerInfrastructure.cpp
@@ -30,8 +30,10 @@ struct CompilerInvocationConfiguration {
   HeaderPaths(FilesJson.HeaderSearchPaths),
   BridgingHeader(FilesJson.BridgingHeader) {
     for (const auto &Framework : FilesJson.ExplicitlyLinkedFrameworks) {
-      SearchPathOptions::FrameworkSearchPath Path(Framework.Path, false);
-      Paths.push_back(Path);
+      if (Framework.Path.find(SdkPath) == std::string::npos) {
+        SearchPathOptions::FrameworkSearchPath Path(Framework.Path, false);
+        Paths.push_back(Path);
+      }
     }
     for (const auto &FrameworkPath : FilesJson.FrameworkSearchPaths) {
       SearchPathOptions::FrameworkSearchPath Path(FrameworkPath, false);
@@ -55,6 +57,9 @@ createInvocation(const CompilerInvocationConfiguration &Configuration) {
   Invocation.setExtraClangArgs(ExtraArgs);
   Invocation.getFrontendOptions().ImplicitObjCHeaderPath =
     Configuration.BridgingHeader;
+  Invocation.getClangImporterOptions().BridgingHeader =
+    Configuration.BridgingHeader;
+  Invocation.getLangOptions().EnableObjCInterop = true;
   Invocation.getLangOptions().AttachCommentsToDecls = true;
   Invocation.setFrameworkSearchPaths(Configuration.Paths);
   Invocation.setSDKPath(Configuration.SdkPath);
-- 
2.17.1 (Apple Git-112)


From 7580dbe34a20b7bba8d57cf91429bda95af34824 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Wed, 21 Mar 2018 12:02:03 +0100
Subject: [PATCH 121/138] Added configuration file parsing

Reviewers: jerzy.kleszcz, michal.zielinski

Reviewed By: jerzy.kleszcz, michal.zielinski

Subscribers: jerzy.kleszcz, michal.zielinski

Differential Revision: https://phabricator.polidea.com/D2885
---
 .../swift/Obfuscation/ConfigurationExcluder.h | 27 ++++++
 .../swift/Obfuscation/DataStructures.h        | 90 +++++++++++++++++++
 swift/include/swift/Obfuscation/Renaming.h    | 12 +--
 swift/lib/Obfuscation/CMakeLists.txt          |  1 +
 .../lib/Obfuscation/ConfigurationExcluder.cpp | 38 ++++++++
 swift/lib/Obfuscation/DataStructures.cpp      | 88 +++++++++++++++++-
 swift/lib/Obfuscation/FileIO.cpp              |  5 ++
 swift/lib/Obfuscation/Renaming.cpp            |  3 +
 .../SymbolExtractor/SymbolExtractor.swift     |  2 +-
 swift/test/lit.cfg                            |  6 +-
 .../obfuscator-renamer/obfuscator-renamer.cpp | 17 ++++
 11 files changed, 277 insertions(+), 12 deletions(-)
 create mode 100644 swift/include/swift/Obfuscation/ConfigurationExcluder.h
 create mode 100644 swift/lib/Obfuscation/ConfigurationExcluder.cpp

diff --git a/swift/include/swift/Obfuscation/ConfigurationExcluder.h b/swift/include/swift/Obfuscation/ConfigurationExcluder.h
new file mode 100644
index 00000000000..92b902b1c06
--- /dev/null
+++ b/swift/include/swift/Obfuscation/ConfigurationExcluder.h
@@ -0,0 +1,27 @@
+#ifndef ConfigurationExcluder_h
+#define ConfigurationExcluder_h
+
+#include "swift/Obfuscation/DataStructures.h"
+#include "swift/Obfuscation/Excluder.h"
+
+namespace swift {
+namespace obfuscation {
+
+class ConfigurationExcluder: public Excluder {
+
+private:
+
+  ObfuscationConfiguration Configuration;
+
+public:
+
+  ConfigurationExcluder(ObfuscationConfiguration&&);
+
+  void identifyExclusions(Decl *Declaration);
+};
+
+
+} // namespace obfuscation
+} // namespace swift
+
+#endif /* ConfigurationExcluder_h */
diff --git a/swift/include/swift/Obfuscation/DataStructures.h b/swift/include/swift/Obfuscation/DataStructures.h
index 8cc3a658d56..17d0f7db1b0 100644
--- a/swift/include/swift/Obfuscation/DataStructures.h
+++ b/swift/include/swift/Obfuscation/DataStructures.h
@@ -43,6 +43,7 @@ struct FilesJson {
   std::vector<std::string> FrameworkSearchPaths;
   std::vector<std::string> HeaderSearchPaths;
   std::string BridgingHeader;
+  std::string ConfigurationFile;
 };
 
 enum class SymbolType: int {
@@ -107,6 +108,65 @@ struct SymbolRenaming {
 struct RenamesJson {
   std::vector<SymbolRenaming> Symbols;
 };
+
+enum class ExclusionKind: int {
+  UnknownKind,
+
+  Type,
+
+  Inheritance,
+
+  Conformance
+};
+
+struct TypeExclusion;
+struct InheritanceExclusion;
+struct ConformanceExclusion;
+
+struct Exclusion {
+
+  std::string Module;
+
+  ExclusionKind Kind;
+
+  const TypeExclusion* getAsTypeExclusion() const;
+  const InheritanceExclusion* getAsInheritanceExclusion() const;
+  const ConformanceExclusion* getAsConformanceExclusion() const;
+};
+
+struct TypeExclusion: public Exclusion {
+  std::string Name;
+
+  TypeExclusion() = default;
+  TypeExclusion(const TypeExclusion&) = default;
+  TypeExclusion(TypeExclusion&&) = default;
+};
+
+struct InheritanceExclusion: public Exclusion {
+  std::string Base;
+
+  InheritanceExclusion() = default;
+  InheritanceExclusion(const InheritanceExclusion&) = default;
+  InheritanceExclusion(InheritanceExclusion&&) = default;
+};
+
+struct ConformanceExclusion: public Exclusion {
+  std::string Protocol;
+
+  ConformanceExclusion() = default;
+  ConformanceExclusion(const ConformanceExclusion&) = default;
+  ConformanceExclusion(ConformanceExclusion&&) = default;
+};
+
+struct ObfuscationConfiguration {
+  std::vector<std::unique_ptr<Exclusion>> Exclude;
+
+  ObfuscationConfiguration() = default;
+  ObfuscationConfiguration(const ObfuscationConfiguration&) = delete;
+  ObfuscationConfiguration(ObfuscationConfiguration&&) = default;
+  ObfuscationConfiguration& operator=(const ObfuscationConfiguration &) = delete;
+  ObfuscationConfiguration& operator=(ObfuscationConfiguration &&) = default;
+};
   
 /// SymbolWithRange - struct for linking the symbol identified in the Swift
 /// source code with the range in which it was encountered.
@@ -214,6 +274,36 @@ struct MappingTraits<SymbolRenaming> {
   static void mapping(IO &Io, SymbolRenaming &Object);
 };
 
+template <>
+struct MappingTraits<ObfuscationConfiguration> {
+  static void mapping(IO &Io, ObfuscationConfiguration &Object);
+};
+
+template <>
+struct ScalarEnumerationTraits<ExclusionKind> {
+  static void enumeration(IO &Io, ExclusionKind &Enum);
+};
+
+template <>
+struct MappingTraits<std::unique_ptr<Exclusion>> {
+  static void mapping(IO &Io, std::unique_ptr<Exclusion> &Object);
+};
+
+template <>
+struct MappingTraits<TypeExclusion> {
+  static void mapping(IO &Io, TypeExclusion &Object);
+};
+
+template <>
+struct MappingTraits<InheritanceExclusion> {
+  static void mapping(IO &Io, InheritanceExclusion &Object);
+};
+
+template <>
+struct MappingTraits<ConformanceExclusion> {
+  static void mapping(IO &Io, ConformanceExclusion &Object);
+};
+
 template <typename U>
 struct SequenceTraits<std::vector<U>> {
   static size_t size(IO &Io, std::vector<U> &Vec);
diff --git a/swift/include/swift/Obfuscation/Renaming.h b/swift/include/swift/Obfuscation/Renaming.h
index 7711cc742d7..240e11412b0 100644
--- a/swift/include/swift/Obfuscation/Renaming.h
+++ b/swift/include/swift/Obfuscation/Renaming.h
@@ -52,11 +52,13 @@ using FilesList = std::vector<std::pair<std::string, std::string>>;
 /// \param DiagnosticStream Stream for writing the diagnostic information into.
 ///
 /// \returns List of project files that were affected by the renaming.
-llvm::Expected<FilesList> performRenaming(std::string MainExecutablePath,
-                                          const FilesJson &FilesJson,
-                                          const RenamesJson &RenamesJson,
-                                          std::string ObfuscatedProjectPath,
-                                          llvm::raw_ostream &DiagnosticStream);
+llvm::Expected<FilesList>
+performRenaming(std::string MainExecutablePath,
+                const FilesJson &FilesJson,
+                ObfuscationConfiguration &&ObfuscationConfiguration,
+                const RenamesJson &RenamesJson,
+                std::string ObfuscatedProjectPath,
+                llvm::raw_ostream &DiagnosticStream);
 
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/lib/Obfuscation/CMakeLists.txt b/swift/lib/Obfuscation/CMakeLists.txt
index 78c77690de9..f22b7fad103 100644
--- a/swift/lib/Obfuscation/CMakeLists.txt
+++ b/swift/lib/Obfuscation/CMakeLists.txt
@@ -4,6 +4,7 @@ include_directories(SYSTEM ${LIBXML2_INCLUDE_DIR})
 
 add_swift_library(swiftObfuscation STATIC
   CompilerInfrastructure.cpp
+  ConfigurationExcluder.cpp
   DataStructures.cpp
   DeclarationParser.cpp
   OperatorParser.cpp
diff --git a/swift/lib/Obfuscation/ConfigurationExcluder.cpp b/swift/lib/Obfuscation/ConfigurationExcluder.cpp
new file mode 100644
index 00000000000..f236665e096
--- /dev/null
+++ b/swift/lib/Obfuscation/ConfigurationExcluder.cpp
@@ -0,0 +1,38 @@
+#include "swift/Obfuscation/ConfigurationExcluder.h"
+
+namespace swift {
+namespace obfuscation {
+
+ConfigurationExcluder::
+  ConfigurationExcluder(ObfuscationConfiguration&& Configuration)
+: Configuration(std::move(Configuration)) {
+
+  // TODO: remove when there's logic added to identifyExclusions method
+  for (auto &Exclusion : this->Configuration.Exclude) {
+    switch (Exclusion->Kind) {
+      case ExclusionKind::Type: {
+        auto Type = Exclusion->getAsTypeExclusion();
+        llvm::outs() << Type->Name << '\n';
+        break;
+      }
+      case ExclusionKind::Inheritance: {
+        auto Type = Exclusion->getAsInheritanceExclusion();
+        llvm::outs() << Type->Base << '\n';
+        break;
+      }
+      case ExclusionKind::Conformance: {
+        auto Type = Exclusion->getAsConformanceExclusion();
+        llvm::outs() << Type->Protocol << '\n';
+        break;
+      }
+    }
+  }
+
+}
+
+void ConfigurationExcluder::identifyExclusions(Decl *Declaration) {
+
+}
+
+} // namespace obfuscation
+} // namespace swift
diff --git a/swift/lib/Obfuscation/DataStructures.cpp b/swift/lib/Obfuscation/DataStructures.cpp
index ea68c9ba8e7..714a6eaca9e 100644
--- a/swift/lib/Obfuscation/DataStructures.cpp
+++ b/swift/lib/Obfuscation/DataStructures.cpp
@@ -14,11 +14,29 @@ namespace SymbolTypeKeys {
   static const char* Operator = "operator";
 }
 
+namespace ExclusionKindKeys {
+  static std::string Type = "type";
+  static std::string Inheritance = "inheritance";
+  static std::string Conformance = "conformance";
+}
+
+const TypeExclusion* Exclusion::getAsTypeExclusion() const {
+  return reinterpret_cast<const TypeExclusion*>(this);
+}
+
+const InheritanceExclusion* Exclusion::getAsInheritanceExclusion() const {
+  return reinterpret_cast<const InheritanceExclusion*>(this);
+}
+
+const ConformanceExclusion* Exclusion::getAsConformanceExclusion() const {
+  return reinterpret_cast<const ConformanceExclusion*>(this);
+}
+
 Symbol::Symbol(const std::string &Identifier,
        const std::string &Name,
        const std::string &Module,
        SymbolType Type)
-: Identifier(Identifier), Name(Name), Module(Module), Type(Type) {};
+  : Identifier(Identifier), Name(Name), Module(Module), Type(Type) {}
 
 bool Symbol::operator< (const Symbol &Right) const {
   return Identifier < Right.Identifier;
@@ -124,6 +142,7 @@ void MappingTraits<FilesJson>::mapping(IO &Io, FilesJson &Object) {
                  Object.FrameworkSearchPaths);
   Io.mapRequired("headerSearchPaths",
                  Object.HeaderSearchPaths);
+  Io.mapRequired("configurationFile", Object.ConfigurationFile);
   Io.mapRequired("bridgingHeader",
                  Object.BridgingHeader);
 }
@@ -191,6 +210,68 @@ void MappingTraits<SymbolRenaming>::mapping(IO &Io, SymbolRenaming &Object) {
   Io.mapRequired("type", Object.Type);
 }
 
+void MappingTraits<ObfuscationConfiguration>::
+  mapping(IO &Io, ObfuscationConfiguration &Object) {
+  Io.mapRequired("exclude", Object.Exclude);
+}
+
+void ScalarEnumerationTraits<ExclusionKind>::enumeration(IO &Io,
+                                                         ExclusionKind &Enum) {
+  Io.enumCase(Enum, ExclusionKindKeys::Type.c_str(), ExclusionKind::Type);
+  Io.enumCase(Enum,
+              ExclusionKindKeys::Inheritance.c_str(),
+              ExclusionKind::Inheritance);
+  Io.enumCase(Enum,
+              ExclusionKindKeys::Conformance.c_str(),
+              ExclusionKind::Conformance);
+}
+
+void MappingTraits<std::unique_ptr<Exclusion>>::
+  mapping(IO &Io, std::unique_ptr<Exclusion> &Object) {
+  auto CurrentlyProcessedKey = Io.keys().back().str();
+
+  if (CurrentlyProcessedKey == ExclusionKindKeys::Type) {
+    auto Type = llvm::make_unique<TypeExclusion>();
+    Io.mapRequired(CurrentlyProcessedKey.c_str(), *Type);
+    Object = std::move(Type);
+    return;
+  }
+
+  if (CurrentlyProcessedKey == ExclusionKindKeys::Inheritance) {
+    auto Inheritance = llvm::make_unique<InheritanceExclusion>();
+    Io.mapRequired(CurrentlyProcessedKey.c_str(), *Inheritance);
+    Object = std::move(Inheritance);
+    return;
+  }
+
+  if (CurrentlyProcessedKey == ExclusionKindKeys::Conformance) {
+    auto Conformance = llvm::make_unique<ConformanceExclusion>();
+    Io.mapRequired(CurrentlyProcessedKey.c_str(), *Conformance);
+    Object = std::move(Conformance);
+    return;
+  }
+}
+
+void MappingTraits<TypeExclusion>::mapping(IO &Io, TypeExclusion &Object) {
+  Object.Kind = ExclusionKind::Type;
+  Io.mapRequired("module", Object.Module);
+  Io.mapRequired("name", Object.Name);
+}
+
+void MappingTraits<InheritanceExclusion>::
+  mapping(IO &Io, InheritanceExclusion &Object) {
+    Object.Kind = ExclusionKind::Inheritance;
+    Io.mapRequired("module", Object.Module);
+    Io.mapRequired("base", Object.Base);
+}
+
+void MappingTraits<ConformanceExclusion>::
+  mapping(IO &Io, ConformanceExclusion &Object) {
+    Object.Kind = ExclusionKind::Conformance;
+    Io.mapRequired("module", Object.Module);
+    Io.mapRequired("protocol", Object.Protocol);
+}
+
 template <typename U>
 size_t SequenceTraits<std::vector<U>>::size(IO &Io, std::vector<U> &Vec) {
   return Vec.size();
@@ -212,12 +293,13 @@ Expected<T> deserialize(StringRef Json) {
   T Deserialized;
   Input >> Deserialized;
   if (auto ErrorCode = Input.error()) {
-    return stringError("Error during JSON parse", ErrorCode);
+    return std::move(stringError("Error during JSON parse", ErrorCode));
   }
-  return Deserialized;
+  return std::move(Deserialized);
 }
   
 template Expected<FilesJson> deserialize(StringRef Json);
+template Expected<ObfuscationConfiguration> deserialize(StringRef Json);
 template Expected<Project> deserialize(StringRef Json);
 template Expected<ObfuscationModule> deserialize(StringRef Json);
 template Expected<Sdk> deserialize(StringRef Json);
diff --git a/swift/lib/Obfuscation/FileIO.cpp b/swift/lib/Obfuscation/FileIO.cpp
index dc16d7878bd..b40e0676e5f 100644
--- a/swift/lib/Obfuscation/FileIO.cpp
+++ b/swift/lib/Obfuscation/FileIO.cpp
@@ -31,6 +31,11 @@ llvm::Expected<FilesJson>
 parseJson(std::string,
           const MemoryBufferProvider &BufferProvider = MemoryBufferProvider());
 
+template
+llvm::Expected<ObfuscationConfiguration>
+parseJson(std::string,
+          const MemoryBufferProvider &BufferProvider = MemoryBufferProvider());
+
 template
 llvm::Expected<SymbolsJson>
 parseJson(std::string,
diff --git a/swift/lib/Obfuscation/Renaming.cpp b/swift/lib/Obfuscation/Renaming.cpp
index cdd033b98e4..020960ca3b7 100644
--- a/swift/lib/Obfuscation/Renaming.cpp
+++ b/swift/lib/Obfuscation/Renaming.cpp
@@ -1,5 +1,6 @@
 #include "swift/Obfuscation/Renaming.h"
 #include "swift/Obfuscation/CompilerInfrastructure.h"
+#include "swift/Obfuscation/ConfigurationExcluder.h"
 #include "swift/Obfuscation/SourceFileWalker.h"
 #include "swift/Obfuscation/Utils.h"
 #include "swift/Obfuscation/LayoutRenamer.h"
@@ -170,6 +171,7 @@ llvm::Expected<bool> performActualRenaming(SourceFile &Current,
 llvm::Expected<FilesList>
 performRenaming(std::string MainExecutablePath,
                 const FilesJson &FilesJson,
+                ObfuscationConfiguration &&ObfuscationConfiguration,
                 const RenamesJson &RenamesJson,
                 std::string ObfuscatedProjectPath,
                 llvm::raw_ostream &DiagnosticStream) {
@@ -192,6 +194,7 @@ performRenaming(std::string MainExecutablePath,
 
   ExtensionExcluder ExtensionExcluder;
   NSManagedExcluder NSManagedExcluder;
+  ConfigurationExcluder ConfigurationExcluder(std::move(ObfuscationConfiguration));
   
   std::set<Excluder*> Excluders = { &ExtensionExcluder, &NSManagedExcluder };
   
diff --git a/swift/test/Obfuscation/SymbolExtractor/SymbolExtractor.swift b/swift/test/Obfuscation/SymbolExtractor/SymbolExtractor.swift
index ec6e1906d03..f03f2f1370c 100644
--- a/swift/test/Obfuscation/SymbolExtractor/SymbolExtractor.swift
+++ b/swift/test/Obfuscation/SymbolExtractor/SymbolExtractor.swift
@@ -1,5 +1,5 @@
 
-//RUN: echo "{\"project\": {\"rootPath\": \"TestRootPath\", \"projectFilePath\": \"testProjectFilePath\"}, \"module\": {\"name\": \"TestModuleName\", \"triple\": \"x86_64-apple-macosx10.13\"}, \"sdk\": {\"name\": \"%target-sdk-name\", \"path\": \"%sdk\"}, \"sourceFiles\": [\"%S/Inputs\/ViewController.swift\", \"%S/Inputs\/AppDelegate.swift\"], \"layoutFiles\": [], \"explicitlyLinkedFrameworks\": [], \"implicitlyLinkedFrameworks\": [], \"frameworkSearchPaths\": [], \"headerSearchPaths\": [], \"bridgingHeader\": \"\"}" > %T/files.json
+//RUN: echo "{\"project\": {\"rootPath\": \"TestRootPath\", \"projectFilePath\": \"testProjectFilePath\"}, \"module\": {\"name\": \"TestModuleName\", \"triple\": \"x86_64-apple-macosx10.13\"}, \"sdk\": {\"name\": \"%target-sdk-name\", \"path\": \"%sdk\"}, \"sourceFiles\": [\"%S/Inputs\/ViewController.swift\", \"%S/Inputs\/AppDelegate.swift\"], \"layoutFiles\": [], \"explicitlyLinkedFrameworks\": [], \"implicitlyLinkedFrameworks\": [], \"frameworkSearchPaths\": [], \"headerSearchPaths\": [], \"bridgingHeader\": \"\", \"configurationFile\": \"\"}" > %T/files.json
 //RUN: obfuscator-symbol-extractor -filesjson %T/files.json -symbolsjson %t -printdiagnostics
 //RUN: diff -w %S/Inputs/expectedSymbols.json %t
 
diff --git a/swift/test/lit.cfg b/swift/test/lit.cfg
index 88bf3d83ca8..768b0442bfa 100644
--- a/swift/test/lit.cfg
+++ b/swift/test/lit.cfg
@@ -411,17 +411,17 @@ config.substitutions.append((
 
 config.substitutions.append((
     '%target-run-files-json-generation', 
-    'echo \\"{\\"project\\": {\\"rootPath\\": \\"%S\\", \\"projectFilePath\\": \\"testProjectFilePath\\"}, \\"module\\": {\\"name\\": \\"TestModuleName\\", \\"triple\\": \\"x86_64-apple-macosx10.13\\"}, \\"sdk\\": {\\"name\\": \\"%target-sdk-name\\", \\"path\\": \\"%sdk\\"}, \\"sourceFiles\\": [\\"%S/\$FILE.swift\\"], \\"layoutFiles\\": [], \\"explicitlyLinkedFrameworks\\": [], \\"implicitlyLinkedFrameworks\\": [], \\"frameworkSearchPaths\\": [], \\"headerSearchPaths\\": [], \\"bridgingHeader\\": \\"testHeader\\"}\\" > %t-files.json'
+    'echo \\"{\\"project\\": {\\"rootPath\\": \\"%S\\", \\"projectFilePath\\": \\"testProjectFilePath\\"}, \\"module\\": {\\"name\\": \\"TestModuleName\\", \\"triple\\": \\"x86_64-apple-macosx10.13\\"}, \\"sdk\\": {\\"name\\": \\"%target-sdk-name\\", \\"path\\": \\"%sdk\\"}, \\"sourceFiles\\": [\\"%S/\$FILE.swift\\"], \\"layoutFiles\\": [], \\"explicitlyLinkedFrameworks\\": [], \\"implicitlyLinkedFrameworks\\": [], \\"frameworkSearchPaths\\": [], \\"headerSearchPaths\\": [], \\"bridgingHeader\\": \\"testHeader\\", \\"configurationFile\\": \\"testConfigurationPath\\"}\\" > %t-files.json'
 ))
 
 config.substitutions.append((
     '%target-run-files-and-storyboard-json-generation', 
-    'echo \\"{\\"project\\": {\\"rootPath\\": \\"%S\\", \\"projectFilePath\\": \\"testProjectFilePath\\"}, \\"module\\": {\\"name\\": \\"TestModuleName\\", \\"triple\\": \\"x86_64-apple-macosx10.13\\"}, \\"sdk\\": {\\"name\\": \\"%target-sdk-name\\", \\"path\\": \\"%sdk\\"}, \\"sourceFiles\\": [\\"%S/\$FILE.swift\\"], \\"layoutFiles\\": [\\"%S/\$FILE.storyboard\\"], \\"explicitlyLinkedFrameworks\\": [], \\"implicitlyLinkedFrameworks\\": [], \\"frameworkSearchPaths\\": [], \\"headerSearchPaths\\": [], \\"bridgingHeader\\": \\"testHeader\\"}\\" > %t-files.json'
+    'echo \\"{\\"project\\": {\\"rootPath\\": \\"%S\\", \\"projectFilePath\\": \\"testProjectFilePath\\"}, \\"module\\": {\\"name\\": \\"TestModuleName\\", \\"triple\\": \\"x86_64-apple-macosx10.13\\"}, \\"sdk\\": {\\"name\\": \\"%target-sdk-name\\", \\"path\\": \\"%sdk\\"}, \\"sourceFiles\\": [\\"%S/\$FILE.swift\\"], \\"layoutFiles\\": [\\"%S/\$FILE.storyboard\\"], \\"explicitlyLinkedFrameworks\\": [], \\"implicitlyLinkedFrameworks\\": [], \\"frameworkSearchPaths\\": [], \\"headerSearchPaths\\": [], \\"bridgingHeader\\": \\"testHeader\\", \\"configurationFile\\": \\"testConfigurationPath\\"}\\" > %t-files.json'
 ))
 
 config.substitutions.append((
     '%target-run-files-and-xib-json-generation', 
-    'echo \\"{\\"project\\": {\\"rootPath\\": \\"%S\\", \\"projectFilePath\\": \\"testProjectFilePath\\"}, \\"module\\": {\\"name\\": \\"TestModuleName\\", \\"triple\\": \\"x86_64-apple-macosx10.13\\"}, \\"sdk\\": {\\"name\\": \\"%target-sdk-name\\", \\"path\\": \\"%sdk\\"}, \\"sourceFiles\\": [\\"%S/\$FILE.swift\\"], \\"layoutFiles\\": [\\"%S/\$FILE.xib\\"], \\"explicitlyLinkedFrameworks\\": [], \\"implicitlyLinkedFrameworks\\": [], \\"frameworkSearchPaths\\": [], \\"headerSearchPaths\\": [], \\"bridgingHeader\\": \\"testHeader\\"}\\" > %t-files.json'
+    'echo \\"{\\"project\\": {\\"rootPath\\": \\"%S\\", \\"projectFilePath\\": \\"testProjectFilePath\\"}, \\"module\\": {\\"name\\": \\"TestModuleName\\", \\"triple\\": \\"x86_64-apple-macosx10.13\\"}, \\"sdk\\": {\\"name\\": \\"%target-sdk-name\\", \\"path\\": \\"%sdk\\"}, \\"sourceFiles\\": [\\"%S/\$FILE.swift\\"], \\"layoutFiles\\": [\\"%S/\$FILE.xib\\"], \\"explicitlyLinkedFrameworks\\": [], \\"implicitlyLinkedFrameworks\\": [], \\"frameworkSearchPaths\\": [], \\"headerSearchPaths\\": [], \\"bridgingHeader\\": \\"testHeader\\", \\"configurationFile\\": \\"testConfigurationPath\\"}\\" > %t-files.json'
 ))
 
 config.substitutions.append((
diff --git a/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp b/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
index 1d721e8f14f..e96a650c068 100644
--- a/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
+++ b/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
@@ -86,6 +86,22 @@ int main(int argc, char *argv[]) {
   if (auto Error = FilesJsonOrError.takeError()) {
     ExitOnError(std::move(Error));
   }
+
+  auto ConfigurationFilePath = FilesJsonOrError.get().ConfigurationFile;
+  ObfuscationConfiguration ObfuscationConfiguration;
+  if (!ConfigurationFilePath.empty()) {
+    auto ObfuscationConfigurationOrError =
+      parseJson<struct ObfuscationConfiguration>(ConfigurationFilePath);
+    if (auto Error = ObfuscationConfigurationOrError.takeError()) {
+      llvm::consumeError(std::move(Error));
+      llvm::outs() << "Error while reading configuration file from "
+                   << ConfigurationFilePath << '\n';
+    } else {
+      ObfuscationConfiguration =
+        std::move(ObfuscationConfigurationOrError.get());
+    }
+  }
+
   auto RenamesJsonOrError = parseJson<RenamesJson>(options::RenamesJsonPath);
   if (auto Error = RenamesJsonOrError.takeError()) {
     ExitOnError(std::move(Error));
@@ -111,6 +127,7 @@ int main(int argc, char *argv[]) {
   // The logic for renaming is in the swiftObfuscation library.
   auto FilesOrError = performRenaming(MainExecutablePath,
                                       FilesJsonOrError.get(),
+                                      std::move(ObfuscationConfiguration),
                                       RenamesJsonOrError.get(),
                                       options::ObfuscatedProjectPath,
                                       *DiagnosticStream);
-- 
2.17.1 (Apple Git-112)


From dc6c6c1e00568087d37e20abdfbd03dec8c28788 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Wed, 21 Mar 2018 12:02:03 +0100
Subject: [PATCH 122/138] Added minifying renamer

Summary:
fixed logic

code review fixes

Added configuration file parsing

Reviewers: jerzy.kleszcz, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2887
---
 swift/include/swift/Obfuscation/NameMapping.h |  22 ++-
 swift/lib/Obfuscation/NameMapping.cpp         | 156 +++++++++++++++++-
 .../obfuscator-name-mapper.cpp                |  11 +-
 3 files changed, 174 insertions(+), 15 deletions(-)

diff --git a/swift/include/swift/Obfuscation/NameMapping.h b/swift/include/swift/Obfuscation/NameMapping.h
index 7c7130add74..8df9ca561d3 100644
--- a/swift/include/swift/Obfuscation/NameMapping.h
+++ b/swift/include/swift/Obfuscation/NameMapping.h
@@ -14,10 +14,11 @@ namespace swift {
 namespace obfuscation {
 
 /// Name mapping strategies:
-/// - random generates unique random identifiers
-/// - deterministic generates predictible identifiers, we use it in tests
+/// - Random generates unique random identifiers
+/// - Deterministic generates predictible identifiers, we use it in tests
+/// - Minifying generates shortes possible names
 enum NameMappingStrategy {
-  random, deterministic
+  Random, Deterministic, Minifying
 };
   
 /// Base class for names generators.
@@ -47,6 +48,21 @@ protected:
     { SymbolType::Variable, {} },
     { SymbolType::Operator, {} }
   };
+  
+  // taken from https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html
+  std::set<std::string> SwiftKeywords = {
+    "associatedtype", "class", "deinit", "enum", "extension", "fileprivate",
+    "func", "import", "init", "inout", "internal", "let", "open", "operator",
+    "private", "protocol", "public", "static", "struct", "subscript",
+    "typealias", "var", "break", "case", "continue", "default", "defer", "do",
+    "else", "fallthrough", "for", "guard", "if", "in", "repeat", "return",
+    "switch", "where", "while", "as", "Any", "catch", "false", "is", "nil",
+    "rethrows", "super", "self", "Self", "throw", "throws", "true", "try",
+    "associativity", "convenience", "dynamic", "didSet", "final", "get", "infix",
+    "indirect", "lazy", "left", "mutating", "none", "nonmutating", "optional",
+    "override", "postfix", "precedence", "prefix", "Protocol", "required",
+    "right", "set", "Type", "unowned", "weak", "willSet"
+  };
  
   static std::vector<std::string>
   concatenateSymbols(const std::vector<std::string> &Head,
diff --git a/swift/lib/Obfuscation/NameMapping.cpp b/swift/lib/Obfuscation/NameMapping.cpp
index dbe9860b3b6..06e6dc025db 100644
--- a/swift/lib/Obfuscation/NameMapping.cpp
+++ b/swift/lib/Obfuscation/NameMapping.cpp
@@ -5,6 +5,7 @@
 #include <string>
 #include <vector>
 #include <set>
+#include <algorithm>
 
 namespace swift {
 namespace obfuscation {
@@ -86,7 +87,9 @@ class RandomUniqueOperatorGenerator: public BaseIdentifierGenerator {
     auto Tail = TailGenerator.rand(IdentifierLength - 1);
     auto Name = Head + Tail;
 
-    if (GeneratedSymbols.insert(Name).second) {
+    // if generated name is a duplicate or is one of swift keywordsthen try again
+    if (GeneratedSymbols.insert(Name).second &&
+                SwiftKeywords.find(Name) == SwiftKeywords.end()) {
       return Name;
     } else {
       return generateName(NumbersOfTriesLeft - 1);
@@ -122,6 +125,102 @@ public:
   
 };
 
+/// Generates shortest possible identifiers for symbols.
+class MinifyingIdentifierGenerator: public BaseIdentifierGenerator {
+  
+private:
+  std::string MinifiedName = "a";
+  
+  char getLastChar() {
+    return MinifiedName[MinifiedName.length()-1];
+  }
+  
+  void setLastChar(char newValue) {
+    MinifiedName[MinifiedName.length()-1] = newValue;
+  }
+  
+  void incrementLastChar() {
+    MinifiedName[MinifiedName.length()-1]++;
+  }
+  
+  void addNextLetter() {
+    MinifiedName = MinifiedName + "a";
+  }
+  
+  llvm::Expected<std::string> generateName(int NumbersOfTriesLeft) {
+    if (NumbersOfTriesLeft <= 0) {
+      return stringError("couldn't generate minified type name");
+    }
+    
+    if(MinifiedName.length() == 1) {
+      if(getLastChar() == 'z') {
+        setLastChar('A');
+      } else if(getLastChar() == 'Z') {
+        setLastChar('a');
+        addNextLetter();
+      } else {
+        incrementLastChar();
+      }
+    } else {
+      
+      if(getLastChar() == 'z') {
+        setLastChar('A');
+      } else if(getLastChar() == 'Z') {
+        setLastChar('0');
+      } else if(getLastChar() == '9') {
+        
+        int i = (int)MinifiedName.length() - 2; // one before last index
+        bool shouldAddNextLetter = true;
+        while(i >= 0) {
+          if(MinifiedName[i] == 'z') {
+            MinifiedName[i] = 'A';
+            shouldAddNextLetter = false;
+            break;
+          } else if(MinifiedName[i] == 'Z') {
+            if(i>0) {
+              MinifiedName[i] = '0';
+              shouldAddNextLetter = false;
+              break;
+            } else {
+              MinifiedName[i] = 'a';
+            }
+          } else if(MinifiedName[i] == '9') {
+            MinifiedName[i] = 'a';
+          } else {
+            MinifiedName[i]++;
+            shouldAddNextLetter = false;
+            break;
+          }
+          i--;
+        }
+        
+        setLastChar('a');
+        if(shouldAddNextLetter) {
+          addNextLetter();
+        }
+        
+      } else {
+        incrementLastChar();
+      }
+    }
+    
+    // if generated name is one of swift keywords then try again
+    if(SwiftKeywords.find(MinifiedName) != SwiftKeywords.end()) {
+      return generateName(NumbersOfTriesLeft - 1);
+    } else {
+      return MinifiedName;
+    }
+    
+  }
+  
+public:
+  
+  llvm::Expected<std::string> generateName(const Symbol &Symbol) {
+    return generateName(100);
+  }
+  
+};
+  
 // NameMapping implementation
   
 NameMapping::NameMapping(enum NameMappingStrategy NameMappingStrategy):
@@ -151,27 +250,68 @@ llvm::Expected<std::string>
 llvm::Expected<RenamesJson>
   NameMapping::proposeRenamings(const SymbolsJson &SymbolsJson) {
   
-  if(NameMappingStrategy == NameMappingStrategy::random) {
+  std::vector<std::string> MinifiedIdentifiers;
+  if(NameMappingStrategy == NameMappingStrategy::Random) {
     this->IdentifierGenerator = llvm::make_unique<RandomUniqueIdentifierGenerator>();
     this->OperatorGenerator = llvm::make_unique<RandomUniqueOperatorGenerator>();
-  } else if(NameMappingStrategy == NameMappingStrategy::deterministic) {
+  } else if(NameMappingStrategy == NameMappingStrategy::Deterministic) {
     this->IdentifierGenerator = llvm::make_unique<DeterministicIdentifierGenerator>();
     this->OperatorGenerator = llvm::make_unique<DeterministicIdentifierGenerator>();
+  } else if(NameMappingStrategy == NameMappingStrategy::Minifying) {
+    this->IdentifierGenerator = llvm::make_unique<MinifyingIdentifierGenerator>();
+    this->OperatorGenerator = llvm::make_unique<RandomUniqueOperatorGenerator>();
+    
+    // generate as many minified identifiers as there is symbols (with type
+    // other than operator and then randomly shuffle the vector to avoid
+    // a situation where minified symbols are used in order of generation
+    for (auto Symbol : SymbolsJson.Symbols) {
+      
+      if(Symbol.Type != SymbolType::Operator) {
+        auto NameOrError = IdentifierGenerator->generateName(Symbol);
+        if (auto Error = NameOrError.takeError()) {
+          return std::move(Error);
+        }
+        
+        MinifiedIdentifiers.push_back(NameOrError.get());
+      }
+    }
+    
+    std::random_shuffle(MinifiedIdentifiers.begin(), MinifiedIdentifiers.end());
   }
     
   RenamesJson RenamesJson;
   
-  for (const auto &Symbol : SymbolsJson.Symbols) {
+  int MinifiedIdentifierIndex = 0;
+  for (auto Symbol : SymbolsJson.Symbols) {
+    
     SymbolRenaming Renaming;
     Renaming.Identifier = Symbol.Identifier;
     Renaming.OriginalName = Symbol.Name;
     Renaming.Module = Symbol.Module;
     Renaming.Type = Symbol.Type;
-    auto NameOrError = generateNameForSymbol(Symbol);
-    if (auto Error = NameOrError.takeError()) {
-      return std::move(Error);
+    
+    if(NameMappingStrategy == NameMappingStrategy::Minifying) {
+      
+      if(Symbol.Type != SymbolType::Operator) {
+        Renaming.ObfuscatedName = MinifiedIdentifiers[MinifiedIdentifierIndex];
+        MinifiedIdentifierIndex++;
+      } else {
+        auto NameOrError = OperatorGenerator->generateName(Symbol);
+        if (auto Error = NameOrError.takeError()) {
+          return std::move(Error);
+        }
+        
+        Renaming.ObfuscatedName = NameOrError.get();
+      }
+      
+    } else {
+      auto NameOrError = generateNameForSymbol(Symbol);
+      if (auto Error = NameOrError.takeError()) {
+        return std::move(Error);
+      }
+      Renaming.ObfuscatedName = NameOrError.get();
     }
-    Renaming.ObfuscatedName = NameOrError.get();
+    
     RenamesJson.Symbols.push_back(Renaming);
   }
   
diff --git a/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp b/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
index ea605c9f7e5..9c95d7a6d1f 100644
--- a/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
+++ b/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
@@ -24,17 +24,20 @@ RenamesJsonPath("renamesjson",
   
 static llvm::cl::opt<NameMappingStrategy>
 NameMappingStrategy("namemappingstrategy",
-                    llvm::cl::init(NameMappingStrategy::random),
+                    llvm::cl::init(NameMappingStrategy::Random),
                     llvm::cl::desc("Choose name mapping strategy:"),
                     llvm::cl::values(
-                      clEnumValN(NameMappingStrategy::random,
+                      clEnumValN(NameMappingStrategy::Random,
                                  "random",
                                  "Generate random unique identifiers "
                                  "(default)"),
-                      clEnumValN(NameMappingStrategy::deterministic,
+                      clEnumValN(NameMappingStrategy::Deterministic,
                                  "deterministic",
                                  "Generate deterministic identifiers "
-                                 "(useful for testing)")
+                                 "(useful for testing)"),
+                      clEnumValN(NameMappingStrategy::Minifying,
+                                 "minifying",
+                                 "Generate minified identifiers")
                     ),
                 llvm::cl::cat(ObfuscatorNameMapper));
 }
-- 
2.17.1 (Apple Git-112)


From ea4a1a3766e804f0b48603641d98c4da9052c650 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Thu, 22 Mar 2018 15:57:39 +0100
Subject: [PATCH 123/138] Added Configuration exclusion

Reviewers: michal.zielinski, jerzy.kleszcz

Reviewed By: michal.zielinski, jerzy.kleszcz

Subscribers: jerzy.kleszcz, michal.zielinski

Differential Revision: https://phabricator.polidea.com/D2889
---
 Documentation/ConfigurationFile.md            |  76 ++++++++++
 .../swift/Obfuscation/ConfigurationExcluder.h |  14 +-
 .../swift/Obfuscation/DataStructures.h        |   2 +
 .../Obfuscation/DeclarationParsingUtils.h     |  13 ++
 .../lib/Obfuscation/ConfigurationExcluder.cpp | 138 ++++++++++++++++--
 swift/lib/Obfuscation/DataStructures.cpp      |   2 +
 .../Obfuscation/DeclarationParsingUtils.cpp   |  46 ++++++
 swift/lib/Obfuscation/Renaming.cpp            |   2 +-
 .../ObfuscationConfiguration/.obfuscation.yml |  37 +++++
 .../Expected/ObfuscationConfiguration.swift   |  47 ++++++
 .../ObfuscationConfiguration.swift            |  49 +++++++
 swift/test/lit.cfg                            |   6 +-
 .../SwiftObfuscation/FileIOTests.cpp          |  14 +-
 13 files changed, 423 insertions(+), 23 deletions(-)
 create mode 100644 Documentation/ConfigurationFile.md
 create mode 100644 swift/test/Obfuscation/FullProcess/ObfuscationConfiguration/.obfuscation.yml
 create mode 100644 swift/test/Obfuscation/FullProcess/ObfuscationConfiguration/Expected/ObfuscationConfiguration.swift
 create mode 100644 swift/test/Obfuscation/FullProcess/ObfuscationConfiguration/ObfuscationConfiguration.swift

diff --git a/Documentation/ConfigurationFile.md b/Documentation/ConfigurationFile.md
new file mode 100644
index 00000000000..169dce288fb
--- /dev/null
+++ b/Documentation/ConfigurationFile.md
@@ -0,0 +1,76 @@
+# Configuration File
+
+This document describes the obfuscation configuration file format and conventions.
+
+# Location
+
+The configuration file should be named `.obfuscation.yml` and be placed under the project's root directory.
+
+# Format
+
+The file is in the YAML format presented in the example:
+
+```
+exclude:
+
+  - type:
+      name: "SampleClass"
+      module: "iOSTestApp"
+
+  - inheritance:
+      base: "SampleTransitiveBaseClass"
+      module: "iOSTestApp"
+      transitive: true
+
+  - inheritance:
+      base: "SampleBaseClass"
+      module: "iOSTestApp"
+      transitive: false
+
+  - conformance:
+      protocol: "SampleTransitiveUsedProtocol"
+      module: "iOSTestApp"
+      transitive: true
+
+  - conformance:
+      protocol: "SampleUsedProtocol"
+      module: "iOSTestApp"
+      transitive: false
+
+```
+
+At the top level, there's a `exlude` key that specifies the array of exclusion rules for the obfuscation process.
+
+The possible rules are:
+
+## 1. Type exclusion rule
+
+```
+type:
+  name: <string>
+  module: <string>
+```
+
+The `type` key specifies the type exclusion rule. It states which one particular type should not be included in the obfuscation process. It contains two fields: `name` and `module`. The values under name and module are used to identify the particular Swift type (class, struct, enum or protocol) to exclude from obfuscation.
+
+## 2. Inheritance exclusion rule
+
+```
+inheritance:
+  base: <string>
+  module: <string>
+  transitive: <boolean>
+```
+
+The `inheritance` key specifies the inheritance exclusion name. It excludes the subclasses of particular base class (name from `base` field) in particular module (name from `module` field) from obfuscation. There's a boolean parameter `transitive` that defines whether the subclasses of subclass of base class should be excluded as well. If `transitive` is true, they will be excluded, if it's `false`, they will not.
+
+## 3. Conformance exclusion rule
+
+```
+conformance:
+  protocol: <string>
+  module: <string>
+  transitive: <boolean>
+```
+
+The `conformance` key specifies the conformance exclusion name. It excludes the objects that conform from a particular protocol or protocols extending particular protocol. The values from `protocol` and `module` fields are used to identify the protocol to exclude. The `transitive` boolean parameter defines whether the subclasses of classes conforming to stated protocol or protocols extending the protocol extending the stated protocol should be excluded from obfuscation as well. If `true`, they will be excluded. If `false`, they will not.
diff --git a/swift/include/swift/Obfuscation/ConfigurationExcluder.h b/swift/include/swift/Obfuscation/ConfigurationExcluder.h
index 92b902b1c06..87a62728631 100644
--- a/swift/include/swift/Obfuscation/ConfigurationExcluder.h
+++ b/swift/include/swift/Obfuscation/ConfigurationExcluder.h
@@ -13,10 +13,22 @@ private:
 
   ObfuscationConfiguration Configuration;
 
+  void excludeIfNeeded(Decl *Declaration,
+                       const std::pair<const ClassDecl *, std::string> &DeclarationAndModule,
+                       const InheritanceExclusion *ExcludedType);
+
+  void handleTypeExclusion(const TypeExclusion *Exclusion, Decl *Declaration);
+
+  void handleInheritanceExclusion(const InheritanceExclusion *Exclusion,
+                                  Decl *Declaration);
+
+  void handleConformanceExclusion(const ConformanceExclusion *Exclusion,
+                                  Decl *Declaration);
+
 public:
 
   ConfigurationExcluder(ObfuscationConfiguration&&);
-
+  
   void identifyExclusions(Decl *Declaration);
 };
 
diff --git a/swift/include/swift/Obfuscation/DataStructures.h b/swift/include/swift/Obfuscation/DataStructures.h
index 17d0f7db1b0..c6075f95fb4 100644
--- a/swift/include/swift/Obfuscation/DataStructures.h
+++ b/swift/include/swift/Obfuscation/DataStructures.h
@@ -144,6 +144,7 @@ struct TypeExclusion: public Exclusion {
 
 struct InheritanceExclusion: public Exclusion {
   std::string Base;
+  bool Transitive;
 
   InheritanceExclusion() = default;
   InheritanceExclusion(const InheritanceExclusion&) = default;
@@ -152,6 +153,7 @@ struct InheritanceExclusion: public Exclusion {
 
 struct ConformanceExclusion: public Exclusion {
   std::string Protocol;
+  bool Transitive;
 
   ConformanceExclusion() = default;
   ConformanceExclusion(const ConformanceExclusion&) = default;
diff --git a/swift/include/swift/Obfuscation/DeclarationParsingUtils.h b/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
index a2b4824cc9c..c5a099791e8 100644
--- a/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
+++ b/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
@@ -5,6 +5,7 @@
 #include "swift/Obfuscation/DataStructures.h"
 #include "swift/Obfuscation/DeclarationParsingUtils.h"
 
+#include <set>
 #include <string>
 #include <vector>
 
@@ -56,6 +57,18 @@ template<class T>
 std::pair<const T*, std::set<std::string>>
 getBaseOverridenDeclarationWithModules(const T *Declaration);
 
+using ClassDeclarationsWithModules =
+  std::vector<std::pair<const ClassDecl*, std::string>>;
+
+ClassDeclarationsWithModules
+getSuperClassDeclarationsWithModules(const ClassDecl *Declaration);
+
+using ProtocolDeclarationsWithModules =
+  std::set<std::pair<const ProtocolDecl*, std::string>>;
+
+ProtocolDeclarationsWithModules
+getConformingProtocolDeclarationsWithModules(const NominalTypeDecl *Declaration);
+
 bool isMemberwise(const ConstructorDecl* Declaration);
 
 bool isMemberwiseConstructorParameter(const ParamDecl* Declaration);
diff --git a/swift/lib/Obfuscation/ConfigurationExcluder.cpp b/swift/lib/Obfuscation/ConfigurationExcluder.cpp
index f236665e096..02b5e307234 100644
--- a/swift/lib/Obfuscation/ConfigurationExcluder.cpp
+++ b/swift/lib/Obfuscation/ConfigurationExcluder.cpp
@@ -1,28 +1,146 @@
 #include "swift/Obfuscation/ConfigurationExcluder.h"
+#include "swift/Obfuscation/DeclarationParsingUtils.h"
 
 namespace swift {
 namespace obfuscation {
 
 ConfigurationExcluder::
   ConfigurationExcluder(ObfuscationConfiguration&& Configuration)
-: Configuration(std::move(Configuration)) {
+: Configuration(std::move(Configuration)) {}
+
+void
+ConfigurationExcluder::
+  excludeIfNeeded(Decl *Declaration,
+                  const std::pair<const ClassDecl *, std::string> &DeclarationAndModule,
+                  const InheritanceExclusion *ExcludedType) {
+  auto TypeName = typeName(DeclarationAndModule.first);
+  auto ModuleName = DeclarationAndModule.second;
+  if (ExcludedType->Base == TypeName
+      && ExcludedType->Module == ModuleName) {
+    DeclarationsToExclude.insert(Declaration);
+  }
+}
+
+void ConfigurationExcluder::
+  handleTypeExclusion(const TypeExclusion *Exclusion, Decl *Declaration) {
+    NominalTypeDecl* NominalTypeDeclaration = nullptr;
+    if (auto *NominalType = dyn_cast<NominalTypeDecl>(Declaration)) {
+      NominalTypeDeclaration = NominalType;
+    } else if (auto *Extension = dyn_cast<ExtensionDecl>(Declaration)) {
+      NominalTypeDeclaration = Extension->getExtendedType()->getAnyNominal();
+    }
+    if (Exclusion != nullptr && NominalTypeDeclaration != nullptr) {
+      auto TypeName = typeName(NominalTypeDeclaration);
+      auto ModuleName = moduleName(NominalTypeDeclaration);
+      if (Exclusion->Name == TypeName
+          && Exclusion->Module == ModuleName) {
+        DeclarationsToExclude.insert(Declaration);
+      }
+    }
+  }
+
+void ConfigurationExcluder::
+handleInheritanceExclusion(const InheritanceExclusion *Exclusion, Decl *Declaration) {
+
+  ClassDecl* ClassDeclaration = nullptr;
+  if (auto *ClassType = dyn_cast<ClassDecl>(Declaration)) {
+    ClassDeclaration = ClassType;
+  } else if (auto *Extension = dyn_cast<ExtensionDecl>(Declaration)) {
+    ClassDeclaration =
+    Extension->getExtendedType()->getClassOrBoundGenericClass();
+  }
+
+  if (Exclusion != nullptr && ClassDeclaration != nullptr) {
+    auto DeclarationsWithModules =
+    getSuperClassDeclarationsWithModules(ClassDeclaration);
+    if (!DeclarationsWithModules.empty()) {
+      if (Exclusion->Transitive) {
+        for (auto DeclarationAndModule : DeclarationsWithModules) {
+          excludeIfNeeded(Declaration, DeclarationAndModule, Exclusion);
+        }
+      } else {
+        excludeIfNeeded(Declaration,
+                        DeclarationsWithModules.front(),
+                        Exclusion);
+      }
+    }
+  }
+}
+
+void ConfigurationExcluder::
+handleConformanceExclusion(const ConformanceExclusion *Exclusion,
+                           Decl *Declaration) {
+
+    NominalTypeDecl* NominalTypeDeclaration = nullptr;
+    if (auto *NominalType = dyn_cast<NominalTypeDecl>(Declaration)) {
+      NominalTypeDeclaration = NominalType;
+    } else if (auto *Extension = dyn_cast<ExtensionDecl>(Declaration)) {
+      NominalTypeDeclaration = Extension->getExtendedType()->getAnyNominal();
+    }
+
+    if (Exclusion != nullptr && NominalTypeDeclaration != nullptr) {
+      if (Exclusion->Transitive) {
+        std::vector<const NominalTypeDecl *>
+          DeclarationsToIdentifyProtocolsConformance;
+        DeclarationsToIdentifyProtocolsConformance
+          .push_back(NominalTypeDeclaration);
+        if (auto *ClassDeclaration =
+            dyn_cast<ClassDecl>(NominalTypeDeclaration)) {
+          auto DeclarationsWithModules =
+          getSuperClassDeclarationsWithModules(ClassDeclaration);
+          for (auto DeclarationAndModule : DeclarationsWithModules) {
+            DeclarationsToIdentifyProtocolsConformance
+            .push_back(DeclarationAndModule.first);
+          }
+        }
+        for (auto DeclarationToIdentify
+             : DeclarationsToIdentifyProtocolsConformance) {
+          auto ProtocolsWithModules =
+          getConformingProtocolDeclarationsWithModules(DeclarationToIdentify);
+          for (auto ProtocolAndModule : ProtocolsWithModules) {
+            auto TypeName = typeName(ProtocolAndModule.first);
+            auto ModuleName = ProtocolAndModule.second;
+            if (Exclusion->Protocol == TypeName
+                && Exclusion->Module == ModuleName) {
+              DeclarationsToExclude.insert(Declaration);
+            }
+          }
+        }
+      } else {
+        auto InheritedArray = NominalTypeDeclaration->getInherited();
+        for (auto Inherited : InheritedArray) {
+          auto Nominal = Inherited.getType()->getAnyNominal();
+          if (auto *Protocol = dyn_cast_or_null<ProtocolDecl>(Nominal)) {
+            auto TypeName = typeName(Protocol);
+            auto ModuleName = moduleName(Protocol);
+            if (Exclusion->Protocol == TypeName
+                && Exclusion->Module == ModuleName) {
+              DeclarationsToExclude.insert(Declaration);
+            }
+          }
+        }
+      }
+    }
+  }
+
+void ConfigurationExcluder::identifyExclusions(Decl *Declaration) {
 
-  // TODO: remove when there's logic added to identifyExclusions method
   for (auto &Exclusion : this->Configuration.Exclude) {
     switch (Exclusion->Kind) {
+      case ExclusionKind::UnknownKind:
+        break;
       case ExclusionKind::Type: {
-        auto Type = Exclusion->getAsTypeExclusion();
-        llvm::outs() << Type->Name << '\n';
+        handleTypeExclusion(Exclusion->getAsTypeExclusion(), Declaration);
         break;
       }
       case ExclusionKind::Inheritance: {
-        auto Type = Exclusion->getAsInheritanceExclusion();
-        llvm::outs() << Type->Base << '\n';
+        handleInheritanceExclusion(Exclusion->getAsInheritanceExclusion(),
+                                   Declaration);
         break;
       }
       case ExclusionKind::Conformance: {
-        auto Type = Exclusion->getAsConformanceExclusion();
-        llvm::outs() << Type->Protocol << '\n';
+        handleConformanceExclusion(Exclusion->getAsConformanceExclusion(),
+                                   Declaration);
         break;
       }
     }
@@ -30,9 +148,5 @@ ConfigurationExcluder::
 
 }
 
-void ConfigurationExcluder::identifyExclusions(Decl *Declaration) {
-
-}
-
 } // namespace obfuscation
 } // namespace swift
diff --git a/swift/lib/Obfuscation/DataStructures.cpp b/swift/lib/Obfuscation/DataStructures.cpp
index 714a6eaca9e..79467f1e499 100644
--- a/swift/lib/Obfuscation/DataStructures.cpp
+++ b/swift/lib/Obfuscation/DataStructures.cpp
@@ -262,6 +262,7 @@ void MappingTraits<InheritanceExclusion>::
   mapping(IO &Io, InheritanceExclusion &Object) {
     Object.Kind = ExclusionKind::Inheritance;
     Io.mapRequired("module", Object.Module);
+    Io.mapRequired("transitive", Object.Transitive);
     Io.mapRequired("base", Object.Base);
 }
 
@@ -269,6 +270,7 @@ void MappingTraits<ConformanceExclusion>::
   mapping(IO &Io, ConformanceExclusion &Object) {
     Object.Kind = ExclusionKind::Conformance;
     Io.mapRequired("module", Object.Module);
+    Io.mapRequired("transitive", Object.Transitive);
     Io.mapRequired("protocol", Object.Protocol);
 }
 
diff --git a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
index f6ab9a72723..135a74ad325 100644
--- a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
+++ b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
@@ -121,6 +121,52 @@ getBaseOverridenDeclarationWithModules(const T *Declaration) {
   return std::make_pair(Base, Modules);
 }
 
+ClassDeclarationsWithModules
+findRecursivelySuperClassDeclarationsWithModules(const ClassDecl *Declaration,
+                                                ClassDeclarationsWithModules &DeclarationsWithModules) {
+  if (auto* OverridenDeclaration = Declaration->getSuperclassDecl()) {
+    auto DeclarationAndModule =
+      std::make_pair(OverridenDeclaration, moduleName(OverridenDeclaration));
+    DeclarationsWithModules.push_back(DeclarationAndModule);
+    return findRecursivelySuperClassDeclarationsWithModules(OverridenDeclaration,
+                                                            DeclarationsWithModules);
+  }
+  return DeclarationsWithModules;
+}
+
+ClassDeclarationsWithModules
+getSuperClassDeclarationsWithModules(const ClassDecl *Declaration) {
+  ClassDeclarationsWithModules DeclarationsWithModules;
+  return findRecursivelySuperClassDeclarationsWithModules(Declaration,
+                                                         DeclarationsWithModules);
+}
+
+void
+findRecursivelyConformingProtocolDeclarationsWithModules(const NominalTypeDecl *Declaration,
+                                                         ProtocolDeclarationsWithModules &DeclarationsWithModules) {
+
+  for (auto Inherited : Declaration->getInherited()) {
+    if (auto *ProtocolDeclaration =
+          dyn_cast_or_null<ProtocolDecl>(Inherited.getType()->getAnyNominal())) {
+      auto DeclarationAndModule =
+        std::make_pair(ProtocolDeclaration, moduleName(ProtocolDeclaration));
+      auto InsertionResult = DeclarationsWithModules.insert(DeclarationAndModule);
+      if (InsertionResult.second) {
+        findRecursivelyConformingProtocolDeclarationsWithModules(ProtocolDeclaration,
+                                                                 DeclarationsWithModules);
+      }
+    }
+  }
+}
+
+ProtocolDeclarationsWithModules
+getConformingProtocolDeclarationsWithModules(const NominalTypeDecl *Declaration) {
+  ProtocolDeclarationsWithModules DeclarationsWithModules;
+  findRecursivelyConformingProtocolDeclarationsWithModules(Declaration,
+                                                           DeclarationsWithModules);
+  return DeclarationsWithModules;
+}
+
 template
 std::pair<const VarDecl*, std::set<std::string>>
 getBaseOverridenDeclarationWithModules(const VarDecl *Declaration);
diff --git a/swift/lib/Obfuscation/Renaming.cpp b/swift/lib/Obfuscation/Renaming.cpp
index 020960ca3b7..63f16705216 100644
--- a/swift/lib/Obfuscation/Renaming.cpp
+++ b/swift/lib/Obfuscation/Renaming.cpp
@@ -196,7 +196,7 @@ performRenaming(std::string MainExecutablePath,
   NSManagedExcluder NSManagedExcluder;
   ConfigurationExcluder ConfigurationExcluder(std::move(ObfuscationConfiguration));
   
-  std::set<Excluder*> Excluders = { &ExtensionExcluder, &NSManagedExcluder };
+  std::set<Excluder*> Excluders = { &ExtensionExcluder, &NSManagedExcluder, &ConfigurationExcluder };
   
   for (auto* Unit : CI.getMainModule()->getFiles()) {
     if (auto* Current = dyn_cast<SourceFile>(Unit)) {
diff --git a/swift/test/Obfuscation/FullProcess/ObfuscationConfiguration/.obfuscation.yml b/swift/test/Obfuscation/FullProcess/ObfuscationConfiguration/.obfuscation.yml
new file mode 100644
index 00000000000..b42131727c3
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/ObfuscationConfiguration/.obfuscation.yml
@@ -0,0 +1,37 @@
+exclude:
+
+  - type:
+      name: "SampleClass"
+      module: "TestModuleName"
+
+  - type:
+      name: "SampleStruct"
+      module: "TestModuleName"
+  
+  - type:
+      name: "SampleEnum"
+      module: "TestModuleName"
+
+  - type:
+      name: "SampleProtocol"
+      module: "TestModuleName"
+
+  - inheritance:
+      base: "SampleTransitiveBaseClass"
+      module: "TestModuleName"
+      transitive: true
+
+  - inheritance:
+      base: "SampleBaseClass"
+      module: "TestModuleName"
+      transitive: false
+
+  - conformance:
+      protocol: "SampleTransitiveUsedProtocol"
+      module: "TestModuleName"
+      transitive: true
+
+  - conformance:
+      protocol: "SampleUsedProtocol"
+      module: "TestModuleName"
+      transitive: false
diff --git a/swift/test/Obfuscation/FullProcess/ObfuscationConfiguration/Expected/ObfuscationConfiguration.swift b/swift/test/Obfuscation/FullProcess/ObfuscationConfiguration/Expected/ObfuscationConfiguration.swift
new file mode 100644
index 00000000000..b6f36cf121c
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/ObfuscationConfiguration/Expected/ObfuscationConfiguration.swift
@@ -0,0 +1,47 @@
+class SampleClass {}
+
+struct SampleStruct {}
+
+enum SampleEnum {}
+
+protocol SampleProtocol {}
+
+class T1_SampleBaseClass {}
+
+class SampleInheritingClass: T1_SampleBaseClass {}
+
+class T1_SampleDeeperInheritanceClass: SampleInheritingClass {}
+
+class T1_SampleTransitiveBaseClass {}
+
+class SampleTransitiveInheritingClass: T1_SampleTransitiveBaseClass {}
+
+class SampleTransitiveDeeperInheritanceClass: SampleTransitiveInheritingClass {}
+
+protocol T1_SampleUsedProtocol {}
+
+class SampleConformingClass: T1_SampleUsedProtocol {}
+
+struct SampleConformingStruct: T1_SampleUsedProtocol {}
+
+enum SampleConformingEnum: T1_SampleUsedProtocol {}
+
+protocol SampleExtendingProtocol: T1_SampleUsedProtocol {}
+
+protocol T1_SampleDeeperExtendingProtocol: SampleExtendingProtocol {}
+
+class T1_SampleInheritingFromConformingClass: SampleConformingClass {}
+
+protocol T1_SampleTransitiveUsedProtocol {}
+
+class SampleTransitiveConformingClass: T1_SampleTransitiveUsedProtocol {}
+
+struct SampleTransitiveConformingStruct: T1_SampleTransitiveUsedProtocol {}
+
+enum SampleTransitiveConformingEnum: T1_SampleTransitiveUsedProtocol {}
+
+protocol SampleTransitiveExtendingProtocol: T1_SampleTransitiveUsedProtocol {}
+
+protocol SampleTransitiveDeeperExtendingProtocol: SampleTransitiveExtendingProtocol {}
+
+class SampleTransitiveInheritingFromConformingClass: SampleTransitiveConformingClass {}
diff --git a/swift/test/Obfuscation/FullProcess/ObfuscationConfiguration/ObfuscationConfiguration.swift b/swift/test/Obfuscation/FullProcess/ObfuscationConfiguration/ObfuscationConfiguration.swift
new file mode 100644
index 00000000000..18d4cf06918
--- /dev/null
+++ b/swift/test/Obfuscation/FullProcess/ObfuscationConfiguration/ObfuscationConfiguration.swift
@@ -0,0 +1,49 @@
+//RUN: %target-prepare-obfuscation-for-file "ObfuscationConfiguration" %target-run-full-obfuscation
+
+class SampleClass {}
+
+struct SampleStruct {}
+
+enum SampleEnum {}
+
+protocol SampleProtocol {}
+
+class SampleBaseClass {}
+
+class SampleInheritingClass: SampleBaseClass {}
+
+class SampleDeeperInheritanceClass: SampleInheritingClass {}
+
+class SampleTransitiveBaseClass {}
+
+class SampleTransitiveInheritingClass: SampleTransitiveBaseClass {}
+
+class SampleTransitiveDeeperInheritanceClass: SampleTransitiveInheritingClass {}
+
+protocol SampleUsedProtocol {}
+
+class SampleConformingClass: SampleUsedProtocol {}
+
+struct SampleConformingStruct: SampleUsedProtocol {}
+
+enum SampleConformingEnum: SampleUsedProtocol {}
+
+protocol SampleExtendingProtocol: SampleUsedProtocol {}
+
+protocol SampleDeeperExtendingProtocol: SampleExtendingProtocol {}
+
+class SampleInheritingFromConformingClass: SampleConformingClass {}
+
+protocol SampleTransitiveUsedProtocol {}
+
+class SampleTransitiveConformingClass: SampleTransitiveUsedProtocol {}
+
+struct SampleTransitiveConformingStruct: SampleTransitiveUsedProtocol {}
+
+enum SampleTransitiveConformingEnum: SampleTransitiveUsedProtocol {}
+
+protocol SampleTransitiveExtendingProtocol: SampleTransitiveUsedProtocol {}
+
+protocol SampleTransitiveDeeperExtendingProtocol: SampleTransitiveExtendingProtocol {}
+
+class SampleTransitiveInheritingFromConformingClass: SampleTransitiveConformingClass {}
diff --git a/swift/test/lit.cfg b/swift/test/lit.cfg
index 768b0442bfa..584d931c4a2 100644
--- a/swift/test/lit.cfg
+++ b/swift/test/lit.cfg
@@ -411,17 +411,17 @@ config.substitutions.append((
 
 config.substitutions.append((
     '%target-run-files-json-generation', 
-    'echo \\"{\\"project\\": {\\"rootPath\\": \\"%S\\", \\"projectFilePath\\": \\"testProjectFilePath\\"}, \\"module\\": {\\"name\\": \\"TestModuleName\\", \\"triple\\": \\"x86_64-apple-macosx10.13\\"}, \\"sdk\\": {\\"name\\": \\"%target-sdk-name\\", \\"path\\": \\"%sdk\\"}, \\"sourceFiles\\": [\\"%S/\$FILE.swift\\"], \\"layoutFiles\\": [], \\"explicitlyLinkedFrameworks\\": [], \\"implicitlyLinkedFrameworks\\": [], \\"frameworkSearchPaths\\": [], \\"headerSearchPaths\\": [], \\"bridgingHeader\\": \\"testHeader\\", \\"configurationFile\\": \\"testConfigurationPath\\"}\\" > %t-files.json'
+    'echo \\"{\\"project\\": {\\"rootPath\\": \\"%S\\", \\"projectFilePath\\": \\"testProjectFilePath\\"}, \\"module\\": {\\"name\\": \\"TestModuleName\\", \\"triple\\": \\"x86_64-apple-macosx10.13\\"}, \\"sdk\\": {\\"name\\": \\"%target-sdk-name\\", \\"path\\": \\"%sdk\\"}, \\"sourceFiles\\": [\\"%S/\$FILE.swift\\"], \\"layoutFiles\\": [], \\"explicitlyLinkedFrameworks\\": [], \\"implicitlyLinkedFrameworks\\": [], \\"frameworkSearchPaths\\": [], \\"headerSearchPaths\\": [], \\"bridgingHeader\\": \\"testHeader\\", \\"configurationFile\\": \\"%S/.obfuscation.yml\\"}\\" > %t-files.json'
 ))
 
 config.substitutions.append((
     '%target-run-files-and-storyboard-json-generation', 
-    'echo \\"{\\"project\\": {\\"rootPath\\": \\"%S\\", \\"projectFilePath\\": \\"testProjectFilePath\\"}, \\"module\\": {\\"name\\": \\"TestModuleName\\", \\"triple\\": \\"x86_64-apple-macosx10.13\\"}, \\"sdk\\": {\\"name\\": \\"%target-sdk-name\\", \\"path\\": \\"%sdk\\"}, \\"sourceFiles\\": [\\"%S/\$FILE.swift\\"], \\"layoutFiles\\": [\\"%S/\$FILE.storyboard\\"], \\"explicitlyLinkedFrameworks\\": [], \\"implicitlyLinkedFrameworks\\": [], \\"frameworkSearchPaths\\": [], \\"headerSearchPaths\\": [], \\"bridgingHeader\\": \\"testHeader\\", \\"configurationFile\\": \\"testConfigurationPath\\"}\\" > %t-files.json'
+    'echo \\"{\\"project\\": {\\"rootPath\\": \\"%S\\", \\"projectFilePath\\": \\"testProjectFilePath\\"}, \\"module\\": {\\"name\\": \\"TestModuleName\\", \\"triple\\": \\"x86_64-apple-macosx10.13\\"}, \\"sdk\\": {\\"name\\": \\"%target-sdk-name\\", \\"path\\": \\"%sdk\\"}, \\"sourceFiles\\": [\\"%S/\$FILE.swift\\"], \\"layoutFiles\\": [\\"%S/\$FILE.storyboard\\"], \\"explicitlyLinkedFrameworks\\": [], \\"implicitlyLinkedFrameworks\\": [], \\"frameworkSearchPaths\\": [], \\"headerSearchPaths\\": [], \\"bridgingHeader\\": \\"testHeader\\", \\"configurationFile\\": \\"%S/.obfuscation.yml\\"}\\" > %t-files.json'
 ))
 
 config.substitutions.append((
     '%target-run-files-and-xib-json-generation', 
-    'echo \\"{\\"project\\": {\\"rootPath\\": \\"%S\\", \\"projectFilePath\\": \\"testProjectFilePath\\"}, \\"module\\": {\\"name\\": \\"TestModuleName\\", \\"triple\\": \\"x86_64-apple-macosx10.13\\"}, \\"sdk\\": {\\"name\\": \\"%target-sdk-name\\", \\"path\\": \\"%sdk\\"}, \\"sourceFiles\\": [\\"%S/\$FILE.swift\\"], \\"layoutFiles\\": [\\"%S/\$FILE.xib\\"], \\"explicitlyLinkedFrameworks\\": [], \\"implicitlyLinkedFrameworks\\": [], \\"frameworkSearchPaths\\": [], \\"headerSearchPaths\\": [], \\"bridgingHeader\\": \\"testHeader\\", \\"configurationFile\\": \\"testConfigurationPath\\"}\\" > %t-files.json'
+    'echo \\"{\\"project\\": {\\"rootPath\\": \\"%S\\", \\"projectFilePath\\": \\"testProjectFilePath\\"}, \\"module\\": {\\"name\\": \\"TestModuleName\\", \\"triple\\": \\"x86_64-apple-macosx10.13\\"}, \\"sdk\\": {\\"name\\": \\"%target-sdk-name\\", \\"path\\": \\"%sdk\\"}, \\"sourceFiles\\": [\\"%S/\$FILE.swift\\"], \\"layoutFiles\\": [\\"%S/\$FILE.xib\\"], \\"explicitlyLinkedFrameworks\\": [], \\"implicitlyLinkedFrameworks\\": [], \\"frameworkSearchPaths\\": [], \\"headerSearchPaths\\": [], \\"bridgingHeader\\": \\"testHeader\\", \\"configurationFile\\": \\"%S/.obfuscation.yml\\"}\\" > %t-files.json'
 ))
 
 config.substitutions.append((
diff --git a/swift/unittests/SwiftObfuscation/FileIOTests.cpp b/swift/unittests/SwiftObfuscation/FileIOTests.cpp
index 2139abaf8a2..9ef0f3afa3d 100644
--- a/swift/unittests/SwiftObfuscation/FileIOTests.cpp
+++ b/swift/unittests/SwiftObfuscation/FileIOTests.cpp
@@ -103,28 +103,30 @@ TEST(ParseJson, SuccessParsingText) {
     std::string ImplicitFramework = "testImplicitFramework";
     std::string FrameworkSearchPath = "testFrameworkSearchPath";
     std::string HeaderSearchPath = "testHeaderSearchPath";
+    std::string ConfigurationFile = "testConfigurationFile";
     std::string BridgingHeader = "testBridgingHeader";
     FakeMemoryBuffer::Payload = "{\r\n  \"project\":{\r\n"
         "\"rootPath\":\"" + RootPath + "\",\r\n"
-        "\"projectFilePath\":\"" + ProjectFilePath + "\"\r\n   },"
+        "\"projectFilePath\":\"" + ProjectFilePath + "\"\r\n},"
         "\"module\":{\r\n"
         "\"name\":\"" + ModuleName + "\",\r\n"
-        "\"triple\": \"" + ModuleTriple + "\"\r\n   },\r\n"
+        "\"triple\": \"" + ModuleTriple + "\"\r\n},\r\n"
         "\"sdk\":{\r\n"
         "\"name\":\"" + SdkName + "\",\r\n"
-        "\"path\":\"" + SdkPath + "\"\r\n   },\r\n"
+        "\"path\":\"" + SdkPath + "\"\r\n},\r\n"
         "\"sourceFiles\":[\r\n"
         "\"" + SourceFileName1 + "\",\r\n"
-        "\"" + SourceFileName2 + "\"\r\n   ],\r\n"
+        "\"" + SourceFileName2 + "\"\r\n],\r\n"
         "\"layoutFiles\":[\r\n"
         "\"" + LayoutFileName1 + "\",\r\n"
-        "\"" + LayoutFileName2 + "\"\r\n   ],\r\n"
+        "\"" + LayoutFileName2 + "\"\r\n],\r\n"
         "\"explicitlyLinkedFrameworks\":[\r\n {\r\n"
         "\"name\":\"" + ExplicitFrameworkName + "\",\r\n"
         "\"path\":\"" + ExplicitFrameworkPath + "\"\r\n }\r\n ],\r\n"
-        "\"implicitlyLinkedFrameworks\":[\r\n \"" + ImplicitFramework + "\"\r\n   ],\r\n"
+        "\"implicitlyLinkedFrameworks\":[\r\n \"" + ImplicitFramework + "\"\r\n],\r\n"
         "\"frameworkSearchPaths\":[\r\n \"" + FrameworkSearchPath + "\"\r\n],\r\n"
         "\"headerSearchPaths\":[\r\n \"" + HeaderSearchPath + "\"\r\n],\r\n"
+        "\"configurationFile\":\"" + ConfigurationFile + "\"\r\n,\r\n"
         "\"bridgingHeader\":\"" + BridgingHeader + "\"\r\n"
         "\r\n}";
     std::string Path = "";
-- 
2.17.1 (Apple Git-112)


From 2541f46dbced42b6f2bbf093da92ce85181d1c7b Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Thu, 22 Mar 2018 19:37:21 +0100
Subject: [PATCH 124/138] Added `verbose` and `hidediagnostics` CLI parameters

Reviewers: krzysztof.siejkowski, michal.zielinski

Reviewed By: krzysztof.siejkowski, michal.zielinski

Subscribers: michal.zielinski, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2891
---
 .../SymbolExtractor/SymbolExtractor.swift     |  2 +-
 swift/test/lit.cfg                            |  2 +-
 .../obfuscator-name-mapper.cpp                | 39 ++++++++++---------
 .../obfuscator-renamer/obfuscator-renamer.cpp | 28 ++++++++-----
 .../obfuscator-symbol-extractor.cpp           | 38 +++++++++---------
 5 files changed, 61 insertions(+), 48 deletions(-)

diff --git a/swift/test/Obfuscation/SymbolExtractor/SymbolExtractor.swift b/swift/test/Obfuscation/SymbolExtractor/SymbolExtractor.swift
index f03f2f1370c..72f08ebc384 100644
--- a/swift/test/Obfuscation/SymbolExtractor/SymbolExtractor.swift
+++ b/swift/test/Obfuscation/SymbolExtractor/SymbolExtractor.swift
@@ -1,5 +1,5 @@
 
 //RUN: echo "{\"project\": {\"rootPath\": \"TestRootPath\", \"projectFilePath\": \"testProjectFilePath\"}, \"module\": {\"name\": \"TestModuleName\", \"triple\": \"x86_64-apple-macosx10.13\"}, \"sdk\": {\"name\": \"%target-sdk-name\", \"path\": \"%sdk\"}, \"sourceFiles\": [\"%S/Inputs\/ViewController.swift\", \"%S/Inputs\/AppDelegate.swift\"], \"layoutFiles\": [], \"explicitlyLinkedFrameworks\": [], \"implicitlyLinkedFrameworks\": [], \"frameworkSearchPaths\": [], \"headerSearchPaths\": [], \"bridgingHeader\": \"\", \"configurationFile\": \"\"}" > %T/files.json
-//RUN: obfuscator-symbol-extractor -filesjson %T/files.json -symbolsjson %t -printdiagnostics
+//RUN: obfuscator-symbol-extractor -filesjson %T/files.json -symbolsjson %t
 //RUN: diff -w %S/Inputs/expectedSymbols.json %t
 
diff --git a/swift/test/lit.cfg b/swift/test/lit.cfg
index 584d931c4a2..c1fdeb66522 100644
--- a/swift/test/lit.cfg
+++ b/swift/test/lit.cfg
@@ -426,7 +426,7 @@ config.substitutions.append((
 
 config.substitutions.append((
     '%target-run-symbol-extractor', 
-    '%obfuscator-symbol-extractor -filesjson %t-files.json -symbolsjson %t-symbols.json -printdiagnostics'
+    '%obfuscator-symbol-extractor -filesjson %t-files.json -symbolsjson %t-symbols.json'
 ))
 
 config.substitutions.append((
diff --git a/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp b/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
index 9c95d7a6d1f..998ba41f1b7 100644
--- a/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
+++ b/swift/tools/obfuscator-name-mapper/obfuscator-name-mapper.cpp
@@ -40,16 +40,12 @@ NameMappingStrategy("namemappingstrategy",
                                  "Generate minified identifiers")
                     ),
                 llvm::cl::cat(ObfuscatorNameMapper));
-}
-
-void printRenamings(const std::vector<SymbolRenaming> &Renamings) {
-  for (const auto &Renaming : Renamings) {
-    llvm::outs()
-      << "identifier: " << Renaming.Identifier << '\n'
-      << "originalName: " << Renaming.OriginalName << '\n'
-      << "obfuscatedName: " << Renaming.ObfuscatedName << '\n'
-      << "module: " << Renaming.Module << '\n';
-  }
+  
+static llvm::cl::opt<bool>
+Verbose("verbose",
+        llvm::cl::init(false),
+        llvm::cl::desc("Print debug info."),
+        llvm::cl::cat(ObfuscatorNameMapper));
 }
 
 int main(int argc, char *argv[]) {
@@ -90,16 +86,23 @@ int main(int argc, char *argv[]) {
     ExitOnError(std::move(Error));
   }
   auto Renamings = RenamingsOrError.get();
-
-  // Prints only to the output, not to file
-  printRenamings(Renamings.Symbols);
-
-  // Writes the renaming proposals to Renames.json file. Saves at given path.
+  
   std::string PathToOutput = options::RenamesJsonPath;
-  FileFactory<llvm::raw_fd_ostream> Factory;
-  if (auto Error = writeToPath(Renamings, PathToOutput, Factory, llvm::outs())) {
-    ExitOnError(std::move(Error));
+  
+  llvm::raw_ostream *DebugStream;
+  if (options::Verbose) {
+    DebugStream = &llvm::outs();
+  } else {
+    DebugStream = new llvm::raw_null_ostream();
   }
   
+  // Writes the renaming proposals to Renames.json file. Saves at given path.
+  FileFactory<llvm::raw_fd_ostream> Factory;
+  auto WriteErrorCode = writeToPath(Renamings,
+                                    PathToOutput,
+                                    Factory,
+                                    *DebugStream);
+  ExitOnError(std::move(WriteErrorCode));
+  
   return 0;
 }
diff --git a/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp b/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
index e96a650c068..1e1a84da274 100644
--- a/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
+++ b/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
@@ -29,11 +29,17 @@ ObfuscatedProjectPath("obfuscatedproject",
                       llvm::cl::cat(ObfuscatorRenamer));
 
 static llvm::cl::opt<bool>
-PrintDiagnostics("printdiagnostics",
-                 llvm::cl::init(false),
-                 llvm::cl::desc("Print diagnostic informations from "
-                                "Swift compiler"),
-                 llvm::cl::cat(ObfuscatorRenamer));
+HideDiagnostics("hidediagnostics",
+                llvm::cl::init(false),
+                llvm::cl::desc("Don't print diagnostic informations from "
+                               "Swift compiler"),
+                llvm::cl::cat(ObfuscatorRenamer));
+  
+static llvm::cl::opt<bool>
+Verbose("verbose",
+        llvm::cl::init(false),
+        llvm::cl::desc("Print debug info."),
+        llvm::cl::cat(ObfuscatorRenamer));
   
 }
 
@@ -117,10 +123,10 @@ int main(int argc, char *argv[]) {
   llvm::raw_ostream *DiagnosticStream;
   // Decides if and where the logs from the compiler will be printed.
   // If llvm::raw_null_ostream is used, they're just discarded.
-  if (options::PrintDiagnostics) {
-    DiagnosticStream = &llvm::outs();
-  } else {
+  if (options::HideDiagnostics) {
     DiagnosticStream = new llvm::raw_null_ostream();
+  } else {
+    DiagnosticStream = &llvm::outs();
   }
 
   // This is the place that the actual renaming is performed.
@@ -135,8 +141,10 @@ int main(int argc, char *argv[]) {
     ExitOnError(std::move(Error));
   }
 
-  // Prints only to the output, not to file
-  printObfuscatedFiles(FilesOrError.get());
+  if (options::Verbose) {
+    // Prints only to the output, not to file
+    printObfuscatedFiles(FilesOrError.get());
+  }
   
   return 0;
 }
diff --git a/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp b/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
index 555ec638a09..97d65e093ee 100644
--- a/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
+++ b/swift/tools/obfuscator-symbol-extractor/obfuscator-symbol-extractor.cpp
@@ -23,23 +23,20 @@ SymbolJsonPath("symbolsjson",
                llvm::cl::cat(ObfuscatorSymbolExtractor));
   
 static llvm::cl::opt<bool>
-PrintDiagnostics("printdiagnostics",
+HideDiagnostics("hidediagnostics",
                  llvm::cl::init(false),
-                 llvm::cl::desc("Print diagnostic informations from "
+                 llvm::cl::desc("Don't print diagnostic informations from "
                                 "Swift compiler"),
                  llvm::cl::cat(ObfuscatorSymbolExtractor));
+  
+static llvm::cl::opt<bool>
+Verbose("verbose",
+        llvm::cl::init(false),
+        llvm::cl::desc("Print debug info."),
+        llvm::cl::cat(ObfuscatorSymbolExtractor));
 
 }
 
-void printSymbols(const std::vector<Symbol> &Symbols) {
-  for (const auto &Symbol : Symbols) {
-    llvm::outs()
-      << "identifier: " << Symbol.Identifier << '\n'
-      << "name: " << Symbol.Name << '\n'
-      << "module: " << Symbol.Module << '\n';
-  }
-}
-
 // This function isn't referenced outside its translation unit, but it
 // can't use the "static" keyword because its address is used for
 // getMainExecutable (since some platforms don't support taking the
@@ -86,10 +83,10 @@ int main(int argc, char *argv[]) {
   llvm::raw_ostream *DiagnosticStream;
   // Decides if and where the logs from the compiler will be printed.
   // If llvm::raw_null_ostream is used, they're just discarded.
-  if (options::PrintDiagnostics) {
-    DiagnosticStream = &llvm::outs();
-  } else {
+  if (options::HideDiagnostics) {
     DiagnosticStream = new llvm::raw_null_ostream();
+  } else {
+    DiagnosticStream = &llvm::outs();
   }
 
   // This is the place that the actual symbol extraction is performed.
@@ -101,21 +98,26 @@ int main(int argc, char *argv[]) {
     ExitOnError(std::move(Error));
   }
 
-  // Prints only to the output, not to file
-  printSymbols(SymbolsOrError.get().Symbols);
-
   if (options::SymbolJsonPath.empty()) {
     llvm::errs() << "there is no path to write extracted symbols to" << '\n';
     return 1;
   }
+  
   std::string PathToOutput = options::SymbolJsonPath;
 
+  llvm::raw_ostream *DebugStream;
+  if (options::Verbose) {
+    DebugStream = &llvm::outs();
+  } else {
+    DebugStream = new llvm::raw_null_ostream();
+  }
+  
   // Writes the extracted symbols to Symbols.json file. Saves at given path.
   FileFactory<llvm::raw_fd_ostream> Factory;
   auto WriteErrorCode = writeToPath(SymbolsOrError.get(),
                                     PathToOutput,
                                     Factory,
-                                    llvm::outs());
+                                    *DebugStream);
   ExitOnError(std::move(WriteErrorCode));
 
   return 0;
-- 
2.17.1 (Apple Git-112)


From 7d4d0729296ddad7470a7e94b696a3e05e0783b6 Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Thu, 29 Mar 2018 12:13:56 +0200
Subject: [PATCH 125/138] research doc

Reviewers: krzysztof.siejkowski, jerzy.kleszcz

Reviewed By: jerzy.kleszcz

Differential Revision: https://phabricator.polidea.com/D2901
---
 .../BitcodeAndSymbols-ImportantTopics.md      | 42 +++++++++++++++++++
 1 file changed, 42 insertions(+)
 create mode 100644 Documentation/BitcodeAndSymbols-ImportantTopics.md

diff --git a/Documentation/BitcodeAndSymbols-ImportantTopics.md b/Documentation/BitcodeAndSymbols-ImportantTopics.md
new file mode 100644
index 00000000000..05a70fb007d
--- /dev/null
+++ b/Documentation/BitcodeAndSymbols-ImportantTopics.md
@@ -0,0 +1,42 @@
+# Important topics for Bitcode, Symbols and other stuff
+
+The goal of this document is to be a bag of important ideas, concepts and discoveries related to system and other low level things. Currently these include:
+
+1. [What is Bitcode and how does it affect obfuscation?](#bitcode)
+2. [How can someone disassemble my app?](#jailbreak)
+3. [What does Xcode's "Strip Swift Symbols" option do?](#strip)
+4. [What are dSYM files?](#dsym)
+5. [How can I symbolicate crash logs from an obfuscated app?](#symbolicate)
+6. [Resources](#resources)
+
+# <a name="bitcode"></a> Bitcode
+
+TODO
+
+# <a name="jailbreak"></a> Disassembling an app
+
+TODO
+
+# <a name="strip"></a> Stripping Swift symbols
+
+TODO
+
+# <a name="dsym"></a> dSYM files
+
+dSYM files contain debug symbols of an app and allow for [symbolicating crash logs](#symbolicate).
+
+That means that debug symbols can be removed from a release build of an app reducing its binary size and making it harder to reverse engineer.
+
+Under the hood dSYM files are using [DWARF](http://dwarfstd.org/) format. It allows the compiler to tell the debugger how the original source code relates to the binary.
+
+# <a name="symbolicate"></a> Symbolicating crash logs
+
+Symbolication is the process of replacement of addresses in crash logs with human readable values. Without first symbolicating a crash report it is difficult to determine where the crash occurred.
+
+In order to perform symbolication a dSYM file is needed. The process can be performed in Xcode or it can be done by services like Crashlytics ([you have to provide them with a proper dSYM file for your app first](https://docs.fabric.io/apple/crashlytics/missing-dsyms.html#upload-symbols)).
+
+Unfortunately current version of the Sirius Swift Obfuscator doesn't support generating non-obfuscated dSYM files and doesn't provide a tool to deobfuscate crash logs. We're aware that this is an important feature and will provide such tool in the future. It's technically challenging because of the complexity of the [DWARF](http://dwarfstd.org/) format used by dSYM files.
+
+# <a name="resources"></a> Resources
+
+You can find more detailed information about Bitcode, dSYM files and crash log symbolication in an [Apple technical note TN2151](#https://developer.apple.com/library/content/technotes/tn2151/_index.html).
-- 
2.17.1 (Apple Git-112)


From 2ffc2ada79a1108e5a614a429c719d35b6bc4a21 Mon Sep 17 00:00:00 2001
From: Michal Zielinski <michal.zielinski@polidea.com>
Date: Wed, 28 Mar 2018 11:01:20 +0200
Subject: [PATCH 126/138] Obfuscation in place

Reviewers: jerzy.kleszcz, krzysztof.siejkowski

Reviewed By: jerzy.kleszcz, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2898
---
 README.md                                        | 12 +++++++-----
 swift/include/swift/Obfuscation/Renaming.h       |  3 +++
 swift/lib/Obfuscation/Renaming.cpp               |  9 ++++++---
 .../obfuscator-renamer/obfuscator-renamer.cpp    | 16 ++++++++++++++--
 4 files changed, 30 insertions(+), 10 deletions(-)

diff --git a/README.md b/README.md
index 456fc46f1cd..653a6e501a7 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,6 @@
 # Symbol Extractor, Name Mapper and Renamer
 
-Repository contains the Swift compiler fork with three additional tools and one additional library added. 
+Repository contains the Swift compiler fork with three additional tools and one additional library added.
 
 The tools are:
 
@@ -28,7 +28,7 @@ It performs the analysis of Swift source code files and identifies the symbols t
 $ obfuscator-symbol-extractor -filesjson <path-to-input-files-json> -symbolsjson <path-to-output-symbols-json>
 ```
 
-where 
+where
 
 `<path-to-input-files-json>` is a path to `Files.json` that contains the data required for performing the analysis of Swift source code. This parameter is required.
 
@@ -53,9 +53,9 @@ The output data format is called `Symbols.json` and presented below:
 }
 ```
 
-`symbols` is a list of objects that contains symbol identifier and name. 
+`symbols` is a list of objects that contains symbol identifier and name.
 
-`name` is directly corresponding to the actual string defined in the Swift source code. This string will be replaced by the `Renamer`. 
+`name` is directly corresponding to the actual string defined in the Swift source code. This string will be replaced by the `Renamer`.
 
 `identifier` contains all the information required to uniquely identify the given symbol in the source code. It will be used by `Renamer` to decide whether the symbol it comes across should be renamed or not.
 
@@ -139,6 +139,9 @@ where
 
 `<path-to-directory-for-obfuscated-project>` is the path to the directory that the newly generated obfuscated Swift source code files will be written to, as well as the new project.
 
+In case when project should be obfuscated in place (without making a copy), `-inplace` argument can be used instead of `-obfuscatedproject`.
+
+
 ## Data formats
 
 The input data formats are `Files.json` and `Renames.json` and are described in the [SymbolExtractor data formats section](#data-formats) and [NameMapper data formats section](#data-formats-1).
@@ -201,4 +204,3 @@ In the alphabetical order:
 * [Krzysztof Siejkowski](krzysztof.siejkowski@polidea.com)
 * [Jakub Sowa](jakub.sowa@polidea.com)
 * [Michał Zieliński](michal.zielinski@polidea.com)
-
diff --git a/swift/include/swift/Obfuscation/Renaming.h b/swift/include/swift/Obfuscation/Renaming.h
index 240e11412b0..11c49005d8b 100644
--- a/swift/include/swift/Obfuscation/Renaming.h
+++ b/swift/include/swift/Obfuscation/Renaming.h
@@ -49,6 +49,8 @@ using FilesList = std::vector<std::pair<std::string, std::string>>;
 /// contains the new name.
 /// \param ObfuscatedProjectPath Path where the project copy will be created
 /// and renaming will be performed.
+/// \param ObfuscateInPlace if true then obfuscation will be performed on
+/// an original project (without making a copy).
 /// \param DiagnosticStream Stream for writing the diagnostic information into.
 ///
 /// \returns List of project files that were affected by the renaming.
@@ -58,6 +60,7 @@ performRenaming(std::string MainExecutablePath,
                 ObfuscationConfiguration &&ObfuscationConfiguration,
                 const RenamesJson &RenamesJson,
                 std::string ObfuscatedProjectPath,
+                bool ObfuscateInPlace,
                 llvm::raw_ostream &DiagnosticStream);
 
 } //namespace obfuscation
diff --git a/swift/lib/Obfuscation/Renaming.cpp b/swift/lib/Obfuscation/Renaming.cpp
index 63f16705216..456a4cc73d2 100644
--- a/swift/lib/Obfuscation/Renaming.cpp
+++ b/swift/lib/Obfuscation/Renaming.cpp
@@ -174,6 +174,7 @@ performRenaming(std::string MainExecutablePath,
                 ObfuscationConfiguration &&ObfuscationConfiguration,
                 const RenamesJson &RenamesJson,
                 std::string ObfuscatedProjectPath,
+                bool ObfuscateInPlace,
                 llvm::raw_ostream &DiagnosticStream) {
   
   CompilerInstance CI;
@@ -184,9 +185,11 @@ performRenaming(std::string MainExecutablePath,
     return std::move(Error);
   }
   
-  if (auto Error = copyProject(FilesJson.Project.RootPath,
-                               ObfuscatedProjectPath)) {
-    return std::move(Error);
+  if(!ObfuscateInPlace) {
+    if (auto Error = copyProject(FilesJson.Project.RootPath,
+                                 ObfuscatedProjectPath)) {
+      return std::move(Error);
+    }
   }
   
   FilesList Files;
diff --git a/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp b/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
index 1e1a84da274..7ec24cc6a69 100644
--- a/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
+++ b/swift/tools/obfuscator-renamer/obfuscator-renamer.cpp
@@ -41,6 +41,12 @@ Verbose("verbose",
         llvm::cl::desc("Print debug info."),
         llvm::cl::cat(ObfuscatorRenamer));
   
+static llvm::cl::opt<bool>
+InPlace("inplace",
+        llvm::cl::init(false),
+        llvm::cl::desc("Obfuscate project in place "
+                       "(without making a copy)."),
+        llvm::cl::cat(ObfuscatorRenamer));
 }
 
 void printObfuscatedFiles(const FilesList &Files) {
@@ -83,7 +89,7 @@ int main(int argc, char *argv[]) {
     llvm::errs() << "cannot find Renames json file" << '\n';
     return 1;
   }
-  if (options::ObfuscatedProjectPath.empty()) {
+  if (!options::InPlace && options::ObfuscatedProjectPath.empty()) {
     llvm::errs() << "cannot find path to the obfuscated project" << '\n';
     return 1;
   }
@@ -129,13 +135,19 @@ int main(int argc, char *argv[]) {
     DiagnosticStream = &llvm::outs();
   }
 
+  std::string ProjectPath = options::ObfuscatedProjectPath;
+  if(options::InPlace) {
+    ProjectPath = FilesJsonOrError.get().Project.RootPath;
+  }
+  
   // This is the place that the actual renaming is performed.
   // The logic for renaming is in the swiftObfuscation library.
   auto FilesOrError = performRenaming(MainExecutablePath,
                                       FilesJsonOrError.get(),
                                       std::move(ObfuscationConfiguration),
                                       RenamesJsonOrError.get(),
-                                      options::ObfuscatedProjectPath,
+                                      ProjectPath,
+                                      options::InPlace,
                                       *DiagnosticStream);
   if (auto Error = FilesOrError.takeError()) {
     ExitOnError(std::move(Error));
-- 
2.17.1 (Apple Git-112)


From 60367da7a60eeed4f9b424970e3712e62045eaba Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Thu, 29 Mar 2018 14:04:27 +0200
Subject: [PATCH 127/138] Added disassembling and Strip Swift Symbols research
 notes

Reviewers: michal.zielinski, jerzy.kleszcz

Reviewed By: michal.zielinski

Subscribers: michal.zielinski, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2902
---
 Documentation/BitcodeAndSymbols-ImportantTopics.md | 11 +++++++++--
 1 file changed, 9 insertions(+), 2 deletions(-)

diff --git a/Documentation/BitcodeAndSymbols-ImportantTopics.md b/Documentation/BitcodeAndSymbols-ImportantTopics.md
index 05a70fb007d..9bafb4ab518 100644
--- a/Documentation/BitcodeAndSymbols-ImportantTopics.md
+++ b/Documentation/BitcodeAndSymbols-ImportantTopics.md
@@ -15,11 +15,18 @@ TODO
 
 # <a name="jailbreak"></a> Disassembling an app
 
-TODO
+This section describes the example process of dissasembling an iOS app that is available in App Store. The process might require different software for each step, depending on tools availability for specific iOS version and device.
+
+Caution: the process involve jailbreaking the device which is strongly advised against.
+
+1. Download the app from the App Store.
+2. Jailbreak the device. For iOS versions 11.0-11.1.2 this can be done using [Electra](https://coolstar.org/electra/).
+3. The app bundle stored on the device is protected by [DRM system](https://en.wikipedia.org/wiki/Digital_rights_management) - the app's symbols that could be retrieved from app's binary are encrypted. The binary is decrypted upon running the app, when it's loaded to RAM. Retrieving the decrypted .ipa from the device can be done using [frida-ios-dump](https://github.com/AloneMonkey/frida-ios-dump).
+4. Dissasembling the app's mach-o executable can be done using [Hopper](https://www.hopperapp.com).
 
 # <a name="strip"></a> Stripping Swift symbols
 
-TODO
+Stripping Swift symbols from the mach-o executable can be achieved by turning on the `Strip Swift Symbols` flag (it is enabled by deefault). The flag can be found in Xcode build settings (Build Settings > Deployment > Strip Swift Symbols) and in archive process settings before sending the app to App Store review. With this flag only the swift symbols that are not accesible from ObjectiveC runtime are stripped from the binary.
 
 # <a name="dsym"></a> dSYM files
 
-- 
2.17.1 (Apple Git-112)


From f365543fd49f562455d57d2e9ce66004e4e42213 Mon Sep 17 00:00:00 2001
From: "krzysztof.siejkowski" <krzysztof.siejkowski@polidea.com>
Date: Tue, 3 Apr 2018 14:05:57 +0200
Subject: [PATCH 128/138] Refactor

Reviewers: jerzy.kleszcz, michal.zielinski

Reviewed By: michal.zielinski

Subscribers: jerzy.kleszcz, michal.zielinski

Differential Revision: https://phabricator.polidea.com/D2903
---
 swift/include/swift/Obfuscation/Collector.h   |  32 +
 .../Obfuscation/CompilerInfrastructure.h      |  20 +-
 .../swift/Obfuscation/ConfigurationExcluder.h |  39 -
 .../swift/Obfuscation/DataStructures.h        |  81 ++-
 .../swift/Obfuscation/DeclarationParser.h     |  42 --
 .../Obfuscation/DeclarationParsingUtils.h     |  83 ---
 swift/include/swift/Obfuscation/Excluder.h    |  65 +-
 .../swift/Obfuscation/ExpressionParser.h      |  20 -
 .../swift/Obfuscation/ExtensionExcluder.h     |  19 -
 swift/include/swift/Obfuscation/Extractor.h   | 176 +++++
 .../Obfuscation/FunctionDeclarationParser.h   |  31 -
 .../GlobalCollectedSymbolsUpdater.h           |  98 +++
 swift/include/swift/Obfuscation/Includer.h    |  81 +++
 .../swift/Obfuscation/NSManagedExcluder.h     |  19 -
 .../NominalTypeDeclarationParser.h            |  16 -
 .../swift/Obfuscation/OperatorParser.h        |  43 --
 .../Obfuscation/ParameterDeclarationParser.h  |  57 --
 swift/include/swift/Obfuscation/Processor.h   |  77 ++
 .../swift/Obfuscation/SourceFileWalker.h      |  46 --
 .../swift/Obfuscation/SymbolGenerator.h       | 113 +++
 .../Obfuscation/SymbolsWalkerAndCollector.h   |  88 +++
 .../Obfuscation/TypeRepresentationParser.h    |  40 -
 swift/include/swift/Obfuscation/Utils.h       |   2 +
 .../Obfuscation/VariableDeclarationParser.h   |  29 -
 .../swift/Obfuscation/WhereClauseParser.h     |  36 -
 swift/lib/Obfuscation/CMakeLists.txt          |  22 +-
 swift/lib/Obfuscation/Collector.cpp           |  52 ++
 .../Obfuscation/CompilerInfrastructure.cpp    |  20 +-
 .../lib/Obfuscation/ConfigurationExcluder.cpp | 152 ----
 swift/lib/Obfuscation/DataStructures.cpp      | 175 ++++-
 swift/lib/Obfuscation/DeclarationParser.cpp   | 133 ----
 .../Obfuscation/DeclarationParsingUtils.cpp   | 222 ------
 swift/lib/Obfuscation/Excluder.cpp            | 217 +++++-
 swift/lib/Obfuscation/ExpressionParser.cpp    | 273 -------
 swift/lib/Obfuscation/ExtensionExcluder.cpp   |  86 ---
 swift/lib/Obfuscation/Extractor.cpp           | 686 ++++++++++++++++++
 .../Obfuscation/FunctionDeclarationParser.cpp | 456 ------------
 .../GlobalCollectedSymbolsUpdater.cpp         | 270 +++++++
 swift/lib/Obfuscation/Includer.cpp            | 182 +++++
 swift/lib/Obfuscation/NSManagedExcluder.cpp   |  38 -
 .../NominalTypeDeclarationParser.cpp          |  29 -
 swift/lib/Obfuscation/OperatorParser.cpp      |  64 --
 .../ParameterDeclarationParser.cpp            | 267 -------
 swift/lib/Obfuscation/Processor.cpp           | 411 +++++++++++
 swift/lib/Obfuscation/Renaming.cpp            |  59 +-
 swift/lib/Obfuscation/SourceFileWalker.cpp    | 129 ----
 swift/lib/Obfuscation/SymbolExtracting.cpp    |  52 +-
 swift/lib/Obfuscation/SymbolGenerator.cpp     | 387 ++++++++++
 .../Obfuscation/SymbolsWalkerAndCollector.cpp | 274 +++++++
 .../Obfuscation/TypeRepresentationParser.cpp  | 149 ----
 swift/lib/Obfuscation/Utils.cpp               |  15 +
 .../Obfuscation/VariableDeclarationParser.cpp | 123 ----
 swift/lib/Obfuscation/WhereClauseParser.cpp   | 111 ---
 .../Expected/FunctionParameterNames.swift     |  15 +
 .../FunctionParameterNames.swift              |  15 +
 .../Operators/Expected/Operators.swift        |   2 +-
 .../FullProcess/Operators/Operators.swift     |   1 -
 57 files changed, 3506 insertions(+), 2934 deletions(-)
 create mode 100644 swift/include/swift/Obfuscation/Collector.h
 delete mode 100644 swift/include/swift/Obfuscation/ConfigurationExcluder.h
 delete mode 100644 swift/include/swift/Obfuscation/DeclarationParser.h
 delete mode 100644 swift/include/swift/Obfuscation/DeclarationParsingUtils.h
 delete mode 100644 swift/include/swift/Obfuscation/ExpressionParser.h
 delete mode 100644 swift/include/swift/Obfuscation/ExtensionExcluder.h
 create mode 100644 swift/include/swift/Obfuscation/Extractor.h
 delete mode 100644 swift/include/swift/Obfuscation/FunctionDeclarationParser.h
 create mode 100644 swift/include/swift/Obfuscation/GlobalCollectedSymbolsUpdater.h
 create mode 100644 swift/include/swift/Obfuscation/Includer.h
 delete mode 100644 swift/include/swift/Obfuscation/NSManagedExcluder.h
 delete mode 100644 swift/include/swift/Obfuscation/NominalTypeDeclarationParser.h
 delete mode 100644 swift/include/swift/Obfuscation/OperatorParser.h
 delete mode 100644 swift/include/swift/Obfuscation/ParameterDeclarationParser.h
 create mode 100644 swift/include/swift/Obfuscation/Processor.h
 delete mode 100644 swift/include/swift/Obfuscation/SourceFileWalker.h
 create mode 100644 swift/include/swift/Obfuscation/SymbolGenerator.h
 create mode 100644 swift/include/swift/Obfuscation/SymbolsWalkerAndCollector.h
 delete mode 100644 swift/include/swift/Obfuscation/TypeRepresentationParser.h
 delete mode 100644 swift/include/swift/Obfuscation/VariableDeclarationParser.h
 delete mode 100644 swift/include/swift/Obfuscation/WhereClauseParser.h
 create mode 100644 swift/lib/Obfuscation/Collector.cpp
 delete mode 100644 swift/lib/Obfuscation/ConfigurationExcluder.cpp
 delete mode 100644 swift/lib/Obfuscation/DeclarationParser.cpp
 delete mode 100644 swift/lib/Obfuscation/DeclarationParsingUtils.cpp
 delete mode 100644 swift/lib/Obfuscation/ExpressionParser.cpp
 delete mode 100644 swift/lib/Obfuscation/ExtensionExcluder.cpp
 create mode 100644 swift/lib/Obfuscation/Extractor.cpp
 delete mode 100644 swift/lib/Obfuscation/FunctionDeclarationParser.cpp
 create mode 100644 swift/lib/Obfuscation/GlobalCollectedSymbolsUpdater.cpp
 create mode 100644 swift/lib/Obfuscation/Includer.cpp
 delete mode 100644 swift/lib/Obfuscation/NSManagedExcluder.cpp
 delete mode 100644 swift/lib/Obfuscation/NominalTypeDeclarationParser.cpp
 delete mode 100644 swift/lib/Obfuscation/OperatorParser.cpp
 delete mode 100644 swift/lib/Obfuscation/ParameterDeclarationParser.cpp
 create mode 100644 swift/lib/Obfuscation/Processor.cpp
 delete mode 100644 swift/lib/Obfuscation/SourceFileWalker.cpp
 create mode 100644 swift/lib/Obfuscation/SymbolGenerator.cpp
 create mode 100644 swift/lib/Obfuscation/SymbolsWalkerAndCollector.cpp
 delete mode 100644 swift/lib/Obfuscation/TypeRepresentationParser.cpp
 delete mode 100644 swift/lib/Obfuscation/VariableDeclarationParser.cpp
 delete mode 100644 swift/lib/Obfuscation/WhereClauseParser.cpp

diff --git a/swift/include/swift/Obfuscation/Collector.h b/swift/include/swift/Obfuscation/Collector.h
new file mode 100644
index 00000000000..be574ceadfe
--- /dev/null
+++ b/swift/include/swift/Obfuscation/Collector.h
@@ -0,0 +1,32 @@
+#ifndef Collector_h
+#define Collector_h
+
+#include "swift/Obfuscation/DataStructures.h"
+#include "swift/Obfuscation/Includer.h"
+#include "swift/Obfuscation/SymbolGenerator.h"
+
+#include <vector>
+
+namespace swift {
+namespace obfuscation {
+
+class Collector {
+
+private:
+  std::unique_ptr<class Includer> Includer;
+  std::unique_ptr<class SymbolGenerator> SymbolGenerator;
+
+public:
+
+  Collector(std::unique_ptr<class Includer>,
+            std::unique_ptr<class SymbolGenerator>);
+
+  std::vector<DeclWithSymbolWithRange> collectFrom(DeclWithRange &);
+  std::vector<DeclWithSymbolWithRange> collectFrom(DeclWithRange &&);
+
+};
+
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* Collector_h */
diff --git a/swift/include/swift/Obfuscation/CompilerInfrastructure.h b/swift/include/swift/Obfuscation/CompilerInfrastructure.h
index 13e427234f1..36834a2b250 100644
--- a/swift/include/swift/Obfuscation/CompilerInfrastructure.h
+++ b/swift/include/swift/Obfuscation/CompilerInfrastructure.h
@@ -18,25 +18,27 @@ namespace obfuscation {
 ///
 /// Typical usage:
 /// \code
-/// auto FilesJsonOrError = parseJson<FilesJson>(PathToJson);
-/// if (auto Error = setupCompilerInstance(CI, FilesJson, MainExecutablePath)) {
+/// auto CompilerInstanceOrError =
+///   createCompilerInstance(FilesJson, MainExecutablePath);
+/// if (auto Error = CompilerInstanceOrError) {
 ///   return std::move(Error);
 /// }
+/// auto CompilerInstance = CompilerInstanceOrError.get();
 /// \endcode
 ///
-/// \param CompilerInstance - compiler instance to setup.
+/// \param FilesJson - FilesJson structure containing data required
+///                    for compilation.
 ///
 /// \param MainExecutablePath - string containing path to main executable used
 /// during compiler isntance 
 ///
 /// \returns llvm::Error::success when setup finished correctly or
 /// error object describing cause of fail.
-llvm::Error
-setupCompilerInstance(CompilerInstance &CompilerInstance,
-                      const FilesJson &FilesJson,
-                      std::string MainExecutablePath,
-                      llvm::raw_ostream &LogStream);
-  
+llvm::Expected<std::unique_ptr<CompilerInstance>>
+createCompilerInstance(const FilesJson &FilesJson,
+                       std::string MainExecutablePath,
+                       llvm::raw_ostream &LogStream);
+
 } //namespace obfuscation
 } //namespace swift
 
diff --git a/swift/include/swift/Obfuscation/ConfigurationExcluder.h b/swift/include/swift/Obfuscation/ConfigurationExcluder.h
deleted file mode 100644
index 87a62728631..00000000000
--- a/swift/include/swift/Obfuscation/ConfigurationExcluder.h
+++ /dev/null
@@ -1,39 +0,0 @@
-#ifndef ConfigurationExcluder_h
-#define ConfigurationExcluder_h
-
-#include "swift/Obfuscation/DataStructures.h"
-#include "swift/Obfuscation/Excluder.h"
-
-namespace swift {
-namespace obfuscation {
-
-class ConfigurationExcluder: public Excluder {
-
-private:
-
-  ObfuscationConfiguration Configuration;
-
-  void excludeIfNeeded(Decl *Declaration,
-                       const std::pair<const ClassDecl *, std::string> &DeclarationAndModule,
-                       const InheritanceExclusion *ExcludedType);
-
-  void handleTypeExclusion(const TypeExclusion *Exclusion, Decl *Declaration);
-
-  void handleInheritanceExclusion(const InheritanceExclusion *Exclusion,
-                                  Decl *Declaration);
-
-  void handleConformanceExclusion(const ConformanceExclusion *Exclusion,
-                                  Decl *Declaration);
-
-public:
-
-  ConfigurationExcluder(ObfuscationConfiguration&&);
-  
-  void identifyExclusions(Decl *Declaration);
-};
-
-
-} // namespace obfuscation
-} // namespace swift
-
-#endif /* ConfigurationExcluder_h */
diff --git a/swift/include/swift/Obfuscation/DataStructures.h b/swift/include/swift/Obfuscation/DataStructures.h
index c6075f95fb4..4f7dbdf3c11 100644
--- a/swift/include/swift/Obfuscation/DataStructures.h
+++ b/swift/include/swift/Obfuscation/DataStructures.h
@@ -101,7 +101,8 @@ struct SymbolRenaming {
          const std::string &ObfuscatedName,
          const std::string &Module,
          SymbolType Type);
-  
+
+  bool operator< (const SymbolRenaming &Right) const;
   bool operator== (const SymbolRenaming &Right) const;
 };
 
@@ -169,7 +170,7 @@ struct ObfuscationConfiguration {
   ObfuscationConfiguration& operator=(const ObfuscationConfiguration &) = delete;
   ObfuscationConfiguration& operator=(ObfuscationConfiguration &&) = default;
 };
-  
+
 /// SymbolWithRange - struct for linking the symbol identified in the Swift
 /// source code with the range in which it was encountered.
 struct SymbolWithRange {
@@ -187,26 +188,83 @@ struct SymbolWithRange {
   bool operator== (const SymbolWithRange &Right) const;
 };
 
-struct IndexedSymbolWithRange {
+enum DeclarationProcessingContext {
+  NoContext,
+
+  FunctionCallAttribute
+};
+
+struct DeclWithRange {
+  Decl *Declaration;
+  CharSourceRange Range;
+  DeclarationProcessingContext Context;
+
+  /// @brief Trivial memberwise-like constructor
+  DeclWithRange(Decl* Declaration, const CharSourceRange &Range);
+
+  bool operator< (const DeclWithRange &Right) const;
+
+  bool operator== (const DeclWithRange &Right) const;
+};
+
+struct DeclWithSymbolWithRange {
+  Decl *Declaration;
+  Symbol Symbol;
+  CharSourceRange Range;
+
+  /// @brief Trivial memberwise-like constructor
+  DeclWithSymbolWithRange(Decl* Declaration,
+                          const SymbolWithRange &SymbolAndRange);
+
+  DeclWithSymbolWithRange(const DeclWithRange &DeclAndRange,
+                          const struct Symbol &Symbol);
+
+  DeclWithSymbolWithRange(Decl *Declaration,
+                          const struct Symbol &Symbol,
+                          CharSourceRange Range);
+
+  bool operator< (const DeclWithSymbolWithRange &Right) const;
+
+  bool operator== (const DeclWithSymbolWithRange &Right) const;
+};
+
+template<typename T>
+using VectorOfExpected = std::vector<llvm::Expected<T>>;
+
+using DeclsWithRangesOrErrors = VectorOfExpected<DeclWithRange>;
+
+using DeclsWithSymbolsWithRangesOrErrors =
+  VectorOfExpected<DeclWithSymbolWithRange>;
+
+template<typename T>
+VectorOfExpected<T> wrapInVector(T &);
+template<typename T>
+VectorOfExpected<T> wrapInVector(T &&);
+template<typename T>
+VectorOfExpected<T> wrapInVector(llvm::Error &&);
+
+struct IndexedDeclWithSymbolWithRange {
   int Index;
-  SymbolWithRange SymbolWithRange;
+  Decl *Declaration;
+  Symbol Symbol;
+  CharSourceRange Range;
 
   /// @brief Trivial memberwise-like constructor
-  IndexedSymbolWithRange(const int Index,
-                         const struct SymbolWithRange &SymbolWithRange);
+  IndexedDeclWithSymbolWithRange(const int Index,
+                                 const DeclWithSymbolWithRange &DeclAndSymbolAndRange);
 
   /// @brief Comparison required for containing IndexedSymbolWithRange in sets.
   /// It's taking only symbol into consideration, not range nor index.
   struct SymbolCompare {
-    bool operator() (const IndexedSymbolWithRange& Left,
-                     const IndexedSymbolWithRange& Right) const;
+    bool operator() (const IndexedDeclWithSymbolWithRange& Left,
+                     const IndexedDeclWithSymbolWithRange& Right) const;
   };
 
   /// @brief Comparison required for containing IndexedSymbolWithRange in sets.
   /// It's taking only symbol with range into consideration, not index.
   struct SymbolWithRangeCompare {
-    bool operator() (const IndexedSymbolWithRange& Left,
-                     const IndexedSymbolWithRange& Right) const;
+    bool operator() (const IndexedDeclWithSymbolWithRange& Left,
+                     const IndexedDeclWithSymbolWithRange& Right) const;
   };
 };
 
@@ -214,8 +272,7 @@ using SingleSymbolOrError = llvm::Expected<Symbol>;
   
 using SymbolsOrError = llvm::Expected<std::vector<SymbolWithRange>>;
 
-using GlobalCollectedSymbols = std::set<IndexedSymbolWithRange,
-                                IndexedSymbolWithRange::SymbolWithRangeCompare>;
+using GlobalCollectedSymbols = std::set<IndexedDeclWithSymbolWithRange, IndexedDeclWithSymbolWithRange::SymbolWithRangeCompare>;
 } //namespace obfuscation
 } //namespace swift
 
diff --git a/swift/include/swift/Obfuscation/DeclarationParser.h b/swift/include/swift/Obfuscation/DeclarationParser.h
deleted file mode 100644
index 0f86f941e8c..00000000000
--- a/swift/include/swift/Obfuscation/DeclarationParser.h
+++ /dev/null
@@ -1,42 +0,0 @@
-#ifndef DeclarationParser_h
-#define DeclarationParser_h
-
-#include "swift/Frontend/Frontend.h"
-#include "swift/Obfuscation/DataStructures.h"
-#include "swift/Obfuscation/SourceFileWalker.h"
-
-namespace swift {
-namespace obfuscation {
-  
-/// Given the Swift AST node of Decl type, identifies the symbol it represents.
-///
-/// In case no symbol is found, returnes Error.
-///
-/// Only a subset of all the possible Decl is of interest to obfuscation.
-/// Therefore the user of this function should expect to often receive
-/// the error output and be ready to handle it gracefully.
-///
-/// Typical usage:
-/// \code
-/// auto SymbolOrError = extractSymbol(Declaration);
-/// if (auto Error = SymbolOrError.takeError()) {
-///   llvm::consumeError(std::move(Error));
-///   return true;
-/// }
-/// \endcode
-///
-/// \param Declaration The Swift AST node that may or may not represent
-///        the symbol to obfuscate.
-///
-/// \returns llvm::Expected object containing either the symbol extracted
-///          from information in \p Declaration object or llvm::Error object
-///          with the information on why no symbol could be extracted.
-SymbolsOrError
-extractSymbol(GlobalCollectedSymbols &CollectedSymbols,
-              Decl* Declaration,
-              CharSourceRange Range);
-    
-} //namespace obfuscation
-} //namespace swift
-
-#endif /* DeclarationParser_h */
diff --git a/swift/include/swift/Obfuscation/DeclarationParsingUtils.h b/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
deleted file mode 100644
index c5a099791e8..00000000000
--- a/swift/include/swift/Obfuscation/DeclarationParsingUtils.h
+++ /dev/null
@@ -1,83 +0,0 @@
-#ifndef DeclarationParsingUtils_h
-#define DeclarationParsingUtils_h
-
-#include "swift/Frontend/Frontend.h"
-#include "swift/Obfuscation/DataStructures.h"
-#include "swift/Obfuscation/DeclarationParsingUtils.h"
-
-#include <set>
-#include <string>
-#include <vector>
-
-namespace swift {
-namespace obfuscation {
-  
-using ModuleNameAndParts = std::pair<std::string, std::vector<std::string>>;
-
-/// Checks that all the overridden functions in the override list are
-/// from the same module and this module is the module of originally parsed
-/// function.
-///
-/// \param Modules The list of modules that the overridden functions
-///        are defined in.
-///
-/// \param OriginModuleName The name of the module that
-///        the originally parsed function is defined in.
-///
-/// \returns true if all overridden functions are from the same module of
-///          the parsed function, and false otherwise.
-bool isOverriddenMethodFromTheSameModule(const std::set<std::string> &Modules,
-                                         const std::string &OriginModuleName);
-
-std::string combineIdentifier(std::vector<std::string> &Parts);
-
-std::string declarationName(const ValueDecl* Declaration);
-
-std::string moduleName(const Decl* Declaration);
-
-std::string externalParameterName(const ParamDecl *Declaration);
-
-std::string internalParameterName(const ParamDecl *Declaration);
-
-std::string symbolName(const OperatorDecl *Declaration);
-
-std::string functionName(const AbstractFunctionDecl* Declaration);
-
-llvm::Expected<std::vector<std::string>>
-nominalTypeIdentifierParts(const NominalTypeDecl *Declaration,
-                           const std::string &SymbolName);
-  
-ModuleNameAndParts moduleNameAndIdentifierParts(const Decl *Declaration);
-  
-std::string typeName(const NominalTypeDecl* Declaration);
-
-llvm::Expected<std::string> enclosingTypeName(const Decl* Declaration);
-
-template<class T>
-std::pair<const T*, std::set<std::string>>
-getBaseOverridenDeclarationWithModules(const T *Declaration);
-
-using ClassDeclarationsWithModules =
-  std::vector<std::pair<const ClassDecl*, std::string>>;
-
-ClassDeclarationsWithModules
-getSuperClassDeclarationsWithModules(const ClassDecl *Declaration);
-
-using ProtocolDeclarationsWithModules =
-  std::set<std::pair<const ProtocolDecl*, std::string>>;
-
-ProtocolDeclarationsWithModules
-getConformingProtocolDeclarationsWithModules(const NominalTypeDecl *Declaration);
-
-bool isMemberwise(const ConstructorDecl* Declaration);
-
-bool isMemberwiseConstructorParameter(const ParamDecl* Declaration);
-
-llvm::Expected<CharSourceRange>
-rangeOfFirstOccurenceOfStringInSourceLoc(std::string String,
-                                         SourceLoc StartSourceLoc);
-  
-} //namespace obfuscation
-} //namespace swift
-  
-#endif /* DeclarationParsingUtils_h */
diff --git a/swift/include/swift/Obfuscation/Excluder.h b/swift/include/swift/Obfuscation/Excluder.h
index 0496b13388d..1cd138b6148 100644
--- a/swift/include/swift/Obfuscation/Excluder.h
+++ b/swift/include/swift/Obfuscation/Excluder.h
@@ -1,30 +1,63 @@
 #ifndef Excluder_h
 #define Excluder_h
 
-#include "swift/Frontend/Frontend.h"
 #include "swift/Obfuscation/DataStructures.h"
+#include "swift/Obfuscation/Extractor.h"
 
 namespace swift {
 namespace obfuscation {
-  
-/// A base class for excluders
+
 class Excluder {
-  
-protected:
-  
-  std::set<Decl *> DeclarationsToExclude;
-  
+
+public:
+
+virtual llvm::Optional<DeclWithSymbolWithRange>
+symbolsToExclude(DeclWithSymbolWithRange &DeclAndSymbolWithRange) = 0;
+
+virtual ~Excluder() = default;
+
+};
+
+class ConfigurationExcluder: public Excluder {
+
+private:
+
+  ObfuscationConfiguration Configuration;
+  NominalTypeExtractor &NominalTypeExtractor;
+
+  bool shouldExclude(Decl *Declaration,
+                     const std::pair<const ClassDecl *,
+                     std::string> &DeclarationAndModule,
+                     const InheritanceExclusion *ExcludedType);
+
+  bool handleTypeExclusion(const TypeExclusion *Exclusion, Decl *Declaration);
+
+  bool handleInheritanceExclusion(const InheritanceExclusion *Exclusion,
+                                  Decl *Declaration);
+
+  bool handleConformanceExclusion(const ConformanceExclusion *Exclusion,
+                                  Decl *Declaration);
+
 public:
-  virtual ~Excluder() = default;
-  
-  virtual void identifyExclusions(Decl *Declaration) = 0;
-  
-  void excludeSymbolsFrom(GlobalCollectedSymbols &CollectedSymbols);
-  
+
+  ConfigurationExcluder(ObfuscationConfiguration &&,
+                        class NominalTypeExtractor &);
+
+  llvm::Optional<DeclWithSymbolWithRange>
+  symbolsToExclude(DeclWithSymbolWithRange &DeclAndSymbolWithRange) override;
+
 };
-  
+
+class NSManagedExcluder: public Excluder {
+
+public:
+
+  llvm::Optional<DeclWithSymbolWithRange>
+  symbolsToExclude(DeclWithSymbolWithRange &DeclAndSymbolWithRange) override;
+
+};
+
 } //namespace obfuscation
 } //namespace swift
 
-
 #endif /* Excluder_h */
diff --git a/swift/include/swift/Obfuscation/ExpressionParser.h b/swift/include/swift/Obfuscation/ExpressionParser.h
deleted file mode 100644
index 47cfcd05dc6..00000000000
--- a/swift/include/swift/Obfuscation/ExpressionParser.h
+++ /dev/null
@@ -1,20 +0,0 @@
-#ifndef ExpressionParser_h
-#define ExpressionParser_h
-
-#include "swift/Frontend/Frontend.h"
-#include "swift/Obfuscation/DataStructures.h"
-#include "swift/Obfuscation/SourceFileWalker.h"
-
-#include "llvm/Support/Error.h"
-
-#include <vector>
-
-namespace swift {
-namespace obfuscation {
-
-SymbolsOrError extractSymbol(Expr* Expression);
-  
-} //namespace obfuscation
-} //namespace swift
-
-#endif /* ExpressionParser_h */
diff --git a/swift/include/swift/Obfuscation/ExtensionExcluder.h b/swift/include/swift/Obfuscation/ExtensionExcluder.h
deleted file mode 100644
index 31d4f07b339..00000000000
--- a/swift/include/swift/Obfuscation/ExtensionExcluder.h
+++ /dev/null
@@ -1,19 +0,0 @@
-#ifndef ExtensionExcluder_h
-#define ExtensionExcluder_h
-
-#include "swift/Obfuscation/Excluder.h"
-
-namespace swift {
-namespace obfuscation {
-
-class ExtensionExcluder: public Excluder {
-
-public:
-
-    void identifyExclusions(Decl *Declaration);    
-};
-
-} //namespace obfuscation
-} //namespace swift
-
-#endif /* ExtensionExcluder_h */
diff --git a/swift/include/swift/Obfuscation/Extractor.h b/swift/include/swift/Obfuscation/Extractor.h
new file mode 100644
index 00000000000..aa2b294a6d7
--- /dev/null
+++ b/swift/include/swift/Obfuscation/Extractor.h
@@ -0,0 +1,176 @@
+#ifndef Extractor_h
+#define Extractor_h
+
+#include "swift/Frontend/Frontend.h"
+#include "swift/Obfuscation/DataStructures.h"
+
+#include <string>
+#include <vector>
+
+namespace swift {
+namespace obfuscation {
+
+using ModuleNameAndParts = std::pair<std::string, std::vector<std::string>>;
+
+using ClassDeclarationsWithModules =
+  std::vector<std::pair<const ClassDecl*, std::string>>;
+
+using ProtocolDeclarationsWithModules =
+  std::set<std::pair<const ProtocolDecl*, std::string>>;
+
+class Extractor {
+
+private:
+
+  template<class T> const T*
+  findRecursivelyBaseOverridenDeclarationWithModules(const T *Declaration,
+                                                     std::set<std::string> &Modules);
+
+protected:
+
+  template<class T>
+  std::pair<const T*, std::set<std::string>>
+  getBaseOverridenDeclarationWithModules(const T *Declaration);
+
+public:
+
+  virtual ~Extractor() = 0;
+
+  virtual std::string moduleName(const Decl *);
+
+  virtual ModuleNameAndParts moduleNameAndIdentifierParts(const Decl *);
+
+  std::string declarationName(const ValueDecl* Declaration);
+
+  llvm::Expected<std::string> enclosingTypeName(const Decl* Declaration);
+
+  std::string typeName(const NominalTypeDecl *);
+
+  bool isOverriddenMethodFromTheSameModule(const std::set<std::string> &Modules,
+                                           const std::string &OriginModuleName);
+
+  llvm::Expected<std::vector<std::string>>
+  nominalTypeIdentifierParts(const NominalTypeDecl *, const std::string &);
+
+};
+
+class NominalTypeExtractor : public Extractor {
+
+private:
+
+  ClassDeclarationsWithModules
+  findRecursivelySuperClassDeclarationsWithModules(const ClassDecl *,
+                                                   ClassDeclarationsWithModules &);
+
+  void
+  findRecursivelyConformingProtocolDeclarationsWithModules(const NominalTypeDecl *,
+                                                           ProtocolDeclarationsWithModules &);
+
+public:
+
+  ProtocolDeclarationsWithModules
+  getConformingProtocolDeclarationsWithModules(const NominalTypeDecl *);
+
+  ClassDeclarationsWithModules
+  getSuperClassDeclarationsWithModules(const ClassDecl *);
+
+  std::string symbolName(const NominalTypeDecl *);
+
+};
+
+class FunctionExtractor : public Extractor {
+
+private:
+
+  void extractSignaturePart(const Type &Result,
+                            llvm::raw_string_ostream &StringStream,
+                            std::string Fallback);
+
+  std::string extractSignature(const AbstractFunctionDecl *Declaration,
+                               std::string Fallback);
+
+public:
+
+  ModuleNameAndParts
+  functionIdentifierParts(const AbstractFunctionDecl *Declaration);
+
+  std::vector<ValueDecl*>
+  satisfiedProtocolOptionalRequirements(const AbstractFunctionDecl* Declaration);
+
+  std::vector<ValueDecl*>
+  satisfiedProtocolRequirements(const AbstractFunctionDecl* Declaration);
+
+  std::string functionName(const AbstractFunctionDecl *);
+
+  std::string functionSignature(const AbstractFunctionDecl *Declaration);
+
+  std::pair<const FuncDecl*, std::set<std::string>>
+  getBaseOverridenDeclarationWithModules(const FuncDecl *Declaration);
+
+};
+
+class OperatorExtractor : public Extractor {
+
+public:
+
+  std::string operatorName(const OperatorDecl *);
+
+};
+
+class ParameterExtractor : public Extractor {
+
+private:
+
+  bool isMemberwiseConstructor(const ConstructorDecl*);
+
+public:
+
+  bool isMemberwiseConstructorParameter(const ParamDecl*);
+
+  std::string externalParameterName(const ParamDecl *);
+
+  std::string internalParameterName(const ParamDecl *);
+
+  std::pair<const AbstractFunctionDecl*, std::set<std::string>>
+  getBaseOverridenDeclarationWithModules(const AbstractFunctionDecl *);
+
+  std::vector<DeclWithRange> parametersFrom(const AbstractFunctionDecl *);
+
+  llvm::Expected<std::string> parameterNameForCallSite(ParamDecl *);
+
+};
+
+class VariableExtractor : public Extractor {
+
+public:
+
+  std::pair<const VarDecl*, std::set<std::string>>
+  getBaseOverridenDeclarationWithModules(const VarDecl *Declaration);
+
+  llvm::Expected<ModuleNameAndParts>
+  variableIdentifierPartsFromContext(const VarDecl *Declaration);
+
+};
+
+class TypeRepresentationExtractor : public Extractor {
+
+private:
+
+  llvm::Optional<DeclWithRange>
+  handleComponent(ComponentIdentTypeRepr *Component);
+
+  void
+  handleTypeRepresentationRecursively(std::vector<llvm::Optional<DeclWithRange>> &Declarations,
+                                      TypeRepr *ParentOfTypeRepresentation,
+                                      TypeRepr *TypeRepresentation);
+
+public:
+
+  std::vector<DeclWithRange> declarationsFromTypeRepresentation(TypeRepr *);
+
+};
+
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* Extractor_h */
diff --git a/swift/include/swift/Obfuscation/FunctionDeclarationParser.h b/swift/include/swift/Obfuscation/FunctionDeclarationParser.h
deleted file mode 100644
index f3a2a589cef..00000000000
--- a/swift/include/swift/Obfuscation/FunctionDeclarationParser.h
+++ /dev/null
@@ -1,31 +0,0 @@
-#ifndef FunctionDeclarationParser_h
-#define FunctionDeclarationParser_h
-
-#include "swift/Frontend/Frontend.h"
-#include "swift/Obfuscation/DataStructures.h"
-#include "swift/Obfuscation/DeclarationParsingUtils.h"
-
-#include "llvm/Support/Error.h"
-
-#include <string>
-#include <vector>
-
-namespace swift {
-namespace obfuscation {
-    
-std::string functionName(const AbstractFunctionDecl* Declaration);
-
-std::string functionSignature(const AbstractFunctionDecl *Declaration);
-  
-ModuleNameAndParts functionIdentifierParts(const AbstractFunctionDecl* Declaration);
-
-SymbolsOrError parse(GlobalCollectedSymbols &CollectedSymbols,
-                     const FuncDecl* Declaration,
-                     CharSourceRange Range);
-  
-SymbolsOrError parse(const ConstructorDecl* Declaration, CharSourceRange Range);
-
-} //namespace obfuscation
-} //namespace swift
-
-#endif /* FunctionDeclarationParser_h */
diff --git a/swift/include/swift/Obfuscation/GlobalCollectedSymbolsUpdater.h b/swift/include/swift/Obfuscation/GlobalCollectedSymbolsUpdater.h
new file mode 100644
index 00000000000..c1fac7c79b2
--- /dev/null
+++ b/swift/include/swift/Obfuscation/GlobalCollectedSymbolsUpdater.h
@@ -0,0 +1,98 @@
+#ifndef Updater_h
+#define Updater_h
+
+#include "swift/Obfuscation/DataStructures.h"
+#include "swift/Obfuscation/Extractor.h"
+
+namespace swift {
+namespace obfuscation {
+
+enum GlobalCollectedSymbolsUpdaterKind {
+  ProtocolFunction,
+  ExcludedSymbols,
+  ExtensionSymbols
+};
+
+class GlobalCollectedSymbolsUpdater {
+
+protected:
+
+  std::vector<DeclWithSymbolWithRange> LoadedSymbols;
+
+public:
+
+  virtual ~GlobalCollectedSymbolsUpdater() = 0;
+
+  virtual void load(std::vector<DeclWithSymbolWithRange> &) = 0;
+
+  virtual void updateUsingLoadedSymbols(GlobalCollectedSymbols &) = 0;
+
+  virtual GlobalCollectedSymbolsUpdaterKind getKind() = 0;
+
+};
+
+class ProtocolFunctionUpdater : public GlobalCollectedSymbolsUpdater {
+
+private:
+
+  FunctionExtractor FuncExtractor;
+  ParameterExtractor ParamExtractor;
+
+  void
+  handleRequirement(const ValueDecl* Requirement,
+                    GlobalCollectedSymbols &CollectedSymbols,
+                    SymbolWithRange FunctionNameSymbol,
+                    const FuncDecl* Declaration);
+
+  void 
+  handleSatisfiedProtocolRequirements(GlobalCollectedSymbols &CollectedSymbols,
+                                      SymbolWithRange FunctionNameSymbol,
+                                      const FuncDecl* Declaration);
+
+public:
+
+  ProtocolFunctionUpdater(FunctionExtractor &, ParameterExtractor &);
+
+  void load(std::vector<DeclWithSymbolWithRange> &) override;
+
+  void updateUsingLoadedSymbols(GlobalCollectedSymbols &) override;
+
+  GlobalCollectedSymbolsUpdaterKind getKind() override;
+
+};
+
+class ExcludedSymbolsUpdater : public GlobalCollectedSymbolsUpdater {
+
+public:
+
+  void load(std::vector<DeclWithSymbolWithRange> &) override;
+
+  void updateUsingLoadedSymbols(GlobalCollectedSymbols &) override;
+
+  GlobalCollectedSymbolsUpdaterKind getKind() override;
+
+};
+
+class ExtensionSymbolsUpdater : public GlobalCollectedSymbolsUpdater {
+
+private:
+
+  FunctionExtractor FuncExtractor;
+  ParameterExtractor ParamExtractor;
+
+public:
+
+  ExtensionSymbolsUpdater(FunctionExtractor &, ParameterExtractor &);
+
+  void load(std::vector<DeclWithSymbolWithRange> &) override;
+
+  void updateUsingLoadedSymbols(GlobalCollectedSymbols &) override;
+
+  GlobalCollectedSymbolsUpdaterKind getKind() override;
+
+};
+
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* Updater_h */
diff --git a/swift/include/swift/Obfuscation/Includer.h b/swift/include/swift/Obfuscation/Includer.h
new file mode 100644
index 00000000000..962de46fe9a
--- /dev/null
+++ b/swift/include/swift/Obfuscation/Includer.h
@@ -0,0 +1,81 @@
+#ifndef Includer_h
+#define Includer_h
+
+#include "swift/Obfuscation/DataStructures.h"
+#include "swift/Obfuscation/Extractor.h"
+
+#include <vector>
+
+namespace swift {
+namespace obfuscation {
+
+class Includer {
+
+public:
+
+  virtual ~Includer() = 0;
+
+  virtual DeclsWithRangesOrErrors include(DeclWithRange &) = 0;
+
+};
+
+class NominalTypeIncluder : public Includer {
+
+public:
+
+  DeclsWithRangesOrErrors include(DeclWithRange &) override;
+
+};
+
+class FunctionNameIncluder : public Includer {
+
+public:
+
+  DeclsWithRangesOrErrors include(DeclWithRange &) override;
+
+};
+
+class OperatorIncluder : public Includer {
+
+  OperatorExtractor Extractor;
+
+public:
+
+  OperatorIncluder(OperatorExtractor &);
+
+  DeclsWithRangesOrErrors include(DeclWithRange &) override;
+
+};
+
+class FunctionParametersIncluder : public Includer {
+
+private:
+
+  ParameterExtractor Extractor;
+
+public:
+
+  FunctionParametersIncluder(ParameterExtractor &);
+
+  DeclsWithRangesOrErrors include(DeclWithRange &) override;
+
+};
+
+class VariableIncluder : public Includer {
+
+private:
+
+  VariableExtractor Extractor;
+
+public:
+
+  VariableIncluder(VariableExtractor &);
+
+  DeclsWithRangesOrErrors include(DeclWithRange &) override;
+
+};
+
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* Includer_h */
diff --git a/swift/include/swift/Obfuscation/NSManagedExcluder.h b/swift/include/swift/Obfuscation/NSManagedExcluder.h
deleted file mode 100644
index 49718ecba39..00000000000
--- a/swift/include/swift/Obfuscation/NSManagedExcluder.h
+++ /dev/null
@@ -1,19 +0,0 @@
-#ifndef NSManagedExcluder_h
-#define NSManagedExcluder_h
-
-#include "swift/Obfuscation/Excluder.h"
-
-namespace swift {
-namespace obfuscation {
-  
-class NSManagedExcluder: public Excluder {
-  
-public:
-  
-  void identifyExclusions(Decl *Declaration);
-};
-  
-} //namespace obfuscation
-} //namespace swift
-
-#endif /* NSManagedExcluder_h */
diff --git a/swift/include/swift/Obfuscation/NominalTypeDeclarationParser.h b/swift/include/swift/Obfuscation/NominalTypeDeclarationParser.h
deleted file mode 100644
index b2a3e2f2913..00000000000
--- a/swift/include/swift/Obfuscation/NominalTypeDeclarationParser.h
+++ /dev/null
@@ -1,16 +0,0 @@
-#ifndef NominalTypeDeclarationParser_h
-#define NominalTypeDeclarationParser_h
-
-#include "swift/Frontend/Frontend.h"
-#include "swift/Obfuscation/DataStructures.h"
-#include "swift/Obfuscation/DeclarationParsingUtils.h"
-
-namespace swift {
-namespace obfuscation {
-  
-SingleSymbolOrError parse(const NominalTypeDecl* Declaration);
-
-} //namespace obfuscation
-} //namespace swift
-
-#endif /* NominalTypeDeclarationParser_h */
diff --git a/swift/include/swift/Obfuscation/OperatorParser.h b/swift/include/swift/Obfuscation/OperatorParser.h
deleted file mode 100644
index 2d9d172adcb..00000000000
--- a/swift/include/swift/Obfuscation/OperatorParser.h
+++ /dev/null
@@ -1,43 +0,0 @@
-#ifndef OperatorParser_h
-#define OperatorParser_h
-
-#include "swift/Obfuscation/DeclarationParsingUtils.h"
-
-namespace swift {
-namespace obfuscation {
-
-/// Extract symbol from the declaration of the operator.
-///
-/// The declaration specifies only the name of the operator, its type
-/// (prefix, infix, postfix) and its relation to other operators (precedence).
-/// It's not the operator implementation nor usage.
-///
-/// \param Declaration The Swift AST OperatorDecl node that may represent
-///        the symbol to obfuscate.
-///
-/// \returns SingleSymbolOrError object containing either the symbol extracted
-///          from information in \p Declaration object or llvm::Error object
-///          with the information on why no symbol could be extracted.
-SingleSymbolOrError parse(const OperatorDecl* Declaration);
-
-/// Extracts symbol from the operator's implementation represented as FuncDecl
-/// in the Swift AST.
-///
-/// The function declaration specifies the logic for the operator it implements.
-/// We're parsing it in the similar manner as other functions, so both
-/// the function symbol and the parameters symbols are identified.
-///
-/// \param Declaration The Swift AST node that may or may not represent
-///        the symbol to obfuscate.
-/// \param Range The range of the identifier in the source code
-///        that corresponds with the encountered AST node.
-///
-/// \returns SymbolsOrError object containing either the symbol extracted
-///          from information in \p Declaration object or llvm::Error object
-///          with the information on why no symbol could be extracted.
-SymbolsOrError parseOperator(const FuncDecl* Declaration, CharSourceRange Range);
-
-} //namespace obfuscation
-} //namespace swift
-
-#endif /* OperatorParser_h */
diff --git a/swift/include/swift/Obfuscation/ParameterDeclarationParser.h b/swift/include/swift/Obfuscation/ParameterDeclarationParser.h
deleted file mode 100644
index 3033a476f49..00000000000
--- a/swift/include/swift/Obfuscation/ParameterDeclarationParser.h
+++ /dev/null
@@ -1,57 +0,0 @@
-#ifndef ParameterDeclarationParser_h
-#define ParameterDeclarationParser_h
-
-#include "swift/Frontend/Frontend.h"
-#include "swift/Obfuscation/DataStructures.h"
-#include "swift/Obfuscation/DeclarationParsingUtils.h"
-
-#include "llvm/Support/Error.h"
-
-#include <string>
-#include <vector>
-
-namespace swift {
-namespace obfuscation {
-
-/// Extracts the parameters' symbols from the function declaration
-/// that defines them.
-///
-/// \param Declaration The Swift AST AbstractFunctionDecl corresponding with
-///        the function declaration that we want to extract the parameters of.
-///
-/// \returns SymbolsOrError object containing either the symbols extracted
-///          from information in \p Declaration object or llvm::Error object
-///          with the information on why no symbol could be extracted.
-SymbolsOrError
-parseSeparateFunctionDeclarationForParameters(const AbstractFunctionDecl* Declaration);
-
-/// Extracts the parameters' symbols from the function call
-/// that references them when passing values as arguments.
-///
-/// \param Declaration The Swift AST AbstractFunctionDecl corresponding with
-///        the declaration of the function that is being called with parameters.
-///
-/// \returns SymbolsOrError object containing either the symbols extracted
-///          from information in \p Declaration object or llvm::Error object
-///          with the information on why no symbol could be extracted.
-SymbolsOrError
-parseFunctionFromCallExpressionForParameters(const AbstractFunctionDecl* Declaration);
-
-/// Parses the usage of parameter in the body of the function that declares it.
-///
-/// \param Declaration The Swift AST ParamDecl corresponding with
-///        the parameter that is referenced when used in the function body.
-///
-/// \param Range The place in which the parameter is being used
-///        in the function body.
-///
-/// \returns SymbolsOrError object containing either the symbols extracted
-///          from information in \p Declaration object or llvm::Error object
-///          with the information on why no symbol could be extracted.
-SymbolsOrError parseSeparateDeclarationWithRange(const ParamDecl* Declaration,
-                                                 CharSourceRange Range);
-
-} //namespace obfuscation
-} //namespace swift
-
-#endif /* ParameterDeclarationParser_h */
diff --git a/swift/include/swift/Obfuscation/Processor.h b/swift/include/swift/Obfuscation/Processor.h
new file mode 100644
index 00000000000..49f028c97ce
--- /dev/null
+++ b/swift/include/swift/Obfuscation/Processor.h
@@ -0,0 +1,77 @@
+#ifndef Processor_h
+#define Processor_h
+
+#include "swift/Obfuscation/DataStructures.h"
+#include "swift/Obfuscation/Extractor.h"
+
+namespace swift {
+namespace obfuscation {
+
+class Processor {
+
+public:
+
+  virtual ~Processor() = 0;
+
+  virtual DeclsWithRangesOrErrors declarationFrom(Expr *) = 0;
+
+  virtual DeclsWithRangesOrErrors declarationFrom(Decl *) = 0;
+
+};
+
+class ExpressionProcessor : public Processor {
+
+private:
+
+  ParameterExtractor Extractor;
+
+  DeclsWithRangesOrErrors parse(CallExpr *);
+
+  DeclsWithRangesOrErrors parseCallExpressionWithArguments(CallExpr *);
+
+  DeclsWithRangesOrErrors parse(EnumIsCaseExpr *);
+
+  llvm::Expected<AbstractFunctionDecl*>
+  declarationOfFunctionCalledInExpression(CallExpr *);
+
+  std::vector<std::pair<Identifier, SourceLoc>>
+  validArguments(CallExpr *CallExpression);
+
+  llvm::Expected<CharSourceRange>
+  rangeOfFirstOccurenceOfStringInSourceLoc(std::string String,
+                                           SourceLoc StartSourceLoc);
+
+  DeclsWithRangesOrErrors
+  parseGenericParameters(BoundGenericType *BoundGenericType,
+                         SourceLoc OpeningAngleBracketLoc);
+
+public:
+
+  ExpressionProcessor(ParameterExtractor &Extractor);
+
+  DeclsWithRangesOrErrors declarationFrom(Expr *) override;
+  DeclsWithRangesOrErrors declarationFrom(Decl *) override;
+
+};
+
+class WhereClauseProcessor : public Processor {
+
+private:
+
+  TypeRepresentationExtractor Extractor;
+
+  DeclsWithRangesOrErrors handleWhereClause(TrailingWhereClause *);
+
+public:
+
+  WhereClauseProcessor(TypeRepresentationExtractor &);
+
+  DeclsWithRangesOrErrors declarationFrom(Expr *) override;
+  DeclsWithRangesOrErrors declarationFrom(Decl *) override;
+
+};
+
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* Processor_h */
diff --git a/swift/include/swift/Obfuscation/SourceFileWalker.h b/swift/include/swift/Obfuscation/SourceFileWalker.h
deleted file mode 100644
index 0034e9c18d4..00000000000
--- a/swift/include/swift/Obfuscation/SourceFileWalker.h
+++ /dev/null
@@ -1,46 +0,0 @@
-#ifndef SourceFileWalker_h
-#define SourceFileWalker_h
-
-#include "swift/Frontend/Frontend.h"
-#include "swift/Obfuscation/DataStructures.h"
-#include "swift/Obfuscation/ExtensionExcluder.h"
-#include "swift/Obfuscation/NSManagedExcluder.h"
-
-#include <set>
-
-namespace swift {
-namespace obfuscation {
-
-/// Identifies the symbols in the given Swift AST SourceFile object with
-/// the index of their occurrence among all files.
-///
-/// The SourceFile might be extracted from the compiler after it consumes and
-/// performs the semantic analysis of the Swift cource code file. It's an AST
-/// tree that contains all the AST nodes found in the source file.
-///
-/// This method walks through the SourceFile tree and collects all the symbols
-/// that are of our interest and the place they occur in the set of
-/// SymbolWithRange structures.
-///
-/// Typical usage:
-/// \code
-/// for (auto* File : CompilerInstance.getMainModule()->getFiles()) {
-///   if (auto* SourceFile = dyn_cast<SourceFile>(File)) {
-///     auto SymbolsWithRanges = walkAndCollectSymbols(*SourceFile);
-///   }
-/// }
-/// \endcode
-///
-/// \param SourceFile AST tree representing the Swift source file.
-/// \param Excluders A set of Excluder implementations that will be used to
-///                  exclude declarations that shouldn't be renamed.
-///
-/// \returns the occurrences of symbols with their metadata, place
-///          and occurrence index.
-std::set<IndexedSymbolWithRange, IndexedSymbolWithRange::SymbolWithRangeCompare>
-  walkAndCollectSymbols(SourceFile &SourceFile, std::set<Excluder*> &Excluders);
-
-} //namespace obfuscation
-} //namespace swift
-
-#endif /* SourceFileWalker_h */
diff --git a/swift/include/swift/Obfuscation/SymbolGenerator.h b/swift/include/swift/Obfuscation/SymbolGenerator.h
new file mode 100644
index 00000000000..5658c87dce4
--- /dev/null
+++ b/swift/include/swift/Obfuscation/SymbolGenerator.h
@@ -0,0 +1,113 @@
+#ifndef SymbolGenerator_h
+#define SymbolGenerator_h
+
+#include "swift/Obfuscation/DataStructures.h"
+#include "swift/Obfuscation/Extractor.h"
+
+#include <vector>
+
+namespace swift {
+namespace obfuscation {
+
+class SymbolGenerator {
+
+public:
+
+  virtual ~SymbolGenerator() = 0;
+
+  virtual DeclsWithSymbolsWithRangesOrErrors generateFor(DeclWithRange &) = 0;
+
+};
+
+class NominalTypeSymbolGenerator : public SymbolGenerator {
+
+private:
+
+  NominalTypeExtractor Extractor;
+
+public:
+
+  NominalTypeSymbolGenerator(NominalTypeExtractor &);
+
+  DeclsWithSymbolsWithRangesOrErrors generateFor(DeclWithRange &) override;
+
+};
+
+class FunctionNameSymbolGenerator : public SymbolGenerator {
+
+private:
+
+  FunctionExtractor Extractor;
+
+  SymbolWithRange getFunctionSymbol(const swift::FuncDecl *Declaration,
+                                    const swift::CharSourceRange &Range);
+
+  llvm::Expected<SymbolWithRange>
+  parseOverridenDeclaration(const FuncDecl *Declaration,
+                            const std::string &ModuleName,
+                            const CharSourceRange &Range);
+
+public:
+
+  FunctionNameSymbolGenerator(FunctionExtractor &);
+
+  DeclsWithSymbolsWithRangesOrErrors generateFor(DeclWithRange &) override;
+
+  
+
+};
+
+class OperatorSymbolGenerator : public SymbolGenerator {
+
+private:
+
+  OperatorExtractor Extractor;
+
+public:
+
+  OperatorSymbolGenerator(OperatorExtractor &);
+
+  DeclsWithSymbolsWithRangesOrErrors generateFor(DeclWithRange &) override;
+
+};
+
+class FunctionParameterSymbolGenerator : public SymbolGenerator {
+
+private:
+
+  FunctionExtractor FuncExtractor;
+  ParameterExtractor ParamExtractor;
+
+  llvm::Expected<std::string>
+  getIdentifierWithParameterPosition(const ParamDecl *,
+                                     const AbstractFunctionDecl *);
+
+public:
+
+  FunctionParameterSymbolGenerator(FunctionExtractor &, ParameterExtractor &);
+
+  DeclsWithSymbolsWithRangesOrErrors generateFor(DeclWithRange &) override;
+
+};
+
+class VariableSymbolGenerator : public SymbolGenerator {
+
+private:
+
+  VariableExtractor Extractor;
+
+  SingleSymbolOrError parseOverridenDeclaration(const VarDecl *Declaration,
+                                                const std::string &ModuleName);
+
+public:
+
+  VariableSymbolGenerator(VariableExtractor &);
+
+  DeclsWithSymbolsWithRangesOrErrors generateFor(DeclWithRange &) override;
+
+};
+
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* SymbolGenerator_h */
diff --git a/swift/include/swift/Obfuscation/SymbolsWalkerAndCollector.h b/swift/include/swift/Obfuscation/SymbolsWalkerAndCollector.h
new file mode 100644
index 00000000000..400b08cf002
--- /dev/null
+++ b/swift/include/swift/Obfuscation/SymbolsWalkerAndCollector.h
@@ -0,0 +1,88 @@
+#ifndef SourceFileWalker_h
+#define SourceFileWalker_h
+
+#include "swift/Frontend/Frontend.h"
+#include "swift/Obfuscation/DataStructures.h"
+#include "swift/Obfuscation/Collector.h"
+#include "swift/Obfuscation/Excluder.h"
+#include "swift/Obfuscation/GlobalCollectedSymbolsUpdater.h"
+#include "swift/Obfuscation/Processor.h"
+
+#include <set>
+
+namespace swift {
+namespace obfuscation {
+
+class SymbolsWalkerAndCollector : public SourceEntityWalker {
+
+private:
+
+  static int SymbolIndex;
+
+  GlobalCollectedSymbols Symbols;
+
+  std::set<std::unique_ptr<Processor>> &Processors;
+  std::vector<std::unique_ptr<Collector>> &Collectors;
+  std::set<std::unique_ptr<Excluder>> &Excluders;
+  std::set<std::unique_ptr<GlobalCollectedSymbolsUpdater>> &Updaters;
+
+  bool walkToExprPre(Expr *) override;
+
+  void identifyExcludedSymbols(DeclWithSymbolWithRange &);
+
+  void handleDeclWithRange(DeclWithRange &);
+
+  bool walkToDeclPre(Decl *, CharSourceRange) override;
+
+  void handleWhereClausesIfNeeded(const std::vector<Decl*> &&);
+
+  bool visitDeclReference(ValueDecl *,
+                          CharSourceRange,
+                          TypeDecl *,
+                          ExtensionDecl *,
+                          Type,
+                          ReferenceMetaData) override;
+
+  void handleSymbol(const DeclWithSymbolWithRange &);
+
+  GlobalCollectedSymbols collectSymbols();
+
+protected:
+
+  SymbolsWalkerAndCollector(std::set<std::unique_ptr<Processor>> &,
+                            std::vector<std::unique_ptr<Collector>> &,
+                            std::set<std::unique_ptr<Excluder>> &,
+                            std::set<std::unique_ptr<GlobalCollectedSymbolsUpdater>> &);
+
+friend class SymbolsWalkerAndCollectorFactory;
+
+public:
+
+  GlobalCollectedSymbols walkAndCollectSymbols(SourceFile &SourceFile);
+
+};
+
+class SymbolsWalkerAndCollectorFactory {
+
+private:
+
+  std::set<std::unique_ptr<Processor>> Processors;
+  std::vector<std::unique_ptr<Collector>> Collectors;
+  NominalTypeExtractor NominalTypeExtractor;
+  std::set<std::unique_ptr<Excluder>> Excluders;
+  std::set<std::unique_ptr<GlobalCollectedSymbolsUpdater>> Updaters;
+
+public:
+
+  SymbolsWalkerAndCollectorFactory();
+
+  SymbolsWalkerAndCollectorFactory(ObfuscationConfiguration &&);
+
+  SymbolsWalkerAndCollector symbolsWalkerAndCollector();
+
+};
+
+} //namespace obfuscation
+} //namespace swift
+
+#endif /* SourceFileWalker_h */
diff --git a/swift/include/swift/Obfuscation/TypeRepresentationParser.h b/swift/include/swift/Obfuscation/TypeRepresentationParser.h
deleted file mode 100644
index 5cf7d0c82fe..00000000000
--- a/swift/include/swift/Obfuscation/TypeRepresentationParser.h
+++ /dev/null
@@ -1,40 +0,0 @@
-#ifndef TypeRepresentationParser_h
-#define TypeRepresentationParser_h
-
-#import "swift/AST/TypeRepr.h"
-
-#include <set>
-
-namespace swift {
-namespace obfuscation {
-
-class TypeRepresentationParser {
-
-private:
-
-  std::set<SymbolWithRange> Symbols;
-
-public:
-
-  void collectSymbolsFromTypeRepresentation(
-                                      GlobalCollectedSymbols &CollectedSymbols,
-                                      TypeRepr *TypeRepresentation);
-
-  std::set<SymbolWithRange> harvestSymbols();
-
-private:
-
-  void handleComponent(GlobalCollectedSymbols &CollectedSymbols,
-                       ComponentIdentTypeRepr *Component);
-
-  void handleTypeRepresentationRecursively(
-                                       GlobalCollectedSymbols &CollectedSymbols,
-                                       TypeRepr *ParentOfTypeRepresentation,
-                                       TypeRepr *TypeRepresentation);
-
-};
-
-} //namespace obfuscation
-} //namespace swift
-
-#endif /* TypeRepresentationParser_h */
diff --git a/swift/include/swift/Obfuscation/Utils.h b/swift/include/swift/Obfuscation/Utils.h
index d29dcc31d8e..eb64ef30779 100644
--- a/swift/include/swift/Obfuscation/Utils.h
+++ b/swift/include/swift/Obfuscation/Utils.h
@@ -56,6 +56,8 @@ std::vector<std::string> split(const std::string &String, char Delimiter);
 
 template<typename T>
 void removeFromVector(std::vector<T> &FromVector, const T &Element);
+
+std::string combineIdentifier(std::vector<std::string> &);
   
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/include/swift/Obfuscation/VariableDeclarationParser.h b/swift/include/swift/Obfuscation/VariableDeclarationParser.h
deleted file mode 100644
index 25ebca841f4..00000000000
--- a/swift/include/swift/Obfuscation/VariableDeclarationParser.h
+++ /dev/null
@@ -1,29 +0,0 @@
-#ifndef VariableDeclarationParser_h
-#define VariableDeclarationParser_h
-
-#include "swift/Frontend/Frontend.h"
-#include "swift/Obfuscation/DataStructures.h"
-#include "swift/Obfuscation/DeclarationParsingUtils.h"
-
-namespace swift {
-namespace obfuscation {
-
-/// Extracts the symbol from the VarDecl AST node
-///
-/// In case no symbol is found, returnes Error.
-///
-/// \param Declaration The Swift AST node that may or may not represent
-///        the symbol to obfuscate.
-///
-/// \returns llvm::Expected object containing either the symbol extracted
-///          from information in \p Declaration object or llvm::Error object
-///          with the information on why no symbol could be extracted.
-SingleSymbolOrError parse(const VarDecl* Declaration);
-  
-llvm::Expected<ModuleNameAndParts>
-  variableIdentifierPartsFromContext(const VarDecl *Declaration);
-} //namespace obfuscation
-} //namespace swift
-
-
-#endif /* VariableDeclarationParser_h */
diff --git a/swift/include/swift/Obfuscation/WhereClauseParser.h b/swift/include/swift/Obfuscation/WhereClauseParser.h
deleted file mode 100644
index 4ce2d085ec0..00000000000
--- a/swift/include/swift/Obfuscation/WhereClauseParser.h
+++ /dev/null
@@ -1,36 +0,0 @@
-#ifndef WhereClauseParser_h
-#define WhereClauseParser_h
-
-#include "swift/Obfuscation/DataStructures.h"
-
-#include "swift/AST/Decl.h"
-
-#include <set>
-
-namespace swift {
-namespace obfuscation {
-
-class WhereClauseParser {
-
-private:
-
-  std::set<SymbolWithRange> Symbols;
-
-public:
-
-  void collectSymbolsFromDeclaration(GlobalCollectedSymbols &CollectedSymbols,
-                                     Decl* Declaration);
-
-  std::set<SymbolWithRange> harvestSymbols();
-
-private:
-
-  void handleWhereClause(GlobalCollectedSymbols &CollectedSymbols,
-                         TrailingWhereClause *WhereClause);
-
-};
-
-} //namespace obfuscation
-} //namespace swift
-
-#endif /* WhereClauseParser_h */
diff --git a/swift/lib/Obfuscation/CMakeLists.txt b/swift/lib/Obfuscation/CMakeLists.txt
index f22b7fad103..2343953a916 100644
--- a/swift/lib/Obfuscation/CMakeLists.txt
+++ b/swift/lib/Obfuscation/CMakeLists.txt
@@ -3,29 +3,23 @@
 include_directories(SYSTEM ${LIBXML2_INCLUDE_DIR})
 
 add_swift_library(swiftObfuscation STATIC
+  Collector.cpp
   CompilerInfrastructure.cpp
-  ConfigurationExcluder.cpp
   DataStructures.cpp
-  DeclarationParser.cpp
-  OperatorParser.cpp
-  DeclarationParsingUtils.cpp
   Excluder.cpp
-  ExtensionExcluder.cpp
-  ExpressionParser.cpp
+  Extractor.cpp
   FileIO.cpp
-  FunctionDeclarationParser.cpp
+  GlobalCollectedSymbolsUpdater.cpp
+  Includer.cpp
   LayoutRenamer.cpp
   NameMapping.cpp
-  NominalTypeDeclarationParser.cpp
-  NSManagedExcluder.cpp
-  ParameterDeclarationParser.cpp
+  Processor.cpp
   Renaming.cpp
-  SourceFileWalker.cpp
   SymbolExtracting.cpp
-  TypeRepresentationParser.cpp
+  SymbolGenerator.cpp
+  SymbolsWalkerAndCollector.cpp
   Utils.cpp
-  VariableDeclarationParser.cpp
-  WhereClauseParser.cpp
+
   LINK_LIBRARIES
   swiftParse
   swiftAST
diff --git a/swift/lib/Obfuscation/Collector.cpp b/swift/lib/Obfuscation/Collector.cpp
new file mode 100644
index 00000000000..9b53e5bf5f6
--- /dev/null
+++ b/swift/lib/Obfuscation/Collector.cpp
@@ -0,0 +1,52 @@
+#include "swift/Obfuscation/Collector.h"
+
+namespace swift {
+namespace obfuscation {
+
+Collector::Collector(std::unique_ptr<class Includer> Includer,
+                     std::unique_ptr<class SymbolGenerator> SymbolGenerator)
+: Includer(std::move(Includer)), SymbolGenerator(std::move(SymbolGenerator)) {}
+
+std::vector<DeclWithSymbolWithRange>
+Collector::collectFrom(DeclWithRange &DeclAndRange) {
+  return collectFrom(std::move(DeclAndRange));
+}
+
+std::vector<DeclWithSymbolWithRange>
+Collector::collectFrom(DeclWithRange &&DeclAndRange) {
+
+  std::vector<DeclWithSymbolWithRange> Result;
+
+  auto DeclWithRangesOrErrors = Includer->include(DeclAndRange);
+
+  for (auto Iterator = DeclWithRangesOrErrors.begin();
+       Iterator != DeclWithRangesOrErrors.end();
+       ++Iterator) {
+
+    if (auto Error = Iterator->takeError()) {
+      llvm::consumeError(std::move(Error));
+      continue;
+    }
+    auto DeclWithRange = Iterator->get();
+
+    auto SymbolsOrErrors = SymbolGenerator->generateFor(DeclWithRange);
+
+    for (auto Iterator = SymbolsOrErrors.begin();
+         Iterator != SymbolsOrErrors.end();
+         ++Iterator) {
+
+      if (auto Error = Iterator->takeError()) {
+        llvm::consumeError(std::move(Error));
+        continue;
+      }
+
+      Result.push_back(Iterator->get());
+    }
+  }
+
+  return Result;
+}
+
+} //namespace obfuscation
+} //namespace swift
+
diff --git a/swift/lib/Obfuscation/CompilerInfrastructure.cpp b/swift/lib/Obfuscation/CompilerInfrastructure.cpp
index 9da8afe1496..979fc9e6ec8 100644
--- a/swift/lib/Obfuscation/CompilerInfrastructure.cpp
+++ b/swift/lib/Obfuscation/CompilerInfrastructure.cpp
@@ -67,24 +67,26 @@ createInvocation(const CompilerInvocationConfiguration &Configuration) {
   return Invocation;
 }
 
-llvm::Error
-setupCompilerInstance(CompilerInstance &CompilerInstance,
-                      const FilesJson &FilesJson,
-                      std::string MainExecutablePath,
-                      llvm::raw_ostream &LogStream) {
+llvm::Expected<std::unique_ptr<CompilerInstance>>
+createCompilerInstance(const FilesJson &FilesJson,
+                       std::string MainExecutablePath,
+                       llvm::raw_ostream &LogStream) {
+
+  auto CompilerInstance = llvm::make_unique<class CompilerInstance>();
+
   CompilerInvocationConfiguration Configuration(FilesJson, MainExecutablePath);
   auto Invocation = createInvocation(Configuration);
   PrintingDiagnosticConsumer Printer(LogStream);
-  CompilerInstance.addDiagnosticConsumer(&Printer);
-  if (CompilerInstance.setup(Invocation) || Printer.didErrorOccur()) {
+  CompilerInstance->addDiagnosticConsumer(&Printer);
+  if (CompilerInstance->setup(Invocation) || Printer.didErrorOccur()) {
     return stringError("Error during compiler setup");
   }
-  CompilerInstance.performSema();
+  CompilerInstance->performSema();
   if (Printer.didErrorOccur()) {
     LogStream << "Error during compiler semantic analysis. Be extra careful "
                  "while interpreting the results." << '\n';
   }
-  return llvm::Error::success();
+  return std::move(CompilerInstance);
 }
 
 } //namespace obfuscation
diff --git a/swift/lib/Obfuscation/ConfigurationExcluder.cpp b/swift/lib/Obfuscation/ConfigurationExcluder.cpp
deleted file mode 100644
index 02b5e307234..00000000000
--- a/swift/lib/Obfuscation/ConfigurationExcluder.cpp
+++ /dev/null
@@ -1,152 +0,0 @@
-#include "swift/Obfuscation/ConfigurationExcluder.h"
-#include "swift/Obfuscation/DeclarationParsingUtils.h"
-
-namespace swift {
-namespace obfuscation {
-
-ConfigurationExcluder::
-  ConfigurationExcluder(ObfuscationConfiguration&& Configuration)
-: Configuration(std::move(Configuration)) {}
-
-void
-ConfigurationExcluder::
-  excludeIfNeeded(Decl *Declaration,
-                  const std::pair<const ClassDecl *, std::string> &DeclarationAndModule,
-                  const InheritanceExclusion *ExcludedType) {
-  auto TypeName = typeName(DeclarationAndModule.first);
-  auto ModuleName = DeclarationAndModule.second;
-  if (ExcludedType->Base == TypeName
-      && ExcludedType->Module == ModuleName) {
-    DeclarationsToExclude.insert(Declaration);
-  }
-}
-
-void ConfigurationExcluder::
-  handleTypeExclusion(const TypeExclusion *Exclusion, Decl *Declaration) {
-    NominalTypeDecl* NominalTypeDeclaration = nullptr;
-    if (auto *NominalType = dyn_cast<NominalTypeDecl>(Declaration)) {
-      NominalTypeDeclaration = NominalType;
-    } else if (auto *Extension = dyn_cast<ExtensionDecl>(Declaration)) {
-      NominalTypeDeclaration = Extension->getExtendedType()->getAnyNominal();
-    }
-    if (Exclusion != nullptr && NominalTypeDeclaration != nullptr) {
-      auto TypeName = typeName(NominalTypeDeclaration);
-      auto ModuleName = moduleName(NominalTypeDeclaration);
-      if (Exclusion->Name == TypeName
-          && Exclusion->Module == ModuleName) {
-        DeclarationsToExclude.insert(Declaration);
-      }
-    }
-  }
-
-void ConfigurationExcluder::
-handleInheritanceExclusion(const InheritanceExclusion *Exclusion, Decl *Declaration) {
-
-  ClassDecl* ClassDeclaration = nullptr;
-  if (auto *ClassType = dyn_cast<ClassDecl>(Declaration)) {
-    ClassDeclaration = ClassType;
-  } else if (auto *Extension = dyn_cast<ExtensionDecl>(Declaration)) {
-    ClassDeclaration =
-    Extension->getExtendedType()->getClassOrBoundGenericClass();
-  }
-
-  if (Exclusion != nullptr && ClassDeclaration != nullptr) {
-    auto DeclarationsWithModules =
-    getSuperClassDeclarationsWithModules(ClassDeclaration);
-    if (!DeclarationsWithModules.empty()) {
-      if (Exclusion->Transitive) {
-        for (auto DeclarationAndModule : DeclarationsWithModules) {
-          excludeIfNeeded(Declaration, DeclarationAndModule, Exclusion);
-        }
-      } else {
-        excludeIfNeeded(Declaration,
-                        DeclarationsWithModules.front(),
-                        Exclusion);
-      }
-    }
-  }
-}
-
-void ConfigurationExcluder::
-handleConformanceExclusion(const ConformanceExclusion *Exclusion,
-                           Decl *Declaration) {
-
-    NominalTypeDecl* NominalTypeDeclaration = nullptr;
-    if (auto *NominalType = dyn_cast<NominalTypeDecl>(Declaration)) {
-      NominalTypeDeclaration = NominalType;
-    } else if (auto *Extension = dyn_cast<ExtensionDecl>(Declaration)) {
-      NominalTypeDeclaration = Extension->getExtendedType()->getAnyNominal();
-    }
-
-    if (Exclusion != nullptr && NominalTypeDeclaration != nullptr) {
-      if (Exclusion->Transitive) {
-        std::vector<const NominalTypeDecl *>
-          DeclarationsToIdentifyProtocolsConformance;
-        DeclarationsToIdentifyProtocolsConformance
-          .push_back(NominalTypeDeclaration);
-        if (auto *ClassDeclaration =
-            dyn_cast<ClassDecl>(NominalTypeDeclaration)) {
-          auto DeclarationsWithModules =
-          getSuperClassDeclarationsWithModules(ClassDeclaration);
-          for (auto DeclarationAndModule : DeclarationsWithModules) {
-            DeclarationsToIdentifyProtocolsConformance
-            .push_back(DeclarationAndModule.first);
-          }
-        }
-        for (auto DeclarationToIdentify
-             : DeclarationsToIdentifyProtocolsConformance) {
-          auto ProtocolsWithModules =
-          getConformingProtocolDeclarationsWithModules(DeclarationToIdentify);
-          for (auto ProtocolAndModule : ProtocolsWithModules) {
-            auto TypeName = typeName(ProtocolAndModule.first);
-            auto ModuleName = ProtocolAndModule.second;
-            if (Exclusion->Protocol == TypeName
-                && Exclusion->Module == ModuleName) {
-              DeclarationsToExclude.insert(Declaration);
-            }
-          }
-        }
-      } else {
-        auto InheritedArray = NominalTypeDeclaration->getInherited();
-        for (auto Inherited : InheritedArray) {
-          auto Nominal = Inherited.getType()->getAnyNominal();
-          if (auto *Protocol = dyn_cast_or_null<ProtocolDecl>(Nominal)) {
-            auto TypeName = typeName(Protocol);
-            auto ModuleName = moduleName(Protocol);
-            if (Exclusion->Protocol == TypeName
-                && Exclusion->Module == ModuleName) {
-              DeclarationsToExclude.insert(Declaration);
-            }
-          }
-        }
-      }
-    }
-  }
-
-void ConfigurationExcluder::identifyExclusions(Decl *Declaration) {
-
-  for (auto &Exclusion : this->Configuration.Exclude) {
-    switch (Exclusion->Kind) {
-      case ExclusionKind::UnknownKind:
-        break;
-      case ExclusionKind::Type: {
-        handleTypeExclusion(Exclusion->getAsTypeExclusion(), Declaration);
-        break;
-      }
-      case ExclusionKind::Inheritance: {
-        handleInheritanceExclusion(Exclusion->getAsInheritanceExclusion(),
-                                   Declaration);
-        break;
-      }
-      case ExclusionKind::Conformance: {
-        handleConformanceExclusion(Exclusion->getAsConformanceExclusion(),
-                                   Declaration);
-        break;
-      }
-    }
-  }
-
-}
-
-} // namespace obfuscation
-} // namespace swift
diff --git a/swift/lib/Obfuscation/DataStructures.cpp b/swift/lib/Obfuscation/DataStructures.cpp
index 79467f1e499..5436ccc0e1e 100644
--- a/swift/lib/Obfuscation/DataStructures.cpp
+++ b/swift/lib/Obfuscation/DataStructures.cpp
@@ -60,6 +60,10 @@ SymbolRenaming::SymbolRenaming(const std::string &Identifier,
   Module(Module),
   Type(Type) {};
 
+bool SymbolRenaming::operator< (const SymbolRenaming &Right) const {
+  return Identifier < Right.Identifier;
+}
+
 bool SymbolRenaming::operator== (const SymbolRenaming &Right) const {
   return Identifier == Right.Identifier
   && ObfuscatedName == Right.ObfuscatedName
@@ -68,58 +72,157 @@ bool SymbolRenaming::operator== (const SymbolRenaming &Right) const {
   && Type == Right.Type;
 }
 
-const char* pointerToRangeValue(const SymbolWithRange &Symbol) {
-  auto Pointer = Symbol.Range.getStart().getOpaquePointerValue();
+const char* pointerToRangeValue(const CharSourceRange &Range) {
+  auto Pointer = Range.getStart().getOpaquePointerValue();
   return static_cast<const char *>(Pointer);
 }
 
-SymbolWithRange::SymbolWithRange(const struct Symbol &Symbol,
-                                 const CharSourceRange &Range)
-: Symbol(Symbol), Range(Range) {}
-  
-bool SymbolWithRange::operator< (const SymbolWithRange &Right) const {
-  if (Symbol < Right.Symbol) {
+bool operator< (const CharSourceRange &Left, const CharSourceRange &Right) {
+  if (const auto* LeftRangeValuePointer = pointerToRangeValue(Left)) {
+    if (const auto* RightRangeValuePointer = pointerToRangeValue(Right)) {
+      return std::less<const char *>()(LeftRangeValuePointer, RightRangeValuePointer);
+    }
+  }
+  assert(false && "Comparing Ranges requires Ranges Start "
+                  "Location Values Pointers to be of const char type");
+}
+
+DeclWithRange::DeclWithRange(Decl* Declaration, const CharSourceRange &Range)
+: Declaration(Declaration), Range(Range), Context(NoContext) {}
+
+bool DeclWithRange::
+operator< (const DeclWithRange &Right) const {
+  if (Range != Right.Range) {
+    return Range < Right.Range;
+  } else {
+    return std::less<Decl *>()(Declaration, Right.Declaration);
+  }
+}
+
+bool DeclWithRange::
+operator== (const DeclWithRange &Right) const {
+  return Declaration == Right.Declaration && Range == Right.Range;
+}
+
+template<typename T>
+VectorOfExpected<T> wrapInVector(T &Object) {
+  VectorOfExpected<T> Vector;
+  Vector.push_back(Object);
+  return Vector;
+}
+
+template<typename T>
+VectorOfExpected<T> wrapInVector(T &&Object) {
+  VectorOfExpected<T> Vector;
+  Vector.push_back(Object);
+  return Vector;
+}
+
+template<typename T>
+VectorOfExpected<T> wrapInVector(llvm::Error &&Error) {
+  VectorOfExpected<T> Vector;
+  Vector.push_back(std::move(Error));
+  return Vector;
+}
+
+template VectorOfExpected<DeclWithRange> wrapInVector(DeclWithRange &Object);
+template VectorOfExpected<DeclWithRange> wrapInVector(DeclWithRange &&Object);
+template VectorOfExpected<DeclWithRange> wrapInVector(llvm::Error &&Error);
+template VectorOfExpected<DeclWithSymbolWithRange>
+wrapInVector(DeclWithSymbolWithRange &Object);
+template VectorOfExpected<DeclWithSymbolWithRange>
+wrapInVector(DeclWithSymbolWithRange &&Object);
+template VectorOfExpected<DeclWithSymbolWithRange>
+wrapInVector(llvm::Error &&Error);
+
+DeclWithSymbolWithRange::
+  DeclWithSymbolWithRange(Decl* Declaration,
+                          const SymbolWithRange &SymbolAndRange)
+: Declaration(Declaration),
+  Symbol(SymbolAndRange.Symbol),
+  Range(SymbolAndRange.Range) {}
+
+DeclWithSymbolWithRange::
+DeclWithSymbolWithRange(const DeclWithRange &DeclAndRange,
+                        const struct Symbol &Symbol)
+: Declaration(DeclAndRange.Declaration),
+  Symbol(Symbol),
+  Range(DeclAndRange.Range) {}
+
+DeclWithSymbolWithRange::DeclWithSymbolWithRange(Decl *Declaration,
+                                                 const struct Symbol &Symbol,
+                                                 CharSourceRange Range)
+: Declaration(Declaration), Symbol(Symbol), Range(Range) {}
+
+bool isEqual(const Symbol &LeftSymbol,
+             const CharSourceRange &LeftRange,
+             const Symbol &RightSymbol,
+             const CharSourceRange &RightRange) {
+  return LeftSymbol == RightSymbol && LeftRange == RightRange;
+}
+
+bool isLess(const Symbol &LeftSymbol,
+            const CharSourceRange &LeftRange,
+            const Symbol &RightSymbol,
+            const CharSourceRange &RightRange) {
+  if (LeftSymbol < RightSymbol) {
     return true;
-  } else if (Right.Symbol < Symbol) {
+  } else if (RightSymbol < LeftSymbol) {
     return false;
   } else {
-    auto less = std::less<const char *>();
-    if (const auto* RangeValuePointer = pointerToRangeValue(*this)) {
-      if (const auto* RightRangeValuePointer = pointerToRangeValue(Right)) {
-        auto isRangeLess = less(RangeValuePointer, RightRangeValuePointer);
-        return isRangeLess;
-      }
-    }
+    return LeftRange < RightRange;
+  }
+}
+
+bool DeclWithSymbolWithRange::
+  operator< (const DeclWithSymbolWithRange &Right) const {
+  if (isEqual(Symbol, Range, Right.Symbol, Right.Range)) {
+    return std::less<Decl *>()(Declaration, Right.Declaration);
+  } else {
+    return isLess(Symbol, Range, Right.Symbol, Right.Range);
   }
-  assert(false && "Comparing Symbols with Ranges requires Ranges Start "
+  assert(false && "Comparing Decl with Ranges requires Ranges Start "
                   "Location Values Pointers to be of const char type");
 }
 
+bool DeclWithSymbolWithRange::
+  operator== (const DeclWithSymbolWithRange &Right) const {
+  return isEqual(Symbol, Range, Right.Symbol, Right.Range)
+         && Declaration == Right.Declaration;
+  assert(false && "Comparing Decl with Ranges requires Ranges Start "
+                  "Location Values Pointers to be of const char type");
+}
+
+SymbolWithRange::SymbolWithRange(const struct Symbol &Symbol,
+                                 const CharSourceRange &Range)
+: Symbol(Symbol), Range(Range) {}
+  
+bool SymbolWithRange::operator< (const SymbolWithRange &Right) const {
+  return isLess(Symbol, Range, Right.Symbol, Right.Range);
+}
+
 bool SymbolWithRange::operator== (const SymbolWithRange &Right) const {
-  if (const auto* RangeValuePointer = pointerToRangeValue(*this)) {
-    if (const auto* RightRangeValuePointer = pointerToRangeValue(Right)) {
-      return Symbol == Right.Symbol
-          && RangeValuePointer == RightRangeValuePointer;
-    }
-  }
-  return false;
+  return isEqual(Symbol, Range, Right.Symbol, Right.Range);
 }
 
-IndexedSymbolWithRange::
-  IndexedSymbolWithRange(const int Index,
-                         const struct SymbolWithRange &SymbolWithRange)
-: Index(Index), SymbolWithRange(SymbolWithRange) {}
+IndexedDeclWithSymbolWithRange::
+  IndexedDeclWithSymbolWithRange(const int Index,
+                                 const DeclWithSymbolWithRange &DeclAndSymbolAndRange)
+: Index(Index),
+  Declaration(DeclAndSymbolAndRange.Declaration),
+  Symbol(DeclAndSymbolAndRange.Symbol),
+  Range(DeclAndSymbolAndRange.Range) {}
 
-bool IndexedSymbolWithRange::SymbolCompare::
-  operator() (const IndexedSymbolWithRange& Left,
-              const IndexedSymbolWithRange& Right) const {
-  return Left.SymbolWithRange.Symbol < Right.SymbolWithRange.Symbol;
+bool IndexedDeclWithSymbolWithRange::SymbolCompare::
+  operator() (const IndexedDeclWithSymbolWithRange& Left,
+              const IndexedDeclWithSymbolWithRange& Right) const {
+  return Left.Symbol < Right.Symbol;
 }
 
-bool IndexedSymbolWithRange::SymbolWithRangeCompare::
-  operator() (const IndexedSymbolWithRange& Left,
-              const IndexedSymbolWithRange& Right) const {
-  return Left.SymbolWithRange < Right.SymbolWithRange;
+bool IndexedDeclWithSymbolWithRange::SymbolWithRangeCompare::
+  operator() (const IndexedDeclWithSymbolWithRange& Left,
+              const IndexedDeclWithSymbolWithRange& Right) const {
+  return isLess(Left.Symbol, Left.Range, Right.Symbol, Right.Range);
 }
 
 } //namespace obfuscation
diff --git a/swift/lib/Obfuscation/DeclarationParser.cpp b/swift/lib/Obfuscation/DeclarationParser.cpp
deleted file mode 100644
index 16ac3e7971b..00000000000
--- a/swift/lib/Obfuscation/DeclarationParser.cpp
+++ /dev/null
@@ -1,133 +0,0 @@
-#include "swift/Obfuscation/DeclarationParser.h"
-#include "swift/Obfuscation/NominalTypeDeclarationParser.h"
-#include "swift/Obfuscation/VariableDeclarationParser.h"
-#include "swift/Obfuscation/OperatorParser.h"
-#include "swift/Obfuscation/FunctionDeclarationParser.h"
-#include "swift/Obfuscation/ParameterDeclarationParser.h"
-#include "swift/Obfuscation/Utils.h"
-
-namespace swift {
-namespace obfuscation {
-
-bool isNominal(Decl* Declaration) {
-  return dyn_cast<NominalTypeDecl>(Declaration) != nullptr;
-}
-
-bool isFunc(Decl* Declaration) {
-  return dyn_cast<FuncDecl>(Declaration) != nullptr;
-}
-
-bool isOperator(Decl* Declaration) {
-  return dyn_cast<OperatorDecl>(Declaration) != nullptr;
-}
-
-bool isConstructor(Decl* Declaration) {
-  return dyn_cast<ConstructorDecl>(Declaration) != nullptr;
-}
-
-bool isParam(Decl* Declaration) {
-  return dyn_cast<ParamDecl>(Declaration) != nullptr;
-}
-
-bool isVariable(Decl* Declaration) {
-  return dyn_cast<VarDecl>(Declaration) != nullptr;
-}
-
-std::unique_ptr<SymbolsOrError>
-appendRangeToSymbol(SingleSymbolOrError &&SymbolOrError, CharSourceRange Range) {
-  if (auto Error = SymbolOrError.takeError()) {
-    return llvm::make_unique<SymbolsOrError>(std::move(Error));
-  }
-  std::vector<SymbolWithRange> Symbols { SymbolWithRange(SymbolOrError.get(),
-                                                         Range) };
-  return llvm::make_unique<SymbolsOrError>(Symbols);
-}
-
-std::unique_ptr<SymbolsOrError> parseAsNominal(Decl* Declaration,
-                                                    CharSourceRange Range) {
-  auto NominalDeclaration = dyn_cast<NominalTypeDecl>(Declaration);
-  return appendRangeToSymbol(parse(NominalDeclaration), Range);
-}
-
-std::unique_ptr<SymbolsOrError> parseAsFunction(
-                                      GlobalCollectedSymbols &CollectedSymbols,
-                                      Decl* Declaration,
-                                      CharSourceRange Range) {
-  
-  auto FunctionDeclaration = dyn_cast<FuncDecl>(Declaration);
-  if (FunctionDeclaration->isOperator()) {
-    return llvm::make_unique<SymbolsOrError>(parseOperator(FunctionDeclaration,
-                                                           Range));
-  } else {
-    return llvm::make_unique<SymbolsOrError>(parse(CollectedSymbols,
-                                                   FunctionDeclaration,
-                                                   Range));
-  }
-}
-
-std::unique_ptr<SymbolsOrError> parseAsOperator(Decl* Declaration,
-                                                CharSourceRange Range) {
-  const auto *OperatorDeclaration = dyn_cast<OperatorDecl>(Declaration);
-  return appendRangeToSymbol(parse(OperatorDeclaration), Range);
-}
-
-std::unique_ptr<SymbolsOrError> parseAsConstructor(Decl* Declaration,
-                                                   CharSourceRange Range) {
-  const auto *ConstructorDeclaration = dyn_cast<ConstructorDecl>(Declaration);
-  return llvm::make_unique<SymbolsOrError>(parse(ConstructorDeclaration,
-                                                 Range));
-}
-
-std::unique_ptr<SymbolsOrError> parseAsParam(Decl* Declaration,
-                                             CharSourceRange Range) {
-  const auto *ParamDeclaration = dyn_cast<ParamDecl>(Declaration);
-  auto Symbols = parseSeparateDeclarationWithRange(ParamDeclaration, Range);
-  return llvm::make_unique<SymbolsOrError>(std::move(Symbols));
-}
-
-std::unique_ptr<SymbolsOrError> parseAsVariable(Decl* Declaration,
-                                                CharSourceRange Range) {
-  const auto *VariableDeclaration = dyn_cast<VarDecl>(Declaration);
-  if (VariableDeclaration->isImplicit()) {
-    return llvm::make_unique<SymbolsOrError>(
-             stringError("Only explicit variables might be safely obfuscated"));
-  }
-  return appendRangeToSymbol(parse(VariableDeclaration), Range);
-}
-
-SymbolsOrError extractSymbol(GlobalCollectedSymbols &CollectedSymbols,
-                             Decl* Declaration,
-                             CharSourceRange Range) {
-
-  std::unique_ptr<SymbolsOrError> SymbolsOrErrorPointer(nullptr);
-
-  if (isNominal(Declaration)) {
-    SymbolsOrErrorPointer = parseAsNominal(Declaration, Range);
-  } else if (isFunc(Declaration)) {
-    SymbolsOrErrorPointer = parseAsFunction(CollectedSymbols,
-                                            Declaration,
-                                            Range);
-  } else if (isOperator(Declaration)) {
-    SymbolsOrErrorPointer = parseAsOperator(Declaration, Range);
-  } else if (isConstructor(Declaration)) {
-    SymbolsOrErrorPointer = parseAsConstructor(Declaration, Range);
-  } else if (isParam(Declaration)) {
-    SymbolsOrErrorPointer = parseAsParam(Declaration, Range);
-  } else if (isVariable(Declaration)) {
-    SymbolsOrErrorPointer = parseAsVariable(Declaration, Range);
-  } else {
-    return stringError("unsupported declaration type");
-  }
-
-  if (SymbolsOrErrorPointer != nullptr) {
-    if (auto Error = SymbolsOrErrorPointer->takeError()) {
-      return std::move(Error);
-    }
-    return SymbolsOrErrorPointer->get();
-  } else {
-    return stringError("unsupported declaration type");
-  }
-}
-  
-} //namespace obfuscation
-} //namespace swift
diff --git a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp b/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
deleted file mode 100644
index 135a74ad325..00000000000
--- a/swift/lib/Obfuscation/DeclarationParsingUtils.cpp
+++ /dev/null
@@ -1,222 +0,0 @@
-#include "swift/Obfuscation/DeclarationParsingUtils.h"
-#include "swift/Obfuscation/Utils.h"
-
-#include <sstream>
-#include <string>
-#include <vector>
-
-namespace swift {
-namespace obfuscation {
-  
-std::string combineIdentifier(std::vector<std::string> &Parts) {
-  if (Parts.empty()) {
-    return "";
-  } else if (Parts.size() == 1) {
-    return Parts[0];
-  } else {
-    //TODO: can we rewrite it to use llvm:raw_string_ostream?
-    std::stringstream ResultStream;
-    copyToStream(Parts, std::ostream_iterator<std::string>(ResultStream, "."));
-    std::string Result = ResultStream.str();
-    Result.pop_back();
-    return Result;
-  }
-}
-
-bool isOverriddenMethodFromTheSameModule(const std::set<std::string> &Modules,
-                                         const std::string &OriginModuleName) {
-  return Modules.size() == 0
-     || (Modules.size() == 1 && Modules.count(OriginModuleName) == 1);
-}
-
-std::string declarationName(const ValueDecl* Declaration) {
-  return Declaration->getName().str().str();
-}
-  
-std::string moduleName(const Decl* Declaration) {
-  return Declaration->getModuleContext()->getBaseName().getIdentifier().get();
-}
-
-std::string externalParameterName(const ParamDecl *Declaration) {
-  return Declaration->getArgumentName().str().str();
-}
-
-std::string internalParameterName(const ParamDecl *Declaration) {
-  return Declaration->getName().str().str();
-}
-
-std::string symbolName(const OperatorDecl *Declaration) {
-  return Declaration->getName().str().str();
-}
-
-std::string functionName(const AbstractFunctionDecl* Declaration) {
-    return Declaration->getName().str().str();
-}
-
-llvm::Expected<std::vector<std::string>>
-nominalTypeIdentifierParts(const NominalTypeDecl *Declaration,
-                           const std::string &SymbolName) {
-
-  std::vector<std::string> Parts;
-  switch (Declaration->getKind()) {
-    case DeclKind::Enum:
-      Parts.push_back("enum." + SymbolName);
-      break;
-    case DeclKind::Class:
-      Parts.push_back("class." + SymbolName);
-      break;
-    case DeclKind::Protocol:
-      Parts.push_back("protocol." + SymbolName);
-      break;
-    case DeclKind::Struct:
-      Parts.push_back("struct." + SymbolName);
-      break;
-    default:
-      return stringError("found unsupported declaration type");
-  }
-  return Parts;
-}
-
-ModuleNameAndParts moduleNameAndIdentifierParts(const Decl *Declaration) {
-  std::string ModuleName = moduleName(Declaration);
-  std::vector<std::string> Parts;
-  Parts.push_back("module");
-  Parts.push_back(ModuleName);
-  return std::make_pair(ModuleName, Parts);
-}
-
-std::string typeName(const NominalTypeDecl* Declaration) {
-  return Declaration->getDeclaredInterfaceType()->getString();
-}
-
-llvm::Expected<std::string> enclosingTypeName(const Decl* Declaration) {
-  auto *DeclarationContext = Declaration->getDeclContext();
-  if (auto *TypeDeclaration =
-      DeclarationContext->getAsNominalTypeOrNominalTypeExtensionContext()) {
-    return typeName(TypeDeclaration);
-  }
-  return stringError("enclosing context of this declaration is not supported");
-}
-
-template<class T>
-const T* findRecursivelyBaseOverridenDeclarationWithModules
-(const T *Declaration, std::set<std::string> &Modules) {
-  static_assert(std::is_base_of<Decl, T>::value, "T is not a subclass of Decl");
-  if (auto* OverrideDeclaration = Declaration->getOverriddenDecl()) {
-    Modules.insert(moduleName(OverrideDeclaration));
-    return
-    findRecursivelyBaseOverridenDeclarationWithModules(OverrideDeclaration,
-                                                       Modules);
-  } else {
-    return Declaration;
-  }
-}
-  
-template<class T>
-std::pair<const T*, std::set<std::string>>
-getBaseOverridenDeclarationWithModules(const T *Declaration) {
-  std::set<std::string> Modules;
-  auto Base = findRecursivelyBaseOverridenDeclarationWithModules(Declaration,
-                                                                 Modules);
-  return std::make_pair(Base, Modules);
-}
-
-ClassDeclarationsWithModules
-findRecursivelySuperClassDeclarationsWithModules(const ClassDecl *Declaration,
-                                                ClassDeclarationsWithModules &DeclarationsWithModules) {
-  if (auto* OverridenDeclaration = Declaration->getSuperclassDecl()) {
-    auto DeclarationAndModule =
-      std::make_pair(OverridenDeclaration, moduleName(OverridenDeclaration));
-    DeclarationsWithModules.push_back(DeclarationAndModule);
-    return findRecursivelySuperClassDeclarationsWithModules(OverridenDeclaration,
-                                                            DeclarationsWithModules);
-  }
-  return DeclarationsWithModules;
-}
-
-ClassDeclarationsWithModules
-getSuperClassDeclarationsWithModules(const ClassDecl *Declaration) {
-  ClassDeclarationsWithModules DeclarationsWithModules;
-  return findRecursivelySuperClassDeclarationsWithModules(Declaration,
-                                                         DeclarationsWithModules);
-}
-
-void
-findRecursivelyConformingProtocolDeclarationsWithModules(const NominalTypeDecl *Declaration,
-                                                         ProtocolDeclarationsWithModules &DeclarationsWithModules) {
-
-  for (auto Inherited : Declaration->getInherited()) {
-    if (auto *ProtocolDeclaration =
-          dyn_cast_or_null<ProtocolDecl>(Inherited.getType()->getAnyNominal())) {
-      auto DeclarationAndModule =
-        std::make_pair(ProtocolDeclaration, moduleName(ProtocolDeclaration));
-      auto InsertionResult = DeclarationsWithModules.insert(DeclarationAndModule);
-      if (InsertionResult.second) {
-        findRecursivelyConformingProtocolDeclarationsWithModules(ProtocolDeclaration,
-                                                                 DeclarationsWithModules);
-      }
-    }
-  }
-}
-
-ProtocolDeclarationsWithModules
-getConformingProtocolDeclarationsWithModules(const NominalTypeDecl *Declaration) {
-  ProtocolDeclarationsWithModules DeclarationsWithModules;
-  findRecursivelyConformingProtocolDeclarationsWithModules(Declaration,
-                                                           DeclarationsWithModules);
-  return DeclarationsWithModules;
-}
-
-template
-std::pair<const VarDecl*, std::set<std::string>>
-getBaseOverridenDeclarationWithModules(const VarDecl *Declaration);
-template
-std::pair<const FuncDecl*, std::set<std::string>>
-getBaseOverridenDeclarationWithModules(const FuncDecl *Declaration);
-template
-std::pair<const AbstractFunctionDecl*, std::set<std::string>>
-getBaseOverridenDeclarationWithModules(const AbstractFunctionDecl *Declaration);
-
-// Determines if the ConstructorDecl represents the Struct Memberwise
-// Initializer. Checks if the declaration is implicit. Also checks if
-// parameters list (other than self parameter) is not empty to exclude
-// Default Initializers.
-bool isMemberwiseConstructor(const ConstructorDecl* Declaration) {
-  auto ConstructsStruct = Declaration->getResultInterfaceType()->
-  getStructOrBoundGenericStruct() != nullptr;
-  
-  return ConstructsStruct
-  && Declaration->isImplicit()
-  && Declaration->getParameters()->size() != 0;
-}
-  
-bool isMemberwiseConstructorParameter(const ParamDecl* Declaration) {
-  auto *Context = Declaration->getDeclContext();
-  if (const auto *ConstructorDeclaration = dyn_cast<ConstructorDecl>(Context)) {
-    return isMemberwiseConstructor(ConstructorDeclaration);
-  }
-  return false;
-}
-  
-llvm::Expected<CharSourceRange>
-rangeOfFirstOccurenceOfStringInSourceLoc(std::string String,
-                                         SourceLoc StartSourceLoc) {
-  auto StartLoc =
-    static_cast<const char*>(StartSourceLoc.getOpaquePointerValue());
-  std::string StartLocString(StartLoc);
-  
-  auto FoundPosition = StartLocString.find(String);
-  if (FoundPosition == std::string::npos) {
-    return stringError("Failed to find the string occurence"
-                       "in source location");
-  }
-  
-  auto FirstOccurenceSourceLoc = StartSourceLoc.getAdvancedLoc(FoundPosition);
-  auto Range = CharSourceRange(FirstOccurenceSourceLoc, String.size());
-  
-  return Range;
-}
-
-} //namespace obfuscation
-} //namespace swift
-
diff --git a/swift/lib/Obfuscation/Excluder.cpp b/swift/lib/Obfuscation/Excluder.cpp
index a8284b3015c..6685db930f6 100644
--- a/swift/lib/Obfuscation/Excluder.cpp
+++ b/swift/lib/Obfuscation/Excluder.cpp
@@ -1,41 +1,204 @@
 #include "swift/Obfuscation/Excluder.h"
-#include "swift/Obfuscation/DeclarationParsingUtils.h"
-#include "swift/Obfuscation/Utils.h"
-#include "swift/Obfuscation/VariableDeclarationParser.h"
-#include "swift/Obfuscation/DeclarationParser.h"
 
 namespace swift {
 namespace obfuscation {
-  
-void Excluder::
-excludeSymbolsFrom(GlobalCollectedSymbols &CollectedSymbols) {
-  
-  std::vector<IndexedSymbolWithRange> SymbolsToRemove;
-  
-  for (auto *Declaration : DeclarationsToExclude) {
-    
-    auto Range = CharSourceRange();
-    auto SymbolsOrError = extractSymbol(CollectedSymbols, Declaration, Range);
-    if (auto Error = SymbolsOrError.takeError()) {
-      llvm::consumeError(std::move(Error));
+
+ConfigurationExcluder::
+ConfigurationExcluder(ObfuscationConfiguration && Configuration,
+                      class NominalTypeExtractor &Extractor)
+: Configuration(std::move(Configuration)),
+  NominalTypeExtractor(Extractor) {}
+
+bool
+ConfigurationExcluder::
+shouldExclude(Decl *Declaration,
+              const std::pair<const ClassDecl *,
+              std::string> &DeclarationAndModule,
+              const InheritanceExclusion *ExcludedType) {
+  auto TypeName = NominalTypeExtractor.typeName(DeclarationAndModule.first);
+  auto ModuleName = DeclarationAndModule.second;
+  if (ExcludedType->Base == TypeName
+      && ExcludedType->Module == ModuleName) {
+    return true;
+  }
+  return false;
+}
+
+bool ConfigurationExcluder::
+handleTypeExclusion(const TypeExclusion *Exclusion, Decl *Declaration) {
+  NominalTypeDecl* NominalTypeDeclaration = nullptr;
+  if (auto *NominalType = dyn_cast<NominalTypeDecl>(Declaration)) {
+    NominalTypeDeclaration = NominalType;
+  } else if (auto *Extension = dyn_cast<ExtensionDecl>(Declaration)) {
+    NominalTypeDeclaration = Extension->getExtendedType()->getAnyNominal();
+  }
+  if (Exclusion != nullptr && NominalTypeDeclaration != nullptr) {
+    auto TypeName = NominalTypeExtractor.typeName(NominalTypeDeclaration);
+    auto ModuleName = NominalTypeExtractor.moduleName(NominalTypeDeclaration);
+    if (Exclusion->Name == TypeName
+        && Exclusion->Module == ModuleName) {
+      return true;
+    }
+  }
+  return false;
+}
+
+bool ConfigurationExcluder::
+handleInheritanceExclusion(const InheritanceExclusion *Exclusion,
+                           Decl *Declaration) {
+
+  ClassDecl* ClassDeclaration = nullptr;
+  if (auto *ClassType = dyn_cast<ClassDecl>(Declaration)) {
+    ClassDeclaration = ClassType;
+  } else if (auto *Extension = dyn_cast<ExtensionDecl>(Declaration)) {
+    ClassDeclaration =
+    Extension->getExtendedType()->getClassOrBoundGenericClass();
+  }
+
+  if (Exclusion != nullptr && ClassDeclaration != nullptr) {
+    auto DeclarationsWithModules = NominalTypeExtractor
+    .getSuperClassDeclarationsWithModules(ClassDeclaration);
+    if (!DeclarationsWithModules.empty()) {
+      if (Exclusion->Transitive) {
+        for (auto DeclarationAndModule : DeclarationsWithModules) {
+          if (shouldExclude(Declaration, DeclarationAndModule, Exclusion)) {
+            return true;
+          }
+        }
+        return false;
+      } else {
+        return shouldExclude(Declaration,
+                             DeclarationsWithModules.front(),
+                             Exclusion);
+      }
+    }
+  }
+  return false;
+}
+
+bool ConfigurationExcluder::
+handleConformanceExclusion(const ConformanceExclusion *Exclusion,
+                           Decl *Declaration) {
+
+  NominalTypeDecl* NominalTypeDeclaration = nullptr;
+  if (auto *NominalType = dyn_cast<NominalTypeDecl>(Declaration)) {
+    NominalTypeDeclaration = NominalType;
+  } else if (auto *Extension = dyn_cast<ExtensionDecl>(Declaration)) {
+    NominalTypeDeclaration = Extension->getExtendedType()->getAnyNominal();
+  }
+
+  if (Exclusion != nullptr && NominalTypeDeclaration != nullptr) {
+    if (Exclusion->Transitive) {
+      std::vector<const NominalTypeDecl *>
+      DeclarationsToIdentifyProtocolsConformance;
+      DeclarationsToIdentifyProtocolsConformance
+      .push_back(NominalTypeDeclaration);
+      if (auto *ClassDeclaration =
+          dyn_cast<ClassDecl>(NominalTypeDeclaration)) {
+        auto DeclarationsWithModules = NominalTypeExtractor
+        .getSuperClassDeclarationsWithModules(ClassDeclaration);
+        for (auto DeclarationAndModule : DeclarationsWithModules) {
+          DeclarationsToIdentifyProtocolsConformance
+          .push_back(DeclarationAndModule.first);
+        }
+      }
+      for (auto DeclarationToIdentify
+           : DeclarationsToIdentifyProtocolsConformance) {
+        auto ProtocolsWithModules = NominalTypeExtractor
+        .getConformingProtocolDeclarationsWithModules(DeclarationToIdentify);
+        for (auto ProtocolAndModule : ProtocolsWithModules) {
+          auto TypeName = NominalTypeExtractor.typeName(ProtocolAndModule.first);
+          auto ModuleName = ProtocolAndModule.second;
+          if (Exclusion->Protocol == TypeName
+              && Exclusion->Module == ModuleName) {
+            return true;
+          }
+        }
+      }
     } else {
-      auto Symbols = SymbolsOrError.get();
-      for (auto CollectedSymbol : CollectedSymbols) {
-        for (auto Symbol : Symbols) {
-          if(CollectedSymbol.SymbolWithRange.Symbol.Identifier
-             == Symbol.Symbol.Identifier) {
-            SymbolsToRemove.push_back(CollectedSymbol);
+      auto InheritedArray = NominalTypeDeclaration->getInherited();
+      for (auto Inherited : InheritedArray) {
+        auto Nominal = Inherited.getType()->getAnyNominal();
+        if (auto *Protocol = dyn_cast_or_null<ProtocolDecl>(Nominal)) {
+          auto TypeName = NominalTypeExtractor.typeName(Protocol);
+          auto ModuleName = NominalTypeExtractor.moduleName(Protocol);
+          if (Exclusion->Protocol == TypeName
+              && Exclusion->Module == ModuleName) {
+            return true;
           }
         }
       }
     }
   }
-  
-  for (auto IndexedSymbolWithRange : SymbolsToRemove) {
-    CollectedSymbols.erase(IndexedSymbolWithRange);
+  return false;
+}
+
+llvm::Optional<DeclWithSymbolWithRange> ConfigurationExcluder::
+symbolsToExclude(DeclWithSymbolWithRange &DeclAndSymbolWithRange) {
+
+  bool shouldExclude = false;
+
+  for (auto &Exclusion : this->Configuration.Exclude) {
+    switch (Exclusion->Kind) {
+      case ExclusionKind::UnknownKind:
+        break;
+      case ExclusionKind::Type: {
+        auto *TypeExclusion = Exclusion->getAsTypeExclusion();
+        shouldExclude = handleTypeExclusion(TypeExclusion,
+                                            DeclAndSymbolWithRange.Declaration);
+        break;
+      }
+      case ExclusionKind::Inheritance: {
+        auto *InheritanceExclusion = Exclusion->getAsInheritanceExclusion();
+        shouldExclude = handleInheritanceExclusion(InheritanceExclusion,
+                                                   DeclAndSymbolWithRange.Declaration);
+        break;
+      }
+      case ExclusionKind::Conformance: {
+        auto *ConformanceExclusion = Exclusion->getAsConformanceExclusion();
+        shouldExclude = handleConformanceExclusion(ConformanceExclusion,
+                                                   DeclAndSymbolWithRange.Declaration);
+        break;
+      }
+    }
+    if (shouldExclude) { return DeclAndSymbolWithRange; }
   }
+
+  return llvm::None;
 }
-  
+
+
+llvm::Optional<DeclWithSymbolWithRange>
+NSManagedExcluder::
+  symbolsToExclude(DeclWithSymbolWithRange &DeclAndSymbolWithRange) {
+
+  if (auto NominalDeclaration =
+        dyn_cast<NominalTypeDecl>(DeclAndSymbolWithRange.Declaration)) {
+
+    auto ClassOrExtensionCtx
+      = NominalDeclaration->getAsClassOrClassExtensionContext();
+
+    if(ClassOrExtensionCtx != nullptr) {
+
+      auto SuperClass =
+        NominalDeclaration->getAsClassOrClassExtensionContext()->getSuperclassDecl();
+      if(SuperClass != nullptr) {
+
+        if(SuperClass->getName().str() == "NSManagedObject") {
+          return DeclAndSymbolWithRange;
+        }
+      }
+    }
+
+  } else if (auto *VariableDeclaration =
+              dyn_cast<VarDecl>(DeclAndSymbolWithRange.Declaration)) {
+
+    if(VariableDeclaration->getAttrs().hasAttribute<NSManagedAttr>()) {
+      return DeclAndSymbolWithRange;
+    }
+  }
+  return llvm::None;
+}
+
 } //namespace obfuscation
 } //namespace swift
-
diff --git a/swift/lib/Obfuscation/ExpressionParser.cpp b/swift/lib/Obfuscation/ExpressionParser.cpp
deleted file mode 100644
index 70c3a513505..00000000000
--- a/swift/lib/Obfuscation/ExpressionParser.cpp
+++ /dev/null
@@ -1,273 +0,0 @@
-#include "swift/Obfuscation/ExpressionParser.h"
-#include "swift/Obfuscation/ParameterDeclarationParser.h"
-#include "swift/Obfuscation/NominalTypeDeclarationParser.h"
-#include "swift/Obfuscation/Utils.h"
-#include "swift/Obfuscation/DeclarationParsingUtils.h"
-
-namespace swift {
-namespace obfuscation {
-  
-llvm::Expected<AbstractFunctionDecl*>
-declarationOfFunctionCalledInExpression(CallExpr *CallExpression) {
-  auto *CallFn = CallExpression->getFn();
-
-  if (auto *DotSyntaxCallExpression = dyn_cast<DotSyntaxCallExpr>(CallFn)) {
-    auto *DotFn = DotSyntaxCallExpression->getFn();
-    
-    if (auto *OtherConstructor = dyn_cast<OtherConstructorDeclRefExpr>(DotFn)) {
-      // It's a super call like super.init()
-      auto *Decl = OtherConstructor->getDecl();
-
-      if (auto *FunctionDeclaration =
-            dyn_cast_or_null<AbstractFunctionDecl>(Decl)) {
-        return FunctionDeclaration;
-      }
-    } else {
-      // It's not a super.init call, just a function call
-      if (auto *DeclRefExpression = dyn_cast<DeclRefExpr>(DotFn)) {
-        auto *Decl = DeclRefExpression->getDecl();
-
-        if (auto *FunctionDeclaration =
-              dyn_cast_or_null<AbstractFunctionDecl>(Decl)) {
-          return FunctionDeclaration;
-        }
-      }
-    }
-  } else if (auto *Constructor = dyn_cast<ConstructorRefCallExpr>(CallFn)) {
-    // It's a constructor call
-    auto * ConstructorFn = Constructor->getFn();
-
-    if (auto *DeclarationRefExpression = dyn_cast<DeclRefExpr>(ConstructorFn)) {
-      auto* Decl = DeclarationRefExpression->getDecl();
-
-      if (auto *FunctionDeclaration =
-            dyn_cast_or_null<AbstractFunctionDecl>(Decl)) {
-        return FunctionDeclaration;
-      }
-    }
-  } else if (auto *Expression = dyn_cast<Expr>(CallFn)) {
-    // This branch is executed for example when
-    // a function is being called inside set {} block
-    auto *Decl = Expression->getReferencedDecl().getDecl();
-    
-    if (auto *FunctionDeclaration =
-          dyn_cast_or_null<AbstractFunctionDecl>(Decl)) {
-      return FunctionDeclaration;
-    }
-  }
-  return stringError("Cannot found supported Call Expression subtree pattern");
-}
-
-std::vector<std::pair<Identifier, SourceLoc>>
-validArguments(CallExpr *CallExpression) {
-
-  std::vector<std::pair<Identifier, SourceLoc>> ValidArguments;
-  
-  for (unsigned i = 0; i < CallExpression->getNumArguments(); ++i) {
-    auto Label = CallExpression->getArgumentLabels()[i];
-    auto Location = CallExpression->getArgumentLabelLoc(i);
-    if (Location.isValid()) {
-      ValidArguments.push_back(std::make_pair(Label, Location));
-    }
-  }
-  
-  return ValidArguments;
-}
-  
-SymbolsOrError parseCallExpressionWithArguments(CallExpr* CallExpression) {
-  
-  std::vector<SymbolWithRange> Symbols;
-  auto FunctionDeclarationOrError =
-    declarationOfFunctionCalledInExpression(CallExpression);
-  if (auto Error = FunctionDeclarationOrError.takeError()) {
-    return std::move(Error);
-  }
-  auto FunctionDeclaration = FunctionDeclarationOrError.get();
-  
-  auto SymbolsOrError =
-    parseFunctionFromCallExpressionForParameters(FunctionDeclaration);
-  if (auto Error = SymbolsOrError.takeError()) {
-    return std::move(Error);
-  }
-
-  auto CopyOfSymbols = SymbolsOrError.get();
-
-  auto ValidArguments = validArguments(CallExpression);
-  for (size_t i = 0; i < ValidArguments.size(); ++i) {
-
-    auto Label = ValidArguments[i].first;
-    auto Location = ValidArguments[i].second;
-    if (ValidArguments.size() == SymbolsOrError.get().size()) {
-      // The same number of named arguments in call and
-      // external/single parameters in function means that
-      // there are no parameters in this function that are default
-      // or with the external name
-      auto Symbol = SymbolsOrError.get()[i];
-      if (Location.isValid() && Symbol.Symbol.Name == Label.str().str()) {
-        auto Range = CharSourceRange(Location, Label.getLength());
-        Symbols.push_back(SymbolWithRange(Symbol.Symbol, Range));
-      }
-
-    } else {
-      // There is different number of named arguments in call
-      // and external/single parameters in function. It means that
-      // some of the parameters are not required
-      // (default or without external name)
-      for (auto Symbol : CopyOfSymbols) {
-        if (Location.isValid() && Symbol.Symbol.Name == Label.str().str()) {
-          removeFromVector(CopyOfSymbols, Symbol);
-          auto Range = CharSourceRange(Location, Label.getLength());
-          Symbols.push_back(SymbolWithRange(Symbol.Symbol, Range));
-          break;
-        }
-      }
-    }
-  }
-
-  return Symbols;
-}
-  
-SymbolsOrError
-parseGenericParameters(BoundGenericType *BoundGenericType,
-                       SourceLoc OpeningAngleBracketLoc) {
-  std::vector<SymbolWithRange> Symbols;
-  auto Parameters = BoundGenericType->getGenericArgs();
-  for (auto Parameter : Parameters) {
-    NominalTypeDecl *ParameterDecl = nullptr;
-    if (OptionalType::classof(Parameter.getPointer())) {
-      ParameterDecl =
-      Parameter->getOptionalObjectType()->getAnyNominal();
-    } else {
-      ParameterDecl = Parameter->getAnyNominal();
-    }
-    auto ParameterSymbol = parse(ParameterDecl);
-    if (auto Error = ParameterSymbol.takeError()) {
-      return std::move(Error);
-    }
-    auto ParameterName =
-    ParameterDecl->getBaseName().getIdentifier().str();
-    auto GenericArgRange =
-      rangeOfFirstOccurenceOfStringInSourceLoc(ParameterName,
-                                               OpeningAngleBracketLoc);
-    if (auto Error = GenericArgRange.takeError()) {
-      return std::move(Error);
-    }
-    Symbols.push_back(SymbolWithRange(ParameterSymbol.get(),
-                                      GenericArgRange.get()));
-  }
-  return Symbols;
-}
-
-SymbolsOrError parse(CallExpr* CallExpression) {
-  if (CallExpression->hasArgumentLabelLocs()) {
-    return parseCallExpressionWithArguments(CallExpression);
-  }
-  return stringError("Unsupported type of expression");
-}
-  
-// This function handles the specific case of `is` cast of non-optional
-// to optional type or vice versa. In contrast to other castings
-// (represented as is_subtype_expr), this kind of cast is represented
-// in AST as enum_is_case_expr node. When parsing this kind of cast
-// we don't get the callback in SymbolsWalkerAndCollector with NominalTypeDecl
-// representing the CastType (cast-to type) so we have to extract it
-// from the EnumIsCaseExpression.
-SymbolsOrError parse(EnumIsCaseExpr* EnumIsCaseExpression) {
-  ExplicitCastExpr *ExplicitCastExpression = nullptr;
-  
-  // This callback invoked using forEachChildExpr() is used to extract the
-  // declaration of the CastType and the location of the `is` keyword.
-  const std::function<Expr*(Expr*)> &callback =
-    [&ExplicitCastExpression](Expr* Child) -> Expr* {
-      
-    // We're looking for CoerceExpr (non-optional to optional type cast)
-    // or ConditionalCheckedCastExpr (optional to non-optional type cast)
-    // which both are subclasses of ExplicitCastExpr.
-    if (ExplicitCastExpr::classof(Child)) {
-      ExplicitCastExpression = dyn_cast<ExplicitCastExpr>(Child);
-    }
-      
-    return Child;
-  };
-  EnumIsCaseExpression->forEachChildExpr(callback);
-  
-  if (ExplicitCastExpression != nullptr) {
-    auto CastType = ExplicitCastExpression->getCastTypeLoc().getType();
-    
-    // The data representing the location of the CastType in the expression
-    // seems to be impossible to retrieve from the EnumIsCastExpression
-    // and its subexpressions. We have to calculate the CastType location
-    // later using `is` keyword and CastType name.
-    auto IsKeywordSourceLoc = ExplicitCastExpression->getAsLoc();
-  
-    Type UnwrappedCastType;
-    if (ConditionalCheckedCastExpr::classof(ExplicitCastExpression)) {
-      UnwrappedCastType = CastType;
-    } else if (CoerceExpr::classof(ExplicitCastExpression)) {
-      UnwrappedCastType = CastType->getOptionalObjectType();
-    } else {
-      return stringError("Unsupported type of explicit cast expression");
-    }
-    
-    NominalTypeDecl *CastTypeDeclaration = UnwrappedCastType->getAnyNominal();
-    
-    if (CastTypeDeclaration != nullptr) {
-      auto CastTypeSymbol = parse(CastTypeDeclaration);
-      if (auto Error = CastTypeSymbol.takeError()) {
-        return std::move(Error);
-      }
-      
-      auto CastTypeName =
-        CastTypeDeclaration->getBaseName().getIdentifier().str();
-      auto CastTypeRange =
-        rangeOfFirstOccurenceOfStringInSourceLoc(CastTypeName,
-                                                 IsKeywordSourceLoc);
-      if (auto Error = CastTypeRange.takeError()) {
-        return std::move(Error);
-      }
-      
-      std::vector<SymbolWithRange> Symbols;
-      Symbols.push_back(SymbolWithRange(CastTypeSymbol.get(),
-                                        CastTypeRange.get()));
-      
-      if (auto *GenericBoundType =
-            dyn_cast<BoundGenericType>(UnwrappedCastType.getPointer())) {
-        
-        auto GenericNameEndLoc = CastTypeRange.get().getEnd();
-        auto OpeningAngleBracketRange =
-          rangeOfFirstOccurenceOfStringInSourceLoc("<", GenericNameEndLoc);
-        if (auto Error = OpeningAngleBracketRange.takeError()) {
-          return std::move(Error);
-        }
-        auto OpeningAngleBracketLoc = OpeningAngleBracketRange.get().getStart();
-        
-        auto GenericParamsSymbols =
-          parseGenericParameters(GenericBoundType, OpeningAngleBracketLoc);
-        if (auto Error = GenericParamsSymbols.takeError()) {
-          return std::move(Error);
-        }
-        
-        copyToVector(GenericParamsSymbols.get(), Symbols);
-      }
-      
-      return Symbols;
-    }
-  }
-  
-  return stringError("Failed to extract the cast-to type symbol"
-                     "from the EnumIsCase expression");
-}
-
-SymbolsOrError extractSymbol(Expr* Expression) {
-  if (auto *CallExpression = dyn_cast<CallExpr>(Expression)) {
-    return parse(CallExpression);
-  } else if (auto *EnumIsCaseExpression = dyn_cast<EnumIsCaseExpr>(Expression)) {
-    // Expression of `is` casting non-optional to optional type or vice versa.
-    return parse(EnumIsCaseExpression);
-  }
-  
-  return stringError("Unsupported type of expression");
-}
-  
-} //namespace obfuscation
-} //namespace swift
diff --git a/swift/lib/Obfuscation/ExtensionExcluder.cpp b/swift/lib/Obfuscation/ExtensionExcluder.cpp
deleted file mode 100644
index 344b79f1b80..00000000000
--- a/swift/lib/Obfuscation/ExtensionExcluder.cpp
+++ /dev/null
@@ -1,86 +0,0 @@
-#include "swift/Obfuscation/ExtensionExcluder.h"
-#include "swift/Obfuscation/DeclarationParser.h"
-#include "swift/Obfuscation/DeclarationParsingUtils.h"
-#include "swift/Obfuscation/NominalTypeDeclarationParser.h"
-#include "swift/Obfuscation/FunctionDeclarationParser.h"
-
-namespace swift {
-namespace obfuscation {
-
-void
-ExtensionExcluder::
-identifyExclusions(Decl *Declaration) {
-
-  if(auto ExtensionDeclaration = dyn_cast<ExtensionDecl>(Declaration)) {
-    
-    std::vector<SymbolWithRange> Results;
-    auto *ExtendedType = ExtensionDeclaration->getExtendedType()->getAnyNominal();
-    auto ExtensionModuleName = moduleName(ExtensionDeclaration);
-    if (ExtendedType == nullptr) {
-      return;
-    }
-
-    auto ExtendedTypeModuleName = moduleName(ExtendedType);
-    if (ExtensionModuleName == ExtendedTypeModuleName) {
-      return;
-    }
-
-    if (!ExtensionDeclaration->getMembers().empty()) {
-      return;
-    }
-
-    auto InheritedArray = ExtensionDeclaration->getInherited();
-
-    for (auto Inherited : InheritedArray) {
-
-      auto *Nominal = Inherited.getType()->getAnyNominal();
-      if (auto *ProtocolDeclaration = dyn_cast_or_null<ProtocolDecl>(Nominal)) {
-        for (auto *Member : ProtocolDeclaration->getMembers()) {
-          Member->getSourceRange();
-          for (auto *Declaration : ExtendedType->getMembers()) {
-
-            if (auto *ExtFunction = dyn_cast<AbstractFunctionDecl>(Declaration)) {
-              if (auto *ProtocolFunction =
-                    dyn_cast<AbstractFunctionDecl>(Member)) {
-
-                auto ExtFunctionSignature = functionSignature(ExtFunction);
-                auto ProtocolFunctionSignature =
-                  functionSignature(ProtocolFunction);
-                auto ExtFunctionName = ExtFunction->getName().str().str();
-                auto ProtocolFunctionName =
-                  ProtocolFunction->getName().str().str();
-
-                if (ExtFunctionSignature == ProtocolFunctionSignature
-                    && ExtFunctionName == ProtocolFunctionName) {
-                  DeclarationsToExclude.insert(Member);
-                }
-              }
-            }
-
-            if (auto *ExtFunction = dyn_cast<AbstractStorageDecl>(Declaration)) {
-              if (auto *ProtocolFunction =
-                    dyn_cast<AbstractStorageDecl>(Member)) {
-
-                auto ExtFunctionSignature =
-                  ExtFunction->getInterfaceType().getString();
-                auto ProtocolFunctionSignature =
-                  ProtocolFunction->getInterfaceType().getString();
-                auto ExtFunctionName = ExtFunction->getName().str().str();
-                auto ProtocolFunctionName =
-                  ProtocolFunction->getName().str().str();
-
-                if (ExtFunctionSignature == ProtocolFunctionSignature
-                    && ExtFunctionName == ProtocolFunctionName) {
-                  DeclarationsToExclude.insert(Member);
-                }
-              }
-            }
-          }
-        }
-      }
-    }
-  }
-}
-
-} //namespace obfuscation
-} //namespace swift
diff --git a/swift/lib/Obfuscation/Extractor.cpp b/swift/lib/Obfuscation/Extractor.cpp
new file mode 100644
index 00000000000..078ece29f08
--- /dev/null
+++ b/swift/lib/Obfuscation/Extractor.cpp
@@ -0,0 +1,686 @@
+#include "swift/Obfuscation/Extractor.h"
+#include "swift/Obfuscation/Utils.h"
+#include "swift/AST/ProtocolConformance.h"
+
+namespace swift {
+namespace obfuscation {
+
+std::string Extractor::moduleName(const Decl* Declaration) {
+  return Declaration->getModuleContext()->getBaseName().getIdentifier().get();
+}
+
+bool Extractor::
+  isOverriddenMethodFromTheSameModule(const std::set<std::string> &Modules,
+                                      const std::string &OriginModuleName) {
+  return Modules.size() == 0
+  || (Modules.size() == 1 && Modules.count(OriginModuleName) == 1);
+}
+
+Extractor::~Extractor() = default;
+
+ModuleNameAndParts
+Extractor::moduleNameAndIdentifierParts(const Decl *Declaration) {
+  std::string ModuleName = moduleName(Declaration);
+  std::vector<std::string> Parts;
+  Parts.push_back("module");
+  Parts.push_back(ModuleName);
+  return std::make_pair(ModuleName, Parts);
+}
+
+template<class T>
+const T* Extractor::findRecursivelyBaseOverridenDeclarationWithModules
+(const T *Declaration, std::set<std::string> &Modules) {
+  static_assert(std::is_base_of<Decl, T>::value, "T is not a subclass of Decl");
+  if (auto* OverrideDeclaration = Declaration->getOverriddenDecl()) {
+    Modules.insert(moduleName(OverrideDeclaration));
+    return
+    findRecursivelyBaseOverridenDeclarationWithModules(OverrideDeclaration,
+                                                       Modules);
+  } else {
+    return Declaration;
+  }
+}
+
+template<class T>
+std::pair<const T*, std::set<std::string>>
+Extractor::getBaseOverridenDeclarationWithModules(const T *Declaration) {
+  std::set<std::string> Modules;
+  auto Base = findRecursivelyBaseOverridenDeclarationWithModules(Declaration,
+                                                                 Modules);
+  return std::make_pair(Base, Modules);
+}
+
+//  template
+//  std::pair<const VarDecl*, std::set<std::string>>
+//  getBaseOverridenDeclarationWithModules(const VarDecl *Declaration);
+
+// part of parameter extractor
+//template
+//std::pair<const AbstractFunctionDecl*, std::set<std::string>>
+//getBaseOverridenDeclarationWithModules(const AbstractFunctionDecl *Declaration);
+
+std::string Extractor::declarationName(const ValueDecl* Declaration) {
+  return Declaration->getName().str().str();
+}
+
+std::string Extractor::typeName(const NominalTypeDecl* Declaration) {
+  return Declaration->getDeclaredInterfaceType()->getString();
+}
+
+llvm::Expected<std::string>
+Extractor::enclosingTypeName(const Decl* Declaration) {
+  auto *DeclarationContext = Declaration->getDeclContext();
+  if (auto *TypeDeclaration =
+      DeclarationContext->getAsNominalTypeOrNominalTypeExtensionContext()) {
+    return typeName(TypeDeclaration);
+  }
+  return stringError("enclosing context of this declaration is not supported");
+}
+
+llvm::Expected<std::vector<std::string>> Extractor::
+  nominalTypeIdentifierParts(const NominalTypeDecl *Declaration,
+                             const std::string &SymbolName) {
+
+  std::vector<std::string> Parts;
+  switch (Declaration->getKind()) {
+    case DeclKind::Enum:
+      Parts.push_back("enum." + SymbolName);
+      break;
+    case DeclKind::Class:
+      Parts.push_back("class." + SymbolName);
+      break;
+    case DeclKind::Protocol:
+      Parts.push_back("protocol." + SymbolName);
+      break;
+    case DeclKind::Struct:
+      Parts.push_back("struct." + SymbolName);
+      break;
+    default:
+      return stringError("found unsupported declaration type");
+  }
+  return Parts;
+}
+
+std::string
+NominalTypeExtractor::symbolName(const NominalTypeDecl *Declaration) {
+  return Declaration->getBaseName().getIdentifier().str().str();
+}
+
+ClassDeclarationsWithModules NominalTypeExtractor::
+findRecursivelySuperClassDeclarationsWithModules(const ClassDecl *Declaration,
+                                                 ClassDeclarationsWithModules &DeclarationsWithModules) {
+  if (auto* OverridenDeclaration = Declaration->getSuperclassDecl()) {
+    auto DeclarationAndModule =
+    std::make_pair(OverridenDeclaration, moduleName(OverridenDeclaration));
+    DeclarationsWithModules.push_back(DeclarationAndModule);
+    return findRecursivelySuperClassDeclarationsWithModules(OverridenDeclaration,
+                                                            DeclarationsWithModules);
+  }
+  return DeclarationsWithModules;
+}
+
+void NominalTypeExtractor::
+findRecursivelyConformingProtocolDeclarationsWithModules(const NominalTypeDecl *Declaration,
+                                                         ProtocolDeclarationsWithModules &DeclarationsWithModules) {
+
+  for (auto Inherited : Declaration->getInherited()) {
+    if (auto *ProtocolDeclaration =
+        dyn_cast_or_null<ProtocolDecl>(Inherited.getType()->getAnyNominal())) {
+      auto DeclarationAndModule =
+        std::make_pair(ProtocolDeclaration, moduleName(ProtocolDeclaration));
+      auto InsertionResult = DeclarationsWithModules.insert(DeclarationAndModule);
+      if (InsertionResult.second) {
+        findRecursivelyConformingProtocolDeclarationsWithModules(ProtocolDeclaration,
+                                                                 DeclarationsWithModules);
+      }
+    }
+  }
+}
+
+ProtocolDeclarationsWithModules NominalTypeExtractor::
+getConformingProtocolDeclarationsWithModules(const NominalTypeDecl *Declaration) {
+  ProtocolDeclarationsWithModules DeclarationsWithModules;
+  findRecursivelyConformingProtocolDeclarationsWithModules(Declaration,
+                                                           DeclarationsWithModules);
+  return DeclarationsWithModules;
+}
+
+ClassDeclarationsWithModules NominalTypeExtractor::
+  getSuperClassDeclarationsWithModules(const ClassDecl *Declaration) {
+  ClassDeclarationsWithModules DeclarationsWithModules;
+  return
+    findRecursivelySuperClassDeclarationsWithModules(Declaration,
+                                                     DeclarationsWithModules);
+}
+
+// This function handles the specific case where protocol optional function
+// is declared in extension of the class conforming to the protocol
+// (the function is not implemented in class, only in extension).
+// Both class and protocol are in different module than extension. In this case
+// `ValueDecl::getSatisfiedProtocolRequirements()` does not return the correct
+// protocol requirements so we need to extract them from the extended class.
+std::vector<ValueDecl*>
+FunctionExtractor::satisfiedProtocolOptionalRequirements(const AbstractFunctionDecl* Declaration) {
+  auto Result = std::vector<ValueDecl*>();
+
+  auto TypeContext = Declaration->getInnermostTypeContext();
+  if (TypeContext != nullptr && TypeContext->getContextKind() == DeclContextKind::ExtensionDecl) {
+    auto *BaseClass = TypeContext->getAsNominalTypeOrNominalTypeExtensionContext();
+
+    for (auto Conf : BaseClass->getAllConformances()) {
+
+      if (Conf->getKind() == ProtocolConformanceKind::Normal) {
+        auto NormalConf = cast<NormalProtocolConformance>(Conf);
+        NormalConf->forEachValueWitness(nullptr, [&Declaration, &Result](ValueDecl *Req,
+                                                                         Witness Witness) {
+          if (auto * FuncReq = dyn_cast<AbstractFunctionDecl>(Req)) {
+            if (Declaration->getEffectiveFullName() == FuncReq->getEffectiveFullName()) {
+              Result.push_back(FuncReq);
+            }
+          }
+
+        });
+      }
+    }
+  }
+  return Result;
+}
+
+std::vector<ValueDecl*>
+FunctionExtractor::satisfiedProtocolRequirements(const AbstractFunctionDecl* Declaration) {
+
+  std::vector<ValueDecl*> Requirements;
+
+  Requirements = Declaration->getSatisfiedProtocolRequirements();
+
+  auto OptionalRequirements = satisfiedProtocolOptionalRequirements(Declaration);
+  copyToVector(OptionalRequirements, Requirements);
+
+  return Requirements;
+}
+
+void FunctionExtractor::extractSignaturePart(const Type &Result,
+                          llvm::raw_string_ostream &StringStream,
+                          std::string Fallback) {
+
+  if (auto *ResultTuple = Result->getAs<TupleType>()) {
+    auto Results = ResultTuple->getElements();
+    if (Results.empty()) {
+      StringStream << Fallback;
+    } else {
+      StringStream << "(";
+      for (auto Argument = Results.begin();
+           Argument != Results.end();
+           ++Argument) {
+        auto Name = Argument->getName().str();
+        if (!Name.empty()) {
+          StringStream << Name << ": ";
+        }
+        if (Argument->getType()->getAs<DependentMemberType>() != nullptr) {
+          // It the signature uses the associated type, we're dropping
+          // the information about it. We don't use it's name nor information
+          // where it comes from. We do it to handle the edga case of
+          // single implementation method fulfilling two functions
+          // with associated types from two different protocols.
+          StringStream << "AssociatedType";
+        } else {
+          StringStream << Argument->getType().getString();
+        }
+        if (Argument != Results.drop_back().end()) {
+          StringStream << ", ";
+        }
+      }
+      StringStream << ")";
+    }
+  } else {
+    StringStream << Result.getString();
+  }
+}
+
+std::string FunctionExtractor::extractSignature(const AbstractFunctionDecl *Declaration,
+                             std::string Fallback) {
+  if (!Declaration->hasInterfaceType()) { return Fallback; }
+
+  if (auto *InstanceFunction =
+      Declaration->getInterfaceType()->getAs<AnyFunctionType>()) {
+
+    AnyFunctionType *FunctionToParse = InstanceFunction;
+
+    if (auto *Function =
+        InstanceFunction->getResult()->getAs<AnyFunctionType>()) {
+      FunctionToParse = Function;
+    }
+
+    std::string Signature;
+    llvm::raw_string_ostream StringStream(Signature);
+    extractSignaturePart(FunctionToParse->getInput(), StringStream, "()");
+    StringStream << " -> ";
+    extractSignaturePart(FunctionToParse->getResult(), StringStream, "Void");
+    return StringStream.str();
+
+  } else {
+
+    return Fallback;
+
+  }
+}
+
+std::string
+FunctionExtractor::functionName(const AbstractFunctionDecl *Declaration) {
+  return Declaration->getName().str().str();
+}
+
+std::string FunctionExtractor::functionSignature(const AbstractFunctionDecl *Declaration) {
+  // The signature is available via different getters depending on whether
+  // it is a method or a free function
+  std::string Fallback;
+
+  if (!Declaration->hasInterfaceType()) { return "no_signature"; }
+
+  if (Declaration->getDeclContext()->isTypeContext()) {
+    Fallback = Declaration->getMethodInterfaceType().getString();
+  } else {
+    Fallback = Declaration->getInterfaceType().getString();
+  }
+
+  auto Interface = extractSignature(Declaration, Fallback);
+  return "signature." + Interface;
+}
+
+ModuleNameAndParts FunctionExtractor::
+  functionIdentifierParts(const AbstractFunctionDecl *Declaration) {
+
+  std::string ModuleName;
+  std::vector<std::string> Parts;
+
+  std::string SymbolName = declarationName(Declaration);
+
+  // Check if function is part of protocol declaration
+  auto *ProtocolDeclaration =
+    Declaration->getDeclContext()->getAsProtocolOrProtocolExtensionContext();
+  auto IsPartOfProtocol = ProtocolDeclaration != nullptr;
+
+  // Check if function satisfies the protocol implemented by its
+  // containing class
+  auto ProtocolRequirements = satisfiedProtocolRequirements(Declaration);
+  auto SatisfiesProtocol = !ProtocolRequirements.empty();
+
+  if (!(SatisfiesProtocol || IsPartOfProtocol)) {
+    // This logic applies to function that has nothing to do with protocols
+
+    auto ModuleNameAndParts = moduleNameAndIdentifierParts(Declaration);
+    ModuleName = ModuleNameAndParts.first;
+    Parts = ModuleNameAndParts.second;
+
+    // Build different identifier depending whether
+    // the function is a free function or method
+    auto TypeNameOrError = enclosingTypeName(Declaration);
+    if (auto Error = TypeNameOrError.takeError()) {
+      llvm::consumeError(std::move(Error));
+      Parts.push_back("function." + SymbolName);
+    } else {
+      Parts.push_back("type." + TypeNameOrError.get());
+      if (Declaration->isStatic()) {
+        Parts.push_back("static");
+      }
+      Parts.push_back("method." + SymbolName);
+    }
+
+    Parts.push_back(functionSignature(Declaration));
+
+  } else {
+    // This logic applies to function that
+    // is part of protocol or satisfies protocol
+
+    // TODO: right now we're renaming all the methods in the protocols with
+    //       the same name and signature to the same obfuscated name. the reason
+    //       is that it greatly simplifies the handling of situation in which
+    //       a protocol A has method a() and protocol B: A has method a().
+    //       then the class C: B with the implementation of a() satisfies
+    //       two requirements at the same time (from A and from B). however,
+    //       there is no override relationship between the A.a() and B.a() in
+    //       protocols. it's just a name that's the same.
+    //       this simplified handling should be improved in the future.
+    ValueDecl *BaseDeclaration;
+    if (SatisfiesProtocol) {
+      // TODO: If the function satisfies multiple protocols, we're using
+      // the module name from the first of the protocols. This may lead
+      // to errors and should be changed in the future.
+      BaseDeclaration = ProtocolRequirements.front();
+    } else {
+      BaseDeclaration = ProtocolDeclaration;
+    }
+    auto ModuleNameAndParts = moduleNameAndIdentifierParts(BaseDeclaration);
+    ModuleName = ModuleNameAndParts.first;
+    Parts = ModuleNameAndParts.second;
+
+    Parts.push_back("protocol");
+    if (Declaration->isStatic()) {
+      Parts.push_back("static");
+    }
+    Parts.push_back("method." + SymbolName);
+
+    if (auto *ProtocolFunctionDeclaration =
+        dyn_cast<AbstractFunctionDecl>(BaseDeclaration)) {
+      Parts.push_back(functionSignature(ProtocolFunctionDeclaration));
+    } else {
+      Parts.push_back(functionSignature(Declaration));
+    }
+  }
+
+  return std::make_pair(ModuleName, Parts);
+}
+
+std::pair<const FuncDecl*, std::set<std::string>>
+FunctionExtractor::getBaseOverridenDeclarationWithModules(const FuncDecl *Declaration) {
+  return
+    Extractor::getBaseOverridenDeclarationWithModules<FuncDecl>(Declaration);
+}
+
+std::string
+OperatorExtractor::operatorName(const OperatorDecl *Declaration) {
+  return Declaration->getName().str().str();
+}
+
+// Determines if the ConstructorDecl represents the Struct Memberwise
+// Initializer. Checks if the declaration is implicit. Also checks if
+// parameters list (other than self parameter) is not empty to exclude
+// Default Initializers.
+bool ParameterExtractor::
+  isMemberwiseConstructor(const ConstructorDecl* Declaration) {
+  auto ConstructsStruct =
+    Declaration->getResultInterfaceType()->getStructOrBoundGenericStruct()
+    != nullptr;
+
+  return ConstructsStruct
+         && Declaration->isImplicit()
+         && Declaration->getParameters()->size() != 0;
+}
+
+bool ParameterExtractor::
+  isMemberwiseConstructorParameter(const ParamDecl* Declaration) {
+  auto *Context = Declaration->getDeclContext();
+  if (const auto *ConstructorDeclaration = dyn_cast<ConstructorDecl>(Context)) {
+    return isMemberwiseConstructor(ConstructorDeclaration);
+  }
+  return false;
+}
+
+std::vector<DeclWithRange>
+ParameterExtractor::parametersFrom(const AbstractFunctionDecl *Function) {
+  std::vector<DeclWithRange> Results;
+  auto ParameterLists = Function->getParameterLists();
+  if (Function->getDeclContext()->isTypeContext()
+      && !ParameterLists.empty()) {
+    ParameterLists = ParameterLists.drop_front();
+  }
+  for (auto *ParameterList : ParameterLists) {
+    for (auto *Parameter : *ParameterList) {
+      if (Parameter->getNameLoc().isValid()) {
+        CharSourceRange Range(Parameter->getNameLoc(),
+                              declarationName(Parameter).length());
+        Results.push_back(DeclWithRange(Parameter, Range));
+      }
+    }
+  }
+  return Results;
+}
+
+std::string
+ParameterExtractor::externalParameterName(const ParamDecl *Declaration) {
+  return Declaration->getArgumentName().str().str();
+}
+
+std::string
+ParameterExtractor::internalParameterName(const ParamDecl *Declaration) {
+  return Declaration->getName().str().str();
+}
+
+std::pair<const AbstractFunctionDecl*, std::set<std::string>>
+ParameterExtractor::
+  getBaseOverridenDeclarationWithModules(const AbstractFunctionDecl *Declaration) {
+  return Extractor::
+    getBaseOverridenDeclarationWithModules<AbstractFunctionDecl>(Declaration);
+}
+
+llvm::Expected<std::string>
+ParameterExtractor::parameterNameForCallSite(ParamDecl *Parameter) {
+
+  auto Declaration = Parameter;
+
+  if (const auto *FunctionDeclaration =
+      dyn_cast<AbstractFunctionDecl>(Declaration->getDeclContext())) {
+
+    if (Declaration->getNameLoc().isValid()) {
+
+      auto IsSingle = Declaration->getArgumentNameLoc().isInvalid();
+
+      auto Modules =
+        getBaseOverridenDeclarationWithModules(FunctionDeclaration).second;
+
+      auto isFromTheSameModule =
+        isOverriddenMethodFromTheSameModule(Modules, moduleName(Declaration));
+
+      if (IsSingle) {
+        if (!isFromTheSameModule) {
+          return stringError("We shouldn't rename parameter from outside "
+                             "our module");
+        }
+        return internalParameterName(Declaration);
+
+      } else {
+        auto ExternalName = externalParameterName(Declaration);
+        if (ExternalName.empty()) {
+          return stringError("We cannot rename unnamed parameter");
+        }
+        if (!isFromTheSameModule) {
+          return stringError("We shouldn't rename parameter from outside "
+                             "our module");
+        }
+        return ExternalName;
+      }
+    }
+    return stringError("We cannot rename this parameter");
+  }
+  return stringError("We cannot rename this parameter");
+}
+
+std::pair<const VarDecl*, std::set<std::string>>
+VariableExtractor::
+  getBaseOverridenDeclarationWithModules(const VarDecl *Declaration) {
+  return Extractor::
+    getBaseOverridenDeclarationWithModules<VarDecl>(Declaration);
+}
+
+llvm::Expected<ModuleNameAndParts>
+VariableExtractor::
+  variableIdentifierPartsFromContext(const VarDecl *Declaration) {
+
+  std::string ModuleName;
+  std::vector<std::string> Parts;
+
+  auto ProtocolRequirements = Declaration->getSatisfiedProtocolRequirements();
+
+  ProtocolDecl *ProtocolDeclaration = nullptr;
+  if (auto *ExtensionDeclaration =
+      dyn_cast<ExtensionDecl>(Declaration->getDeclContext())) {
+    auto * Protocol =
+      ExtensionDeclaration->getAsProtocolOrProtocolExtensionContext();
+    ProtocolDeclaration = dyn_cast_or_null<ProtocolDecl>(Protocol);
+  } else {
+    ProtocolDeclaration =
+    dyn_cast_or_null<ProtocolDecl>(Declaration->getDeclContext());
+  }
+
+  // TODO: for now, we're renaming properties from different protocols
+  // but with the same name to the same obfuscated name.
+  // This should be improved in the future.
+  if (!ProtocolRequirements.empty() || ProtocolDeclaration != nullptr) {
+
+    // TODO: If the property satisfies multiple protocols, we're using
+    // the module name from the first of the protocols. This may lead to errors
+    // and should be changed in the future.
+    ModuleName = ProtocolRequirements.empty()
+    ? moduleName(ProtocolDeclaration)
+    : moduleName(ProtocolRequirements.front());
+    Parts.push_back("module." + ModuleName);
+    Parts.push_back("protocol");
+
+  } else if (auto *NominalTypeDeclaration =
+             dyn_cast<NominalTypeDecl>(Declaration->getDeclContext())) {
+
+    ModuleName = moduleName(Declaration);
+    Parts.push_back("module." + ModuleName);
+    std::string TypeName = typeName(NominalTypeDeclaration);
+    auto ModuleAndParts = nominalTypeIdentifierParts(NominalTypeDeclaration,
+                                                     TypeName);
+    if (auto Error = ModuleAndParts.takeError()) {
+      return std::move(Error);
+    }
+    copyToVector(ModuleAndParts.get(), Parts);
+
+  } else if (Declaration->getDeclContext()->isModuleScopeContext()) {
+    ModuleName = moduleName(Declaration);
+    Parts.push_back("module." + ModuleName);
+  }
+
+  if (ModuleName.empty() && Parts.empty()) {
+    return stringError("No supported variable declaration found");
+  }
+
+  return std::make_pair(ModuleName, Parts);
+}
+
+llvm::Optional<DeclWithRange> TypeRepresentationExtractor::
+handleComponent(ComponentIdentTypeRepr *Component) {
+  auto StartLocation = Component->getStartLoc();
+  if (Component->isBound() && StartLocation.isValid()) {
+    auto TypeDeclaration = Component->getBoundDecl();
+    CharSourceRange TypeRange(StartLocation,
+                              TypeDeclaration->getName().getLength());
+    return DeclWithRange(TypeDeclaration, TypeRange);
+  }
+  return llvm::None;
+}
+
+void TypeRepresentationExtractor::
+  handleTypeRepresentationRecursively(std::vector<llvm::Optional<DeclWithRange>> &Declarations,
+                                      TypeRepr *ParentOfTypeRepresentation,
+                                      TypeRepr *TypeRepresentation) {
+
+  // Guard agains the case in which there is no object
+  // or the object points to itself in the AST.
+  if (TypeRepresentation == nullptr
+      || ParentOfTypeRepresentation == TypeRepresentation) {
+    return;
+  }
+
+  if (auto *Compound = dyn_cast<CompoundIdentTypeRepr>(TypeRepresentation)) {
+    for (auto *Component : Compound->Components) {
+      Declarations.push_back(handleComponent(Component));
+    }
+  }
+
+  if (auto *Generic = dyn_cast<GenericIdentTypeRepr>(TypeRepresentation)) {
+    for (auto *GenericArg : Generic->getGenericArgs()) {
+      handleTypeRepresentationRecursively(Declarations, Generic, GenericArg);
+    }
+  }
+
+  if (auto *Component = dyn_cast<ComponentIdentTypeRepr>(TypeRepresentation)) {
+    Declarations.push_back(handleComponent(Component));
+  }
+
+  if (auto *InOut = dyn_cast<InOutTypeRepr>(TypeRepresentation)) {
+    handleTypeRepresentationRecursively(Declarations, InOut, InOut->getBase());
+  }
+
+  if (auto *Attributed = dyn_cast<AttributedTypeRepr>(TypeRepresentation)) {
+    handleTypeRepresentationRecursively(Declarations,
+                                        Attributed,
+                                        Attributed->getTypeRepr());
+  }
+
+  if (auto *Function = dyn_cast<FunctionTypeRepr>(TypeRepresentation)) {
+    handleTypeRepresentationRecursively(Declarations,
+                                        Function,
+                                        Function->getArgsTypeRepr());
+    handleTypeRepresentationRecursively(Declarations,
+                                        Function,
+                                        Function->getResultTypeRepr());
+  }
+
+  if (auto *IUO =
+      dyn_cast<ImplicitlyUnwrappedOptionalTypeRepr>(TypeRepresentation)) {
+    handleTypeRepresentationRecursively(Declarations, IUO, IUO->getBase());
+  }
+
+  if (auto *Protocol = dyn_cast<ProtocolTypeRepr>(TypeRepresentation)) {
+    handleTypeRepresentationRecursively(Declarations,
+                                        Protocol,
+                                        Protocol->getBase());
+  }
+
+  if (auto *Metatype = dyn_cast<MetatypeTypeRepr>(TypeRepresentation)) {
+    handleTypeRepresentationRecursively(Declarations,
+                                        Metatype,
+                                        Metatype->getBase());
+  }
+
+  if (auto *Array = dyn_cast<ArrayTypeRepr>(TypeRepresentation)) {
+    handleTypeRepresentationRecursively(Declarations,
+                                        Array,
+                                        Array->getBase());
+  }
+
+  if (auto *Dictionary = dyn_cast<DictionaryTypeRepr>(TypeRepresentation)) {
+    handleTypeRepresentationRecursively(Declarations,
+                                        Dictionary,
+                                        Dictionary->getKey());
+
+    handleTypeRepresentationRecursively(Declarations,
+                                        Dictionary,
+                                        Dictionary->getValue());
+  }
+
+  if (auto *Optional = dyn_cast<OptionalTypeRepr>(TypeRepresentation)) {
+    handleTypeRepresentationRecursively(Declarations,
+                                        Optional,
+                                        Optional->getBase());
+  }
+
+  if (auto *Tuple = dyn_cast<TupleTypeRepr>(TypeRepresentation)) {
+    for (auto *TupleElement : Tuple->getElements()) {
+      handleTypeRepresentationRecursively(Declarations,
+                                          Tuple,
+                                          TupleElement);
+    }
+  }
+
+  if (auto *Composition = dyn_cast<CompositionTypeRepr>(TypeRepresentation)) {
+    for (auto *CompositionElement : Composition->getTypes()) {
+      handleTypeRepresentationRecursively(Declarations,
+                                          Composition,
+                                          CompositionElement);
+    }
+  }
+}
+
+std::vector<DeclWithRange>
+TypeRepresentationExtractor::
+  declarationsFromTypeRepresentation(TypeRepr * TypeRepresentation) {
+  std::vector<llvm::Optional<DeclWithRange>> Declarations;
+  handleTypeRepresentationRecursively(Declarations,
+                                      /* Parent */ nullptr,
+                                      TypeRepresentation);
+  std::vector<DeclWithRange> Results;
+  for (auto &Declaration : Declarations) {
+    if (Declaration != llvm::None) {
+      Results.push_back(Declaration.getValue());
+    }
+  }
+  return Results;
+}
+
+} //namespace obfuscation
+} //namespace swift
diff --git a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp b/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
deleted file mode 100644
index 0a79e20d1d7..00000000000
--- a/swift/lib/Obfuscation/FunctionDeclarationParser.cpp
+++ /dev/null
@@ -1,456 +0,0 @@
-#include "swift/Obfuscation/FunctionDeclarationParser.h"
-#include "swift/Obfuscation/ParameterDeclarationParser.h"
-#include "swift/Obfuscation/Utils.h"
-#include "swift/Obfuscation/DeclarationParsingUtils.h"
-#include "swift/AST/ProtocolConformance.h"
-
-#include <string>
-#include <sstream>
-#include <vector>
-
-namespace swift {
-namespace obfuscation {
-
-llvm::Error isDeclarationSupported(const FuncDecl* Declaration) {
-  if (Declaration->isGetter()) {
-    return stringError("don't support getters since "
-                       "it's the computed property name that should be "
-                       "obfuscated");
-  }
-  if (!Declaration->isSetter()
-        && (Declaration->isAccessor() || Declaration->isObservingAccessor())) {
-    return stringError("don't support property accessors right now");
-  }
-  return llvm::Error::success();
-}
-
-void extractSignaturePart(const Type &Result,
-                          llvm::raw_string_ostream &StringStream,
-                          std::string Fallback) {
-
-  if (auto *ResultTuple = Result->getAs<TupleType>()) {
-    auto Results = ResultTuple->getElements();
-    if (Results.empty()) {
-      StringStream << Fallback;
-    } else {
-      StringStream << "(";
-      for (auto Argument = Results.begin();
-           Argument != Results.end();
-           ++Argument) {
-        auto Name = Argument->getName().str();
-        if (!Name.empty()) {
-          StringStream << Name << ": ";
-        }
-        if (Argument->getType()->getAs<DependentMemberType>() != nullptr) {
-          // It the signature uses the associated type, we're dropping
-          // the information about it. We don't use it's name nor information
-          // where it comes from. We do it to handle the edga case of
-          // single implementation method fulfilling two functions
-          // with associated types from two different protocols.
-          StringStream << "AssociatedType";
-        } else {
-          StringStream << Argument->getType().getString();
-        }
-        if (Argument != Results.drop_back().end()) {
-          StringStream << ", ";
-        }
-      }
-      StringStream << ")";
-    }
-  } else {
-    StringStream << Result.getString();
-  }
-}
-
-std::string extractSignature(const AbstractFunctionDecl *Declaration,
-                             std::string Fallback) {
-  if (!Declaration->hasInterfaceType()) { return Fallback; }
-
-  if (auto *InstanceFunction =
-        Declaration->getInterfaceType()->getAs<AnyFunctionType>()) {
-
-    AnyFunctionType *FunctionToParse = InstanceFunction;
-
-    if (auto *Function =
-          InstanceFunction->getResult()->getAs<AnyFunctionType>()) {
-      FunctionToParse = Function;
-    }
-
-    std::string Signature;
-    llvm::raw_string_ostream StringStream(Signature);
-    extractSignaturePart(FunctionToParse->getInput(), StringStream, "()");
-    StringStream << " -> ";
-    extractSignaturePart(FunctionToParse->getResult(), StringStream, "Void");
-    return StringStream.str();
-
-  } else {
-
-    return Fallback;
-
-  }
-}
-
-std::string functionSignature(const AbstractFunctionDecl *Declaration) {
-  // The signature is available via different getters depending on whether
-  // it is a method or a free function
-  std::string Fallback;
-
-  if (!Declaration->hasInterfaceType()) { return "no_signature"; }
-
-  if (Declaration->getDeclContext()->isTypeContext()) {
-    Fallback = Declaration->getMethodInterfaceType().getString();
-  } else {
-    Fallback = Declaration->getInterfaceType().getString();
-  }
-
-  auto Interface = extractSignature(Declaration, Fallback);
-  return "signature." + Interface;
-}
-  
-// This function handles the specific case where protocol optional function
-// is declared in extension of the class conforming to the protocol
-// (the function is not implemented in class, only in extension).
-// Both class and protocol are in different module than extension. In this case
-// `ValueDecl::getSatisfiedProtocolRequirements()` does not return the correct
-// protocol requirements so we need to extract them from the extended class.
-std::vector<ValueDecl*>
-satisfiedProtocolOptionalRequirements(const AbstractFunctionDecl* Declaration) {
-  auto Result = std::vector<ValueDecl*>();
-  
-  auto TypeContext = Declaration->getInnermostTypeContext();
-  if (TypeContext != nullptr && TypeContext->getContextKind() == DeclContextKind::ExtensionDecl) {
-    auto *BaseClass = TypeContext->getAsNominalTypeOrNominalTypeExtensionContext();
-    
-    for (auto Conf : BaseClass->getAllConformances()) {
-      
-      if (Conf->getKind() == ProtocolConformanceKind::Normal) {
-        auto NormalConf = cast<NormalProtocolConformance>(Conf);
-        NormalConf->forEachValueWitness(nullptr, [&Declaration, &Result](ValueDecl *Req,
-                                                                         Witness Witness) {
-          if (auto * FuncReq = dyn_cast<AbstractFunctionDecl>(Req)) {
-            if (Declaration->getEffectiveFullName() == FuncReq->getEffectiveFullName()) {
-              Result.push_back(FuncReq);
-            }
-          }
-          
-        });
-      }
-    }
-  }
-  return Result;
-}
-  
-std::vector<ValueDecl*>
-satisfiedProtocolRequirements(const AbstractFunctionDecl* Declaration) {
-  
-  std::vector<ValueDecl*> Requirements;
-  
-  Requirements = Declaration->getSatisfiedProtocolRequirements();
-  
-  auto OptionalRequirements = satisfiedProtocolOptionalRequirements(Declaration);
-  copyToVector(OptionalRequirements, Requirements);
-
-  return Requirements;
-}
-
-ModuleNameAndParts
-functionIdentifierParts(const AbstractFunctionDecl *Declaration) {
-
-  std::string ModuleName;
-  std::vector<std::string> Parts;
-
-  std::string SymbolName = declarationName(Declaration);
-
-  // Check if function is part of protocol declaration
-  auto *ProtocolDeclaration =
-    Declaration->getDeclContext()->getAsProtocolOrProtocolExtensionContext();
-  auto IsPartOfProtocol = ProtocolDeclaration != nullptr;
-
-  // Check if function satisfies the protocol implemented by its
-  // containing class
-  auto ProtocolRequirements = satisfiedProtocolRequirements(Declaration);
-  auto SatisfiesProtocol = !ProtocolRequirements.empty();
-
-  if (!(SatisfiesProtocol || IsPartOfProtocol)) {
-    // This logic applies to function that has nothing to do with protocols
-
-    auto ModuleNameAndParts = moduleNameAndIdentifierParts(Declaration);
-    ModuleName = ModuleNameAndParts.first;
-    Parts = ModuleNameAndParts.second;
-
-    // Build different identifier depending whether
-    // the function is a free function or method
-    auto TypeNameOrError = enclosingTypeName(Declaration);
-    if (auto Error = TypeNameOrError.takeError()) {
-      llvm::consumeError(std::move(Error));
-      Parts.push_back("function." + SymbolName);
-    } else {
-      Parts.push_back("type." + TypeNameOrError.get());
-      if (Declaration->isStatic()) {
-        Parts.push_back("static");
-      }
-      Parts.push_back("method." + SymbolName);
-    }
-
-    Parts.push_back(functionSignature(Declaration));
-    
-  } else {
-    // This logic applies to function that
-    // is part of protocol or satisfies protocol
-    
-    // TODO: right now we're renaming all the methods in the protocols with
-    //       the same name and signature to the same obfuscated name. the reason
-    //       is that it greatly simplifies the handling of situation in which
-    //       a protocol A has method a() and protocol B: A has method a().
-    //       then the class C: B with the implementation of a() satisfies
-    //       two requirements at the same time (from A and from B). however,
-    //       there is no override relationship between the A.a() and B.a() in
-    //       protocols. it's just a name that's the same.
-    //       this simplified handling should be improved in the future.
-    ValueDecl *BaseDeclaration;
-    if (SatisfiesProtocol) {
-      // TODO: If the function satisfies multiple protocols, we're using
-      // the module name from the first of the protocols. This may lead
-      // to errors and should be changed in the future.
-      BaseDeclaration = ProtocolRequirements.front();
-    } else {
-      BaseDeclaration = ProtocolDeclaration;
-    }
-    auto ModuleNameAndParts = moduleNameAndIdentifierParts(BaseDeclaration);
-    ModuleName = ModuleNameAndParts.first;
-    Parts = ModuleNameAndParts.second;
-    
-    Parts.push_back("protocol");
-    if (Declaration->isStatic()) {
-      Parts.push_back("static");
-    }
-    Parts.push_back("method." + SymbolName);
-
-    if (auto *ProtocolFunctionDeclaration =
-        dyn_cast<AbstractFunctionDecl>(BaseDeclaration)) {
-      Parts.push_back(functionSignature(ProtocolFunctionDeclaration));
-    } else {
-      Parts.push_back(functionSignature(Declaration));
-    }
-  }
-
-  return std::make_pair(ModuleName, Parts);
-}
-
-SymbolWithRange getFunctionSymbol(GlobalCollectedSymbols &CollectedSymbols,
-                                  const swift::FuncDecl *Declaration,
-                                  const swift::CharSourceRange &Range) {
-  auto ModuleAndParts = functionIdentifierParts(Declaration);
-  auto ModuleName = ModuleAndParts.first;
-  auto Parts = ModuleAndParts.second;
-  Symbol Symbol(combineIdentifier(Parts),
-                declarationName(Declaration),
-                ModuleName,
-                SymbolType::NamedFunction);
-  return SymbolWithRange(Symbol, Range);
-}
-
-llvm::Expected<SymbolWithRange>
-parseOverridenDeclaration(GlobalCollectedSymbols &CollectedSymbols,
-                          const FuncDecl *Declaration,
-                          const std::string &ModuleName,
-                          const CharSourceRange &Range) {
-
-  auto BaseWithModules = getBaseOverridenDeclarationWithModules(Declaration);
-  auto Base = BaseWithModules.first;
-  auto Modules = BaseWithModules.second;
-
-  // Emits symbol only if the base overriden function and
-  // all the functions overriding it in the inheritance hierarchy are from
-  // the same module and it's the module we've passed as ModuleName parameter.
-  // Emitted symbol represents the base function so that all the functions that
-  // override it are renamed to the same obfuscated name
-  if (isOverriddenMethodFromTheSameModule(Modules, ModuleName)) {
-    return getFunctionSymbol(CollectedSymbols, Base, Range);
-  } else {
-    return stringError("only method overriding methods from the same module "
-                       "might be safely obfuscated");
-  }
-}
-
-llvm::Error handleRequirement(const ValueDecl* Requirement,
-                              GlobalCollectedSymbols &CollectedSymbols,
-                              SymbolWithRange FunctionNameSymbol,
-                              const FuncDecl* Declaration) {
-  
-  if(auto *ProtocolFun = dyn_cast<FuncDecl>(Requirement)) {
-    auto ModuleAndParts = functionIdentifierParts(ProtocolFun);
-    auto Parts = ModuleAndParts.second;
-    auto ProtocolFunId = combineIdentifier(Parts);
-    
-    // Create the symbols for protocol function parameters
-    auto ProtocolParametersSymbolsOrError
-      = parseSeparateFunctionDeclarationForParameters(ProtocolFun);
-    if (auto Error = ProtocolParametersSymbolsOrError.takeError()) {
-      return Error;
-    }
-    auto ProtocolFunParametersSymbols
-    = ProtocolParametersSymbolsOrError.get();
-    
-    // Create the symbols for overridden function parameters
-    auto OverriddenParametersSymbolsOrError =
-    parseSeparateFunctionDeclarationForParameters(Declaration);
-    if (auto Error = OverriddenParametersSymbolsOrError.takeError()) {
-      return Error;
-    }
-    auto OverriddenFunParametersSymbols
-    = OverriddenParametersSymbolsOrError.get();
-    
-    // Parameter count for both protocol method and overridden method
-    // must be the same, otherwise we don't know what to do with them.
-    if(OverriddenFunParametersSymbols.size()
-       != ProtocolFunParametersSymbols.size()) {
-      return stringError("Couldn't parse overriden function protocol "
-                         "parameters.");
-    }
-    
-    // rename protocol method symbol id
-    
-    // find protocol function identifier in a set of all collected symbols
-    // and replace it with function identifier of overridden symbol
-    for (auto CollectedSymbol: CollectedSymbols) {
-      if(CollectedSymbol.SymbolWithRange.Symbol.Identifier
-         == ProtocolFunId) {
-        
-        CollectedSymbols.erase(CollectedSymbol);
-        CollectedSymbol.SymbolWithRange.Symbol.Identifier
-        = FunctionNameSymbol.Symbol.Identifier;
-        CollectedSymbols.insert(CollectedSymbol);
-        
-        return llvm::Error::success();
-      }
-    }
-    
-    // rename protocol method parameters symbol ids
-    for(size_t i = 0; i<ProtocolFunParametersSymbols.size(); i++) {
-      auto ProtocolFunParameter = ProtocolFunParametersSymbols[i];
-      auto OverridenFunParameter = OverriddenFunParametersSymbols[i];
-      
-      // find protocol parameter identifier in a set of all collected symbols
-      // and replace it with parameter identifier of overridden symbol
-      for(auto CollectedSymbol: CollectedSymbols) {
-        if(CollectedSymbol.SymbolWithRange.Symbol.Identifier
-           == ProtocolFunParameter.Symbol.Identifier) {
-          
-          CollectedSymbols.erase(CollectedSymbol);
-          CollectedSymbol.SymbolWithRange.Symbol.Identifier
-          = OverridenFunParameter.Symbol.Identifier;
-          CollectedSymbols.insert(CollectedSymbol);
-          
-          return llvm::Error::success();
-        }
-      }
-    }
-  }
-  return llvm::Error::success();
-}
-
-llvm::Expected<bool>
-handleSatisfiedProtocolRequirements(GlobalCollectedSymbols &CollectedSymbols,
-                                    SymbolWithRange FunctionNameSymbol,
-                                    const FuncDecl* Declaration) {
-  
-  //check if this overridden method is also satisfying some protocol
-  auto ProtocolRequirements = satisfiedProtocolRequirements(Declaration);
-  auto SatisfiesProtocol = !ProtocolRequirements.empty();
-  
-  // we assume that there is always only one overriden symbol
-  if(SatisfiesProtocol) {
-    
-    for(auto Requirement : ProtocolRequirements) {
-      if (auto Error = handleRequirement(Requirement,
-                                         CollectedSymbols,
-                                         FunctionNameSymbol,
-                                         Declaration)) {
-        return std::move(Error);
-      }
-    }
-  }
-  
-  return true;
-}
-  
-SymbolsOrError parse(const ConstructorDecl* Declaration,
-                     CharSourceRange Range) {
-  // We're not interested in renaming the init function name,
-  // but we're interested in renaming the init parameters
-  if (Declaration->isImplicit()) {
-    return stringError("We dont want to parse the implicit constructor "
-                       "declarations, only their usage via calls.");
-  }
-  return parseSeparateFunctionDeclarationForParameters(Declaration);
-}
-
-SymbolsOrError parse(GlobalCollectedSymbols &CollectedSymbols,
-                     const FuncDecl* Declaration,
-                     CharSourceRange Range) {
-
-  std::vector<SymbolWithRange> Symbols;
-
-  // function name should be renamed only if it's not a setter
-  if(!Declaration->isSetter()) {
-    
-    // Create the symbol for function
-    if (Declaration->getOverriddenDecl() != nullptr) {
-      // Overriden declaration must be treated separately because we mustn't
-      // rename function that overrides function from different module
-      auto SymbolOrError =
-        parseOverridenDeclaration(CollectedSymbols,
-                                  Declaration,
-                                  moduleName(Declaration),
-                                  Range);
-      if (auto Error = SymbolOrError.takeError()) {
-
-        llvm::consumeError(std::move(Error));
-
-      } else {
-      
-        auto FunctionNameSymbol = SymbolOrError.get();
-
-        // If overridden method also satisfies protocol requirements
-        // we must update symbol identifier for protocol's method to be the same
-        // as symbol identifier of the overridden function. Otherwise function
-        // inside protocol would be renamed differently and our class
-        // will no longer conform to that protocol.
-        auto HandledOrError = handleSatisfiedProtocolRequirements(
-                                                              CollectedSymbols,
-                                                              FunctionNameSymbol,
-                                                              Declaration);
-
-        if (auto Error = HandledOrError.takeError()) {
-          return std::move(Error);
-        }
-
-        Symbols.push_back(FunctionNameSymbol);
-      }
-    } else {
-      Symbols.push_back(getFunctionSymbol(CollectedSymbols,
-                                          Declaration,
-                                          Range));
-    }
-  }
-  
-  if (auto Error = isDeclarationSupported(Declaration)) {
-    return std::move(Error);
-  }
-
-  // Create the symbols for function parameters
-  auto ParametersSymbolsOrError =
-    parseSeparateFunctionDeclarationForParameters(Declaration);
-  if (auto Error = ParametersSymbolsOrError.takeError()) {
-    return std::move(Error);
-  }
-
-  copyToVector(ParametersSymbolsOrError.get(), Symbols);
-
-  // Return both the function symbol and the parameters symbols together
-  return Symbols;
-}
-
-} //namespace obfuscation
-} //namespace swift
diff --git a/swift/lib/Obfuscation/GlobalCollectedSymbolsUpdater.cpp b/swift/lib/Obfuscation/GlobalCollectedSymbolsUpdater.cpp
new file mode 100644
index 00000000000..2c5a3322722
--- /dev/null
+++ b/swift/lib/Obfuscation/GlobalCollectedSymbolsUpdater.cpp
@@ -0,0 +1,270 @@
+#include "swift/Obfuscation/GlobalCollectedSymbolsUpdater.h"
+#include "swift/Obfuscation/Utils.h"
+
+namespace swift {
+namespace obfuscation {
+
+GlobalCollectedSymbolsUpdater::~GlobalCollectedSymbolsUpdater() = default;
+
+void ExcludedSymbolsUpdater::
+  load(std::vector<DeclWithSymbolWithRange> &Declarations) {
+  for (auto &Declaration : Declarations) {
+    LoadedSymbols.push_back(Declaration);
+  }
+}
+
+void ExcludedSymbolsUpdater::
+  updateUsingLoadedSymbols(GlobalCollectedSymbols &Symbols) {
+
+  std::vector<IndexedDeclWithSymbolWithRange> SymbolsToRemove;
+
+  for (auto &ExcludedSymbol : LoadedSymbols) {
+    for (auto &Symbol : Symbols) {
+      if (ExcludedSymbol.Symbol.Identifier == Symbol.Symbol.Identifier) {
+        SymbolsToRemove.push_back(Symbol);
+      }
+    }
+  }
+
+  for (auto IndexedSymbolWithRange : SymbolsToRemove) {
+    Symbols.erase(IndexedSymbolWithRange);
+  }
+}
+
+GlobalCollectedSymbolsUpdaterKind ExcludedSymbolsUpdater::getKind() {
+  return GlobalCollectedSymbolsUpdaterKind::ExcludedSymbols;
+}
+
+ProtocolFunctionUpdater::
+  ProtocolFunctionUpdater(FunctionExtractor &FuncExtractor,
+                          ParameterExtractor &ParamExtractor)
+: FuncExtractor(FuncExtractor), ParamExtractor(ParamExtractor) {}
+
+void ProtocolFunctionUpdater::
+  load(std::vector<DeclWithSymbolWithRange> &Declarations) {
+    for (auto &Declaration : Declarations) {
+      if (dyn_cast<FuncDecl>(Declaration.Declaration)) {
+        LoadedSymbols.push_back(Declaration);
+      } else if (dyn_cast<ParamDecl>(Declaration.Declaration)) {
+        LoadedSymbols.push_back(Declaration);
+      }
+    }
+}
+
+void ProtocolFunctionUpdater::
+handleRequirement(const ValueDecl* Requirement,
+                  GlobalCollectedSymbols &CollectedSymbols,
+                  SymbolWithRange FunctionNameSymbol,
+                  const FuncDecl* Declaration) {
+
+  if (auto *ProtocolFun = dyn_cast<FuncDecl>(Requirement)) {
+    auto ModuleAndParts = FuncExtractor.functionIdentifierParts(ProtocolFun);
+    auto Parts = ModuleAndParts.second;
+    auto ProtocolFunId = combineIdentifier(Parts);
+
+    // TODO: what about implicit? should we check for them?
+    // Create the symbols for protocol function parameters
+    auto ProtocolFunParametersSymbols =
+      ParamExtractor.parametersFrom(ProtocolFun);
+
+    // Create the symbols for overridden function parameters
+    auto OverriddenFunParametersSymbols =
+      ParamExtractor.parametersFrom(Declaration);
+
+    // Parameter count for both protocol method and overridden method
+    // must be the same, otherwise we don't know what to do with them.
+    if (OverriddenFunParametersSymbols.size()
+        != ProtocolFunParametersSymbols.size()) {
+      return;
+    }
+
+    // rename protocol method symbol id
+
+    // find protocol function identifier in a set of all collected symbols
+    // and replace it with function identifier of overridden symbol
+    for (auto CollectedSymbol: CollectedSymbols) {
+      if (CollectedSymbol.Symbol.Identifier == ProtocolFunId) {
+
+        CollectedSymbols.erase(CollectedSymbol);
+        CollectedSymbol.Symbol.Identifier =
+          FunctionNameSymbol.Symbol.Identifier;
+        CollectedSymbols.insert(CollectedSymbol);
+        break;
+      }
+    }
+
+    // rename protocol method parameters symbol ids
+    for(size_t i = 0; i < ProtocolFunParametersSymbols.size(); i++) {
+      auto ProtocolFunParameter = ProtocolFunParametersSymbols[i];
+
+      // find protocol parameter identifier in a set of all collected symbols
+      // and replace it with parameter identifier of overridden symbol
+      for (auto CollectedSymbol: CollectedSymbols) {
+        if (CollectedSymbol.Declaration == ProtocolFunParameter.Declaration
+            && CollectedSymbol.Symbol.Type != SymbolType::InternalParameter) {
+          size_t Index = CollectedSymbol.Symbol.Identifier.find(ProtocolFunId);
+          if (Index != std::string::npos) {
+            CollectedSymbols.erase(CollectedSymbol);
+            CollectedSymbol.Symbol.Identifier.replace(Index,
+                                                      ProtocolFunId.size(),
+                                                      FunctionNameSymbol.Symbol.Identifier);
+            CollectedSymbols.insert(CollectedSymbol);
+          }
+          break;
+        }
+      }
+    }
+  }
+}
+
+void ProtocolFunctionUpdater::
+  updateUsingLoadedSymbols(GlobalCollectedSymbols &Symbols) {
+
+  for (auto &Declaration : LoadedSymbols) {
+
+    if (auto *Function = dyn_cast<FuncDecl>(Declaration.Declaration)) {
+      //check if this overridden method is also satisfying some protocol
+      auto ProtocolRequirements =
+        FuncExtractor.satisfiedProtocolRequirements(Function);
+      auto SatisfiesProtocol = !ProtocolRequirements.empty();
+
+      // we assume that there is always only one overriden symbol
+      if (SatisfiesProtocol) {
+        for (auto Requirement : ProtocolRequirements) {
+          handleRequirement(Requirement,
+                            Symbols,
+                            SymbolWithRange(Declaration.Symbol, Declaration.Range),
+                            Function);
+        }
+      }
+    }
+  }
+}
+
+GlobalCollectedSymbolsUpdaterKind ProtocolFunctionUpdater::getKind() {
+  return GlobalCollectedSymbolsUpdaterKind::ProtocolFunction;
+}
+
+ExtensionSymbolsUpdater::
+  ExtensionSymbolsUpdater(FunctionExtractor &FuncExtractor,
+                          ParameterExtractor &ParamExtractor)
+: FuncExtractor(FuncExtractor), ParamExtractor(ParamExtractor) {}
+
+void ExtensionSymbolsUpdater::load(std::vector<DeclWithSymbolWithRange> &Declarations) {
+
+  for (auto DeclAndSymbolWithRange : Declarations) {
+
+    auto *Declaration = DeclAndSymbolWithRange.Declaration;
+
+    if (auto *NominalType = dyn_cast<NominalTypeDecl>(Declaration)) {
+
+      for (auto *Extension : NominalType->getExtensions()) {
+
+        if (auto ExtensionDeclaration = dyn_cast<ExtensionDecl>(Extension)) {
+
+          std::vector<SymbolWithRange> Results;
+          auto *ExtendedType = ExtensionDeclaration->getExtendedType()->getAnyNominal();
+          auto ExtensionModuleName = FuncExtractor.moduleName(ExtensionDeclaration);
+          if (ExtendedType == nullptr) {
+            continue;
+          }
+
+          auto ExtendedTypeModuleName = FuncExtractor.moduleName(ExtendedType);
+          if (ExtensionModuleName == ExtendedTypeModuleName) {
+            continue;
+          }
+
+          if (!ExtensionDeclaration->getMembers().empty()) {
+            continue;
+          }
+
+          auto InheritedArray = ExtensionDeclaration->getInherited();
+
+          for (auto Inherited : InheritedArray) {
+
+            auto *Nominal = Inherited.getType()->getAnyNominal();
+            if (auto *ProtocolDeclaration = dyn_cast_or_null<ProtocolDecl>(Nominal)) {
+              for (auto *Member : ProtocolDeclaration->getMembers()) {
+                for (auto *Declaration : ExtendedType->getMembers()) {
+
+                  if (auto *ExtFunction = dyn_cast<AbstractFunctionDecl>(Declaration)) {
+                    if (auto *ProtocolFunction =
+                        dyn_cast<AbstractFunctionDecl>(Member)) {
+
+                      auto ExtFunctionSignature =
+                        FuncExtractor.functionSignature(ExtFunction);
+                      auto ProtocolFunctionSignature =
+                        FuncExtractor.functionSignature(ProtocolFunction);
+                      auto ExtFunctionName = ExtFunction->getName().str().str();
+                      auto ProtocolFunctionName =
+                      ProtocolFunction->getName().str().str();
+
+                      if (ExtFunctionSignature == ProtocolFunctionSignature
+                          && ExtFunctionName == ProtocolFunctionName) {
+                        LoadedSymbols.push_back(DeclWithSymbolWithRange(Member,
+                                                                        DeclAndSymbolWithRange.Symbol,
+                                                                        DeclAndSymbolWithRange.Range));
+
+                        for (auto &ExtFunctionParam :
+                              ParamExtractor.parametersFrom(ProtocolFunction)) {
+                          LoadedSymbols.push_back(DeclWithSymbolWithRange(ExtFunctionParam.Declaration,
+                                                                          DeclAndSymbolWithRange.Symbol,
+                                                                          DeclAndSymbolWithRange.Range));
+                        }
+                      }
+                    }
+                  }
+
+                  if (auto *ExtFunction = dyn_cast<AbstractStorageDecl>(Declaration)) {
+                    if (auto *ProtocolFunction =
+                        dyn_cast<AbstractStorageDecl>(Member)) {
+
+                      auto ExtFunctionSignature =
+                      ExtFunction->getInterfaceType().getString();
+                      auto ProtocolFunctionSignature =
+                      ProtocolFunction->getInterfaceType().getString();
+                      auto ExtFunctionName = ExtFunction->getName().str().str();
+                      auto ProtocolFunctionName =
+                      ProtocolFunction->getName().str().str();
+
+                      if (ExtFunctionSignature == ProtocolFunctionSignature
+                          && ExtFunctionName == ProtocolFunctionName) {
+                        LoadedSymbols.push_back(DeclWithSymbolWithRange(Member,
+                                                                        DeclAndSymbolWithRange.Symbol,
+                                                                        DeclAndSymbolWithRange.Range));
+                      }
+                    }
+                  }
+                }
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+}
+
+void ExtensionSymbolsUpdater::updateUsingLoadedSymbols(GlobalCollectedSymbols &Symbols) {
+
+  std::vector<IndexedDeclWithSymbolWithRange> SymbolsToRemove;
+
+  for (auto &ExcludedSymbol : LoadedSymbols) {
+    for (auto &Symbol : Symbols) {
+      if (Symbol.Declaration == ExcludedSymbol.Declaration) {
+        SymbolsToRemove.push_back(Symbol);
+      }
+    }
+  }
+
+  for (auto IndexedSymbolWithRange : SymbolsToRemove) {
+    Symbols.erase(IndexedSymbolWithRange);
+  }
+}
+
+GlobalCollectedSymbolsUpdaterKind ExtensionSymbolsUpdater::getKind() {
+  return GlobalCollectedSymbolsUpdaterKind::ExtensionSymbols;
+}
+
+} //namespace obfuscation
+} //namespace swift
diff --git a/swift/lib/Obfuscation/Includer.cpp b/swift/lib/Obfuscation/Includer.cpp
new file mode 100644
index 00000000000..28305647cb5
--- /dev/null
+++ b/swift/lib/Obfuscation/Includer.cpp
@@ -0,0 +1,182 @@
+#include "swift/Obfuscation/Includer.h"
+#include "swift/Obfuscation/Utils.h"
+
+namespace swift {
+namespace obfuscation {
+
+Includer::~Includer() = default;
+
+DeclsWithRangesOrErrors
+NominalTypeIncluder::include(DeclWithRange &DeclAndRange) {
+  if (dyn_cast_or_null<NominalTypeDecl>(DeclAndRange.Declaration)
+      && DeclAndRange.Range.isValid()) {
+      return wrapInVector(DeclAndRange);
+  }
+  return wrapInVector<DeclWithRange>(stringError("NominalTypeIncluder doesn't support this "
+                                  "DeclWithRange"));
+}
+
+DeclsWithRangesOrErrors
+FunctionNameIncluder::include(DeclWithRange &DeclAndRange) {
+  if (auto Function = dyn_cast_or_null<FuncDecl>(DeclAndRange.Declaration)) {
+    if (DeclAndRange.Range.isValid()
+        && !Function->isOperator()
+        && !Function->isGetter()
+        && (Function->isSetter()
+            || (!Function->isAccessor() && !Function->isObservingAccessor()))) {
+      return wrapInVector(DeclAndRange);
+    }
+  }
+
+  return wrapInVector<DeclWithRange>(stringError("FunctionNameIncluder doesn't support this "
+                                  "DeclWithRange"));
+}
+
+OperatorIncluder::OperatorIncluder(OperatorExtractor &Extractor)
+: Extractor(Extractor) {}
+
+DeclsWithRangesOrErrors
+OperatorIncluder::include(DeclWithRange &DeclAndRange) {
+
+  if (auto Function = dyn_cast_or_null<FuncDecl>(DeclAndRange.Declaration)) {
+    if (DeclAndRange.Range.isValid() && Function->isOperator()) {
+      if (auto OperatorDecl = Function->getOperatorDecl()) {
+        auto OperatorModuleName = Extractor.moduleName(OperatorDecl);
+        if (Extractor.moduleName(Function) != OperatorModuleName) {
+          return wrapInVector<DeclWithRange>(stringError("We don't rename the operator if "
+                                          "the operator is from other module "
+                                          "than the operator's implementation"));
+        }
+      }
+      return wrapInVector(DeclAndRange);
+    }
+  } else if (auto Operator =
+              dyn_cast_or_null<OperatorDecl>(DeclAndRange.Declaration)) {
+    return wrapInVector(DeclAndRange);
+  }
+  return wrapInVector<DeclWithRange>(stringError("OperatorIncluder doesn't support this "
+                                  "DeclWithRange"));
+}
+
+FunctionParametersIncluder::
+  FunctionParametersIncluder(ParameterExtractor &Extractor)
+: Extractor(Extractor) {}
+
+DeclsWithRangesOrErrors
+FunctionParametersIncluder::include(DeclWithRange &DeclAndRange) {
+  if (auto Parameter = dyn_cast_or_null<ParamDecl>(DeclAndRange.Declaration)) {
+
+    if (DeclAndRange.Range.isValid() && Parameter->getNameLoc().isValid()) {
+
+      auto InternalName = Extractor.internalParameterName(Parameter);
+
+      CharSourceRange ComputedRange(Parameter->getNameLoc(),
+                                    InternalName.length());
+
+      if (!ComputedRange.overlaps(DeclAndRange.Range)
+          && Parameter->isImplicit()) {
+        return wrapInVector<DeclWithRange>(stringError("We must not rename the implicit "
+                                        "parameters at the usage place."));
+      }
+      return wrapInVector(DeclAndRange);
+    }
+
+  }
+  if (auto Constructor =
+        dyn_cast_or_null<ConstructorDecl>(DeclAndRange.Declaration)) {
+    if (Constructor->isImplicit()) {
+      return wrapInVector<DeclWithRange>(stringError("We dont want to parse the implicit "
+                                      "constructor declarations, only their "
+                                      "usage via calls."));
+    }
+  }
+  if (auto Function =
+        dyn_cast_or_null<AbstractFunctionDecl>(DeclAndRange.Declaration)) {
+
+    DeclsWithRangesOrErrors Declarations;
+
+    auto DeclsWithRanges = Extractor.parametersFrom(Function);
+
+    for (auto DeclAndRange : DeclsWithRanges) {
+      if (auto *Parameter = dyn_cast_or_null<ParamDecl>(DeclAndRange.Declaration)) {
+        if (!Parameter->isImplicit()) {
+          Declarations.push_back(DeclAndRange);
+        }
+      }
+    }
+
+    return Declarations;
+  }
+  return wrapInVector<DeclWithRange>(stringError("OperatorIncluder doesn't support this "
+                                  "DeclWithRange"));
+}
+
+VariableIncluder::VariableIncluder(VariableExtractor &Extractor)
+: Extractor(Extractor) {}
+
+DeclsWithRangesOrErrors VariableIncluder::include(DeclWithRange &DeclAndRange) {
+  auto *Declaration = DeclAndRange.Declaration;
+
+  if (auto *Parameter = dyn_cast_or_null<ParamDecl>(Declaration)) {
+
+    if (const auto *Constructor =
+          dyn_cast_or_null<ConstructorDecl>(Parameter->getDeclContext())) {
+      if (!Constructor->isImplicit()) {
+        return wrapInVector<DeclWithRange>(stringError("The supposedly memberwise constructor "
+                                                       "is not memberwise, because it isn't implicit."));
+      }
+      auto *StructDeclaration =
+        Constructor->getResultInterfaceType()->getStructOrBoundGenericStruct();
+      if (StructDeclaration == nullptr) {
+        return wrapInVector<DeclWithRange>(stringError("The supposedly memberwise constructor "
+                                        "is not memberwise, because it doesn't "
+                                        "come from struct"));
+      }
+      auto Properties = StructDeclaration->getStoredProperties();
+      for (auto Variable : Properties) {
+        if (Extractor.declarationName(Variable)
+            == Extractor.declarationName(Parameter)) {
+          return wrapInVector(DeclWithRange(Variable, DeclAndRange.Range));
+        }
+      }
+      return wrapInVector<DeclWithRange>(stringError("Failed to find struct property with "
+                                      "the same name as memberwise constructor "
+                                      "parameter"));
+    } else {
+      return wrapInVector<DeclWithRange>(stringError("Failed to parse constructor declaration"
+                                      "from parameter"));
+    }
+  } else if (auto *Variable = dyn_cast_or_null<VarDecl>(Declaration)) {
+
+      if (Variable->isCaptureList()) {
+        return wrapInVector<DeclWithRange>(stringError("The variable is the element of "
+                                        "closure's capture list. It must not "
+                                        "be renamed."));
+      } else if (Variable->isImplicit()) {
+        return wrapInVector<DeclWithRange>(stringError("Only explicit variables might be "
+                                        "safely obfuscated"));
+      } else if (Variable->getOverriddenDecl() != nullptr) {
+        auto BaseWithModules = Extractor.getBaseOverridenDeclarationWithModules(Variable);
+        auto Base = const_cast<VarDecl *>(BaseWithModules.first);
+        auto Modules = BaseWithModules.second;
+
+        if (Extractor.isOverriddenMethodFromTheSameModule(Modules,
+                                                          Extractor.moduleName(Variable))) {
+          return wrapInVector(DeclWithRange(Base, DeclAndRange.Range));
+        } else {
+          return wrapInVector<DeclWithRange>(stringError("only overriding properties from the same "
+                                          "module might be safely obfuscated"));
+        }
+      } else {
+        return wrapInVector(DeclAndRange);
+      }
+  }
+
+  return wrapInVector<DeclWithRange>(stringError("VariableIncluder doesn't support "
+                                  "this DeclWithRange"));
+
+}
+
+} //namespace obfuscation
+} //namespace swift
+
diff --git a/swift/lib/Obfuscation/NSManagedExcluder.cpp b/swift/lib/Obfuscation/NSManagedExcluder.cpp
deleted file mode 100644
index 37f790e2a90..00000000000
--- a/swift/lib/Obfuscation/NSManagedExcluder.cpp
+++ /dev/null
@@ -1,38 +0,0 @@
-#include "swift/Obfuscation/NSManagedExcluder.h"
-#include "swift/Obfuscation/DeclarationParsingUtils.h"
-#include "swift/Obfuscation/Utils.h"
-#include "swift/Obfuscation/VariableDeclarationParser.h"
-#include "swift/Obfuscation/DeclarationParser.h"
-
-namespace swift {
-namespace obfuscation {
-    
-void NSManagedExcluder::
-identifyExclusions(Decl *Declaration) {
-  
-  if(auto NominalDeclaration = dyn_cast<NominalTypeDecl>(Declaration)) {
-    
-    auto ClassOrExtensionCtx
-                      = NominalDeclaration->getAsClassOrClassExtensionContext();
-    
-    if(ClassOrExtensionCtx != nullptr) {
-    
-      auto SuperClass = NominalDeclaration->getAsClassOrClassExtensionContext()->getSuperclassDecl();
-      if(SuperClass != nullptr) {
-        
-        if(SuperClass->getName().str() == "NSManagedObject") {
-          DeclarationsToExclude.insert(NominalDeclaration);
-        }
-      }
-    }
-    
-  } else if (auto *VariableDeclaration = dyn_cast<VarDecl>(Declaration)) {
-    
-    if(VariableDeclaration->getAttrs().hasAttribute<NSManagedAttr>()) {
-      DeclarationsToExclude.insert(VariableDeclaration);
-    }
-  }
-}
-  
-} //namespace obfuscation
-} //namespace swift
diff --git a/swift/lib/Obfuscation/NominalTypeDeclarationParser.cpp b/swift/lib/Obfuscation/NominalTypeDeclarationParser.cpp
deleted file mode 100644
index 3428a42b2ad..00000000000
--- a/swift/lib/Obfuscation/NominalTypeDeclarationParser.cpp
+++ /dev/null
@@ -1,29 +0,0 @@
-#include "swift/Obfuscation/NominalTypeDeclarationParser.h"
-#include "swift/Obfuscation/Utils.h"
-
-namespace swift {
-namespace obfuscation {
-
-SingleSymbolOrError parse(const NominalTypeDecl* Declaration) {
-
-  auto ModuleNameAndParts = moduleNameAndIdentifierParts(Declaration);
-
-  std::string ModuleName = ModuleNameAndParts.first;
-  std::vector<std::string> IdentifierParts = ModuleNameAndParts.second;
-  std::string SymbolName = Declaration->getBaseName().getIdentifier().str();
-  
-  auto NominalTypeParts = nominalTypeIdentifierParts(Declaration,
-                                                     typeName(Declaration));
-  if (auto Error = NominalTypeParts.takeError()) {
-    return std::move(Error);
-  }
-  copyToVector(NominalTypeParts.get(), IdentifierParts);
-  
-  return Symbol(combineIdentifier(IdentifierParts),
-                SymbolName,
-                ModuleName,
-                SymbolType::Type);
-}
-
-} //namespace obfuscation
-} //namespace swift
diff --git a/swift/lib/Obfuscation/OperatorParser.cpp b/swift/lib/Obfuscation/OperatorParser.cpp
deleted file mode 100644
index b479b240f4a..00000000000
--- a/swift/lib/Obfuscation/OperatorParser.cpp
+++ /dev/null
@@ -1,64 +0,0 @@
-#include "swift/Obfuscation/OperatorParser.h"
-#include "swift/Obfuscation/FunctionDeclarationParser.h"
-#include "swift/Obfuscation/ParameterDeclarationParser.h"
-#include "swift/Obfuscation/Utils.h"
-#include "swift/Obfuscation/DeclarationParsingUtils.h"
-
-namespace swift {
-namespace obfuscation {
-
-SingleSymbolOrError parse(const OperatorDecl* Declaration) {
-
-  auto ModuleNameAndParts = moduleNameAndIdentifierParts(Declaration);
-  std::string ModuleName = ModuleNameAndParts.first;
-  std::vector<std::string> IdentifierParts = ModuleNameAndParts.second;
-  std::string SymbolName = symbolName(Declaration);
-  IdentifierParts.push_back("operator." + SymbolName);
-
-  return Symbol(combineIdentifier(IdentifierParts),
-                SymbolName,
-                ModuleName,
-                SymbolType::Operator);
-}
-
-SymbolsOrError parseOperator(const FuncDecl* Declaration, CharSourceRange Range) {
-
-  std::vector<SymbolWithRange> Symbols;
-
-  // Creates the symbols for the parameters of the operator implementation
-  auto ParametersSymbolsOrError =
-    parseSeparateFunctionDeclarationForParameters(Declaration);
-  if (auto Error = ParametersSymbolsOrError.takeError()) {
-    return std::move(Error);
-  }
-  // Parameters for the operator implementation might be always renamed because
-  // they are not part of the interface that the operator defines
-  copyToVector(ParametersSymbolsOrError.get(), Symbols);
-
-  // We don't rename the operator if the operator is from other module
-  // than the operator's implementation
-  if (auto OperatorDecl = Declaration->getOperatorDecl()) {
-    auto OperatorModuleName = moduleName(OperatorDecl);
-    if (moduleName(Declaration) != OperatorModuleName) {
-      return Symbols;
-    }
-  }
-
-  auto ModuleAndParts = moduleNameAndIdentifierParts(Declaration);
-  auto ModuleName = ModuleAndParts.first;
-  auto Parts = ModuleAndParts.second;
-
-  auto SymbolName = declarationName(Declaration);
-  Parts.push_back("operator." + SymbolName);
-
-  Symbol Symbol(combineIdentifier(Parts),
-                SymbolName,
-                ModuleName,
-                SymbolType::Operator);
-
-  Symbols.push_back(SymbolWithRange(Symbol, Range));
-  return Symbols;
-}
-
-} //namespace obfuscation
-} //namespace swift
diff --git a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp b/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
deleted file mode 100644
index 3ff91cb35b9..00000000000
--- a/swift/lib/Obfuscation/ParameterDeclarationParser.cpp
+++ /dev/null
@@ -1,267 +0,0 @@
-#include "swift/Obfuscation/ParameterDeclarationParser.h"
-#include "swift/Obfuscation/FunctionDeclarationParser.h"
-#include "swift/Obfuscation/VariableDeclarationParser.h"
-#include "swift/Obfuscation/DeclarationParsingUtils.h"
-#include "swift/Obfuscation/Utils.h"
-
-#include <string>
-#include <vector>
-
-namespace swift {
-namespace obfuscation {
-
-llvm::Expected<std::string>
-getIdentifierWithParameterPosition(const ParamDecl *Declaration,
-                                   const AbstractFunctionDecl *
-                                    FunctionDeclaration) {
-  
-  auto ParameterLists = FunctionDeclaration->getParameterLists();
-
-  // We use index, not iterator, because we want to use the index
-  // to build identifier
-  for (unsigned ListIndex = 0; ListIndex < ParameterLists.size(); ++ListIndex) {
-    
-    auto *ParameterList = ParameterLists[ListIndex];
-
-    // We use index, not iterator, because we want to use the index
-    // to build identifier
-    for (unsigned ParameterIndex = 0;
-         ParameterIndex < ParameterList->size();
-         ++ParameterIndex) {
-      
-      auto *ParamDeclaration = ParameterList->get(ParameterIndex);
-      
-      //this comparison may be wrong but I couldn't come up
-      //with a sample code that breaks it
-      if (Declaration->getName() == ParamDeclaration->getName()) {
-        return "list" + std::to_string(ListIndex) +
-               "_parameter" + std::to_string(ParameterIndex);
-      }
-    }
-  }
-  
-  return stringError("Couldn't find parameter position");
-}
-
-SymbolsOrError parse(const ParamDecl* Declaration) {
-
-  if (const auto *FunctionDeclaration =
-        dyn_cast<AbstractFunctionDecl>(Declaration->getDeclContext())) {
-
-    auto BaseWithModules =
-      getBaseOverridenDeclarationWithModules(FunctionDeclaration);
-    auto BaseFunctionDeclaration = BaseWithModules.first;
-    auto Modules = BaseWithModules.second;
-
-    auto ModuleName = moduleName(Declaration);
-    auto ExternalName = externalParameterName(Declaration);
-    auto InternalName = internalParameterName(Declaration);
-    
-    std::vector<SymbolWithRange> Symbols;
-
-    std::string BaseFunctionName = declarationName(BaseFunctionDeclaration);
-    auto BaseModuleAndParts = functionIdentifierParts(BaseFunctionDeclaration);
-    std::string BaseFunctionModuleName = BaseModuleAndParts.first;
-    std::vector<std::string> BaseParts = BaseModuleAndParts.second;
-
-    auto BasePositionOrError =
-      getIdentifierWithParameterPosition(Declaration, BaseFunctionDeclaration);
-    if (auto Error = BasePositionOrError.takeError()) {
-      return std::move(Error);
-    } else {
-      BaseParts.push_back("parameter.position." + BasePositionOrError.get());
-    }
-
-    // We check if parameter has a place that it's declared that we can reach
-    if (Declaration->getNameLoc().isValid()) {
-
-      auto IsSingle = Declaration->getArgumentNameLoc().isInvalid();
-
-      auto isFromTheSameModule = isOverriddenMethodFromTheSameModule(Modules,
-                                                                     ModuleName);
-
-      if (IsSingle) {
-
-        if (isFromTheSameModule) {
-          BaseParts.push_back("single." + InternalName);
-          CharSourceRange Range(Declaration->getNameLoc(),
-                                InternalName.length());
-          Symbol Symbol(combineIdentifier(BaseParts),
-                        InternalName,
-                        BaseFunctionModuleName,
-                        SymbolType::SingleParameter);
-          Symbols.push_back(SymbolWithRange(Symbol, Range));
-        }
-        
-      } else {
-
-        auto IsExternal = !ExternalName.empty();
-
-        if (IsExternal && isFromTheSameModule) {
-          auto ExternalParts = BaseParts;
-          
-          BaseParts.push_back("external." + ExternalName);
-          CharSourceRange ExternalRange(Declaration->getArgumentNameLoc(),
-                                        ExternalName.length());
-          Symbol ExternalSymbol(combineIdentifier(BaseParts),
-                                ExternalName,
-                                BaseFunctionModuleName,
-                                SymbolType::ExternalParameter);
-          Symbols.push_back(SymbolWithRange(ExternalSymbol, ExternalRange));
-          
-        }
-        
-        //  TODO: improve handling internal parameters in following case:
-        //  internal parameter in protocol method implementation,
-        //  where declaration and implementation are in different modules -
-        //  Symbol object will have different module name in Identifier
-        //  and in Module field.
-
-        std::string OriginalFunctionName = declarationName(FunctionDeclaration);
-        std::string OriginalFunctionModuleName =
-          moduleName(FunctionDeclaration);
-        std::vector<std::string> OriginalParts =
-          functionIdentifierParts(FunctionDeclaration).second;
-
-        auto OriginalPositionOrError =
-          getIdentifierWithParameterPosition(Declaration, FunctionDeclaration);
-        if (auto Error = OriginalPositionOrError.takeError()) {
-          return std::move(Error);
-        } else {
-          auto OriginalPosition = OriginalPositionOrError.get();
-          OriginalParts.push_back("parameter.position." + OriginalPosition);
-        }
-
-        OriginalParts.push_back("internal." + InternalName);
-        CharSourceRange InternalRange(Declaration->getNameLoc(),
-                                      InternalName.length());
-        Symbol InternalSymbol(combineIdentifier(OriginalParts),
-                              InternalName,
-                              OriginalFunctionModuleName,
-                              SymbolType::InternalParameter);
-        Symbols.push_back(SymbolWithRange(InternalSymbol, InternalRange));
-      }
-    }
-    
-    return Symbols;
-  }
-  
-  return stringError("Couldn't identify what function parameter belong to");
-}
-
-
-SingleSymbolOrError
-symbolFromMemberwiseConstructorParameter(const ParamDecl* Parameter) {
-  auto *Context = Parameter->getDeclContext();
-  if (const auto *Constructor = dyn_cast<ConstructorDecl>(Context)) {
-    auto *StructDeclaration =
-    Constructor->getResultInterfaceType()->getStructOrBoundGenericStruct();
-    if (StructDeclaration == nullptr) {
-      return stringError("The supposedly memberwise constructor is not "
-                         "memberwise, because it doesn't come from struct");
-    }
-    auto Properties = StructDeclaration->getStoredProperties();
-    for (auto Variable : Properties) {
-      if (declarationName(Variable) == declarationName(Parameter)) {
-        return parse(Variable);
-      }
-    }
-    return stringError("Failed to find struct property with the same name as "
-                       "memberwise constructor parameter");
-  } else {
-    return stringError("Failed to parse constructor declaration"
-                       "from parameter");
-  }
-}
-  
-SymbolsOrError
-parametersSymbolsFromFunction(const AbstractFunctionDecl* Declaration) {
-    
-  std::vector<SymbolWithRange> Symbols;
-
-  auto ParameterLists = Declaration->getParameterLists();
-  for (auto *ParameterList : ParameterLists) {
-    for (auto *Parameter : *ParameterList) {
-      if (isMemberwiseConstructorParameter(Parameter)) {
-        auto SingleSymbolOrError =
-          symbolFromMemberwiseConstructorParameter(Parameter);
-        if (auto Error = SingleSymbolOrError.takeError()) {
-          llvm::consumeError(std::move(Error));
-        } else {
-          CharSourceRange Range(Parameter->getNameLoc(),
-                                SingleSymbolOrError.get().Name.length());
-          SymbolWithRange SymbolWithRange(SingleSymbolOrError.get(), Range);
-          Symbols.push_back(SymbolWithRange);
-        }
-      } else if (!Parameter->isImplicit()) {
-        auto SymbolsOrError = parse(Parameter);
-        if (auto Error = SymbolsOrError.takeError()) {
-          return std::move(Error);
-        } else {
-          copyToVector(SymbolsOrError.get(), Symbols);
-        }
-      }
-    }
-  }
-
-  return Symbols;
-}
-
-SymbolsOrError
-parseSeparateFunctionDeclarationForParameters(const AbstractFunctionDecl*
-                                                Declaration) {
-  return parametersSymbolsFromFunction(Declaration);
-}
-  
-SymbolsOrError
-parseFunctionFromCallExpressionForParameters(const AbstractFunctionDecl*
-                                              Declaration) {
-  
-  auto SymbolsOrError = parametersSymbolsFromFunction(Declaration);
-  
-  if (auto Error = SymbolsOrError.takeError()) {
-    return std::move(Error);
-  } else {
-    
-    auto Symbols = SymbolsOrError.get();
-    auto SymbolsEnd = std::remove_if(Symbols.begin(),
-                                     Symbols.end(),
-                                     [](const SymbolWithRange &Element) {
-       return Element.Symbol.Type == SymbolType::InternalParameter;
-    });
-    Symbols.erase(SymbolsEnd, Symbols.end());
-    return Symbols;
-    
-  }
-}
-
-SymbolsOrError parseSeparateDeclarationWithRange(const ParamDecl* Declaration,
-                                                 CharSourceRange Range) {
-
-  if (Declaration->isImplicit()) {
-    return stringError("We must not rename the implicit parameters "
-                       "at the usage place.");
-  }
-  
-  auto SymbolsOrError = parse(Declaration);
-  if (auto Error = SymbolsOrError.takeError()) {
-    return std::move(Error);
-  }
-  
-  auto Symbols = SymbolsOrError.get();
-  
-  std::vector<SymbolWithRange> Result;
-  for (auto &Symbol : Symbols) {
-    if (Range.overlaps(Symbol.Range)) {
-      return stringError("Not separate declaration being passed to "
-                         "`parseSeparateDeclarationWithRange()` method");
-    }
-    if (Symbol.Symbol.Type != SymbolType::ExternalParameter) {
-      Result.push_back(SymbolWithRange(Symbol.Symbol, Range));
-    }
-  }
-  return Result;
-}
-
-} //namespace obfuscation
-} //namespace swift
diff --git a/swift/lib/Obfuscation/Processor.cpp b/swift/lib/Obfuscation/Processor.cpp
new file mode 100644
index 00000000000..ec03ab87cab
--- /dev/null
+++ b/swift/lib/Obfuscation/Processor.cpp
@@ -0,0 +1,411 @@
+#include "swift/Obfuscation/Processor.h"
+#include "swift/Obfuscation/Utils.h"
+
+namespace swift {
+namespace obfuscation {
+
+Processor::~Processor() = default;
+
+ExpressionProcessor::ExpressionProcessor(ParameterExtractor &Extractor)
+: Extractor(Extractor) {}
+
+llvm::Expected<AbstractFunctionDecl*>
+ExpressionProcessor::
+  declarationOfFunctionCalledInExpression(CallExpr *CallExpression) {
+  auto *CallFn = CallExpression->getFn();
+
+  if (auto *DotSyntaxCallExpression = dyn_cast<DotSyntaxCallExpr>(CallFn)) {
+    auto *DotFn = DotSyntaxCallExpression->getFn();
+
+    if (auto *OtherConstructor = dyn_cast<OtherConstructorDeclRefExpr>(DotFn)) {
+      // It's a super call like super.init()
+      auto *Decl = OtherConstructor->getDecl();
+
+      if (auto *FunctionDeclaration =
+          dyn_cast_or_null<AbstractFunctionDecl>(Decl)) {
+        return FunctionDeclaration;
+      }
+    } else {
+      // It's not a super.init call, just a function call
+      if (auto *DeclRefExpression = dyn_cast<DeclRefExpr>(DotFn)) {
+        auto *Decl = DeclRefExpression->getDecl();
+
+        if (auto *FunctionDeclaration =
+            dyn_cast_or_null<AbstractFunctionDecl>(Decl)) {
+          return FunctionDeclaration;
+        }
+      }
+    }
+  } else if (auto *Constructor = dyn_cast<ConstructorRefCallExpr>(CallFn)) {
+    // It's a constructor call
+    auto * ConstructorFn = Constructor->getFn();
+
+    if (auto *DeclarationRefExpression = dyn_cast<DeclRefExpr>(ConstructorFn)) {
+      auto* Decl = DeclarationRefExpression->getDecl();
+
+      if (auto *FunctionDeclaration =
+          dyn_cast_or_null<AbstractFunctionDecl>(Decl)) {
+        return FunctionDeclaration;
+      }
+    }
+  } else if (auto *Expression = dyn_cast<Expr>(CallFn)) {
+    // This branch is executed for example when
+    // a function is being called inside set {} block
+    auto *Decl = Expression->getReferencedDecl().getDecl();
+
+    if (auto *FunctionDeclaration =
+        dyn_cast_or_null<AbstractFunctionDecl>(Decl)) {
+      return FunctionDeclaration;
+    }
+  }
+  return stringError("Cannot found supported Call Expression subtree pattern");
+}
+
+std::vector<std::pair<Identifier, SourceLoc>>
+ExpressionProcessor::validArguments(CallExpr *CallExpression) {
+
+  std::vector<std::pair<Identifier, SourceLoc>> ValidArguments;
+
+  for (unsigned i = 0; i < CallExpression->getNumArguments(); ++i) {
+    auto Label = CallExpression->getArgumentLabels()[i];
+    auto Location = CallExpression->getArgumentLabelLoc(i);
+    if (Location.isValid()) {
+      ValidArguments.push_back(std::make_pair(Label, Location));
+    }
+  }
+
+  return ValidArguments;
+}
+
+DeclsWithRangesOrErrors
+ExpressionProcessor::parseCallExpressionWithArguments(CallExpr* CallExpression) {
+
+  DeclsWithRangesOrErrors Symbols;
+  auto FunctionDeclarationOrError =
+    declarationOfFunctionCalledInExpression(CallExpression);
+  if (auto Error = FunctionDeclarationOrError.takeError()) {
+    return wrapInVector<DeclWithRange>(std::move(Error));
+  }
+  auto FunctionDeclaration = FunctionDeclarationOrError.get();
+
+  auto Parameters = Extractor.parametersFrom(FunctionDeclaration);
+
+  auto ValidArguments = validArguments(CallExpression);
+  for (size_t i = 0; i < ValidArguments.size(); ++i) {
+
+    auto Label = ValidArguments[i].first;
+    auto Location = ValidArguments[i].second;
+    if (ValidArguments.size() == Parameters.size()) {
+      // The same number of named arguments in call and
+      // external/single parameters in function means that
+      // there are no parameters in this function that are default
+      // or with the external name
+      auto Parameter = dyn_cast<ParamDecl>(Parameters[i].Declaration);
+      auto ParameterNameOrError = Extractor.parameterNameForCallSite(Parameter);
+      if (auto Error = ParameterNameOrError.takeError()) {
+        llvm::consumeError(std::move(Error));
+        continue;
+      }
+      auto ParameterName = ParameterNameOrError.get();
+      if (Location.isValid() && ParameterName == Label.str().str()) {
+        CharSourceRange Range(Location, Label.getLength());
+        DeclWithRange DeclWithRange(Parameter, Range);
+        DeclWithRange.Context = DeclarationProcessingContext::FunctionCallAttribute;
+        Symbols.push_back(DeclWithRange);
+      }
+
+    } else {
+      auto CopyOfParameters = Parameters;
+      // There is different number of named arguments in call
+      // and external/single parameters in function. It means that
+      // some of the parameters are not required
+      // (default or without external name)
+      for (auto UncastParameter : CopyOfParameters) {
+        auto Parameter = dyn_cast<ParamDecl>(UncastParameter.Declaration);
+        auto ParameterNameOrError =
+          Extractor.parameterNameForCallSite(Parameter);
+        if (auto Error = ParameterNameOrError.takeError()) {
+          llvm::consumeError(std::move(Error));
+          continue;
+        }
+        auto ParameterName = ParameterNameOrError.get();
+        if (Location.isValid() && ParameterName == Label.str().str()) {
+          removeFromVector(CopyOfParameters, UncastParameter);
+          CharSourceRange Range(Location, Label.getLength());
+          DeclWithRange DeclWithRange(Parameter, Range);
+          DeclWithRange.Context = DeclarationProcessingContext::FunctionCallAttribute;
+          Symbols.push_back(DeclWithRange);
+          break;
+        }
+      }
+    }
+  }
+
+  return Symbols;
+}
+
+llvm::Expected<CharSourceRange>
+ExpressionProcessor::rangeOfFirstOccurenceOfStringInSourceLoc(std::string String,
+                                                              SourceLoc StartSourceLoc) {
+  auto StartLoc =
+  static_cast<const char*>(StartSourceLoc.getOpaquePointerValue());
+  std::string StartLocString(StartLoc);
+
+  auto FoundPosition = StartLocString.find(String);
+  if (FoundPosition == std::string::npos) {
+    return stringError("Failed to find the string occurence"
+                       "in source location");
+  }
+
+  auto FirstOccurenceSourceLoc = StartSourceLoc.getAdvancedLoc(FoundPosition);
+  return CharSourceRange(FirstOccurenceSourceLoc, String.size());
+}
+
+DeclsWithRangesOrErrors
+ExpressionProcessor::parseGenericParameters(BoundGenericType *BoundGenericType,
+                                            SourceLoc OpeningAngleBracketLoc) {
+  DeclsWithRangesOrErrors Symbols;
+  auto Parameters = BoundGenericType->getGenericArgs();
+  for (auto Parameter : Parameters) {
+    NominalTypeDecl *ParameterDecl = nullptr;
+    if (OptionalType::classof(Parameter.getPointer())) {
+      ParameterDecl =
+      Parameter->getOptionalObjectType()->getAnyNominal();
+    } else {
+      ParameterDecl = Parameter->getAnyNominal();
+    }
+    if (ParameterDecl != nullptr) {
+      auto ParameterName = ParameterDecl->getBaseName().getIdentifier().str();
+      auto GenericArgRange =
+        rangeOfFirstOccurenceOfStringInSourceLoc(ParameterName,
+                                                 OpeningAngleBracketLoc);
+      if (auto Error = GenericArgRange.takeError()) {
+        Symbols.push_back(std::move(Error));
+      } else {
+        Symbols.push_back(DeclWithRange(ParameterDecl,
+                                        GenericArgRange.get()));
+      }
+    }
+    Symbols.push_back(stringError("Couldnt identify "
+                                  "the generic parameter"));
+  }
+  return Symbols;
+}
+
+DeclsWithRangesOrErrors
+ExpressionProcessor::parse(CallExpr* CallExpression) {
+  if (CallExpression->hasArgumentLabelLocs()) {
+    return parseCallExpressionWithArguments(CallExpression);
+  }
+  return wrapInVector<DeclWithRange>(stringError("Unsupported type of expression"));
+}
+
+// This function handles the specific case of `is` cast of non-optional
+// to optional type or vice versa. In contrast to other castings
+// (represented as is_subtype_expr), this kind of cast is represented
+// in AST as enum_is_case_expr node. When parsing this kind of cast
+// we don't get the callback in SymbolsWalkerAndCollector with NominalTypeDecl
+// representing the CastType (cast-to type) so we have to extract it
+// from the EnumIsCaseExpression.
+DeclsWithRangesOrErrors
+ExpressionProcessor::parse(EnumIsCaseExpr* EnumIsCaseExpression) {
+  ExplicitCastExpr *ExplicitCastExpression = nullptr;
+
+  // This callback invoked using forEachChildExpr() is used to extract the
+  // declaration of the CastType and the location of the `is` keyword.
+  const std::function<Expr*(Expr*)> &callback =
+  [&ExplicitCastExpression](Expr* Child) -> Expr* {
+
+    // We're looking for CoerceExpr (non-optional to optional type cast)
+    // or ConditionalCheckedCastExpr (optional to non-optional type cast)
+    // which both are subclasses of ExplicitCastExpr.
+    if (ExplicitCastExpr::classof(Child)) {
+      ExplicitCastExpression = dyn_cast<ExplicitCastExpr>(Child);
+    }
+
+    return Child;
+  };
+  EnumIsCaseExpression->forEachChildExpr(callback);
+
+  if (ExplicitCastExpression != nullptr) {
+    auto CastType = ExplicitCastExpression->getCastTypeLoc().getType();
+
+    // The data representing the location of the CastType in the expression
+    // seems to be impossible to retrieve from the EnumIsCastExpression
+    // and its subexpressions. We have to calculate the CastType location
+    // later using `is` keyword and CastType name.
+    auto IsKeywordSourceLoc = ExplicitCastExpression->getAsLoc();
+
+    Type UnwrappedCastType;
+    if (ConditionalCheckedCastExpr::classof(ExplicitCastExpression)) {
+      UnwrappedCastType = CastType;
+    } else if (CoerceExpr::classof(ExplicitCastExpression)) {
+      UnwrappedCastType = CastType->getOptionalObjectType();
+    } else {
+      return wrapInVector<DeclWithRange>(stringError("Unsupported type of explicit cast expression"));
+    }
+
+    NominalTypeDecl *CastTypeDeclaration = UnwrappedCastType->getAnyNominal();
+
+    if (CastTypeDeclaration != nullptr) {
+
+      auto CastTypeName =
+      CastTypeDeclaration->getBaseName().getIdentifier().str();
+      auto CastTypeRange =
+        rangeOfFirstOccurenceOfStringInSourceLoc(CastTypeName,
+                                                 IsKeywordSourceLoc);
+      if (auto Error = CastTypeRange.takeError()) {
+        return wrapInVector<DeclWithRange>(std::move(Error));
+      }
+
+      DeclsWithRangesOrErrors Symbols;
+      Symbols.push_back(DeclWithRange(CastTypeDeclaration,
+                                      CastTypeRange.get()));
+
+      if (auto *GenericBoundType =
+          dyn_cast<BoundGenericType>(UnwrappedCastType.getPointer())) {
+
+        auto GenericNameEndLoc = CastTypeRange.get().getEnd();
+        auto OpeningAngleBracketRange =
+          rangeOfFirstOccurenceOfStringInSourceLoc("<", GenericNameEndLoc);
+        if (auto Error = OpeningAngleBracketRange.takeError()) {
+          return wrapInVector<DeclWithRange>(std::move(Error));
+        }
+        auto OpeningAngleBracketLoc = OpeningAngleBracketRange.get().getStart();
+
+        auto GenericParamsSymbols =
+          parseGenericParameters(GenericBoundType, OpeningAngleBracketLoc);
+
+        for (auto Iterator = GenericParamsSymbols.begin();
+             Iterator != GenericParamsSymbols.end();
+             ++Iterator) {
+          Symbols.push_back(std::move(*Iterator));
+        }
+      }
+
+      return Symbols;
+    }
+  }
+
+  return wrapInVector<DeclWithRange>(stringError("Failed to extract the cast-to type symbol"
+                                  "from the EnumIsCase expression"));
+}
+
+DeclsWithRangesOrErrors ExpressionProcessor::declarationFrom(Expr *Expression) {
+
+  if (auto *CallExpression = dyn_cast<CallExpr>(Expression)) {
+    return parse(CallExpression);
+  } else if (auto *EnumIsCaseExpression = dyn_cast<EnumIsCaseExpr>(Expression)) {
+    // Expression of `is` casting non-optional to optional type or vice versa.
+    return parse(EnumIsCaseExpression);
+  }
+
+  return wrapInVector<DeclWithRange>(stringError("Unsupported type of expression"));
+}
+
+DeclsWithRangesOrErrors ExpressionProcessor::declarationFrom(Decl *Declaration) {
+  return DeclsWithRangesOrErrors();
+}
+
+DeclsWithRangesOrErrors WhereClauseProcessor::declarationFrom(Expr *Expression) {
+  return DeclsWithRangesOrErrors();
+}
+
+WhereClauseProcessor::
+  WhereClauseProcessor(TypeRepresentationExtractor &Extractor)
+: Extractor(Extractor) {}
+
+DeclsWithRangesOrErrors
+WhereClauseProcessor::handleWhereClause(TrailingWhereClause *WhereClause) {
+
+  DeclsWithRangesOrErrors Results;
+
+  if (WhereClause == nullptr) { return Results; }
+
+  auto Requirements = WhereClause->getRequirements();
+  for (auto WhereRequirement : Requirements) {
+
+    if (WhereRequirement.isInvalid()) { continue; }
+
+    TypeRepr *FirstTypeRepresentation = nullptr;
+    TypeRepr *SecondTypeRepresentation = nullptr;
+
+    switch (WhereRequirement.getKind()) {
+        // This represents the constraint to type,
+        // like "Self: UIView" or "Element: Hashable"
+      case RequirementReprKind::TypeConstraint: {
+        // In case of type constraints, the left side of ":" colon sign is
+        // represented as Subject, and the right side as Constraint
+        FirstTypeRepresentation = WhereRequirement.getSubjectRepr();
+        SecondTypeRepresentation = WhereRequirement.getConstraintRepr();
+        break;
+      }
+        // This represents the type equality requirements, such as
+        // "Self == UIView" or "Element == String"
+      case RequirementReprKind::SameType: {
+        // In case of type equality requirement the type on the left side
+        // of "==" sign is represented as FirstType and the type
+        // on the right side is represented as SecondType
+        FirstTypeRepresentation = WhereRequirement.getFirstTypeRepr();
+        SecondTypeRepresentation = WhereRequirement.getSecondTypeRepr();
+        break;
+      }
+        // This represents the constraint on the type itself.
+        // The only user-facing case that we know of is "Protocol: class",
+        // but it might represent other situations internal to compiler
+        // or private to stdlib
+      case RequirementReprKind::LayoutConstraint: {
+        // The left side of the layout constraint is represented as Subject.
+        // The right side of Layout constaint is Layout,
+        // which we think there is no need to rename
+        FirstTypeRepresentation = WhereRequirement.getSubjectRepr();
+        SecondTypeRepresentation = nullptr;
+        break;
+      }
+    }
+
+    if (FirstTypeRepresentation != nullptr
+        && !FirstTypeRepresentation->isInvalid()) {
+      for (auto &Declaration :
+           Extractor.declarationsFromTypeRepresentation(FirstTypeRepresentation)) {
+        Results.push_back(Declaration);
+      }
+    }
+    if (SecondTypeRepresentation != nullptr
+        && !SecondTypeRepresentation->isInvalid()) {
+      for (auto &Declaration :
+           Extractor.declarationsFromTypeRepresentation(SecondTypeRepresentation)) {
+        Results.push_back(Declaration);
+      }
+    }
+  }
+  return Results;
+}
+
+DeclsWithRangesOrErrors WhereClauseProcessor::declarationFrom(Decl *Declaration) {
+  if (Declaration != nullptr) {
+
+    // We need to cast to the right type because there's no one base type
+    // defining the `getTrailingWhereClause` function in all the supported
+    // cases.
+    if (auto *Extension = dyn_cast<ExtensionDecl>(Declaration)) {
+      return handleWhereClause(Extension->getTrailingWhereClause());
+
+    } else if (auto *GenericType = dyn_cast<GenericTypeDecl>(Declaration)) {
+      return handleWhereClause(GenericType->getTrailingWhereClause());
+
+    } else if (auto *Subscript = dyn_cast<SubscriptDecl>(Declaration)) {
+      return handleWhereClause(Subscript->getTrailingWhereClause());
+
+    } else if (auto *AbstractFunc = dyn_cast<AbstractFunctionDecl>(Declaration)) {
+      return handleWhereClause(AbstractFunc->getTrailingWhereClause());
+
+    } else if (auto *Associated = dyn_cast<AssociatedTypeDecl>(Declaration)) {
+      return handleWhereClause(Associated->getTrailingWhereClause());
+    }
+  }
+  return DeclsWithRangesOrErrors();
+}
+
+} //namespace obfuscation
+} //namespace swift
diff --git a/swift/lib/Obfuscation/Renaming.cpp b/swift/lib/Obfuscation/Renaming.cpp
index 456a4cc73d2..2adee3beea5 100644
--- a/swift/lib/Obfuscation/Renaming.cpp
+++ b/swift/lib/Obfuscation/Renaming.cpp
@@ -1,10 +1,8 @@
 #include "swift/Obfuscation/Renaming.h"
 #include "swift/Obfuscation/CompilerInfrastructure.h"
-#include "swift/Obfuscation/ConfigurationExcluder.h"
-#include "swift/Obfuscation/SourceFileWalker.h"
+#include "swift/Obfuscation/SymbolsWalkerAndCollector.h"
 #include "swift/Obfuscation/Utils.h"
 #include "swift/Obfuscation/LayoutRenamer.h"
-#include "swift/Obfuscation/ExtensionExcluder.h"
 
 #include "llvm/ADT/STLExtras.h"
 #include "llvm/Support/FileSystem.h"
@@ -119,17 +117,18 @@ static bool shouldRename(const struct SymbolRenaming &SymbolRenaming,
       && Symbol.Module == ModuleName;
 }
   
-llvm::Expected<bool> performActualRenaming(SourceFile &Current,
-                                           const std::string &ModuleName,
-                                           const RenamesJson &RenamesJson,
-                                           SourceManager &SourceManager,
-                                           unsigned int BufferId,
-                                           StringRef Path,
-                                           std::vector<SymbolRenaming>
-                                                          &RenamedSymbols,
-                                           std::set<Excluder*> &Excluders) {
-  bool performedRenaming = false;
-  auto IndexedSymbolsWithRanges = walkAndCollectSymbols(Current, Excluders);
+llvm::Expected<bool>
+performActualRenaming(SourceFile &Current,
+                      const std::string &ModuleName,
+                      const RenamesJson &RenamesJson,
+                      SourceManager &SourceManager,
+                      unsigned int BufferId,
+                      StringRef Path,
+                      std::vector<SymbolRenaming> &RenamedSymbols,
+                      SymbolsWalkerAndCollector &Collector) {
+
+  bool PerformedRenaming = false;
+  auto IndexedSymbolsWithRanges = Collector.walkAndCollectSymbols(Current);
   
   using EditConsumer = swift::ide::SourceEditOutputConsumer;
   
@@ -139,9 +138,8 @@ llvm::Expected<bool> performActualRenaming(SourceFile &Current,
   //TODO: would be way better to have a map instead of iterating through symbols
   for (const auto &IndexedSymbolWithRange : IndexedSymbolsWithRanges) {
     for (const auto &Symbol : RenamesJson.Symbols) {
-      auto SymbolWithRange = IndexedSymbolWithRange.SymbolWithRange;
 
-      if (shouldRename(Symbol, SymbolWithRange.Symbol, ModuleName)) {
+      if (shouldRename(Symbol, IndexedSymbolWithRange.Symbol, ModuleName)) {
         if (Editor == nullptr) {
           std::error_code Error;
           DescriptorStream =
@@ -157,15 +155,15 @@ llvm::Expected<bool> performActualRenaming(SourceFile &Current,
         }
         auto ObfuscatedName = StringRef(Symbol.ObfuscatedName);
         Editor->ide::SourceEditConsumer::accept(SourceManager,
-                                                SymbolWithRange.Range,
+                                                IndexedSymbolWithRange.Range,
                                                 ObfuscatedName);
         RenamedSymbols.push_back(Symbol);
-        performedRenaming = true;
+        PerformedRenaming = true;
         break;
       }
     }
   }
-  return performedRenaming;
+  return PerformedRenaming;
 }
   
 llvm::Expected<FilesList>
@@ -177,13 +175,14 @@ performRenaming(std::string MainExecutablePath,
                 bool ObfuscateInPlace,
                 llvm::raw_ostream &DiagnosticStream) {
   
-  CompilerInstance CI;
-  if (auto Error = setupCompilerInstance(CI,
-                                         FilesJson,
-                                         MainExecutablePath,
-                                         DiagnosticStream)) {
+  auto CompilerInstanceOrError = createCompilerInstance(FilesJson,
+                                                        MainExecutablePath,
+                                                        DiagnosticStream);
+  if (auto Error = CompilerInstanceOrError.takeError()) {
     return std::move(Error);
   }
+
+  auto CompilerInstance = std::move(CompilerInstanceOrError.get());
   
   if(!ObfuscateInPlace) {
     if (auto Error = copyProject(FilesJson.Project.RootPath,
@@ -194,14 +193,9 @@ performRenaming(std::string MainExecutablePath,
   
   FilesList Files;
   std::vector<SymbolRenaming> RenamedSymbols;
-
-  ExtensionExcluder ExtensionExcluder;
-  NSManagedExcluder NSManagedExcluder;
-  ConfigurationExcluder ConfigurationExcluder(std::move(ObfuscationConfiguration));
-  
-  std::set<Excluder*> Excluders = { &ExtensionExcluder, &NSManagedExcluder, &ConfigurationExcluder };
+  SymbolsWalkerAndCollectorFactory Factory(std::move(ObfuscationConfiguration));
   
-  for (auto* Unit : CI.getMainModule()->getFiles()) {
+  for (auto* Unit : CompilerInstance->getMainModule()->getFiles()) {
     if (auto* Current = dyn_cast<SourceFile>(Unit)) {
 
       auto PathOrError = computeObfuscatedPath(Current->getFilename(),
@@ -214,6 +208,7 @@ performRenaming(std::string MainExecutablePath,
       auto Path = PathOrError.get().str();
       auto &SourceManager = Current->getASTContext().SourceMgr;
       auto BufferId = Current->getBufferID().getValue();
+      auto Collector = Factory.symbolsWalkerAndCollector();
       
       if (performActualRenaming(*Current,
                                 FilesJson.Module.Name,
@@ -222,7 +217,7 @@ performRenaming(std::string MainExecutablePath,
                                 BufferId,
                                 Path,
                                 RenamedSymbols,
-                                Excluders)) {
+                                Collector)) {
         auto Filename = llvm::sys::path::filename(Path).str();
         Files.push_back(std::pair<std::string, std::string>(Filename, Path));
       }
diff --git a/swift/lib/Obfuscation/SourceFileWalker.cpp b/swift/lib/Obfuscation/SourceFileWalker.cpp
deleted file mode 100644
index ae5f84d4803..00000000000
--- a/swift/lib/Obfuscation/SourceFileWalker.cpp
+++ /dev/null
@@ -1,129 +0,0 @@
-#include "swift/Obfuscation/SourceFileWalker.h"
-#include "swift/Obfuscation/DeclarationParser.h"
-#include "swift/Obfuscation/DeclarationParsingUtils.h"
-#include "swift/Obfuscation/ExpressionParser.h"
-#include "swift/Obfuscation/ExtensionExcluder.h"
-#include "swift/Obfuscation/ParameterDeclarationParser.h"
-#include "swift/Obfuscation/Utils-Template.h"
-#include "swift/Obfuscation/Utils.h"
-#include "swift/Obfuscation/WhereClauseParser.h"
-
-#include <string>
-
-namespace swift {
-namespace obfuscation {
-
-struct SymbolsWalkerAndCollector: public SourceEntityWalker {
-
-  static int SymbolIndex;
-
-  // This is a vector that stores all of the collected IndexedSymbolWithRange
-  // thet are compared by symbol and range
-  GlobalCollectedSymbols Symbols;
-
-  std::set<Excluder*> &Excluders;
-  
-  SymbolsWalkerAndCollector(std::set<Excluder*> &Excluders)
-                                                      : Excluders(Excluders) {}
-
-// Overriden methods called back as the AST is walked
-
-  bool walkToExprPre(Expr *Expression) override {
-    auto Symbols = extractSymbol(Expression);
-    handleExtractionResult(Symbols);
-    return true;
-  }
-  
-  bool walkToDeclPre(Decl *Declaration, CharSourceRange Range) override {
-    auto ExtractedSymbols = extractSymbol(Symbols, Declaration, Range);
-    handleExtractionResult(ExtractedSymbols);
-    identifyExclusions(Declaration);
-    return true;
-  }
-
-  void handleWhereClausesIfNeeded(const std::vector<Decl*> &&Declarations) {
-    WhereClauseParser WhereClauseParser;
-    for (auto *Declaration : Declarations) {
-      WhereClauseParser.collectSymbolsFromDeclaration(Symbols, Declaration);
-    }
-    handleSymbols(WhereClauseParser.harvestSymbols());
-  }
-
-  // We need to extract symbols here even though we might have already seen
-  // this node in the walkToDeclPre because here we have additional
-  // contextual information like CtorTyRef
-  bool visitDeclReference(ValueDecl *Declaration,
-                          CharSourceRange Range,
-                          TypeDecl *CtorTyRef,
-                          ExtensionDecl *ExtTyRef,
-                          Type T,
-                          ReferenceMetaData Data) override {
-
-    handleWhereClausesIfNeeded({ Declaration, CtorTyRef, ExtTyRef });
-
-    auto ExtractedSymbols = extractSymbol(Symbols,
-                                          CtorTyRef ? CtorTyRef : Declaration,
-                                          Range);
-    handleExtractionResult(ExtractedSymbols);
-
-    identifyExclusions(ExtTyRef);
-    identifyExclusions(Declaration);
-    identifyExclusions(CtorTyRef);
-    
-    return true;
-  }
-
-// Methods for handling the extracted symbols
-
-  void identifyExclusions(Decl* Declaration) {
-    if(Declaration != nullptr) {
-      for(auto Excluder: Excluders) {
-        Excluder->identifyExclusions(Declaration);
-      }
-    }
-  }
-  
-  void handleSymbol(const SymbolWithRange &Symbol) {
-    auto InsertionResult =
-      Symbols.insert(IndexedSymbolWithRange(SymbolIndex, Symbol));
-    if (InsertionResult.second == true) {
-      ++SymbolsWalkerAndCollector::SymbolIndex;
-    }
-  }
-
-  void handleSymbols(std::vector<SymbolWithRange> &Symbols) {
-    for (const auto &Symbol : Symbols) {
-      handleSymbol(Symbol);
-    }
-  }
-
-  void handleSymbols(std::set<SymbolWithRange> &&Symbols) {
-    for (const auto &Symbol : Symbols) {
-      handleSymbol(Symbol);
-    }
-  }
-
-  void handleExtractionResult(SymbolsOrError &Symbols) {
-    if (auto Error = Symbols.takeError()) {
-      llvm::consumeError(std::move(Error));
-    } else {
-      handleSymbols(Symbols.get());
-    }
-  }
-
-};
-
-int SymbolsWalkerAndCollector::SymbolIndex;
-
-std::set<IndexedSymbolWithRange, IndexedSymbolWithRange::SymbolWithRangeCompare>
-walkAndCollectSymbols(SourceFile &SourceFile, std::set<Excluder*> &Excluders) {
-  SymbolsWalkerAndCollector Walker(Excluders);
-  Walker.walk(SourceFile);
-  for(auto Excluder: Excluders) {
-    Excluder->excludeSymbolsFrom(Walker.Symbols);
-  }
-  return Walker.Symbols;
-}
-
-} //namespace obfuscation
-} //namespace swift
diff --git a/swift/lib/Obfuscation/SymbolExtracting.cpp b/swift/lib/Obfuscation/SymbolExtracting.cpp
index 2061aae1e45..11f08a03e69 100644
--- a/swift/lib/Obfuscation/SymbolExtracting.cpp
+++ b/swift/lib/Obfuscation/SymbolExtracting.cpp
@@ -1,7 +1,12 @@
 #include "swift/Obfuscation/SymbolExtracting.h"
+#include "swift/Obfuscation/Collector.h"
+#include "swift/Obfuscation/Includer.h"
+#include "swift/Obfuscation/SymbolGenerator.h"
+#include "swift/Obfuscation/Extractor.h"
 #include "swift/Obfuscation/DataStructures.h"
 #include "swift/Obfuscation/CompilerInfrastructure.h"
-#include "swift/Obfuscation/SourceFileWalker.h"
+#include "swift/Obfuscation/SymbolsWalkerAndCollector.h"
+#include "swift/Obfuscation/GlobalCollectedSymbolsUpdater.h"
 #include "swift/Obfuscation/Utils.h"
 
 #include <vector>
@@ -15,10 +20,10 @@ using FileWithName = std::pair<std::string, SourceFile *>;
 // Creates a vector of parsed source files that is sorted alphabetically
 // by the file name
 std::vector<FileWithName>
-getSortedSourceFiles(swift::CompilerInstance &CompilerInstance) {
+getSortedSourceFiles(std::unique_ptr<CompilerInstance> &CompilerInstance) {
 
   std::vector<FileWithName> Files;
-  for (auto* Unit : CompilerInstance.getMainModule()->getFiles()) {
+  for (auto* Unit : CompilerInstance->getMainModule()->getFiles()) {
     if (auto* Current = dyn_cast<SourceFile>(Unit)) {
       Files.push_back(std::make_pair(Current->getFilename().str(), Current));
     }
@@ -38,40 +43,37 @@ extractSymbols(const FilesJson &FilesJson,
                std::string MainExecutablePath,
                llvm::raw_ostream &DiagnosticStream) {
   
-  CompilerInstance CompilerInstance;
-  auto Error = setupCompilerInstance(CompilerInstance,
-                                     FilesJson,
-                                     MainExecutablePath,
-                                     DiagnosticStream);
-  if (Error) {
+  auto CompilerInstanceOrError = createCompilerInstance(FilesJson,
+                                                        MainExecutablePath,
+                                                        DiagnosticStream);
+  if (auto Error = CompilerInstanceOrError.takeError()) {
     return std::move(Error);
   }
 
+  auto CompilerInstance = std::move(CompilerInstanceOrError.get());
   auto Files = getSortedSourceFiles(CompilerInstance);
 
   // This set is designed to treat all the occurences of symbol
   // (different ranges) as one symbol
-  std::set<IndexedSymbolWithRange,
-           IndexedSymbolWithRange::SymbolCompare> Symbols;
+  std::set<IndexedDeclWithSymbolWithRange,
+           IndexedDeclWithSymbolWithRange::SymbolCompare> Symbols;
 
-  
-  ExtensionExcluder ExtensionExcluder;
-  NSManagedExcluder NSManagedExcluder;
-  
-  std::set<Excluder*> Excluders = { &ExtensionExcluder, &NSManagedExcluder };
+  SymbolsWalkerAndCollectorFactory Factory;
 
   for (auto &Unit : Files) {
     // CurrentSymbols are sorted by the identifier and range
-    auto CurrentSymbols = walkAndCollectSymbols(*Unit.second, Excluders);
 
-    std::vector<IndexedSymbolWithRange> SortedSymbols;
+    auto Collector = Factory.symbolsWalkerAndCollector();
+    auto CurrentSymbols = Collector.walkAndCollectSymbols(*Unit.second);
+
+    std::vector<IndexedDeclWithSymbolWithRange> SortedSymbols;
     copyToVector(CurrentSymbols, SortedSymbols);
 
     // Sorting symbols by index
     std::sort(SortedSymbols.begin(),
               SortedSymbols.end(),
-              [](const IndexedSymbolWithRange &Left,
-                 const IndexedSymbolWithRange &Right) {
+              [](const IndexedDeclWithSymbolWithRange &Left,
+                 const IndexedDeclWithSymbolWithRange &Right) {
                 return Left.Index < Right.Index;
               });
 
@@ -81,15 +83,15 @@ extractSymbols(const FilesJson &FilesJson,
     copyToSet(SortedSymbols, Symbols);
   }
 
-  std::vector<IndexedSymbolWithRange> Result;
+  std::vector<IndexedDeclWithSymbolWithRange> Result;
   copyToVector(Symbols, Result);
 
   // This ensures that the alphabetical order of walking the source files
   // is preserved
   std::sort(Result.begin(),
             Result.end(),
-            [](const IndexedSymbolWithRange &Left,
-               const IndexedSymbolWithRange &Right) {
+            [](const IndexedDeclWithSymbolWithRange &Left,
+               const IndexedDeclWithSymbolWithRange &Right) {
               return Left.Index < Right.Index;
             });
 
@@ -100,8 +102,8 @@ extractSymbols(const FilesJson &FilesJson,
   std::transform(Result.cbegin(),
                  Result.cend(),
                  std::back_inserter(ResultingJson.Symbols),
-                 [](const IndexedSymbolWithRange &Symbol) -> struct Symbol {
-                   return Symbol.SymbolWithRange.Symbol;
+                 [](const IndexedDeclWithSymbolWithRange &Symbol) -> struct Symbol {
+                   return Symbol.Symbol;
                  });
 
   return ResultingJson;
diff --git a/swift/lib/Obfuscation/SymbolGenerator.cpp b/swift/lib/Obfuscation/SymbolGenerator.cpp
new file mode 100644
index 00000000000..f64e0b1f5e8
--- /dev/null
+++ b/swift/lib/Obfuscation/SymbolGenerator.cpp
@@ -0,0 +1,387 @@
+#include "swift/Obfuscation/SymbolGenerator.h"
+#include "swift/Obfuscation/Utils.h"
+
+#include <sstream>
+
+namespace swift {
+namespace obfuscation {
+
+SymbolGenerator::~SymbolGenerator() = default;
+
+NominalTypeSymbolGenerator::
+  NominalTypeSymbolGenerator(NominalTypeExtractor &Extractor)
+: Extractor(Extractor) {}
+
+std::vector<llvm::Expected<DeclWithSymbolWithRange>>
+NominalTypeSymbolGenerator::generateFor(DeclWithRange &DeclAndRange) {
+
+  if (auto *Declaration = dyn_cast<NominalTypeDecl>(DeclAndRange.Declaration)) {
+
+    auto ModuleNameAndParts = Extractor.moduleNameAndIdentifierParts(Declaration);
+
+    std::string ModuleName = ModuleNameAndParts.first;
+    std::vector<std::string> IdentifierParts = ModuleNameAndParts.second;
+    std::string SymbolName = Extractor.symbolName(Declaration);
+
+    auto NominalTypeParts =
+      Extractor.nominalTypeIdentifierParts(Declaration, Extractor.typeName(Declaration));
+    if (auto Error = NominalTypeParts.takeError()) {
+      return wrapInVector<DeclWithSymbolWithRange>(std::move(Error));
+    }
+    copyToVector(NominalTypeParts.get(), IdentifierParts);
+
+    Symbol Symbol(combineIdentifier(IdentifierParts),
+                  SymbolName,
+                  ModuleName,
+                  SymbolType::Type);
+
+    return wrapInVector(DeclWithSymbolWithRange(DeclAndRange, Symbol));
+  }
+
+  auto Error = stringError("NominalTypeSymbolGenerator cannot generate symbol "
+                           "for non-NominalTypeDecl Declaration");
+  return wrapInVector<DeclWithSymbolWithRange>(std::move(Error));
+}
+
+FunctionNameSymbolGenerator::FunctionNameSymbolGenerator(FunctionExtractor &Extractor)
+: Extractor(Extractor) {}
+
+SymbolWithRange
+FunctionNameSymbolGenerator::getFunctionSymbol(const swift::FuncDecl *Declaration,
+                                           const swift::CharSourceRange &Range) {
+  auto ModuleAndParts = Extractor.functionIdentifierParts(Declaration);
+  auto ModuleName = ModuleAndParts.first;
+  auto Parts = ModuleAndParts.second;
+  Symbol Symbol(combineIdentifier(Parts),
+                Extractor.declarationName(Declaration),
+                ModuleName,
+                SymbolType::NamedFunction);
+  return SymbolWithRange(Symbol, Range);
+}
+
+llvm::Expected<SymbolWithRange>
+FunctionNameSymbolGenerator::parseOverridenDeclaration(const FuncDecl *Declaration,
+                                                   const std::string &ModuleName,
+                                                   const CharSourceRange &Range) {
+
+  auto BaseWithModules =
+    Extractor.getBaseOverridenDeclarationWithModules(Declaration);
+  auto Base = BaseWithModules.first;
+  auto Modules = BaseWithModules.second;
+
+  // Emits symbol only if the base overriden function and
+  // all the functions overriding it in the inheritance hierarchy are from
+  // the same module and it's the module we've passed as ModuleName parameter.
+  // Emitted symbol represents the base function so that all the functions that
+  // override it are renamed to the same obfuscated name
+  if (Extractor.isOverriddenMethodFromTheSameModule(Modules, ModuleName)) {
+    return getFunctionSymbol(Base, Range);
+  } else {
+    // TODO: move it to includer, it should be checked there
+    return stringError("only method overriding methods from the same module "
+                       "might be safely obfuscated");
+  }
+}
+
+DeclsWithSymbolsWithRangesOrErrors
+FunctionNameSymbolGenerator::generateFor(DeclWithRange &DeclAndRange) {
+
+  if (auto *Declaration = dyn_cast<FuncDecl>(DeclAndRange.Declaration)) {
+
+    // function name should be renamed only if it's not a setter
+    if(!Declaration->isSetter()) {
+
+      // Create the symbol for function
+      if (Declaration->getOverriddenDecl() != nullptr) {
+        // Overriden declaration must be treated separately because we mustn't
+        // rename function that overrides function from different module
+        auto SymbolOrError =
+          parseOverridenDeclaration(Declaration,
+                                    Extractor.moduleName(Declaration),
+                                    DeclAndRange.Range);
+        if (auto Error = SymbolOrError.takeError()) {
+          return wrapInVector<DeclWithSymbolWithRange>(std::move(Error));
+        }
+        auto FunctionNameSymbol = SymbolOrError.get();
+        return wrapInVector(DeclWithSymbolWithRange(Declaration,
+                                                    FunctionNameSymbol));
+      } else {
+        auto Symbol = getFunctionSymbol(Declaration, DeclAndRange.Range);
+        return wrapInVector(DeclWithSymbolWithRange(Declaration, Symbol));
+      }
+    }
+  }
+
+  auto Error = stringError("FunctionNameSymbolGenerator cannot generate symbol "
+                           "for non-FuncDecl Declaration");
+  return wrapInVector<DeclWithSymbolWithRange>(std::move(Error));
+}
+
+OperatorSymbolGenerator::OperatorSymbolGenerator(OperatorExtractor &Extractor)
+: Extractor(Extractor) {}
+
+DeclsWithSymbolsWithRangesOrErrors
+OperatorSymbolGenerator::generateFor(DeclWithRange &DeclAndRange) {
+
+  if (auto *Declaration = dyn_cast<OperatorDecl>(DeclAndRange.Declaration)) {
+
+    auto ModuleNameAndParts = Extractor.moduleNameAndIdentifierParts(Declaration);
+    std::string ModuleName = ModuleNameAndParts.first;
+    std::vector<std::string> IdentifierParts = ModuleNameAndParts.second;
+    std::string SymbolName = Extractor.operatorName(Declaration);
+    IdentifierParts.push_back("operator." + SymbolName);
+
+    Symbol Symbol(combineIdentifier(IdentifierParts),
+                  SymbolName,
+                  ModuleName,
+                  SymbolType::Operator);
+    return wrapInVector(DeclWithSymbolWithRange(DeclAndRange, Symbol));
+
+  } else if (auto *Declaration = dyn_cast<FuncDecl>(DeclAndRange.Declaration)) {
+
+    std::vector<SymbolWithRange> Symbols;
+    
+    auto ModuleAndParts = Extractor.moduleNameAndIdentifierParts(Declaration);
+    auto ModuleName = ModuleAndParts.first;
+    auto Parts = ModuleAndParts.second;
+
+    auto SymbolName = Extractor.declarationName(Declaration);
+    Parts.push_back("operator." + SymbolName);
+
+    Symbol Symbol(combineIdentifier(Parts),
+                  SymbolName,
+                  ModuleName,
+                  SymbolType::Operator);
+    return wrapInVector(DeclWithSymbolWithRange(DeclAndRange, Symbol));
+  }
+  auto Error = stringError("OperatorSymbolGenerator cannot generate symbol "
+                           "for non-OperatorDecl Declaration");
+  return wrapInVector<DeclWithSymbolWithRange>(std::move(Error));
+}
+
+FunctionParameterSymbolGenerator::
+  FunctionParameterSymbolGenerator(FunctionExtractor &FuncExtractor,
+                             ParameterExtractor &ParamExtractor)
+: FuncExtractor(FuncExtractor), ParamExtractor(ParamExtractor) {}
+
+llvm::Expected<std::string>
+FunctionParameterSymbolGenerator::
+  getIdentifierWithParameterPosition(const ParamDecl *Declaration,
+                                     const AbstractFunctionDecl *FunctionDeclaration) {
+
+  auto ParameterLists = FunctionDeclaration->getParameterLists();
+
+  // We use index, not iterator, because we want to use the index
+  // to build identifier
+  for (unsigned ListIndex = 0; ListIndex < ParameterLists.size(); ++ListIndex) {
+
+    auto *ParameterList = ParameterLists[ListIndex];
+
+    // We use index, not iterator, because we want to use the index
+    // to build identifier
+    for (unsigned ParameterIndex = 0;
+         ParameterIndex < ParameterList->size();
+         ++ParameterIndex) {
+
+      auto *ParamDeclaration = ParameterList->get(ParameterIndex);
+
+      //this comparison may be wrong but I couldn't come up
+      //with a sample code that breaks it
+      if (Declaration->getName() == ParamDeclaration->getName()) {
+        return "list" + std::to_string(ListIndex) +
+        "_parameter" + std::to_string(ParameterIndex);
+      }
+    }
+  }
+
+  return stringError("Couldn't find parameter position");
+}
+
+DeclsWithSymbolsWithRangesOrErrors
+FunctionParameterSymbolGenerator::generateFor(DeclWithRange &DeclAndRange) {
+
+  if (auto *Declaration = dyn_cast_or_null<ParamDecl>(DeclAndRange.Declaration)) {
+
+    if (const auto *FunctionDeclaration =
+        dyn_cast<AbstractFunctionDecl>(Declaration->getDeclContext())) {
+
+      auto BaseWithModules =
+        ParamExtractor.getBaseOverridenDeclarationWithModules(FunctionDeclaration);
+      auto BaseFunctionDeclaration = BaseWithModules.first;
+      auto Modules = BaseWithModules.second;
+
+      auto ModuleName = ParamExtractor.moduleName(Declaration);
+      auto ExternalName = ParamExtractor.externalParameterName(Declaration);
+      auto InternalName = ParamExtractor.internalParameterName(Declaration);
+
+      std::string BaseFunctionName =
+        ParamExtractor.declarationName(BaseFunctionDeclaration);
+      auto BaseModuleAndParts =
+        FuncExtractor.functionIdentifierParts(BaseFunctionDeclaration);
+      std::string BaseFunctionModuleName = BaseModuleAndParts.first;
+      std::vector<std::string> BaseParts = BaseModuleAndParts.second;
+
+      auto BasePositionOrError =
+        getIdentifierWithParameterPosition(Declaration, BaseFunctionDeclaration);
+      if (auto Error = BasePositionOrError.takeError()) {
+        return wrapInVector<DeclWithSymbolWithRange>(std::move(Error));
+      } else {
+        BaseParts.push_back("parameter.position." + BasePositionOrError.get());
+      }
+
+      // We check if parameter has a place that it's declared that we can reach
+      if (Declaration->getNameLoc().isValid()) {
+
+        auto IsSingle = Declaration->getArgumentNameLoc().isInvalid();
+
+        auto isFromTheSameModule =
+          ParamExtractor.isOverriddenMethodFromTheSameModule(Modules,
+                                                             ModuleName);
+
+        DeclsWithSymbolsWithRangesOrErrors Symbols;
+
+        CharSourceRange ComputedRange(Declaration->getNameLoc(),
+                                      InternalName.length());
+
+        if (IsSingle) {
+
+          if (isFromTheSameModule) {
+            BaseParts.push_back("single." + InternalName);
+            CharSourceRange Range(Declaration->getNameLoc(),
+                                  InternalName.length());
+
+            Symbol Symbol(combineIdentifier(BaseParts),
+                          InternalName,
+                          BaseFunctionModuleName,
+                          SymbolType::SingleParameter);
+
+            if (ComputedRange.overlaps(DeclAndRange.Range)) {
+              Symbols.push_back(DeclWithSymbolWithRange(Declaration, Symbol, Range));
+            } else {
+              Symbols.push_back(DeclWithSymbolWithRange(DeclAndRange, Symbol));
+            }
+          }
+
+        } else {
+
+          auto IsExternal = !ExternalName.empty();
+
+          if (IsExternal
+              && isFromTheSameModule
+              && Declaration->getArgumentNameLoc().isValid()) {
+
+            auto ExternalParts = BaseParts;
+
+            BaseParts.push_back("external." + ExternalName);
+            CharSourceRange ExternalRange(Declaration->getArgumentNameLoc(),
+                                          ExternalName.length());
+            Symbol ExternalSymbol(combineIdentifier(BaseParts),
+                                  ExternalName,
+                                  BaseFunctionModuleName,
+                                  SymbolType::ExternalParameter);
+
+            if (ComputedRange.overlaps(DeclAndRange.Range)) {
+              Symbols.push_back(DeclWithSymbolWithRange(Declaration,
+                                                        ExternalSymbol,
+                                                        ExternalRange));
+            } else if (DeclAndRange.Context ==
+                         DeclarationProcessingContext::FunctionCallAttribute) {
+              Symbols.push_back(DeclWithSymbolWithRange(Declaration,
+                                                        ExternalSymbol,
+                                                        DeclAndRange.Range));
+            }
+          }
+
+          if (DeclAndRange.Context !=
+                DeclarationProcessingContext::FunctionCallAttribute) {
+
+            //  TODO: improve handling internal parameters in following case:
+            //  internal parameter in protocol method implementation,
+            //  where declaration and implementation are in different modules -
+            //  Symbol object will have different module name in Identifier
+            //  and in Module field.
+
+            std::string OriginalFunctionName =
+              ParamExtractor.declarationName(FunctionDeclaration);
+            std::string OriginalFunctionModuleName =
+              ParamExtractor.moduleName(FunctionDeclaration);
+            std::vector<std::string> OriginalParts =
+              FuncExtractor.functionIdentifierParts(FunctionDeclaration).second;
+
+            auto OriginalPositionOrError =
+              getIdentifierWithParameterPosition(Declaration, FunctionDeclaration);
+            if (auto Error = OriginalPositionOrError.takeError()) {
+              Symbols.push_back(std::move(Error));
+              return Symbols;
+            } else {
+              auto OriginalPosition = OriginalPositionOrError.get();
+              OriginalParts.push_back("parameter.position." + OriginalPosition);
+            }
+
+            OriginalParts.push_back("internal." + InternalName);
+            CharSourceRange InternalRange(Declaration->getNameLoc(),
+                                          InternalName.length());
+            Symbol InternalSymbol(combineIdentifier(OriginalParts),
+                                  InternalName,
+                                  OriginalFunctionModuleName,
+                                  SymbolType::InternalParameter);
+
+            if (ComputedRange.overlaps(DeclAndRange.Range)) {
+              Symbols.push_back(DeclWithSymbolWithRange(Declaration,
+                                                        InternalSymbol,
+                                                        InternalRange));
+            } else {
+              Symbols.push_back(DeclWithSymbolWithRange(DeclAndRange,
+                                                        InternalSymbol));
+            }
+          }
+        }
+        return Symbols;
+      }
+    }
+
+    return wrapInVector<DeclWithSymbolWithRange>(stringError("Couldn't identify what function parameter belong to"));
+  }
+
+  auto Error = stringError("FunctionParameterSymbolGenerator cannot generate symbol "
+                           "for non-ParamDecl Declaration");
+  return wrapInVector<DeclWithSymbolWithRange>(std::move(Error));
+}
+
+VariableSymbolGenerator::VariableSymbolGenerator(VariableExtractor &Extractor)
+: Extractor(Extractor) {}
+
+DeclsWithSymbolsWithRangesOrErrors
+VariableSymbolGenerator::generateFor(DeclWithRange &DeclAndRange) {
+
+  if (auto *Declaration = dyn_cast<VarDecl>(DeclAndRange.Declaration)) {
+
+    auto ModuleAndPartsOrError =
+      Extractor.variableIdentifierPartsFromContext(Declaration);
+    if (auto Error = ModuleAndPartsOrError.takeError()) {
+      return wrapInVector<DeclWithSymbolWithRange>(std::move(Error));
+    }
+    auto ModuleAndParts = ModuleAndPartsOrError.get();
+
+    if (Declaration->isStatic()) {
+      ModuleAndParts.second.push_back("static");
+    }
+
+    std::string SymbolName = Extractor.declarationName(Declaration);
+    ModuleAndParts.second.push_back("variable." + SymbolName);
+
+    Symbol Symbol(combineIdentifier(ModuleAndParts.second),
+                  SymbolName,
+                  ModuleAndParts.first,
+                  SymbolType::Variable);
+    return wrapInVector(DeclWithSymbolWithRange(DeclAndRange, Symbol));
+  }
+
+  auto Error = stringError("VariableSymbolGenerator cannot generate symbol "
+                           "for non-VarDecl Declaration");
+  return wrapInVector<DeclWithSymbolWithRange>(std::move(Error));
+
+}
+
+} //namespace obfuscation
+} //namespace swift
diff --git a/swift/lib/Obfuscation/SymbolsWalkerAndCollector.cpp b/swift/lib/Obfuscation/SymbolsWalkerAndCollector.cpp
new file mode 100644
index 00000000000..db4decd7d3f
--- /dev/null
+++ b/swift/lib/Obfuscation/SymbolsWalkerAndCollector.cpp
@@ -0,0 +1,274 @@
+#include "swift/Obfuscation/SymbolsWalkerAndCollector.h"
+#include "swift/Obfuscation/Utils-Template.h"
+#include "swift/Obfuscation/Utils.h"
+
+#include <string>
+
+namespace swift {
+namespace obfuscation {
+
+// Overriden methods called back as the AST is walked
+
+bool SymbolsWalkerAndCollector::walkToExprPre(Expr *Expression) {
+
+  for (auto Iterator = Processors.cbegin();
+       Iterator != Processors.cend();
+       ++Iterator) {
+    auto Declarations = Iterator->get()->declarationFrom(Expression);
+    for (auto Iterator = Declarations.begin();
+         Iterator != Declarations.end();
+         ++Iterator) {
+      auto DeclarationOrError = std::move(*Iterator);
+      if (auto Error = DeclarationOrError.takeError()) {
+        llvm::consumeError(std::move(Error));
+      } else {
+        handleDeclWithRange(DeclarationOrError.get());
+      }
+    }
+  }
+
+  return true;
+}
+
+void SymbolsWalkerAndCollector::
+  identifyExcludedSymbols(DeclWithSymbolWithRange &DeclAndSymbolWithRange) {
+
+  std::vector<DeclWithSymbolWithRange> SymbolsToExclude;
+
+  for (auto Iterator = Excluders.cbegin();
+       Iterator != Excluders.cend();
+       ++Iterator) {
+    auto SymbolToExclude =
+      Iterator->get()->symbolsToExclude(DeclAndSymbolWithRange);
+    if (SymbolToExclude != llvm::None) {
+      SymbolsToExclude.push_back(SymbolToExclude.getValue());
+    }
+  }
+
+  for (auto Iterator = Updaters.begin();
+       Iterator != Updaters.end();
+       ++Iterator) {
+    if (Iterator->get()->getKind()
+        == GlobalCollectedSymbolsUpdaterKind::ExcludedSymbols) {
+      Iterator->get()->load(SymbolsToExclude);
+    }
+  }
+}
+  
+void
+SymbolsWalkerAndCollector::handleDeclWithRange(DeclWithRange &DeclWithRange) {
+  for (auto Iterator = Collectors.begin();
+       Iterator != Collectors.end();
+       ++Iterator) {
+
+    auto DeclsWithSymbolsWithRangesFromDeclaration =
+    Iterator->get()->collectFrom(DeclWithRange);
+
+    for (auto &DeclWithSymbolWithRange :
+         DeclsWithSymbolsWithRangesFromDeclaration) {
+      handleSymbol(DeclWithSymbolWithRange);
+
+      identifyExcludedSymbols(DeclWithSymbolWithRange);
+
+    }
+
+    for (auto Iterator = Updaters.begin();
+         Iterator != Updaters.end();
+         ++Iterator) {
+      if (Iterator->get()->getKind()
+          != GlobalCollectedSymbolsUpdaterKind::ExcludedSymbols) {
+        Iterator->get()->load(DeclsWithSymbolsWithRangesFromDeclaration);
+      }
+    }
+  }
+}
+
+bool SymbolsWalkerAndCollector::walkToDeclPre(Decl *Declaration,
+                                              CharSourceRange Range) {
+  DeclWithRange DeclWithRange(Declaration, Range);
+  handleDeclWithRange(DeclWithRange);
+  return true;
+}
+
+void SymbolsWalkerAndCollector::
+  handleWhereClausesIfNeeded(const std::vector<Decl*> &&Declarations) {
+  for (auto *Declaration : Declarations) {
+    for (auto Iterator = Processors.cbegin();
+         Iterator != Processors.cend();
+         ++Iterator) {
+      auto Declarations = Iterator->get()->declarationFrom(Declaration);
+      for (auto Iterator = Declarations.begin();
+           Iterator != Declarations.end();
+           ++Iterator) {
+        auto DeclarationOrError = std::move(*Iterator);
+        if (auto Error = DeclarationOrError.takeError()) {
+          llvm::consumeError(std::move(Error));
+        } else {
+          handleDeclWithRange(DeclarationOrError.get());
+        }
+      }
+    }
+  }
+}
+
+// We need to extract symbols here even though we might have already seen
+// this node in the walkToDeclPre because here we have additional
+// contextual information like CtorTyRef
+bool SymbolsWalkerAndCollector::visitDeclReference(ValueDecl *Declaration,
+                                                   CharSourceRange Range,
+                                                   TypeDecl *CtorTyRef,
+                                                   ExtensionDecl *ExtTyRef,
+                                                   Type T,
+                                                   ReferenceMetaData Data) {
+
+  auto DeclarationToUse = CtorTyRef ? CtorTyRef : Declaration;
+
+  DeclWithRange DeclWithRangeToUse(DeclarationToUse, Range);
+  handleDeclWithRange(DeclWithRangeToUse);
+
+  DeclWithRange DeclWithRangeExtension(ExtTyRef, Range);
+  handleDeclWithRange(DeclWithRangeExtension);
+
+  handleWhereClausesIfNeeded({ Declaration, CtorTyRef, ExtTyRef });
+
+  return true;
+}
+
+// Methods for handling the extracted symbols
+  
+void
+SymbolsWalkerAndCollector::handleSymbol(const DeclWithSymbolWithRange &Symbol) {
+  auto InsertionResult =
+    Symbols.insert(IndexedDeclWithSymbolWithRange(SymbolIndex, Symbol));
+  if (InsertionResult.second == true) {
+    ++SymbolsWalkerAndCollector::SymbolIndex;
+  }
+}
+
+GlobalCollectedSymbols SymbolsWalkerAndCollector::collectSymbols() {
+  for (auto Iterator = Updaters.begin();
+       Iterator != Updaters.end();
+       ++Iterator) {
+    Iterator->get()->updateUsingLoadedSymbols(Symbols);
+  }
+  return Symbols;
+}
+
+SymbolsWalkerAndCollector::
+  SymbolsWalkerAndCollector(std::set<std::unique_ptr<Processor>> &Processors,
+                            std::vector<std::unique_ptr<Collector>> &Collectors,
+                            std::set<std::unique_ptr<Excluder>> &Excluders,
+                            std::set<std::unique_ptr<GlobalCollectedSymbolsUpdater>> &Updaters)
+: Processors(Processors),
+  Collectors(Collectors),
+  Excluders(Excluders),
+  Updaters(Updaters)  {}
+
+GlobalCollectedSymbols
+SymbolsWalkerAndCollector::walkAndCollectSymbols(SourceFile &SourceFile) {
+  walk(SourceFile);
+  return collectSymbols();
+}
+
+int SymbolsWalkerAndCollector::SymbolIndex;
+
+SymbolsWalkerAndCollectorFactory::SymbolsWalkerAndCollectorFactory() {
+
+  FunctionExtractor FunctionExtractor;
+  OperatorExtractor OperatorExtractor;
+  ParameterExtractor ParameterExtractor;
+  VariableExtractor VariableExtractor;
+  TypeRepresentationExtractor TypeRepresentationExtractor;
+
+  std::unique_ptr<Processor> ExpressionProcessor =
+    llvm::make_unique<class ExpressionProcessor>(ParameterExtractor);
+  Processors.insert(std::move(ExpressionProcessor));
+
+  std::unique_ptr<Processor> WhereClauseProcessor =
+    llvm::make_unique<class WhereClauseProcessor>(TypeRepresentationExtractor);
+  Processors.insert(std::move(WhereClauseProcessor));
+
+  std::unique_ptr<Includer> NominalTypeIncluder =
+    llvm::make_unique<class NominalTypeIncluder>();
+  std::unique_ptr<SymbolGenerator> NominalTypeSymbolGenerator =
+    llvm::make_unique<class NominalTypeSymbolGenerator>(NominalTypeExtractor);
+  auto NominalTypeCollector =
+    llvm::make_unique<Collector>(std::move(NominalTypeIncluder),
+                                 std::move(NominalTypeSymbolGenerator));
+  Collectors.push_back(std::move(NominalTypeCollector));
+
+  std::unique_ptr<Includer> FunctionNameIncluder =
+    llvm::make_unique<class FunctionNameIncluder>();
+  std::unique_ptr<SymbolGenerator> FunctionNameSymbolGenerator =
+    llvm::make_unique<class FunctionNameSymbolGenerator>(FunctionExtractor);
+  auto FunctionNameCollector =
+    llvm::make_unique<Collector>(std::move(FunctionNameIncluder),
+                                 std::move(FunctionNameSymbolGenerator));
+  Collectors.push_back(std::move(FunctionNameCollector));
+
+  std::unique_ptr<Includer> OperatorIncluder =
+    llvm::make_unique<class OperatorIncluder>(OperatorExtractor);
+  std::unique_ptr<SymbolGenerator> OperatorSymbolGenerator =
+    llvm::make_unique<class OperatorSymbolGenerator>(OperatorExtractor);
+  auto OperatorCollector =
+    llvm::make_unique<Collector>(std::move(OperatorIncluder),
+                                 std::move(OperatorSymbolGenerator));
+  Collectors.push_back(std::move(OperatorCollector));
+
+  std::unique_ptr<Includer> FunctionParametersIncluder =
+    llvm::make_unique<class FunctionParametersIncluder>(ParameterExtractor);
+  std::unique_ptr<SymbolGenerator> FunctionParameterSymbolGenerator =
+    llvm::make_unique<class FunctionParameterSymbolGenerator>(FunctionExtractor,
+                                                              ParameterExtractor);
+  auto FunctionParameterCollector =
+    llvm::make_unique<Collector>(std::move(FunctionParametersIncluder),
+                                 std::move(FunctionParameterSymbolGenerator));
+  Collectors.push_back(std::move(FunctionParameterCollector));
+
+  std::unique_ptr<Includer> VariableIncluder =
+    llvm::make_unique<class VariableIncluder>(VariableExtractor);
+  std::unique_ptr<SymbolGenerator> VariableSymbolGenerator =
+    llvm::make_unique<class VariableSymbolGenerator>(VariableExtractor);
+  auto VariableCollector =
+    llvm::make_unique<Collector>(std::move(VariableIncluder),
+                                 std::move(VariableSymbolGenerator));
+  Collectors.push_back(std::move(VariableCollector));
+
+  std::unique_ptr<Excluder> NSManagedExcluder =
+    llvm::make_unique<class NSManagedExcluder>();
+  Excluders.insert(std::move(NSManagedExcluder));
+
+  std::unique_ptr<GlobalCollectedSymbolsUpdater> ExcludedSymbolsUpdater =
+    llvm::make_unique<class ExcludedSymbolsUpdater>();
+  Updaters.insert(std::move(ExcludedSymbolsUpdater));
+
+  std::unique_ptr<GlobalCollectedSymbolsUpdater> ProtocolFunctionUpdater =
+    llvm::make_unique<class ProtocolFunctionUpdater>(FunctionExtractor,
+                                                     ParameterExtractor);
+  Updaters.insert(std::move(ProtocolFunctionUpdater));
+
+  std::unique_ptr<GlobalCollectedSymbolsUpdater> ExtensionSymbolsUpdater =
+    llvm::make_unique<class ExtensionSymbolsUpdater>(FunctionExtractor,
+                                                     ParameterExtractor);
+  Updaters.insert(std::move(ExtensionSymbolsUpdater));
+}
+
+SymbolsWalkerAndCollectorFactory::
+  SymbolsWalkerAndCollectorFactory(ObfuscationConfiguration &&ObfuscationConfiguration)
+: SymbolsWalkerAndCollectorFactory() {
+  std::unique_ptr<Excluder> Configuration =
+  llvm::make_unique<ConfigurationExcluder>(std::move(ObfuscationConfiguration),
+                                           NominalTypeExtractor);
+  Excluders.insert(std::move(Configuration));
+}
+
+SymbolsWalkerAndCollector SymbolsWalkerAndCollectorFactory::
+  symbolsWalkerAndCollector() {
+  return SymbolsWalkerAndCollector(Processors,
+                                   Collectors,
+                                   Excluders,
+                                   Updaters);
+}
+
+} //namespace obfuscation
+} //namespace swift
diff --git a/swift/lib/Obfuscation/TypeRepresentationParser.cpp b/swift/lib/Obfuscation/TypeRepresentationParser.cpp
deleted file mode 100644
index 259e34eac57..00000000000
--- a/swift/lib/Obfuscation/TypeRepresentationParser.cpp
+++ /dev/null
@@ -1,149 +0,0 @@
-#include "swift/Obfuscation/DeclarationParser.h"
-#include "swift/Obfuscation/Utils.h"
-#include "swift/Obfuscation/TypeRepresentationParser.h"
-
-namespace swift {
-namespace obfuscation {
-
-void TypeRepresentationParser::handleComponent(
-                                       GlobalCollectedSymbols &CollectedSymbols,
-                                       ComponentIdentTypeRepr *Component) {
-  auto StartLocation = Component->getStartLoc();
-  if (Component->isBound() && StartLocation.isValid()) {
-    auto TypeDeclaration = Component->getBoundDecl();
-    CharSourceRange TypeRange(StartLocation,
-                              TypeDeclaration->getName().getLength());
-    auto SymbolsOrError = extractSymbol(CollectedSymbols,
-                                        TypeDeclaration,
-                                        TypeRange);
-    if (auto Error = SymbolsOrError.takeError()) {
-      llvm::consumeError(std::move(Error));
-      return;
-    }
-    copyToSet(SymbolsOrError.get(), Symbols);
-  }
-}
-
-void TypeRepresentationParser::
-handleTypeRepresentationRecursively(GlobalCollectedSymbols &CollectedSymbols,
-                                    TypeRepr *ParentOfTypeRepresentation,
-                                    TypeRepr *TypeRepresentation) {
-
-  // Guard agains the case in which there is no object
-  // or the object points to itself in the AST.
-  if (TypeRepresentation == nullptr
-      || ParentOfTypeRepresentation == TypeRepresentation) {
-    return;
-  }
-
-  if (auto *Compound = dyn_cast<CompoundIdentTypeRepr>(TypeRepresentation)) {
-    for (auto *Component : Compound->Components) {
-      handleComponent(CollectedSymbols, Component);
-    }
-  }
-
-  if (auto *Generic = dyn_cast<GenericIdentTypeRepr>(TypeRepresentation)) {
-    for (auto *GenericArg : Generic->getGenericArgs()) {
-      handleTypeRepresentationRecursively(CollectedSymbols,
-                                          Generic,
-                                          GenericArg);
-    }
-  }
-
-  if (auto *Component = dyn_cast<ComponentIdentTypeRepr>(TypeRepresentation)) {
-    handleComponent(CollectedSymbols, Component);
-  }
-
-  if (auto *InOut = dyn_cast<InOutTypeRepr>(TypeRepresentation)) {
-    handleTypeRepresentationRecursively(CollectedSymbols,
-                                        InOut,
-                                        InOut->getBase());
-  }
-
-  if (auto *Attributed = dyn_cast<AttributedTypeRepr>(TypeRepresentation)) {
-    handleTypeRepresentationRecursively(CollectedSymbols,
-                                        Attributed,
-                                        Attributed->getTypeRepr());
-  }
-
-  if (auto *Function = dyn_cast<FunctionTypeRepr>(TypeRepresentation)) {
-    handleTypeRepresentationRecursively(CollectedSymbols,
-                                        Function,
-                                        Function->getArgsTypeRepr());
-    handleTypeRepresentationRecursively(CollectedSymbols,
-                                        Function,
-                                        Function->getResultTypeRepr());
-  }
-
-  if (auto *IUO =
-        dyn_cast<ImplicitlyUnwrappedOptionalTypeRepr>(TypeRepresentation)) {
-    handleTypeRepresentationRecursively(CollectedSymbols,IUO, IUO->getBase());
-  }
-
-  if (auto *Protocol = dyn_cast<ProtocolTypeRepr>(TypeRepresentation)) {
-    handleTypeRepresentationRecursively(CollectedSymbols,
-                                        Protocol,
-                                        Protocol->getBase());
-  }
-
-  if (auto *Metatype = dyn_cast<MetatypeTypeRepr>(TypeRepresentation)) {
-    handleTypeRepresentationRecursively(CollectedSymbols,
-                                        Metatype,
-                                        Metatype->getBase());
-  }
-
-  if (auto *Array = dyn_cast<ArrayTypeRepr>(TypeRepresentation)) {
-    handleTypeRepresentationRecursively(CollectedSymbols,
-                                        Array,
-                                        Array->getBase());
-  }
-
-  if (auto *Dictionary = dyn_cast<DictionaryTypeRepr>(TypeRepresentation)) {
-    handleTypeRepresentationRecursively(CollectedSymbols,
-                                        Dictionary,
-                                        Dictionary->getKey());
-    
-    handleTypeRepresentationRecursively(CollectedSymbols,
-                                        Dictionary,
-                                        Dictionary->getValue());
-  }
-
-  if (auto *Optional = dyn_cast<OptionalTypeRepr>(TypeRepresentation)) {
-    handleTypeRepresentationRecursively(CollectedSymbols,
-                                        Optional,
-                                        Optional->getBase());
-  }
-
-  if (auto *Tuple = dyn_cast<TupleTypeRepr>(TypeRepresentation)) {
-    for (auto *TupleElement : Tuple->getElements()) {
-      handleTypeRepresentationRecursively(CollectedSymbols,
-                                          Tuple,
-                                          TupleElement);
-    }
-  }
-
-  if (auto *Composition = dyn_cast<CompositionTypeRepr>(TypeRepresentation)) {
-    for (auto *CompositionElement : Composition->getTypes()) {
-      handleTypeRepresentationRecursively(CollectedSymbols,
-                                          Composition,
-                                          CompositionElement);
-    }
-  }
-}
-
-void TypeRepresentationParser::
-  collectSymbolsFromTypeRepresentation(GlobalCollectedSymbols &CollectedSymbols,
-                                       TypeRepr *TypeRepresentation) {
-  handleTypeRepresentationRecursively(CollectedSymbols,
-                                      /* Parent */ nullptr,
-                                      TypeRepresentation);
-}
-
-std::set<SymbolWithRange> TypeRepresentationParser::harvestSymbols() {
-  std::set<SymbolWithRange> Result = Symbols;
-  Symbols.clear();
-  return Result;
-}
-
-} //namespace obfuscation
-} //namespace swift
diff --git a/swift/lib/Obfuscation/Utils.cpp b/swift/lib/Obfuscation/Utils.cpp
index 5139cff3f82..aa8082c50a5 100644
--- a/swift/lib/Obfuscation/Utils.cpp
+++ b/swift/lib/Obfuscation/Utils.cpp
@@ -19,6 +19,21 @@ std::vector<std::string> split(const std::string &String, char Delimiter) {
   
   return SplittedElements;
 }
+
+std::string combineIdentifier(std::vector<std::string> &Parts) {
+  if (Parts.empty()) {
+    return "";
+  } else if (Parts.size() == 1) {
+    return Parts[0];
+  } else {
+    //TODO: can we rewrite it to use llvm:raw_string_ostream?
+    std::stringstream ResultStream;
+    copyToStream(Parts, std::ostream_iterator<std::string>(ResultStream, "."));
+    std::string Result = ResultStream.str();
+    Result.pop_back();
+    return Result;
+  }
+}
   
 } //namespace obfuscation
 } //namespace swift
diff --git a/swift/lib/Obfuscation/VariableDeclarationParser.cpp b/swift/lib/Obfuscation/VariableDeclarationParser.cpp
deleted file mode 100644
index 55a2a8f3ef8..00000000000
--- a/swift/lib/Obfuscation/VariableDeclarationParser.cpp
+++ /dev/null
@@ -1,123 +0,0 @@
-#include "swift/Obfuscation/VariableDeclarationParser.h"
-#include "swift/Obfuscation/FunctionDeclarationParser.h"
-#include "swift/Obfuscation/NominalTypeDeclarationParser.h"
-#include "swift/Obfuscation/DeclarationParsingUtils.h"
-#include "swift/Obfuscation/Utils.h"
-
-namespace swift {
-namespace obfuscation {
-
-llvm::Error isDeclarationSupported(const VarDecl *Declaration) {
-  if (Declaration->isCaptureList()) {
-    return stringError("The variable is the element of closure's "
-                       "capture list. It must not be renamed.");
-  } else if (Declaration->isImplicit()) {
-    return stringError("The variable is implicit. It must not be renamed.");
-  }
-  return llvm::Error::success();
-}
-  
-SingleSymbolOrError
-parseOverridenDeclaration(const VarDecl *Declaration,
-                          const std::string &ModuleName) {
-  auto BaseWithModules = getBaseOverridenDeclarationWithModules(Declaration);
-  auto Base = BaseWithModules.first;
-  auto Modules = BaseWithModules.second;
-
-  if (isOverriddenMethodFromTheSameModule(Modules, ModuleName)) {
-    return parse(Base);
-  } else {
-    return stringError("only overriding properties from the same module "
-                       "might be safely obfuscated");
-  }
-}
-
-llvm::Expected<ModuleNameAndParts>
-variableIdentifierPartsFromContext(const VarDecl *Declaration) {
-
-  std::string ModuleName;
-  std::vector<std::string> Parts;
-  
-  auto ProtocolRequirements = Declaration->getSatisfiedProtocolRequirements();
-  
-  ProtocolDecl *ProtocolDeclaration = nullptr;
-  if (auto *ExtensionDeclaration =
-                       dyn_cast<ExtensionDecl>(Declaration->getDeclContext())) {
-    
-    ProtocolDeclaration = dyn_cast_or_null<ProtocolDecl>(
-               ExtensionDeclaration->getAsProtocolOrProtocolExtensionContext());
-  } else {
-    ProtocolDeclaration =
-      dyn_cast_or_null<ProtocolDecl>(Declaration->getDeclContext());
-  }
-
-  // TODO: for now, we're renaming properties from different protocols
-  // but with the same name to the same obfuscated name.
-  // This should be improved in the future.
-  if (!ProtocolRequirements.empty() || ProtocolDeclaration != nullptr) {
-
-    // TODO: If the property satisfies multiple protocols, we're using
-    // the module name from the first of the protocols. This may lead to errors
-    // and should be changed in the future.
-    ModuleName = ProtocolRequirements.empty()
-                    ? moduleName(ProtocolDeclaration)
-                    : moduleName(ProtocolRequirements.front());
-    Parts.push_back("module." + ModuleName);
-    Parts.push_back("protocol");
-
-  } else if (auto *NominalTypeDeclaration =
-              dyn_cast<NominalTypeDecl>(Declaration->getDeclContext())) {
-
-    ModuleName = moduleName(Declaration);
-    Parts.push_back("module." + ModuleName);
-    std::string TypeName = typeName(NominalTypeDeclaration);
-    auto ModuleAndParts = nominalTypeIdentifierParts(NominalTypeDeclaration,
-                                                     TypeName);
-    if (auto Error = ModuleAndParts.takeError()) {
-      return std::move(Error);
-    }
-    copyToVector(ModuleAndParts.get(), Parts);
-
-  } else if (Declaration->getDeclContext()->isModuleScopeContext()) {
-    ModuleName = moduleName(Declaration);
-    Parts.push_back("module." + ModuleName);
-  }
-
-  if (ModuleName.empty() && Parts.empty()) {
-    return stringError("No supported variable declaration found");
-  }
-  
-  return std::make_pair(ModuleName, Parts);
-}
-
-SingleSymbolOrError parse(const VarDecl* Declaration) {
-  
-  if (auto Error = isDeclarationSupported(Declaration)) {
-    return std::move(Error);
-  }
-  
-  if (Declaration->getOverriddenDecl() != nullptr) {
-    return parseOverridenDeclaration(Declaration, moduleName(Declaration));
-  }
-  
-  auto ModuleAndPartsOrError = variableIdentifierPartsFromContext(Declaration);
-  if (auto Error = ModuleAndPartsOrError.takeError()) {
-    return std::move(Error);
-  }
-  auto ModuleAndParts = ModuleAndPartsOrError.get();
-  
-  if (Declaration->isStatic()) {
-    ModuleAndParts.second.push_back("static");
-  }
-  
-  std::string SymbolName = declarationName(Declaration);
-  ModuleAndParts.second.push_back("variable." + SymbolName);
-  
-  return Symbol(combineIdentifier(ModuleAndParts.second),
-                SymbolName,
-                ModuleAndParts.first,
-                SymbolType::Variable);
-}
-  
-} //namespace obfuscation
-} //namespace swift
diff --git a/swift/lib/Obfuscation/WhereClauseParser.cpp b/swift/lib/Obfuscation/WhereClauseParser.cpp
deleted file mode 100644
index 774e0008d5a..00000000000
--- a/swift/lib/Obfuscation/WhereClauseParser.cpp
+++ /dev/null
@@ -1,111 +0,0 @@
-#include "swift/Obfuscation/WhereClauseParser.h"
-#include "swift/Obfuscation/Utils.h"
-#include "swift/Obfuscation/TypeRepresentationParser.h"
-
-namespace swift {
-namespace obfuscation {
-
-void
-WhereClauseParser::handleWhereClause(GlobalCollectedSymbols &CollectedSymbols,
-                                     TrailingWhereClause *WhereClause) {
-
-  if (WhereClause == nullptr) { return; }
-
-  TypeRepresentationParser TypeReprParser;
-
-  auto Requirements = WhereClause->getRequirements();
-  for (auto WhereRequirement : Requirements) {
-
-    if (WhereRequirement.isInvalid()) { continue; }
-
-    TypeRepr *FirstTypeRepresentation = nullptr;
-    TypeRepr *SecondTypeRepresentation = nullptr;
-
-    switch (WhereRequirement.getKind()) {
-      // This represents the constraint to type,
-      // like "Self: UIView" or "Element: Hashable"
-      case RequirementReprKind::TypeConstraint: {
-        // In case of type constraints, the left side of ":" colon sign is
-        // represented as Subject, and the right side as Constraint
-        FirstTypeRepresentation = WhereRequirement.getSubjectRepr();
-        SecondTypeRepresentation = WhereRequirement.getConstraintRepr();
-        break;
-      }
-      // This represents the type equality requirements, such as
-      // "Self == UIView" or "Element == String"
-      case RequirementReprKind::SameType: {
-        // In case of type equality requirement the type on the left side
-        // of "==" sign is represented as FirstType and the type
-        // on the right side is represented as SecondType
-        FirstTypeRepresentation = WhereRequirement.getFirstTypeRepr();
-        SecondTypeRepresentation = WhereRequirement.getSecondTypeRepr();
-        break;
-      }
-      // This represents the constraint on the type itself.
-      // The only user-facing case that we know of is "Protocol: class",
-      // but it might represent other situations internal to compiler
-      // or private to stdlib
-      case RequirementReprKind::LayoutConstraint: {
-        // The left side of the layout constraint is represented as Subject.
-        // The right side of Layout constaint is Layout,
-        // which we think there is no need to rename
-        FirstTypeRepresentation = WhereRequirement.getSubjectRepr();
-        SecondTypeRepresentation = nullptr;
-        break;
-      }
-    }
-
-    if (FirstTypeRepresentation != nullptr
-        && !FirstTypeRepresentation->isInvalid()) {
-      TypeReprParser
-        .collectSymbolsFromTypeRepresentation(CollectedSymbols,
-                                              FirstTypeRepresentation);
-    }
-    if (SecondTypeRepresentation != nullptr
-        && !SecondTypeRepresentation->isInvalid()) {
-      TypeReprParser
-        .collectSymbolsFromTypeRepresentation(CollectedSymbols,
-                                              SecondTypeRepresentation);
-    }
-  }
-  copyToSet(TypeReprParser.harvestSymbols(), Symbols);
-}
-
-void WhereClauseParser::collectSymbolsFromDeclaration(
-                                      GlobalCollectedSymbols &CollectedSymbols,
-                                      Decl* Declaration) {
-  if (Declaration != nullptr) {
-
-    // We need to cast to the right type because there's no one base type
-    // defining the `getTrailingWhereClause` function in all the supported
-    // cases.
-    if (auto *Extension = dyn_cast<ExtensionDecl>(Declaration)) {
-      handleWhereClause(CollectedSymbols,
-                        Extension->getTrailingWhereClause());
-
-    } else if (auto *GenericType = dyn_cast<GenericTypeDecl>(Declaration)) {
-      handleWhereClause(CollectedSymbols,
-                        GenericType->getTrailingWhereClause());
-
-    } else if (auto *Subscript = dyn_cast<SubscriptDecl>(Declaration)) {
-      handleWhereClause(CollectedSymbols,
-                        Subscript->getTrailingWhereClause());
-
-    } else if (auto *AbstractFunc = dyn_cast<AbstractFunctionDecl>(Declaration)) {
-      handleWhereClause(CollectedSymbols,
-                        AbstractFunc->getTrailingWhereClause());
-
-    } else if (auto *Associated = dyn_cast<AssociatedTypeDecl>(Declaration)) {
-      handleWhereClause(CollectedSymbols, Associated->getTrailingWhereClause());
-    }
-  }
-}
-
-std::set<SymbolWithRange> WhereClauseParser::harvestSymbols() {
-  std::set<SymbolWithRange> Result = Symbols;
-  Symbols.clear();
-  return Result;
-}
-
-} //namespace obfuscation
-} //namespace swift
diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
index 78ea042a4fd..9f1c71f4dbe 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/Expected/FunctionParameterNames.swift
@@ -176,3 +176,18 @@ class T1_ClassWithSetter {
     set(SP1_newTestVar) {}
   }
 }
+
+// ?
+import CoreData
+
+protocol T1_Entity {
+    static func NF1_entityName() -> String
+}
+
+struct T1_CoreDataOperations<T> where T: NSManagedObject, T: T1_Entity {
+    let V1_context: NSManagedObjectContext
+
+    init(EP1_managedObjectContext IP1_context: NSManagedObjectContext) {
+        self.V1_context = IP1_context
+    }
+}
\ No newline at end of file
diff --git a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
index 91b54b29d23..36c491a2ad1 100644
--- a/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
+++ b/swift/test/Obfuscation/FullProcess/FunctionParameterNames/FunctionParameterNames.swift
@@ -178,3 +178,18 @@ class ClassWithSetter {
     set(newTestVar) {}
   }
 }
+
+// ?
+import CoreData
+
+protocol Entity {
+    static func entityName() -> String
+}
+
+struct CoreDataOperations<T> where T: NSManagedObject, T: Entity {
+    let context: NSManagedObjectContext
+
+    init(managedObjectContext context: NSManagedObjectContext) {
+        self.context = context
+    }
+}
\ No newline at end of file
diff --git a/swift/test/Obfuscation/FullProcess/Operators/Expected/Operators.swift b/swift/test/Obfuscation/FullProcess/Operators/Expected/Operators.swift
index 746438c89b9..2238884e2cb 100644
--- a/swift/test/Obfuscation/FullProcess/Operators/Expected/Operators.swift
+++ b/swift/test/Obfuscation/FullProcess/Operators/Expected/Operators.swift
@@ -5,7 +5,7 @@ postfix operator O1_+++
 extension Double {
   static prefix func O1_--- (SP1_number: Double) -> Double { return SP1_number - 2 }
   static func O1_^^^ (SP1_left: Double, SP1_right: Double) -> Double { return pow(SP1_left, SP1_right) + SP1_left }
-  static postfix func O1_+++ (SP1_number: Double) -> Double { return SP1_number + 2 }
+  static postfix func O1_+++ (SP2_number: Double) -> Double { return SP2_number + 2 }
 }
 
 O1_---44
diff --git a/swift/test/Obfuscation/FullProcess/Operators/Operators.swift b/swift/test/Obfuscation/FullProcess/Operators/Operators.swift
index 43f262567d4..1d301f59c38 100644
--- a/swift/test/Obfuscation/FullProcess/Operators/Operators.swift
+++ b/swift/test/Obfuscation/FullProcess/Operators/Operators.swift
@@ -1,4 +1,3 @@
-// XFAIL: *
 // RUN: %target-prepare-obfuscation-for-file "Operators" %target-run-full-obfuscation
 
 prefix operator ---
-- 
2.17.1 (Apple Git-112)


From dff19bc7eb868fdc0857b92de0a1bf11a9bf6206 Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Tue, 3 Apr 2018 14:35:45 +0200
Subject: [PATCH 129/138] Updated readme

Reviewers: jerzy.kleszcz, michal.zielinski

Reviewed By: michal.zielinski

Subscribers: michal.zielinski, krzysztof.siejkowski

Differential Revision: https://phabricator.polidea.com/D2896
---
 README.md | 98 +++++++++++++++++++++++++++++++++++--------------------
 1 file changed, 63 insertions(+), 35 deletions(-)

diff --git a/README.md b/README.md
index 653a6e501a7..38237516eba 100644
--- a/README.md
+++ b/README.md
@@ -14,6 +14,7 @@ All these tools use a shared library called `swiftObfuscation`. Its headers are
 
 The descriptions of the tools are presented below.
 
+
 # SymbolExtractor
 
 ## Overview
@@ -25,20 +26,24 @@ It performs the analysis of Swift source code files and identifies the symbols t
 ## Usage
 
 ```bash
-$ obfuscator-symbol-extractor -filesjson <path-to-input-files-json> -symbolsjson <path-to-output-symbols-json>
+$ obfuscator-symbol-extractor -filesjson <path-to-input-files-json> -symbolsjson <path-to-output-symbols-json> [-hidediagnostics] [-verbose]
 ```
 
 where
 
-`<path-to-input-files-json>` is a path to `Files.json` that contains the data required for performing the analysis of Swift source code. This parameter is required.
+`<path-to-input-files-json>` is a path to `files.json` that contains the data required for performing the analysis of Swift source code. This parameter is required.
 
-`<path-to-output-symbols-json>` is a path to `Symbols.json` file that the extracted symbols data will be written to. If it's an optional parameter. If ommited, tool will print out to the standard output.
+`<path-to-output-symbols-json>` is a path to `symbols.json` file that the extracted symbols data will be written to. This parameter is required.
 
-## Data formats
+`-hidediagnostics` is the optional flag. It prevents the compiler diagnostics from being printed to standard output. The logs contain compilation warnings and errors that occured during compilation of the input project. This flag should be used with caution, considering that compilation warnings could prevent the `symbol-extractor` from correctly identifying the symbol.
+
+`-verbose` is the optional flag. When present, the `symbols.json` contents are also printed to standard output.
+
+## <a name="symbol-extractor-data-formats"></a> Data Formats
 
-The input data format is called `Files.json`. It's defined and explained in the [FilesExtractor project documentation](https://gitlab2.polidea.com/SwiftObfuscator/FileExtractor/tree/master#data-formats).
+The input data format is called `files.json`. It's defined and explained in the [FilesExtractor project documentation](https://gitlab2.polidea.com/SwiftObfuscator/FileExtractor/tree/master#data-formats).
 
-The output data format is called `Symbols.json` and presented below:
+The output data format is called `symbols.json` and it is presented below:
 
 ```javascript
 {
@@ -47,25 +52,36 @@ The output data format is called `Symbols.json` and presented below:
       "identifier": <string>,
       "name": <string>,
       "module": <string>,
-      "type": <enum string>("type", "namedFunction", "operator")
+      "type": <enum string>("type",
+                            "namedFunction",
+                            "externalParameter",
+                            "internalParameter",
+                            "singleParameter",
+                            "variable",
+                            "operator")
     }
   ]
 }
 ```
 
-`symbols` is a list of objects that contains symbol identifier and name.
+`symbols` is a list of extracted symbols.
 
-`name` is directly corresponding to the actual string defined in the Swift source code. This string will be replaced by the `Renamer`.
+`name` is directly corresponding to the actual string defined in the Swift source code. This string will be replaced in the source code by the `Renamer`.
 
-`identifier` contains all the information required to uniquely identify the given symbol in the source code. It will be used by `Renamer` to decide whether the symbol it comes across should be renamed or not.
+`identifier` contains all the information required to uniquely identify the given symbol in the source code. It allows `Renamer` to identify if the symbol should be renamed.
 
-`module` contains the name of the module that allows us to identify whether the symbol should be included in renaming or not.
+`module` is the name of the module in which the extracted symbol was originally declared. For some symbols it is different from the module in which the symbol occures. E.g. for function declaration that satisfies the protocol requirement (or overrides the function from base class), the `module` represents the module in which the protocol (or base class) is declared. It allows `Renamer` to identify if the symbol should be renamed.
 
-`type` contains the type of the symbol. It's a string of value from a strictly limited enumeration. `type` means that the symbol represents type (like class or struct name), `namedFunction` means that the symbol represents function or method with name, and `operator` means that the symbol represents the operator.
+`type` contains the type of the symbol. It's a string of value from a strictly limited enumeration:
 
-## Feature list
+  - `type` for symbol that represents type (class, struct, enum, protocol).
+  - `namedFunction` for symbol that represents function or method with name.
+  - `externalParameter` for symbol that represents the function's external parameter name.
+  - `internalParameter` for symbol that represents the function's internal parameter name.
+  - `singleParameter` for symbol that represents the function's single parameter name (parameter has only one name).
+  - `variable` for symbol that represents `let` or `var` field.
+  - `operator` for symbol that represents the operator.
 
-- [] TBA
 
 # NameMapper
 
@@ -73,25 +89,35 @@ The output data format is called `Symbols.json` and presented below:
 
 This tool is part of Swift Obfuscator project.
 
-It proposes the new names for the symbols provided in the `Symbols.json` file. It does not perform the actual renaming, but it generates the symbols after obfuscation.
+It generates the new names for the symbols provided in the `symbols.json` file. It does not perform the actual renaming, just generates the the new names for the symbols that potentially needs to be renamed.
 
 ## Usage
 
 ```bash
-$ obfuscator-name-mapper -symbolsjson <path-to-input-symbols-file> -renamesjson <path-to-output-renames-file>
+$ obfuscator-name-mapper -symbolsjson <path-to-input-symbols-file> -renamesjson <path-to-output-renames-file> [-namemappingstrategy <name-mapping-strategy>] [-verbose]
 ```
 
 where
 
-`<path-to-input-symbols-file>` is a path to `Symbols.json` file that contains the information about the extracted symbols. It's a required parameter.
+`<path-to-input-symbols-file>` is a path to `symbols.json` file that contains the information about the extracted symbols. It's a required parameter.
 
-`<path-to-output-renames-file>` is a path to the file that the symbols with proposed obfuscated names will be written to. It's an optional parameter. If ommited, tool will print out to the standard output.
+`<path-to-output-renames-file>` is a path to the file that the symbols with proposed obfuscated names will be written to. It's a required parameter.
 
-## Data formats
+`<name-mapping-strategy>` is the optional parameter of type enum string determining which of the following strategies it used when generating the new names:
+
+- `random` strategy generates random alphanumeric strings of length 32, e.g. `gnxWyHU0uN3bXejy8bVAoNbyfg4gRuN8`.
+- `deterministic` strategy generates deterministic renames based on symbol's original name, e.g. `T1_RootViewController`.
+- `minifying` strategy generates strings as short as possible, e.g. `a`.
+
+When the `-namemappingstrategy` parameter is not provided, the default `random` strategy is used.
 
-The input format is called `Symbols.json` and is described and explained in the [SymbolExtractor data formats](#data-formats) section.
+`-verbose` is the optional flag. When present, the `Renames.json` contents are also printed to standard output.
 
-The output format is called `Renames.json` and presented below:
+##<a name="name-mapper-data-formats"></a> Data Formats
+
+The input format is called `symbols.json` and is described and explained in the [SymbolExtractor data formats](#symbol-extractor-data-formats) section.
+
+The output format is called `Renames.json` and it is presented below:
 
 ```javascript
 {
@@ -101,21 +127,23 @@ The output format is called `Renames.json` and presented below:
       "originalName": <string>,
       "obfuscatedName": <string>,
       "module": <string>,
-      "type": <enum string>("type", "namedFunction", "operator")
+      "type": <enum string>("type",
+                            "namedFunction",
+                            "externalParameter",
+                            "internalParameter",
+                            "singleParameter",
+                            "variable",
+                            "operator")
     }
   ]
 }
 ```
+Most of the fields in each element of the `symbols` array are copied from the input `symbols.json` file and described in [SymbolExtractor data formats](#symbol-extractor-data-formats) section. The differences are described below:
 
-`symbols` is an array of objects containing the original name of symbol, its identifier and the proposes obfuscated name.
-
-`originalName` and `identifier` and `module` and `type` are the same as `name` and `identifier` and `module` and `type` fields in the `Symbols.json` format, respectively.
+`originalName` is the same as `name` in `symbols.json`.
 
-`obfuscatedName` is the proposed name that the original name of symbol should be changed to.
+`obfuscatedName` is the proposed new name that the symbols should be renamed to.
 
-## Feature list
-
-- [] TBA
 
 # Renamer
 
@@ -128,12 +156,12 @@ It performs the actual renaming. It parses the Swift source code to identify the
 ## Usage
 
 ```bash
-$ obfuscator-renamer -filesjson <path-to-input-files-json-file> -renamesjson <path-to-input-renames-json-file> -obfuscatedproject <path-to-directory-for-obfuscated-project>
+$ obfuscator-renamer -filesjson <path-to-input-files-json-file> -renamesjson <path-to-input-renames-json-file> -obfuscatedproject <path-to-directory-for-obfuscated-project> [-hidediagnostics] [-verbose]
 ```
 
 where
 
-`<path-to-input-files-json-file>` is the path to the `Files.json` file. It's a required parameter.
+`<path-to-input-files-json-file>` is the path to the `symbols.json` file. It's a required parameter.
 
 `<path-to-input-renames-json-file>` is the path to the `Renames.json` file. It's a required parameter.
 
@@ -141,14 +169,14 @@ where
 
 In case when project should be obfuscated in place (without making a copy), `-inplace` argument can be used instead of `-obfuscatedproject`.
 
+`-hidediagnostics` is the optional flag. It prevents the compiler diagnostics from being printed to standard output. The logs contain compilation warnings and errors that occured during compilation of the input project. This flag should be used with caution, considering that compilation warnings could prevent the `renamer` from correctly identifying the symbol.
 
-## Data formats
+`-verbose` is the optional flag. When present, the list of the obfuscated files is printed to the standard output.
 
-The input data formats are `Files.json` and `Renames.json` and are described in the [SymbolExtractor data formats section](#data-formats) and [NameMapper data formats section](#data-formats-1).
+## Data formats
 
-## Feature list
+The input data formats are `files.json` and `Renames.json` and are described in the [SymbolExtractor data formats](#symbol-extractor-data-formats) and [NameMapper data formats](#name-mapper-data-formats) sections.
 
-- [] TBA
 
 # Common for all three projects
 
-- 
2.17.1 (Apple Git-112)


From d1543bb9787e323fe1a25f219d810ac8195d7314 Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Tue, 24 Apr 2018 11:02:33 +0200
Subject: [PATCH 130/138] Readme update

---
 README.md | 31 +++++++++++++++++++++++++++----
 1 file changed, 27 insertions(+), 4 deletions(-)

diff --git a/README.md b/README.md
index 38237516eba..b17f77e6efd 100644
--- a/README.md
+++ b/README.md
@@ -1,5 +1,7 @@
 # Symbol Extractor, Name Mapper and Renamer
 
+This repository is part of [Sirius - Swift Obfuscator](https://gitlab2.polidea.com/SwiftObfuscator/ObfuscatorTool) project.
+
 Repository contains the Swift compiler fork with three additional tools and one additional library added.
 
 The tools are:
@@ -220,11 +222,9 @@ The input data formats are `files.json` and `Renames.json` and are described in
 
 Please consult the [Documentation](Documentation/) folder for the further explanations.
 
-## Licence
-
-TBA
+## Contributing
 
-## Contributors
+### Contributors
 
 In the alphabetical order:
 
@@ -232,3 +232,26 @@ In the alphabetical order:
 * [Krzysztof Siejkowski](krzysztof.siejkowski@polidea.com)
 * [Jakub Sowa](jakub.sowa@polidea.com)
 * [Michał Zieliński](michal.zielinski@polidea.com)
+
+### CLA
+
+We require contributors to have signed [Contributor Licence Agreement](https://en.wikipedia.org/wiki/Contributor_License_Agreement).
+
+## Licence
+
+```
+Copyright 2018 Polidea Sp. z o.o
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+```
+
-- 
2.17.1 (Apple Git-112)


From 25be49f806345afe6f49b65b26ba878f9c7e9f63 Mon Sep 17 00:00:00 2001
From: Jerzy Kleszcz <jerzy.kleszcz@polidea.com>
Date: Thu, 26 Apr 2018 15:19:48 +0200
Subject: [PATCH 131/138] Changed urls after migrating repo to Github, removed
 Gitlab and Arcanist configuration files

---
 .arcconfig     |  6 ------
 .gitlab-ci.yml | 39 ---------------------------------------
 README.md      |  6 +++---
 3 files changed, 3 insertions(+), 48 deletions(-)
 delete mode 100644 .arcconfig
 delete mode 100644 .gitlab-ci.yml

diff --git a/.arcconfig b/.arcconfig
deleted file mode 100644
index 71c7d808e14..00000000000
--- a/.arcconfig
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-  "phabricator.uri" : "https://phabricator.polidea.com/",
-  "arc.land.onto.default" : "master",
-  "project_id": ""
-}
-
diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml
deleted file mode 100644
index 094a24bf382..00000000000
--- a/.gitlab-ci.yml
+++ /dev/null
@@ -1,39 +0,0 @@
-obfuscator_debug:
-    stage: test
-    before_script:
-        - /bin/bash $CACHE_DIR/ninjaScript.bash "./Scripts/build_vanilla_compiler.sh"
-        - /bin/bash Scripts/setup_from_cache.sh
-    script:
-        - /bin/bash Scripts/build_from_cache.sh
-        - /bin/bash Scripts/run_tests_on_ci.sh
-        - /bin/bash Scripts/process_build_artifacts.sh
-    tags:
-        - xcode-9.0
-    except:
-        - master
-
-obfuscator_master:
-    stage: test
-    before_script:
-        - /bin/bash $CACHE_DIR/ninjaScript.bash "./Scripts/build_vanilla_compiler.sh"
-        - /bin/bash Scripts/setup_from_cache.sh
-    script:
-        - /bin/bash Scripts/build_from_cache.sh
-        - /bin/bash Scripts/run_tests_on_ci.sh
-        - /bin/bash Scripts/process_build_artifacts.sh
-    tags:
-        - xcode-9.0
-    only:
-        - master
-
-obfuscator_release:
-    stage: test
-    script:
-        - /bin/bash Scripts/build.sh
-        - /bin/bash Scripts/run_tests_on_ci.sh
-        - /bin/bash Scripts/process_build_artifacts.sh
-    tags:
-        - xcode-9.0
-    only:
-        - tags
-
diff --git a/README.md b/README.md
index b17f77e6efd..6635e4e8a23 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,6 @@
 # Symbol Extractor, Name Mapper and Renamer
 
-This repository is part of [Sirius - Swift Obfuscator](https://gitlab2.polidea.com/SwiftObfuscator/ObfuscatorTool) project.
+This repository is part of [Sirius - Swift Obfuscator](https://github.com/PolideaPlayground/SiriusObfuscator) project.
 
 Repository contains the Swift compiler fork with three additional tools and one additional library added.
 
@@ -43,7 +43,7 @@ where
 
 ## <a name="symbol-extractor-data-formats"></a> Data Formats
 
-The input data format is called `files.json`. It's defined and explained in the [FilesExtractor project documentation](https://gitlab2.polidea.com/SwiftObfuscator/FileExtractor/tree/master#data-formats).
+The input data format is called `files.json`. It's defined and explained in the [FilesExtractor project documentation](https://github.com/PolideaPlayground/SiriusObfuscator-FileExtractor#data-formats).
 
 The output data format is called `symbols.json` and it is presented below:
 
@@ -185,7 +185,7 @@ The input data formats are `files.json` and `Renames.json` and are described in
 ## Build notes for developers
 
 1. Clone the source code  
-   `git clone ssh://git@gitlab2.polidea.com:23/SwiftObfuscator/SymbolExtractorAndRenamer.git`
+   `git clone git@github.com:PolideaPlayground/SiriusObfuscator-SymbolExtractorAndRenamer.git`
 
 2. Install build tools  
    `brew install cmake ninja`
-- 
2.17.1 (Apple Git-112)


From ab2414b908eca74f750c1487068ebf52698186a5 Mon Sep 17 00:00:00 2001
From: Krzysztof Siejkowski <siejkowski@users.noreply.github.com>
Date: Fri, 25 May 2018 14:08:04 +0200
Subject: [PATCH 132/138] Updated readme

Clearing out that the ninja build is not needed after the SDK
cross-compilation
---
 README.md | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/README.md b/README.md
index 6635e4e8a23..c141541ddab 100644
--- a/README.md
+++ b/README.md
@@ -204,6 +204,10 @@ The input data formats are `files.json` and `Renames.json` and are described in
    `rm -r -f build/Xcode-RelWithDebInfoAssert+swift-DebugAssert/swift-macosx-x86_64/Debug/lib/swift`
    `cp -r build/Ninja-RelWithDebInfoAssert+swift-DebugAssert/swift-macosx-x86_64/lib/swift build/Xcode-RelWithDebInfoAssert+swift-DebugAssert/swift-macosx-x86_64/Debug/lib/swift`
 
+8. Remove the ninja build as it's no longer needed (unless you plan to use it)
+   `rm -r -f build/Ninja-RelWithDebInfoAssert+swift-DebugAssert`
+  
+
 ### Build documentation (optional)
 
 1. Install doxygen
-- 
2.17.1 (Apple Git-112)


From 733b093491ae8f8b8318cfb7442a8b4d07e74a50 Mon Sep 17 00:00:00 2001
From: Krzysztof Siejkowski <siejkowski@users.noreply.github.com>
Date: Fri, 25 May 2018 14:30:52 +0200
Subject: [PATCH 133/138] Updated readme

To ensure that the Xcode project is usable
---
 README.md | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/README.md b/README.md
index c141541ddab..2f90a48dc46 100644
--- a/README.md
+++ b/README.md
@@ -184,6 +184,8 @@ The input data formats are `files.json` and `Renames.json` and are described in
 
 ## Build notes for developers
 
+0. Ensure you have the **Xcode 9.2** installed and available under **/Applications/Xcode.app**. The version and path are important as the Xcode project for the compiler that is generated during build has the path baked in.  
+
 1. Clone the source code  
    `git clone git@github.com:PolideaPlayground/SiriusObfuscator-SymbolExtractorAndRenamer.git`
 
@@ -206,6 +208,8 @@ The input data formats are `files.json` and `Renames.json` and are described in
 
 8. Remove the ninja build as it's no longer needed (unless you plan to use it)
    `rm -r -f build/Ninja-RelWithDebInfoAssert+swift-DebugAssert`
+
+9. Open `build/Xcode-RelWithDebInfoAssert+swift-DebugAssert/swift-macosx-x86_64/Swift.xcodeproj` and create the schemes for the tools that you're interested in (autocreating schemes is not recommended, as there's a lot of them).
   
 
 ### Build documentation (optional)
-- 
2.17.1 (Apple Git-112)


From 67e8db99b48ac471cd577ae854e9981923dbe1a5 Mon Sep 17 00:00:00 2001
From: Krzysztof Siejkowski <siejkowski@users.noreply.github.com>
Date: Tue, 29 May 2018 15:32:34 +0200
Subject: [PATCH 134/138] Change of github address

---
 README.md | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/README.md b/README.md
index 2f90a48dc46..753dff1e475 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,6 @@
 # Symbol Extractor, Name Mapper and Renamer
 
-This repository is part of [Sirius - Swift Obfuscator](https://github.com/PolideaPlayground/SiriusObfuscator) project.
+This repository is part of [Sirius - Swift Obfuscator](https://github.com/Polidea/SiriusObfuscator) project.
 
 Repository contains the Swift compiler fork with three additional tools and one additional library added.
 
@@ -187,7 +187,7 @@ The input data formats are `files.json` and `Renames.json` and are described in
 0. Ensure you have the **Xcode 9.2** installed and available under **/Applications/Xcode.app**. The version and path are important as the Xcode project for the compiler that is generated during build has the path baked in.  
 
 1. Clone the source code  
-   `git clone git@github.com:PolideaPlayground/SiriusObfuscator-SymbolExtractorAndRenamer.git`
+   `git clone git@github.com:Polidea/SiriusObfuscator-SymbolExtractorAndRenamer.git`
 
 2. Install build tools  
    `brew install cmake ninja`
-- 
2.17.1 (Apple Git-112)


From f6c50221b47ae67d44c46ba3ba2d6e7883912446 Mon Sep 17 00:00:00 2001
From: Krzysztof Siejkowski <siejkowski@users.noreply.github.com>
Date: Tue, 29 May 2018 15:35:08 +0200
Subject: [PATCH 135/138] One more address to change

---
 README.md | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 753dff1e475..d64c4d94d9d 100644
--- a/README.md
+++ b/README.md
@@ -43,7 +43,7 @@ where
 
 ## <a name="symbol-extractor-data-formats"></a> Data Formats
 
-The input data format is called `files.json`. It's defined and explained in the [FilesExtractor project documentation](https://github.com/PolideaPlayground/SiriusObfuscator-FileExtractor#data-formats).
+The input data format is called `files.json`. It's defined and explained in the [FilesExtractor project documentation](https://github.com/Polidea/SiriusObfuscator-FileExtractor#data-formats).
 
 The output data format is called `symbols.json` and it is presented below:
 
-- 
2.17.1 (Apple Git-112)


From 80649e995557d56ccb2c16a77b1e50fd7a1297d7 Mon Sep 17 00:00:00 2001
From: Krzysztof Siejkowski <siejkowski@users.noreply.github.com>
Date: Wed, 30 May 2018 13:23:47 +0200
Subject: [PATCH 136/138] Fixed email links

---
 README.md | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/README.md b/README.md
index d64c4d94d9d..e814e394d5c 100644
--- a/README.md
+++ b/README.md
@@ -236,10 +236,10 @@ Please consult the [Documentation](Documentation/) folder for the further explan
 
 In the alphabetical order:
 
-* [Jerzy Kleszcz](jerzy.kleszcz@polidea.com)
-* [Krzysztof Siejkowski](krzysztof.siejkowski@polidea.com)
-* [Jakub Sowa](jakub.sowa@polidea.com)
-* [Michał Zieliński](michal.zielinski@polidea.com)
+* [Jerzy Kleszcz](mailto:jerzy.kleszcz@polidea.com)
+* [Krzysztof Siejkowski](mailto:krzysztof.siejkowski@polidea.com)
+* [Jakub Sowa](mailto:jakub.sowa@polidea.com)
+* [Michał Zieliński](mailto:michal.zielinski@polidea.com)
 
 ### CLA
 
-- 
2.17.1 (Apple Git-112)


From d48cd92813e8350fe8cab443993982796a9df54d Mon Sep 17 00:00:00 2001
From: Krzysztof Siejkowski <siejkowski@users.noreply.github.com>
Date: Fri, 3 Aug 2018 11:35:50 +0200
Subject: [PATCH 137/138] Updated remote script

---
 Scripts/git_remotes.sh | 183 ++++++++++++++++-------------------------
 1 file changed, 73 insertions(+), 110 deletions(-)

diff --git a/Scripts/git_remotes.sh b/Scripts/git_remotes.sh
index c93b4ba8be3..7d735671536 100644
--- a/Scripts/git_remotes.sh
+++ b/Scripts/git_remotes.sh
@@ -14,7 +14,6 @@ names=(
     "swift-corelibs-libdispatch"
     "swift-integration-tests"
     "swift-xcode-playground-support"
-    "ninja"
 )
 
 paths=(
@@ -31,128 +30,84 @@ paths=(
     "apple/swift-corelibs-libdispatch"
     "apple/swift-integration-tests"
     "apple/swift-xcode-playground-support"
-    "ninja-build/ninja"
 )
 
-masterbranches=(
-    "stable"
-    "stable"
-    "master"
-    "stable"
-    "master"
-    "master"
-    "master"
-    "stable"
-    "master"
-    "master"
-    "master"
-    "master"
-    "master"
-    "release"
-)
-
-swift_3_0_branches=(
-    "swift-3.0-branch"
-    "swift-3.0-branch"
-    "swift-3.0-branch"
-    "swift-3.0-branch"
-    "swift-3.0-branch"
-    "swift-3.0-branch"
-    "swift-3.0-branch"
-    "swift-3.0-branch"
-    "swift-3.0-branch"
-    "swift-3.0-branch"
-    "swift-3.0-branch"
-    "swift-3.0-branch"
-    "swift-3.0-branch"
-    "release"
-)
-
-swift_3_1_branches=(
-    "swift-3.1-branch"
-    "swift-3.1-branch"
-    "swift-3.1-branch"
-    "swift-3.1-branch"
-    "swift-3.1-branch"
-    "swift-3.1-branch"
-    "swift-3.1-branch"
-    "swift-3.1-branch"
-    "swift-3.1-branch"
-    "swift-3.1-branch"
-    "swift-3.1-branch"
-    "swift-3.1-branch"
-    "swift-3.1-branch"
-    "release"
-)
-
-swift_4_0_branches=(
-    "swift-4.0-branch"
-    "swift-4.0-branch"
-    "swift-4.0-branch"
-    "swift-4.0-branch"
-    "swift-4.0-branch"
-    "swift-4.0-branch"
-    "swift-4.0-branch"
-    "swift-4.0-branch"
-    "swift-4.0-branch"
-    "swift-4.0-branch"
-    "swift-4.0-branch"
-    "swift-4.0-branch"
-    "swift-4.0-branch"
-    "release"
-)
-
-swift_4_1_branches=(
-    "swift-4.1-branch"
-    "swift-4.1-branch"
-    "swift-4.1-branch"
-    "swift-4.1-branch"
-    "swift-4.1-branch"
-    "swift-4.1-branch"
-    "swift-4.1-branch"
-    "swift-4.1-branch"
-    "swift-4.1-branch"
-    "swift-4.1-branch"
-    "swift-4.1-branch"
-    "swift-4.1-branch"
-    "swift-4.1-branch"
-    "release"
-)
+swift_3_0_tag="swift-3.0-RELEASE"
+swift_3_0_1_tag="swift-3.0.1-RELEASE"
+swift_3_0_2_tag="swift-3.0.2-RELEASE"
+swift_3_1_tag="swift-3.1-RELEASE"
+swift_3_1_1_tag="swift-3.1.1-RELEASE"
+swift_4_0_tag="swift-4.0-RELEASE"
+swift_4_0_2_tag="swift-4.0.2-RELEASE"
+swift_4_0_3_tag="swift-4.0.3-RELEASE"
+swift_4_1_tag="swift-4.1-RELEASE"
+swift_4_1_1_tag="swift-4.1.1-RELEASE"
+swift_4_1_2_tag="swift-4.1.2-RELEASE"
+swift_4_1_3_tag="swift-4.1.3-RELEASE"
 
 if [ $# -eq 0 ]
 then
-    echo "Using default branches: Swift 4.0"
-    branches=( "${swift_4_0_branches[@]}" ) # default to swift 4.0
+    echo "Using default: Swift 4.1.2"
+    tag=$swift_4_1_2_tag # default to swift 4.1.2
+
 else
-    branch_parameter="$1"
-    case $branch_parameter in
-        -m|--master)
-        branches=( "${masterbranches[@]}" )
-        ;;
+    tag_parameter="$1"
+    case $tag_parameter in
         -3.0|--swift-3.0)
-        branches=( "${swift_3_0_branches[@]}" )
+	tag=$swift_3_0_tag
+        ;;
+        -3.0.1|--swift-3.0.1)
+	tag=$swift_3_0_1_tag
+        ;;
+        -3.0.2|--swift-3.0.2)
+	tag=$swift_3_0_2_tag
         ;;
         -3.1|--swift-3.1)
-        branches=( "${swift_3_1_branches[@]}" )
+	tag=$swift_3_1_tag
+        ;;
+        -3.1.1|--swift-3.1.1)
+	tag=$swift_3_1_1_tag
         ;;
         -4.0|--swift-4.0)
-        branches=( "${swift_4_0_branches[@]}" )
+	tag=$swift_4_0_tag
+        ;;
+        -4.0.2|--swift-4.0.2)
+	tag=$swift_4_0_2_tag
+        ;;
+        -4.0.3|--swift-4.0.3)
+	tag=$swift_4_0_3_tag
         ;;
         -4.1|--swift-4.1)
-        branches=( "${swift_4_1_branches[@]}" )
+	tag=$swift_4_1_tag
+        ;;
+        -4.1.1|--swift-4.1.1)
+	tag=$swift_4_1_1_tag
+        ;;
+        -4.1.2|--swift-4.1.2)
+	tag=$swift_4_1_2_tag
+        ;;
+        -4.1.3|--swift-4.1.3)
+	tag=$swift_4_1_3_tag
         ;;
         -h|--help)
         echo "Available parameters for checing dependencies in given version:"
         echo ""
-        echo "-m   | --master    -> current master branch (not frozen)"
-        echo "-3.0 | --swift-3.0 -> branch for Swift 3.0 (frozen)"
-        echo "-3.1 | --swift-3.1 -> branch for Swift 3.1 (frozen)"
-        echo "-4.0 | --swift-4.0 -> branch for Swift 4.0 (frozen)"
-        echo "-4.1 | --swift-4.1 -> branch for Swift 4.1 (frozen)"
+        echo "-3.0   | --swift-3.0   -> Swift 3.0   (release)"
+        echo "-3.0.1 | --swift-3.0.1 -> Swift 3.0.1 (release)"
+        echo "-3.0.2 | --swift-3.0.2 -> Swift 3.0.2 (release)"
+        echo "-3.1   | --swift-3.1   -> Swift 3.1   (release)"
+        echo "-3.1.1 | --swift-3.1.1 -> Swift 3.1.1 (release)"
+        echo "-4.0   | --swift-4.0   -> Swift 4.0   (release)"
+        echo "-4.0.2 | --swift-4.0.2 -> Swift 4.0.2 (release)"
+        echo "-4.0.3 | --swift-4.0.3 -> Swift 4.0.3 (release)"
+        echo "-4.1   | --swift-4.1   -> Swift 4.1   (release)"
+        echo "-4.1.1 | --swift-4.1.1 -> Swift 4.1.1 (release)"
+        echo "-4.1.2 | --swift-4.1.2 -> Swift 4.1.2 (release)"
+        echo "-4.1.3 | --swift-4.1.3 -> Swift 4.1.3 (release)"
         exit 0
         ;;
         *)
-        echo "Invalid parameter ${branch_parameter}"
+        echo "Invalid parameter ${tag_parameter}"
         echo "Use --help or -h to discover valid parameters"
         exit 1
         ;;
@@ -169,19 +124,27 @@ echo "RESET TO START: git reset --hard ${diff_start}"
 git reset --hard ${diff_start}
 
 for i in ${!names[@]}; do
-  echo "DATA: ${names[$i]} -> ${paths[$i]} -> ${branches[$i]}"
+  echo "DATA: ${names[$i]} -> ${paths[$i]} -> ${tag_parameter}"
   echo "GIT REMOVE: git rm -r ${names[$i]}"
   git rm -r ${names[$i]}
   echo "REMOTE: git remote add ${names[$i]} https://github.com/${paths[$i]}.git"
   git remote add ${names[$i]} https://github.com/${paths[$i]}.git
-  echo "FETCH: git fetch ${names[$i]}"
-  git fetch ${names[$i]}
-  echo "READ-TREE: git read-tree --prefix=${names[$i]} -u ${names[$i]}/${branches[$i]}"
-  git read-tree --prefix=${names[$i]} -u ${names[$i]}/${branches[$i]}
+  echo "FETCH: git fetch --tags ${names[$i]} \"+refs/tags/*:refs/rtags/${names[$i]}/*\""
+  git fetch --tags ${names[$i]} "+refs/tags/*:refs/rtags/${names[$i]}/*"
+  echo "READ-TREE: git read-tree refs/rtags/${names[$i]}/${tag} -u --prefix=${names[$i]}"
+  git read-tree refs/rtags/${names[$i]}/${tag} -u --prefix=${names[$i]}
 done
 
-echo "APPLY PATCH: git apply obfuscator.patch"
-git apply obfuscator.patch
+git rm -r ninja
+git remote add ninja https://github.com/ninja-build/ninja.git
+git fetch ninja
+git read-tree --prefix=ninja -u ninja/release
+
+git add . -A
+git commit -m "Temporary commit for changing dependencies to ${tag}"
+
+echo "APPLY PATCH: git am < obfuscator.patch"
+git am --3way < obfuscator.patch
 
 echo "REMOVE PATCH: rm obfuscator.patch"
 rm obfuscator.patch
-- 
2.17.1 (Apple Git-112)


From bb45190d8dd92b795bfa0307da5e593eb4733d9a Mon Sep 17 00:00:00 2001
From: Krzysztof Siejkowski <siejkowski@users.noreply.github.com>
Date: Wed, 8 Aug 2018 15:52:49 +0200
Subject: [PATCH 138/138] Updated git remotes script so that it can handle
 swift-4.2-branch

---
 Scripts/git_remotes.sh | 44 ++++++++++++++++++++++++++++++------------
 1 file changed, 32 insertions(+), 12 deletions(-)

diff --git a/Scripts/git_remotes.sh b/Scripts/git_remotes.sh
index 7d735671536..2503932345b 100644
--- a/Scripts/git_remotes.sh
+++ b/Scripts/git_remotes.sh
@@ -45,11 +45,12 @@ swift_4_1_1_tag="swift-4.1.1-RELEASE"
 swift_4_1_2_tag="swift-4.1.2-RELEASE"
 swift_4_1_3_tag="swift-4.1.3-RELEASE"
 
+swift_4_2_branch="swift-4.2-branch"
+
 if [ $# -eq 0 ]
 then
     echo "Using default: Swift 4.1.2"
     tag=$swift_4_1_2_tag # default to swift 4.1.2
-
 else
     tag_parameter="$1"
     case $tag_parameter in
@@ -89,6 +90,9 @@ else
         -4.1.3|--swift-4.1.3)
 	tag=$swift_4_1_3_tag
         ;;
+        -4.2|--swift-4.2)
+        branch=$swift_4_2_branch
+	;;
         -h|--help)
         echo "Available parameters for checing dependencies in given version:"
         echo ""
@@ -104,6 +108,7 @@ else
         echo "-4.1.1 | --swift-4.1.1 -> Swift 4.1.1 (release)"
         echo "-4.1.2 | --swift-4.1.2 -> Swift 4.1.2 (release)"
         echo "-4.1.3 | --swift-4.1.3 -> Swift 4.1.3 (release)"
+        echo "-4.2   | --swift-4.2   -> Swift 4.2   (unreleased)"
         exit 0
         ;;
         *)
@@ -123,17 +128,32 @@ git checkout ${diff_end} && git format-patch ${diff_start} --stdout > obfuscator
 echo "RESET TO START: git reset --hard ${diff_start}"
 git reset --hard ${diff_start}
 
-for i in ${!names[@]}; do
-  echo "DATA: ${names[$i]} -> ${paths[$i]} -> ${tag_parameter}"
-  echo "GIT REMOVE: git rm -r ${names[$i]}"
-  git rm -r ${names[$i]}
-  echo "REMOTE: git remote add ${names[$i]} https://github.com/${paths[$i]}.git"
-  git remote add ${names[$i]} https://github.com/${paths[$i]}.git
-  echo "FETCH: git fetch --tags ${names[$i]} \"+refs/tags/*:refs/rtags/${names[$i]}/*\""
-  git fetch --tags ${names[$i]} "+refs/tags/*:refs/rtags/${names[$i]}/*"
-  echo "READ-TREE: git read-tree refs/rtags/${names[$i]}/${tag} -u --prefix=${names[$i]}"
-  git read-tree refs/rtags/${names[$i]}/${tag} -u --prefix=${names[$i]}
-done
+if [ -n "$branch" ]
+then
+    for i in ${!names[@]}; do
+        echo "DATA: ${names[$i]} -> ${paths[$i]} -> ${branch}"
+        echo "GIT REMOVE: git rm -r ${names[$i]}"
+        git rm -r ${names[$i]}
+        echo "REMOTE: git remote add ${names[$i]} https://github.com/${paths[$i]}.git"
+        git remote add ${names[$i]} https://github.com/${paths[$i]}.git
+        echo "FETCH: git fetch ${names[$i]}"
+        git fetch ${names[$i]}
+        echo "READ-TREE: git read-tree --prefix=${names[$i]} -u ${names[$i]}/${branch}"
+        git read-tree --prefix=${names[$i]} -u ${names[$i]}/${branch}
+    done 
+else
+    for i in ${!names[@]}; do
+        echo "DATA: ${names[$i]} -> ${paths[$i]} -> ${tag}"
+        echo "GIT REMOVE: git rm -r ${names[$i]}"
+        git rm -r ${names[$i]}
+        echo "REMOTE: git remote add ${names[$i]} https://github.com/${paths[$i]}.git"
+        git remote add ${names[$i]} https://github.com/${paths[$i]}.git
+        echo "FETCH: git fetch --tags ${names[$i]} \"+refs/tags/*:refs/rtags/${names[$i]}/*\""
+        git fetch --tags ${names[$i]} "+refs/tags/*:refs/rtags/${names[$i]}/*"
+        echo "READ-TREE: git read-tree refs/rtags/${names[$i]}/${tag} -u --prefix=${names[$i]}"
+        git read-tree refs/rtags/${names[$i]}/${tag} -u --prefix=${names[$i]}
+    done
+fi
 
 git rm -r ninja
 git remote add ninja https://github.com/ninja-build/ninja.git
-- 
2.17.1 (Apple Git-112)

