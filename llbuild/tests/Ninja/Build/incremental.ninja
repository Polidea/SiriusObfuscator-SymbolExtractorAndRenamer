# Test a trivial incremental build.

# We run the build in a sandbox in the temp directory to ensure we don't
# interact with the source dirs.
#
# RUN: rm -rf %t.build
# RUN: mkdir -p %t.build
# RUN: cp %s %t.build/build.ninja
# RUN: touch %t.build/input-1
# RUN: touch %t.build/input-2
# RUN: %{llbuild} ninja build --jobs 1 --chdir %t.build &> %t1.out
# RUN: %{FileCheck} --check-prefix=CHECK-INITIAL --input-file=%t1.out %s

# We use strict mode here to ensure the update-if-newer behavior works properly
# when timestamps collide.
#
# RUN: echo "mod" >> %t.build/input-1
# RUN: %{llbuild} ninja build --strict --jobs 1 --chdir %t.build &> %t2.out
# RUN: %{FileCheck} --check-prefix=CHECK-AFTER-MOD --input-file=%t2.out %s

# Check the first build.
#
# CHECK-INITIAL: [1/{{.*}}] "cp input-2 output-2"
# CHECK-INITIAL: [2/{{.*}}] "cp input-1 output-1"
# CHECK-INITIAL: [3/{{.*}}] "cat output-1 output-2 > output"

# Check the second build.
# CHECK-AFTER-MOD: [1/{{.*}}] "cp input-1 output-1"
# CHECK-AFTER-MOD: [2/{{.*}}] "cat output-1 output-2 > output"

rule CP
     command = cp ${in} ${out}
     description = "${command}"
rule CAT
     command = cat ${in} > ${out}
     description = "${command}"

build output-1: CP input-1
build output-2: CP input-2
build output: CAT output-1 output-2

default output
